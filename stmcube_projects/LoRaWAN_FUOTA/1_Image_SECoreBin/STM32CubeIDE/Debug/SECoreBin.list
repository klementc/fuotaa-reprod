
SECoreBin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .SE_CallGate_Code 000000cc  08000200  08000200  00000200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .SE_embedded_Keys 00000200  08000300  08000300  00000300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .SE_Startup_Code 00000010  08000600  08000600  00000600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text         00006540  08000700  08000700  00000700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000290  08006c40  08006c40  00006c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  08006ed0  08006ed0  00008658  2**0
                  CONTENTS
  6 .ARM          00000000  08006ed0  08006ed0  00008658  2**0
                  CONTENTS
  7 .preinit_array 00000000  08006ed0  08006ed0  00008658  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000008  08006ed0  08006ed0  00006ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000008  08006ed8  08006ed8  00006ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .USER_embedded_Keys 00000258  08008400  08008400  00008400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .data         00000010  20000c00  08006ee0  00007c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          00002480  20000c10  08006ef0  00007c10  2**2
                  ALLOC
 13 ._user_heap_stack 00000200  20003090  08006ef0  00008090  2**0
                  ALLOC
 14 .ARM.attributes 0000002a  00000000  00000000  00008658  2**0
                  CONTENTS, READONLY
 15 .debug_info   0001f59b  00000000  00000000  00008682  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00005410  00000000  00000000  00027c1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000e68  00000000  00000000  0002d02d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001385  00000000  00000000  0002de95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00022fae  00000000  00000000  0002f21a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002367f  00000000  00000000  000521c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000c04bf  00000000  00000000  00075847  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  00135d06  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00002d1c  00000000  00000000  00135d4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_loclists 0000ce19  00000000  00000000  00138a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .SE_CallGate_Code:

08000200 <SE_CallGate-0x4>:
 8000200:	00000000 	andeq	r0, r0, r0

08000204 <SE_CallGate>:
  * @param eID: Secure Engine protected function ID.
  * @param peSE_Status: Secure Engine Status.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_CallGate(SE_FunctionIDTypeDef eID, SE_StatusTypeDef *const peSE_Status, uint32_t PrimaskParam, ...)
{
 8000204:	b40c      	push	{r2, r3}
 8000206:	b580      	push	{r7, lr}
 8000208:	b086      	sub	sp, #24
 800020a:	af00      	add	r7, sp, #0
 800020c:	6078      	str	r0, [r7, #4]
 800020e:	6039      	str	r1, [r7, #0]
  LR = get_LR();
#elif defined(__ARMCC_VERSION)
  __asm volatile("MOV %0, LR\n" : "=r"(LR));
#elif defined(__GNUC__)
  register unsigned lr asm("lr");
  LR = lr;
 8000210:	4673      	mov	r3, lr
 8000212:	60fb      	str	r3, [r7, #12]
   * instead of return(SE_ERROR) to avoid any attempt of attack by modifying
   * the call stack (LR) in order to execute code inside secure enclave
   */

  /* Check the Callgate was called only from SE Interface */
  IS_CALLER_SE_IF();
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	4a29      	ldr	r2, [pc, #164]	@ (80002bc <SE_CallGate+0xb8>)
 8000218:	4293      	cmp	r3, r2
 800021a:	d201      	bcs.n	8000220 <SE_CallGate+0x1c>
 800021c:	f006 f9a8 	bl	8006570 <__NVIC_SystemReset>
 8000220:	68fb      	ldr	r3, [r7, #12]
 8000222:	4a27      	ldr	r2, [pc, #156]	@ (80002c0 <SE_CallGate+0xbc>)
 8000224:	4293      	cmp	r3, r2
 8000226:	d901      	bls.n	800022c <SE_CallGate+0x28>
 8000228:	f006 f9a2 	bl	8006570 <__NVIC_SystemReset>

  /* Check the pointers allocation */
  if (SE_LL_Buffer_in_ram(peSE_Status, sizeof(*peSE_Status)) != SE_SUCCESS)
 800022c:	2104      	movs	r1, #4
 800022e:	6838      	ldr	r0, [r7, #0]
 8000230:	f000 fc86 	bl	8000b40 <SE_LL_Buffer_in_ram>
 8000234:	4603      	mov	r3, r0
 8000236:	4a23      	ldr	r2, [pc, #140]	@ (80002c4 <SE_CallGate+0xc0>)
 8000238:	4293      	cmp	r3, r2
 800023a:	d001      	beq.n	8000240 <SE_CallGate+0x3c>
  {
    NVIC_SystemReset();
 800023c:	f006 f998 	bl	8006570 <__NVIC_SystemReset>
  }
  if (SE_LL_Buffer_part_of_SE_ram(peSE_Status, sizeof(*peSE_Status)) == SE_SUCCESS)
 8000240:	2104      	movs	r1, #4
 8000242:	6838      	ldr	r0, [r7, #0]
 8000244:	f000 fca8 	bl	8000b98 <SE_LL_Buffer_part_of_SE_ram>
 8000248:	4603      	mov	r3, r0
 800024a:	4a1e      	ldr	r2, [pc, #120]	@ (80002c4 <SE_CallGate+0xc0>)
 800024c:	4293      	cmp	r3, r2
 800024e:	d101      	bne.n	8000254 <SE_CallGate+0x50>
  {
    NVIC_SystemReset();
 8000250:	f006 f98e 	bl	8006570 <__NVIC_SystemReset>
  }

  /* Double Check to avoid basic fault injection : the Callgate was called only from SE Interface */
  IS_CALLER_SE_IF();
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	4a19      	ldr	r2, [pc, #100]	@ (80002bc <SE_CallGate+0xb8>)
 8000258:	4293      	cmp	r3, r2
 800025a:	d201      	bcs.n	8000260 <SE_CallGate+0x5c>
 800025c:	f006 f988 	bl	8006570 <__NVIC_SystemReset>
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	4a17      	ldr	r2, [pc, #92]	@ (80002c0 <SE_CallGate+0xbc>)
 8000264:	4293      	cmp	r3, r2
 8000266:	d901      	bls.n	800026c <SE_CallGate+0x68>
 8000268:	f006 f982 	bl	8006570 <__NVIC_SystemReset>

  /* Double Check to avoid basic fault injection : Check the pointers allocation */
  if (SE_LL_Buffer_in_ram(peSE_Status, sizeof(*peSE_Status)) != SE_SUCCESS)
 800026c:	2104      	movs	r1, #4
 800026e:	6838      	ldr	r0, [r7, #0]
 8000270:	f000 fc66 	bl	8000b40 <SE_LL_Buffer_in_ram>
 8000274:	4603      	mov	r3, r0
 8000276:	4a13      	ldr	r2, [pc, #76]	@ (80002c4 <SE_CallGate+0xc0>)
 8000278:	4293      	cmp	r3, r2
 800027a:	d001      	beq.n	8000280 <SE_CallGate+0x7c>
  {
    NVIC_SystemReset();
 800027c:	f006 f978 	bl	8006570 <__NVIC_SystemReset>
  }
  if (SE_LL_Buffer_part_of_SE_ram(peSE_Status, sizeof(*peSE_Status)) == SE_SUCCESS)
 8000280:	2104      	movs	r1, #4
 8000282:	6838      	ldr	r0, [r7, #0]
 8000284:	f000 fc88 	bl	8000b98 <SE_LL_Buffer_part_of_SE_ram>
 8000288:	4603      	mov	r3, r0
 800028a:	4a0e      	ldr	r2, [pc, #56]	@ (80002c4 <SE_CallGate+0xc0>)
 800028c:	4293      	cmp	r3, r2
 800028e:	d101      	bne.n	8000294 <SE_CallGate+0x90>
  {
    NVIC_SystemReset();
 8000290:	f006 f96e 	bl	8006570 <__NVIC_SystemReset>
#if defined(CKS_ENABLED)
  PrevIpccC1RxIrqState = NVIC_GetEnableIRQ(IPCC_C1_RX_IRQn);
  PrevIpccC1TxIrqState = NVIC_GetEnableIRQ(IPCC_C1_TX_IRQn);
#endif /* CKS_ENABLED */

  *peSE_Status =  SE_OK;
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	4a0c      	ldr	r2, [pc, #48]	@ (80002c8 <SE_CallGate+0xc4>)
 8000298:	601a      	str	r2, [r3, #0]

  /* Initializing arguments to store all values after peSE_Status */
  va_start(arguments, PrimaskParam);
 800029a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800029e:	613b      	str	r3, [r7, #16]
#if defined(SFU_ISOLATE_SE_WITH_FIREWALL)
  /* Set SE specific stack before executing SE service */
  e_ret_status =  SE_SP_SMUGGLE(eID, peSE_Status, arguments);
#else
  /* No need to use a specific Stack */
  e_ret_status =  SE_CallGateService(eID, peSE_Status, arguments);
 80002a0:	693a      	ldr	r2, [r7, #16]
 80002a2:	6839      	ldr	r1, [r7, #0]
 80002a4:	6878      	ldr	r0, [r7, #4]
 80002a6:	f006 f975 	bl	8006594 <SE_CallGateService>
 80002aa:	6178      	str	r0, [r7, #20]
#endif /* SFU_ISOLATE_SE_WITH_FIREWALL */

  /* Exit the protected area */
  EXIT_PROTECTED_AREA();

  return e_ret_status;
 80002ac:	697b      	ldr	r3, [r7, #20]
}
 80002ae:	4618      	mov	r0, r3
 80002b0:	3718      	adds	r7, #24
 80002b2:	46bd      	mov	sp, r7
 80002b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80002b8:	b002      	add	sp, #8
 80002ba:	4770      	bx	lr
 80002bc:	08008700 	.word	0x08008700
 80002c0:	080095ff 	.word	0x080095ff
 80002c4:	0012310f 	.word	0x0012310f
 80002c8:	0012e223 	.word	0x0012e223

Disassembly of section .SE_Startup_Code:

08000600 <SE_CORE_Startup>:
  */
#if defined(__ARMCC_VERSION)
__attribute__((section(".SE_Startup_Code")))
#endif /* __ARMCC_VERSION */
__root SE_ErrorStatus SE_CORE_Startup(void)
{
 8000600:	b508      	push	{r3, lr}
  /* Data initialization function*/
  __iar_data_init3();
#elif defined (__ARMCC_VERSION)
  __arm_data_init();
#elif defined(__GNUC__)
  __gcc_data_init();
 8000602:	f000 f8db 	bl	80007bc <__gcc_data_init>
#endif /* __ICCARM__ */

  /*NOTE : other initialization may be added here */
  return SE_SUCCESS;
}
 8000606:	4801      	ldr	r0, [pc, #4]	@ (800060c <SE_CORE_Startup+0xc>)
 8000608:	bd08      	pop	{r3, pc}
 800060a:	bf00      	nop
 800060c:	0012310f 	.word	0x0012310f

Disassembly of section .text:

08000700 <__do_global_dtors_aux>:
 8000700:	b510      	push	{r4, lr}
 8000702:	4c05      	ldr	r4, [pc, #20]	@ (8000718 <__do_global_dtors_aux+0x18>)
 8000704:	7823      	ldrb	r3, [r4, #0]
 8000706:	b933      	cbnz	r3, 8000716 <__do_global_dtors_aux+0x16>
 8000708:	4b04      	ldr	r3, [pc, #16]	@ (800071c <__do_global_dtors_aux+0x1c>)
 800070a:	b113      	cbz	r3, 8000712 <__do_global_dtors_aux+0x12>
 800070c:	4804      	ldr	r0, [pc, #16]	@ (8000720 <__do_global_dtors_aux+0x20>)
 800070e:	f3af 8000 	nop.w
 8000712:	2301      	movs	r3, #1
 8000714:	7023      	strb	r3, [r4, #0]
 8000716:	bd10      	pop	{r4, pc}
 8000718:	20000c10 	.word	0x20000c10
 800071c:	00000000 	.word	0x00000000
 8000720:	08006c28 	.word	0x08006c28

08000724 <frame_dummy>:
 8000724:	b508      	push	{r3, lr}
 8000726:	4b03      	ldr	r3, [pc, #12]	@ (8000734 <frame_dummy+0x10>)
 8000728:	b11b      	cbz	r3, 8000732 <frame_dummy+0xe>
 800072a:	4903      	ldr	r1, [pc, #12]	@ (8000738 <frame_dummy+0x14>)
 800072c:	4803      	ldr	r0, [pc, #12]	@ (800073c <frame_dummy+0x18>)
 800072e:	f3af 8000 	nop.w
 8000732:	bd08      	pop	{r3, pc}
 8000734:	00000000 	.word	0x00000000
 8000738:	20000c14 	.word	0x20000c14
 800073c:	08006c28 	.word	0x08006c28

08000740 <LoopCopyDataInit>:
	extern char _edata asm("_edata");
	
	vu32* src = (vu32*) &_sidata;
	vu32* dst = (vu32*) &_sdata;
	
	vu32 len = (&_edata - &_sdata) / 4;
 8000740:	4b0d      	ldr	r3, [pc, #52]	@ (8000778 <LoopCopyDataInit+0x38>)
 8000742:	4a0e      	ldr	r2, [pc, #56]	@ (800077c <LoopCopyDataInit+0x3c>)
	
	for(vu32 i=0; i < len; i++)
		dst[i] = src[i];
 8000744:	480e      	ldr	r0, [pc, #56]	@ (8000780 <LoopCopyDataInit+0x40>)
	vu32 len = (&_edata - &_sdata) / 4;
 8000746:	1a9b      	subs	r3, r3, r2
void LoopCopyDataInit(void) {
 8000748:	b082      	sub	sp, #8
	vu32 len = (&_edata - &_sdata) / 4;
 800074a:	bf48      	it	mi
 800074c:	3303      	addmi	r3, #3
 800074e:	109b      	asrs	r3, r3, #2
 8000750:	9300      	str	r3, [sp, #0]
	for(vu32 i=0; i < len; i++)
 8000752:	2300      	movs	r3, #0
 8000754:	9301      	str	r3, [sp, #4]
 8000756:	9901      	ldr	r1, [sp, #4]
 8000758:	9b00      	ldr	r3, [sp, #0]
 800075a:	4299      	cmp	r1, r3
 800075c:	d301      	bcc.n	8000762 <LoopCopyDataInit+0x22>
}
 800075e:	b002      	add	sp, #8
 8000760:	4770      	bx	lr
		dst[i] = src[i];
 8000762:	9901      	ldr	r1, [sp, #4]
 8000764:	9b01      	ldr	r3, [sp, #4]
 8000766:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 800076a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(vu32 i=0; i < len; i++)
 800076e:	9b01      	ldr	r3, [sp, #4]
 8000770:	3301      	adds	r3, #1
 8000772:	9301      	str	r3, [sp, #4]
 8000774:	e7ef      	b.n	8000756 <LoopCopyDataInit+0x16>
 8000776:	bf00      	nop
 8000778:	20000c10 	.word	0x20000c10
 800077c:	20000c00 	.word	0x20000c00
 8000780:	08006ee0 	.word	0x08006ee0

08000784 <LoopFillZerobss>:
void LoopFillZerobss(void) {
	extern char _sbss asm("_sbss");
	extern char _ebss asm("_ebss");
	
	vu32* dst = (vu32*) &_sbss;
	vu32 len = (&_ebss - &_sbss) / 4;
 8000784:	4b0b      	ldr	r3, [pc, #44]	@ (80007b4 <LoopFillZerobss+0x30>)
 8000786:	4a0c      	ldr	r2, [pc, #48]	@ (80007b8 <LoopFillZerobss+0x34>)
 8000788:	1a9b      	subs	r3, r3, r2
void LoopFillZerobss(void) {
 800078a:	b082      	sub	sp, #8
	vu32 len = (&_ebss - &_sbss) / 4;
 800078c:	bf48      	it	mi
 800078e:	3303      	addmi	r3, #3
 8000790:	109b      	asrs	r3, r3, #2
	
	for(vu32 i=0; i < len; i++)
 8000792:	2100      	movs	r1, #0
	vu32 len = (&_ebss - &_sbss) / 4;
 8000794:	9300      	str	r3, [sp, #0]
	for(vu32 i=0; i < len; i++)
 8000796:	9101      	str	r1, [sp, #4]
 8000798:	9801      	ldr	r0, [sp, #4]
 800079a:	9b00      	ldr	r3, [sp, #0]
 800079c:	4298      	cmp	r0, r3
 800079e:	d301      	bcc.n	80007a4 <LoopFillZerobss+0x20>
		dst[i] = 0;
}
 80007a0:	b002      	add	sp, #8
 80007a2:	4770      	bx	lr
		dst[i] = 0;
 80007a4:	9b01      	ldr	r3, [sp, #4]
 80007a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(vu32 i=0; i < len; i++)
 80007aa:	9b01      	ldr	r3, [sp, #4]
 80007ac:	3301      	adds	r3, #1
 80007ae:	9301      	str	r3, [sp, #4]
 80007b0:	e7f2      	b.n	8000798 <LoopFillZerobss+0x14>
 80007b2:	bf00      	nop
 80007b4:	20003090 	.word	0x20003090
 80007b8:	20000c10 	.word	0x20000c10

080007bc <__gcc_data_init>:

void __gcc_data_init(void) {
 80007bc:	b508      	push	{r3, lr}
	LoopFillZerobss();
 80007be:	f7ff ffe1 	bl	8000784 <LoopFillZerobss>
	LoopCopyDataInit();
}
 80007c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	LoopCopyDataInit();
 80007c6:	f7ff bfbb 	b.w	8000740 <LoopCopyDataInit>
	...

080007cc <HAL_CRYP_MspInit>:
  * @param hcryp: CRYP handle pointer
  * @retval None
  */
void HAL_CRYP_MspInit(CRYP_HandleTypeDef *hcryp)
{
  if (hcryp->Instance == CA_AES_INSTANCE)
 80007cc:	6802      	ldr	r2, [r0, #0]
 80007ce:	4b0a      	ldr	r3, [pc, #40]	@ (80007f8 <HAL_CRYP_MspInit+0x2c>)
 80007d0:	429a      	cmp	r2, r3
{
 80007d2:	b082      	sub	sp, #8
  if (hcryp->Instance == CA_AES_INSTANCE)
 80007d4:	d10e      	bne.n	80007f4 <HAL_CRYP_MspInit+0x28>
  */

#endif /* DUAL_CORE */
__STATIC_INLINE void LL_AHB3_GRP1_ReleaseReset(uint32_t Periphs)
{
  CLEAR_BIT(RCC->AHB3RSTR, Periphs);
 80007d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80007da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007dc:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80007e0:	631a      	str	r2, [r3, #48]	@ 0x30
  SET_BIT(RCC->AHB3ENR, Periphs);
 80007e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80007e4:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80007e8:	651a      	str	r2, [r3, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80007ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80007ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007f0:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80007f2:	9b01      	ldr	r3, [sp, #4]
    /* Release AES/CRYP from reset state */
    __HAL_RCC_AES_RELEASE_RESET();
    /* Peripheral clock enable */
    __HAL_RCC_AES_CLK_ENABLE();
  }
}
 80007f4:	b002      	add	sp, #8
 80007f6:	4770      	bx	lr
 80007f8:	58001800 	.word	0x58001800

080007fc <HAL_CRYP_MspDeInit>:
  * @param hcryp: CRYP handle pointer
  * @retval None
  */
void HAL_CRYP_MspDeInit(CRYP_HandleTypeDef *hcryp)
{
  if (hcryp->Instance == CA_AES_INSTANCE)
 80007fc:	6802      	ldr	r2, [r0, #0]
 80007fe:	4b07      	ldr	r3, [pc, #28]	@ (800081c <HAL_CRYP_MspDeInit+0x20>)
 8000800:	429a      	cmp	r2, r3
 8000802:	d109      	bne.n	8000818 <HAL_CRYP_MspDeInit+0x1c>
  CLEAR_BIT(RCC->AHB3ENR, Periphs);
 8000804:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000808:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800080a:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800080e:	651a      	str	r2, [r3, #80]	@ 0x50
  SET_BIT(RCC->AHB3RSTR, Periphs);
 8000810:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000812:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000816:	631a      	str	r2, [r3, #48]	@ 0x30
    /* Peripheral clock disable */
    __HAL_RCC_AES_CLK_DISABLE();
    /* Force AES/CRYP into reset state */
    __HAL_RCC_AES_FORCE_RESET();
  }
}
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	58001800 	.word	0x58001800

08000820 <HAL_PKA_MspInit>:
  * @param[in] hpka: PKA handle pointer
  * @retval None
  */
void HAL_PKA_MspInit(PKA_HandleTypeDef *hpka)
{
  if (hpka->Instance == CA_PKA_INSTANCE)
 8000820:	6802      	ldr	r2, [r0, #0]
 8000822:	4b0a      	ldr	r3, [pc, #40]	@ (800084c <HAL_PKA_MspInit+0x2c>)
 8000824:	429a      	cmp	r2, r3
{
 8000826:	b082      	sub	sp, #8
  if (hpka->Instance == CA_PKA_INSTANCE)
 8000828:	d10e      	bne.n	8000848 <HAL_PKA_MspInit+0x28>
  CLEAR_BIT(RCC->AHB3RSTR, Periphs);
 800082a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800082e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000830:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000834:	631a      	str	r2, [r3, #48]	@ 0x30
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000836:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000838:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800083c:	651a      	str	r2, [r3, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800083e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000840:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000844:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000846:	9b01      	ldr	r3, [sp, #4]
    /* Release PKA from reset state */
    __HAL_RCC_PKA_RELEASE_RESET();
    /* Peripheral clock enable */
    __HAL_RCC_PKA_CLK_ENABLE();
  }
}
 8000848:	b002      	add	sp, #8
 800084a:	4770      	bx	lr
 800084c:	58002000 	.word	0x58002000

08000850 <HAL_PKA_MspDeInit>:
  * @param[in] hpka: PKA handle pointer
  * @retval None
  */
void HAL_PKA_MspDeInit(PKA_HandleTypeDef *hpka)
{
  if (hpka->Instance == CA_PKA_INSTANCE)
 8000850:	6802      	ldr	r2, [r0, #0]
 8000852:	4b07      	ldr	r3, [pc, #28]	@ (8000870 <HAL_PKA_MspDeInit+0x20>)
 8000854:	429a      	cmp	r2, r3
 8000856:	d109      	bne.n	800086c <HAL_PKA_MspDeInit+0x1c>
  CLEAR_BIT(RCC->AHB3ENR, Periphs);
 8000858:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800085c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800085e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000862:	651a      	str	r2, [r3, #80]	@ 0x50
  SET_BIT(RCC->AHB3RSTR, Periphs);
 8000864:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000866:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800086a:	631a      	str	r2, [r3, #48]	@ 0x30
    /* Peripheral clock disable */
    __HAL_RCC_PKA_CLK_DISABLE();
    /* Force PKA into reset state */
    __HAL_RCC_PKA_FORCE_RESET();
  }
}
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	58002000 	.word	0x58002000

08000874 <KMS_LL_IsBufferInSecureEnclave>:
  * @param  pBuffer Buffer address
  * @param  ulSize  Buffer size
  * @retval void
  */
void KMS_LL_IsBufferInSecureEnclave(void *pBuffer, uint32_t ulSize)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	6039      	str	r1, [r7, #0]
  /* If pBuffer is NULL, simply return FALSE */
  if ((pBuffer == NULL) || (ulSize == 0UL))
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d013      	beq.n	80008ac <KMS_LL_IsBufferInSecureEnclave+0x38>
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d010      	beq.n	80008ac <KMS_LL_IsBufferInSecureEnclave+0x38>
  {
    return;
  }
  /* Check if address range is within secure enclave                           */
  /* Called APIs will generate exception in case buffer is in forbidden area   */
  (void)SE_LL_Buffer_part_of_SE_ram(pBuffer, ulSize);
 800088a:	6839      	ldr	r1, [r7, #0]
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f000 f983 	bl	8000b98 <SE_LL_Buffer_part_of_SE_ram>
  /*     Checking RAM Need to add test to protect on NVM_STORAGE */
  (void)SE_LL_Buffer_part_of_SE_rom(pBuffer, ulSize);
 8000892:	6839      	ldr	r1, [r7, #0]
 8000894:	6878      	ldr	r0, [r7, #4]
 8000896:	f000 f999 	bl	8000bcc <SE_LL_Buffer_part_of_SE_rom>

  /* Double Check to avoid basic fault injection */
  (void)SE_LL_Buffer_part_of_SE_ram(pBuffer, ulSize);
 800089a:	6839      	ldr	r1, [r7, #0]
 800089c:	6878      	ldr	r0, [r7, #4]
 800089e:	f000 f97b 	bl	8000b98 <SE_LL_Buffer_part_of_SE_ram>
  /*     Checking RAM Need to add test to protect on NVM_STORAGE */
  (void)SE_LL_Buffer_part_of_SE_rom(pBuffer, ulSize);
 80008a2:	6839      	ldr	r1, [r7, #0]
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f000 f991 	bl	8000bcc <SE_LL_Buffer_part_of_SE_rom>

  return;
 80008aa:	e000      	b.n	80008ae <KMS_LL_IsBufferInSecureEnclave+0x3a>
    return;
 80008ac:	bf00      	nop
}
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <KMS_LL_Initialize>:
}
 80008b4:	2000      	movs	r0, #0
 80008b6:	4770      	bx	lr

080008b8 <KMS_LL_Finalize>:
CK_RV KMS_LL_Finalize(void)
 80008b8:	2000      	movs	r0, #0
 80008ba:	4770      	bx	lr

080008bc <KMS_LL_FLASH_Read>:
{
 80008bc:	b508      	push	{r3, lr}
  seStatus = SE_LL_FLASH_Read(pDestination, pSource, Length);
 80008be:	f000 f903 	bl	8000ac8 <SE_LL_FLASH_Read>
}
 80008c2:	4b03      	ldr	r3, [pc, #12]	@ (80008d0 <KMS_LL_FLASH_Read+0x14>)
 80008c4:	4298      	cmp	r0, r3
 80008c6:	bf14      	ite	ne
 80008c8:	2005      	movne	r0, #5
 80008ca:	2000      	moveq	r0, #0
 80008cc:	bd08      	pop	{r3, pc}
 80008ce:	bf00      	nop
 80008d0:	0012310f 	.word	0x0012310f

080008d4 <KMS_LL_ReportError>:
  * @param  error Error reported by KMS
  */
void KMS_LL_ReportError(uint32_t error)
{
  (void)error;
  while (1 == 1) {;}
 80008d4:	e7fe      	b.n	80008d4 <KMS_LL_ReportError>

080008d6 <NVMS_LL_Init>:
  * @brief   Flash low level driver initialization.
  */
void NVMS_LL_Init(void)
{

}
 80008d6:	4770      	bx	lr

080008d8 <NVMS_LL_IsBlockErased>:
  */
bool NVMS_LL_IsBlockErased(nvms_block_t block)
{
  uint32_t i;
  uint32_t *p = (uint32_t *)((block == NVMS_BLOCK0) ? NVMS_LL_BLOCK0_ADDRESS :
                             NVMS_LL_BLOCK1_ADDRESS);
 80008d8:	4b09      	ldr	r3, [pc, #36]	@ (8000900 <NVMS_LL_IsBlockErased+0x28>)
 80008da:	4a0a      	ldr	r2, [pc, #40]	@ (8000904 <NVMS_LL_IsBlockErased+0x2c>)
 80008dc:	1ad2      	subs	r2, r2, r3
  uint32_t *p = (uint32_t *)((block == NVMS_BLOCK0) ? NVMS_LL_BLOCK0_ADDRESS :
 80008de:	b108      	cbz	r0, 80008e4 <NVMS_LL_IsBlockErased+0xc>
                             NVMS_LL_BLOCK1_ADDRESS);
 80008e0:	eb03 0352 	add.w	r3, r3, r2, lsr #1

  for (i = 0; i < (NVMS_LL_BLOCK_SIZE / sizeof(uint32_t)); i++)
 80008e4:	08d2      	lsrs	r2, r2, #3
 80008e6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d101      	bne.n	80008f2 <NVMS_LL_IsBlockErased+0x1a>
    {
      return false;
    }
    p++;
  }
  return true;
 80008ee:	2001      	movs	r0, #1
 80008f0:	4770      	bx	lr
    if (*p != NVMS_LL_ERASED)
 80008f2:	f853 1b04 	ldr.w	r1, [r3], #4
 80008f6:	3101      	adds	r1, #1
 80008f8:	d0f7      	beq.n	80008ea <NVMS_LL_IsBlockErased+0x12>
      return false;
 80008fa:	2000      	movs	r0, #0
}
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	08013000 	.word	0x08013000
 8000904:	08015000 	.word	0x08015000

08000908 <NVMS_LL_BlockErase>:
  * @return                  The operation status.
  * @retval false            if the operation is successful.
  * @retval true             if the erase operation failed.
  */
bool NVMS_LL_BlockErase(nvms_block_t block)
{
 8000908:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* Erase First Flash sector */
  FLASH_EraseInitTypeDef EraseInitStruct;
  uint32_t SectorError = 0;

  EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 800090a:	2200      	movs	r2, #0
 800090c:	2302      	movs	r3, #2
 800090e:	e9cd 2300 	strd	r2, r3, [sp]
  EraseInitStruct.Page        = get_page((block == NVMS_BLOCK0) ? NVMS_LL_BLOCK0_ADDRESS : NVMS_LL_BLOCK1_ADDRESS);
 8000912:	4b0e      	ldr	r3, [pc, #56]	@ (800094c <NVMS_LL_BlockErase+0x44>)
 8000914:	4a0e      	ldr	r2, [pc, #56]	@ (8000950 <NVMS_LL_BlockErase+0x48>)
 8000916:	4604      	mov	r4, r0
 8000918:	1ad2      	subs	r2, r2, r3
 800091a:	b108      	cbz	r0, 8000920 <NVMS_LL_BlockErase+0x18>
 800091c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
  page = (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;
 8000920:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8000924:	0adb      	lsrs	r3, r3, #11
  EraseInitStruct.NbPages     = NVMS_LL_NB_PAGE_PER_BLOCK;
 8000926:	0b12      	lsrs	r2, r2, #12
  EraseInitStruct.Page        = get_page((block == NVMS_BLOCK0) ? NVMS_LL_BLOCK0_ADDRESS : NVMS_LL_BLOCK1_ADDRESS);
 8000928:	9302      	str	r3, [sp, #8]
  EraseInitStruct.NbPages     = NVMS_LL_NB_PAGE_PER_BLOCK;
 800092a:	9203      	str	r2, [sp, #12]

  /* Unlock the Flash to enable the flash control register access *************/
  (void)HAL_FLASH_Unlock();
 800092c:	f000 ff80 	bl	8001830 <HAL_FLASH_Unlock>

  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK)
 8000930:	4669      	mov	r1, sp
 8000932:	a801      	add	r0, sp, #4
 8000934:	f001 f80e 	bl	8001954 <HAL_FLASHEx_Erase>
      FLASH_ErrorTypeDef errorcode = HAL_FLASH_GetError(); */
  }

  /* Lock the Flash to disable the flash control register access (recommended
  to protect the FLASH memory against possible unwanted operation) *********/
  (void)HAL_FLASH_Lock();
 8000938:	f000 ff8c 	bl	8001854 <HAL_FLASH_Lock>

  /* Operation verification.*/
  return !NVMS_LL_IsBlockErased(block);
 800093c:	4620      	mov	r0, r4
 800093e:	f7ff ffcb 	bl	80008d8 <NVMS_LL_IsBlockErased>
 8000942:	f080 0001 	eor.w	r0, r0, #1
}
 8000946:	b2c0      	uxtb	r0, r0
 8000948:	b004      	add	sp, #16
 800094a:	bd10      	pop	{r4, pc}
 800094c:	08013000 	.word	0x08013000
 8000950:	08015000 	.word	0x08015000

08000954 <NVMS_LL_Write>:
  * @return                  The operation status.
  * @retval false            if the operation is successful.
  * @retval true             if the write operation failed.
  */
bool NVMS_LL_Write(const uint8_t *source, uint8_t *destination, size_t size)
{
 8000954:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000958:	4605      	mov	r5, r0
 800095a:	460e      	mov	r6, r1
 800095c:	4617      	mov	r7, r2
  const uint8_t *s = source;
  uint8_t *d = destination;
  size_t sz = size;
 800095e:	4690      	mov	r8, r2
  uint8_t *d = destination;
 8000960:	468a      	mov	sl, r1
  const uint8_t *s = source;
 8000962:	4681      	mov	r9, r0

  while (sz > 0UL)
 8000964:	f1b8 0f00 	cmp.w	r8, #0
 8000968:	d10a      	bne.n	8000980 <NVMS_LL_Write+0x2c>
      return true;
    }
  }

  /* Operation verification.*/
  return (bool)(memcmp(source, destination, size) != 0);
 800096a:	463a      	mov	r2, r7
 800096c:	4631      	mov	r1, r6
 800096e:	4628      	mov	r0, r5
 8000970:	f006 f934 	bl	8006bdc <memcmp>
 8000974:	3800      	subs	r0, #0
 8000976:	bf18      	it	ne
 8000978:	2001      	movne	r0, #1
}
 800097a:	b003      	add	sp, #12
 800097c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                     ((uint32_t) * destinationp & (NVMS_LL_PAGE_SIZE - 1UL)));
 8000980:	f00a 0407 	and.w	r4, sl, #7
  maxsize = (size_t)(NVMS_LL_PAGE_SIZE -
 8000984:	f1c4 0408 	rsb	r4, r4, #8
 8000988:	4544      	cmp	r4, r8
 800098a:	bf28      	it	cs
 800098c:	4644      	movcs	r4, r8
  (void)HAL_FLASH_Unlock();
 800098e:	f000 ff4f 	bl	8001830 <HAL_FLASH_Unlock>
  while ((maxsize >= 8UL) && (ret == HAL_OK))
 8000992:	2c08      	cmp	r4, #8
  *sizep        -= maxsize;
 8000994:	eba8 0804 	sub.w	r8, r8, r4
  *destinationp += maxsize;
 8000998:	eb0a 0b04 	add.w	fp, sl, r4
  HAL_StatusTypeDef ret = HAL_OK;
 800099c:	f04f 0300 	mov.w	r3, #0
  while ((maxsize >= 8UL) && (ret == HAL_OK))
 80009a0:	d10d      	bne.n	80009be <NVMS_LL_Write+0x6a>
    ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t)p, (uint64_t) * ((uint64_t *)(uint32_t) * sourcep));
 80009a2:	e8f9 2302 	ldrd	r2, r3, [r9], #8
    ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t)p, (uint64_t) * ((uint64_t *)(uint32_t) * sourcep));
 80009a6:	4651      	mov	r1, sl
 80009a8:	2001      	movs	r0, #1
 80009aa:	f000 ff8d 	bl	80018c8 <HAL_FLASH_Program>
 80009ae:	4603      	mov	r3, r0
 80009b0:	9301      	str	r3, [sp, #4]
  (void)HAL_FLASH_Lock();
 80009b2:	f000 ff4f 	bl	8001854 <HAL_FLASH_Lock>
  if (ret == HAL_OK)
 80009b6:	9b01      	ldr	r3, [sp, #4]
 80009b8:	b933      	cbnz	r3, 80009c8 <NVMS_LL_Write+0x74>
  *destinationp += maxsize;
 80009ba:	46da      	mov	sl, fp
 80009bc:	e7d2      	b.n	8000964 <NVMS_LL_Write+0x10>
  if (maxsize != 0UL)
 80009be:	2c00      	cmp	r4, #0
 80009c0:	d0f6      	beq.n	80009b0 <NVMS_LL_Write+0x5c>
    ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t)p, (uint64_t) * ((uint64_t *)(uint32_t) * sourcep));
 80009c2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80009c6:	e7ee      	b.n	80009a6 <NVMS_LL_Write+0x52>
      return true;
 80009c8:	2001      	movs	r0, #1
 80009ca:	e7d6      	b.n	800097a <NVMS_LL_Write+0x26>

080009cc <__NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80009cc:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80009d0:	4905      	ldr	r1, [pc, #20]	@ (80009e8 <__NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80009d2:	4b06      	ldr	r3, [pc, #24]	@ (80009ec <__NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80009d4:	68ca      	ldr	r2, [r1, #12]
 80009d6:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80009da:	4313      	orrs	r3, r2
 80009dc:	60cb      	str	r3, [r1, #12]
 80009de:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80009e2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80009e4:	e7fd      	b.n	80009e2 <__NVIC_SystemReset+0x16>
 80009e6:	bf00      	nop
 80009e8:	e000ed00 	.word	0xe000ed00
 80009ec:	05fa0004 	.word	0x05fa0004

080009f0 <SE_LL_GetPage>:
  */
static uint32_t SE_LL_GetPage(uint32_t Address)
{
  uint32_t page;

  if (Address < (FLASH_BASE + (FLASH_BANK_SIZE)))
 80009f0:	4b07      	ldr	r3, [pc, #28]	@ (8000a10 <SE_LL_GetPage+0x20>)
 80009f2:	4a08      	ldr	r2, [pc, #32]	@ (8000a14 <SE_LL_GetPage+0x24>)
 80009f4:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	@ 0x5e0
 80009f8:	ea02 2283 	and.w	r2, r2, r3, lsl #10
 80009fc:	f102 6100 	add.w	r1, r2, #134217728	@ 0x8000000
  {
    /* Bank 1 */
    page = (Address - FLASH_BASE) / FLASH_PAGE_SIZE;
 8000a00:	f100 4378 	add.w	r3, r0, #4160749568	@ 0xf8000000
  if (Address < (FLASH_BASE + (FLASH_BANK_SIZE)))
 8000a04:	4281      	cmp	r1, r0
    page = (Address - FLASH_BASE) / FLASH_PAGE_SIZE;
 8000a06:	bf8e      	itee	hi
 8000a08:	0ad8      	lsrhi	r0, r3, #11
  }
  else
  {
    /* Bank 2 */
    page = (Address - (FLASH_BASE + (FLASH_BANK_SIZE))) / FLASH_PAGE_SIZE;
 8000a0a:	1a98      	subls	r0, r3, r2
 8000a0c:	0ac0      	lsrls	r0, r0, #11
  }
  return page;
}
 8000a0e:	4770      	bx	lr
 8000a10:	1fff7000 	.word	0x1fff7000
 8000a14:	03fffc00 	.word	0x03fffc00

08000a18 <SE_LL_FLASH_Erase>:
{
 8000a18:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t page_error = 0U;
 8000a1a:	2300      	movs	r3, #0
{
 8000a1c:	4606      	mov	r6, r0
 8000a1e:	460c      	mov	r4, r1
  uint32_t page_error = 0U;
 8000a20:	9300      	str	r3, [sp, #0]
  if (HAL_FLASH_Unlock() == HAL_OK)
 8000a22:	f000 ff05 	bl	8001830 <HAL_FLASH_Unlock>
 8000a26:	b9d8      	cbnz	r0, 8000a60 <SE_LL_FLASH_Erase+0x48>
    p_erase_init.TypeErase     = FLASH_TYPEERASE_PAGES;
 8000a28:	2302      	movs	r3, #2
    p_erase_init.Page          = SE_LL_GetPage(start);
 8000a2a:	4630      	mov	r0, r6
    p_erase_init.TypeErase     = FLASH_TYPEERASE_PAGES;
 8000a2c:	9301      	str	r3, [sp, #4]
    p_erase_init.Page          = SE_LL_GetPage(start);
 8000a2e:	f7ff ffdf 	bl	80009f0 <SE_LL_GetPage>
    p_erase_init.NbPages       = SE_LL_GetPage(start + Length - 1U) - p_erase_init.Page + 1U;
 8000a32:	3c01      	subs	r4, #1
    p_erase_init.Page          = SE_LL_GetPage(start);
 8000a34:	4605      	mov	r5, r0
 8000a36:	9002      	str	r0, [sp, #8]
    p_erase_init.NbPages       = SE_LL_GetPage(start + Length - 1U) - p_erase_init.Page + 1U;
 8000a38:	1930      	adds	r0, r6, r4
 8000a3a:	f7ff ffd9 	bl	80009f0 <SE_LL_GetPage>
 8000a3e:	1c43      	adds	r3, r0, #1
 8000a40:	1b5b      	subs	r3, r3, r5
    if (HAL_FLASHEx_Erase(&p_erase_init, &page_error) != HAL_OK)
 8000a42:	4669      	mov	r1, sp
 8000a44:	a801      	add	r0, sp, #4
    p_erase_init.NbPages       = SE_LL_GetPage(start + Length - 1U) - p_erase_init.Page + 1U;
 8000a46:	9303      	str	r3, [sp, #12]
    if (HAL_FLASHEx_Erase(&p_erase_init, &page_error) != HAL_OK)
 8000a48:	f000 ff84 	bl	8001954 <HAL_FLASHEx_Erase>
  SE_ErrorStatus e_ret_status = SE_SUCCESS;
 8000a4c:	4c05      	ldr	r4, [pc, #20]	@ (8000a64 <SE_LL_FLASH_Erase+0x4c>)
 8000a4e:	4b06      	ldr	r3, [pc, #24]	@ (8000a68 <SE_LL_FLASH_Erase+0x50>)
 8000a50:	2800      	cmp	r0, #0
 8000a52:	bf08      	it	eq
 8000a54:	461c      	moveq	r4, r3
    (void)HAL_FLASH_Lock();
 8000a56:	f000 fefd 	bl	8001854 <HAL_FLASH_Lock>
}
 8000a5a:	4620      	mov	r0, r4
 8000a5c:	b004      	add	sp, #16
 8000a5e:	bd70      	pop	{r4, r5, r6, pc}
    e_ret_status = SE_ERROR;
 8000a60:	4c00      	ldr	r4, [pc, #0]	@ (8000a64 <SE_LL_FLASH_Erase+0x4c>)
  return e_ret_status;
 8000a62:	e7fa      	b.n	8000a5a <SE_LL_FLASH_Erase+0x42>
 8000a64:	00018799 	.word	0x00018799
 8000a68:	0012310f 	.word	0x0012310f

08000a6c <SE_LL_FLASH_Write>:
{
 8000a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a6e:	4607      	mov	r7, r0
 8000a70:	460d      	mov	r5, r1
  if (Length == 0U)
 8000a72:	4616      	mov	r6, r2
 8000a74:	b912      	cbnz	r2, 8000a7c <SE_LL_FLASH_Write+0x10>
    return SE_ERROR;
 8000a76:	4c11      	ldr	r4, [pc, #68]	@ (8000abc <SE_LL_FLASH_Write+0x50>)
}
 8000a78:	4620      	mov	r0, r4
 8000a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((destination >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 8000a7c:	4b10      	ldr	r3, [pc, #64]	@ (8000ac0 <SE_LL_FLASH_Write+0x54>)
 8000a7e:	4283      	cmp	r3, r0
        ((destination + Length) <= (SlotHeaderAdd[SLOT_ACTIVE_1 + i] + SFU_IMG_IMAGE_OFFSET)))
 8000a80:	eb00 0102 	add.w	r1, r0, r2
 8000a84:	f503 7200 	add.w	r2, r3, #512	@ 0x200
    if ((destination >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 8000a88:	d8f5      	bhi.n	8000a76 <SE_LL_FLASH_Write+0xa>
 8000a8a:	4291      	cmp	r1, r2
 8000a8c:	d8f3      	bhi.n	8000a76 <SE_LL_FLASH_Write+0xa>
  if (HAL_FLASH_Unlock() == HAL_OK)
 8000a8e:	f000 fecf 	bl	8001830 <HAL_FLASH_Unlock>
 8000a92:	4604      	mov	r4, r0
 8000a94:	2800      	cmp	r0, #0
 8000a96:	d1ee      	bne.n	8000a76 <SE_LL_FLASH_Write+0xa>
 8000a98:	3d08      	subs	r5, #8
      if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (destination + i), *(uint64_t *)(source + i)) != HAL_OK)
 8000a9a:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 8000a9e:	1939      	adds	r1, r7, r4
 8000aa0:	2001      	movs	r0, #1
 8000aa2:	f000 ff11 	bl	80018c8 <HAL_FLASH_Program>
 8000aa6:	b930      	cbnz	r0, 8000ab6 <SE_LL_FLASH_Write+0x4a>
    for (i = 0U; i < Length; i += 8U)
 8000aa8:	3408      	adds	r4, #8
 8000aaa:	42a6      	cmp	r6, r4
 8000aac:	d8f5      	bhi.n	8000a9a <SE_LL_FLASH_Write+0x2e>
  SE_ErrorStatus ret = SE_SUCCESS;
 8000aae:	4c05      	ldr	r4, [pc, #20]	@ (8000ac4 <SE_LL_FLASH_Write+0x58>)
    (void)HAL_FLASH_Lock();
 8000ab0:	f000 fed0 	bl	8001854 <HAL_FLASH_Lock>
 8000ab4:	e7e0      	b.n	8000a78 <SE_LL_FLASH_Write+0xc>
        ret = SE_ERROR;
 8000ab6:	4c01      	ldr	r4, [pc, #4]	@ (8000abc <SE_LL_FLASH_Write+0x50>)
 8000ab8:	e7fa      	b.n	8000ab0 <SE_LL_FLASH_Write+0x44>
 8000aba:	bf00      	nop
 8000abc:	00018799 	.word	0x00018799
 8000ac0:	0802a000 	.word	0x0802a000
 8000ac4:	0012310f 	.word	0x0012310f

08000ac8 <SE_LL_FLASH_Read>:
{
 8000ac8:	b570      	push	{r4, r5, r6, lr}
    if ((source >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 8000aca:	4e17      	ldr	r6, [pc, #92]	@ (8000b28 <SE_LL_FLASH_Read+0x60>)
 8000acc:	428e      	cmp	r6, r1
  for (i = 0U; i < SFU_NB_MAX_ACTIVE_IMAGE; i++)
 8000ace:	f04f 0300 	mov.w	r3, #0
        ((source + Length) <= (SlotHeaderAdd[SLOT_ACTIVE_1 + i] + SFU_IMG_IMAGE_OFFSET)))
 8000ad2:	eb01 0402 	add.w	r4, r1, r2
 8000ad6:	f506 7500 	add.w	r5, r6, #512	@ 0x200
    if ((source >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 8000ada:	d802      	bhi.n	8000ae2 <SE_LL_FLASH_Read+0x1a>
  for (i = 0U; i < SFU_NB_MAX_ACTIVE_IMAGE; i++)
 8000adc:	42a5      	cmp	r5, r4
 8000ade:	bf28      	it	cs
 8000ae0:	2301      	movcs	r3, #1
    if ((source >= SlotStartAdd[SLOT_DWL_1 + i]) &&
 8000ae2:	4c12      	ldr	r4, [pc, #72]	@ (8000b2c <SE_LL_FLASH_Read+0x64>)
 8000ae4:	428c      	cmp	r4, r1
        ((source + Length) <= (SlotStartAdd[SLOT_DWL_1 + i] + SLOT_SIZE(SLOT_DWL_1))))
 8000ae6:	eb01 0502 	add.w	r5, r1, r2
    if ((source >= SlotStartAdd[SLOT_DWL_1 + i]) &&
 8000aea:	d802      	bhi.n	8000af2 <SE_LL_FLASH_Read+0x2a>
 8000aec:	4c10      	ldr	r4, [pc, #64]	@ (8000b30 <SE_LL_FLASH_Read+0x68>)
 8000aee:	42a5      	cmp	r5, r4
 8000af0:	d900      	bls.n	8000af4 <SE_LL_FLASH_Read+0x2c>
  if (verified == 0U)
 8000af2:	b1b3      	cbz	r3, 8000b22 <SE_LL_FLASH_Read+0x5a>
  SE_DoubleECC_Error_Counter = 0U;
 8000af4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b34 <SE_LL_FLASH_Read+0x6c>)
 8000af6:	2400      	movs	r4, #0
 8000af8:	601c      	str	r4, [r3, #0]
  for (i = 0; (i < Length) && (SE_DoubleECC_Error_Counter == 0U); i++, pDestination++, pSource++)
 8000afa:	3901      	subs	r1, #1
 8000afc:	4402      	add	r2, r0
 8000afe:	4282      	cmp	r2, r0
 8000b00:	d001      	beq.n	8000b06 <SE_LL_FLASH_Read+0x3e>
 8000b02:	681c      	ldr	r4, [r3, #0]
 8000b04:	b144      	cbz	r4, 8000b18 <SE_LL_FLASH_Read+0x50>
  if (SE_DoubleECC_Error_Counter == 0U)
 8000b06:	6819      	ldr	r1, [r3, #0]
  SE_ErrorStatus e_ret_status = SE_ERROR;
 8000b08:	4a0b      	ldr	r2, [pc, #44]	@ (8000b38 <SE_LL_FLASH_Read+0x70>)
 8000b0a:	480c      	ldr	r0, [pc, #48]	@ (8000b3c <SE_LL_FLASH_Read+0x74>)
 8000b0c:	2900      	cmp	r1, #0
 8000b0e:	bf18      	it	ne
 8000b10:	4610      	movne	r0, r2
  SE_DoubleECC_Error_Counter = 0U;
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
}
 8000b16:	bd70      	pop	{r4, r5, r6, pc}
    *pDestination = *pSource;
 8000b18:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8000b1c:	f800 4b01 	strb.w	r4, [r0], #1
  for (i = 0; (i < Length) && (SE_DoubleECC_Error_Counter == 0U); i++, pDestination++, pSource++)
 8000b20:	e7ed      	b.n	8000afe <SE_LL_FLASH_Read+0x36>
    return SE_ERROR;
 8000b22:	4805      	ldr	r0, [pc, #20]	@ (8000b38 <SE_LL_FLASH_Read+0x70>)
 8000b24:	e7f7      	b.n	8000b16 <SE_LL_FLASH_Read+0x4e>
 8000b26:	bf00      	nop
 8000b28:	0802a000 	.word	0x0802a000
 8000b2c:	08016000 	.word	0x08016000
 8000b30:	0802a000 	.word	0x0802a000
 8000b34:	20000c2c 	.word	0x20000c2c
 8000b38:	00018799 	.word	0x00018799
 8000b3c:	0012310f 	.word	0x0012310f

08000b40 <SE_LL_Buffer_in_ram>:
{
 8000b40:	b508      	push	{r3, lr}
  uint32_t addr_end = addr_start + Length - 1U;
 8000b42:	1e4b      	subs	r3, r1, #1
 8000b44:	4403      	add	r3, r0
  if ((Length != 0U) && (!((0xFFFFFFFFUL - addr_start) < Length))
 8000b46:	b139      	cbz	r1, 8000b58 <SE_LL_Buffer_in_ram+0x18>
 8000b48:	1841      	adds	r1, r0, r1
 8000b4a:	d205      	bcs.n	8000b58 <SE_LL_Buffer_in_ram+0x18>
      && ((addr_end  <= SB_REGION_RAM_END) && (addr_start >= (SE_REGION_RAM_END + 1U))))
 8000b4c:	4a04      	ldr	r2, [pc, #16]	@ (8000b60 <SE_LL_Buffer_in_ram+0x20>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d802      	bhi.n	8000b58 <SE_LL_Buffer_in_ram+0x18>
 8000b52:	4b04      	ldr	r3, [pc, #16]	@ (8000b64 <SE_LL_Buffer_in_ram+0x24>)
 8000b54:	4283      	cmp	r3, r0
 8000b56:	d901      	bls.n	8000b5c <SE_LL_Buffer_in_ram+0x1c>
    NVIC_SystemReset();
 8000b58:	f7ff ff38 	bl	80009cc <__NVIC_SystemReset>
}
 8000b5c:	4802      	ldr	r0, [pc, #8]	@ (8000b68 <SE_LL_Buffer_in_ram+0x28>)
 8000b5e:	bd08      	pop	{r3, pc}
 8000b60:	2000efff 	.word	0x2000efff
 8000b64:	20003400 	.word	0x20003400
 8000b68:	0012310f 	.word	0x0012310f

08000b6c <SE_LL_Buffer_in_SBSFU_ram>:
{
 8000b6c:	b508      	push	{r3, lr}
  uint32_t addr_end = addr_start + Length - 1U;
 8000b6e:	1e4b      	subs	r3, r1, #1
 8000b70:	4403      	add	r3, r0
  if ((Length != 0U) && (!((0xFFFFFFFFUL - addr_start) < Length))
 8000b72:	b139      	cbz	r1, 8000b84 <SE_LL_Buffer_in_SBSFU_ram+0x18>
 8000b74:	1841      	adds	r1, r0, r1
 8000b76:	d205      	bcs.n	8000b84 <SE_LL_Buffer_in_SBSFU_ram+0x18>
      && ((addr_end  <= SB_REGION_RAM_END) && (addr_start >= SB_REGION_RAM_START)))
 8000b78:	4a04      	ldr	r2, [pc, #16]	@ (8000b8c <SE_LL_Buffer_in_SBSFU_ram+0x20>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d802      	bhi.n	8000b84 <SE_LL_Buffer_in_SBSFU_ram+0x18>
 8000b7e:	4b04      	ldr	r3, [pc, #16]	@ (8000b90 <SE_LL_Buffer_in_SBSFU_ram+0x24>)
 8000b80:	4298      	cmp	r0, r3
 8000b82:	d201      	bcs.n	8000b88 <SE_LL_Buffer_in_SBSFU_ram+0x1c>
    NVIC_SystemReset();
 8000b84:	f7ff ff22 	bl	80009cc <__NVIC_SystemReset>
}
 8000b88:	4802      	ldr	r0, [pc, #8]	@ (8000b94 <SE_LL_Buffer_in_SBSFU_ram+0x28>)
 8000b8a:	bd08      	pop	{r3, pc}
 8000b8c:	2000efff 	.word	0x2000efff
 8000b90:	20003400 	.word	0x20003400
 8000b94:	0012310f 	.word	0x0012310f

08000b98 <SE_LL_Buffer_part_of_SE_ram>:
{
 8000b98:	b508      	push	{r3, lr}
  if (((Length != 0U) && (!(((addr_start < SE_REGION_RAM_START) && (addr_end < SE_REGION_RAM_START)) ||
 8000b9a:	b179      	cbz	r1, 8000bbc <SE_LL_Buffer_part_of_SE_ram+0x24>
 8000b9c:	4a08      	ldr	r2, [pc, #32]	@ (8000bc0 <SE_LL_Buffer_part_of_SE_ram+0x28>)
  uint32_t addr_end = addr_start + Length - 1U;
 8000b9e:	1e4b      	subs	r3, r1, #1
  if (((Length != 0U) && (!(((addr_start < SE_REGION_RAM_START) && (addr_end < SE_REGION_RAM_START)) ||
 8000ba0:	4282      	cmp	r2, r0
  uint32_t addr_end = addr_start + Length - 1U;
 8000ba2:	4403      	add	r3, r0
  if (((Length != 0U) && (!(((addr_start < SE_REGION_RAM_START) && (addr_end < SE_REGION_RAM_START)) ||
 8000ba4:	d901      	bls.n	8000baa <SE_LL_Buffer_part_of_SE_ram+0x12>
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d804      	bhi.n	8000bb4 <SE_LL_Buffer_part_of_SE_ram+0x1c>
                            ((addr_start > SE_REGION_RAM_END) && (addr_end > SE_REGION_RAM_END)))))
 8000baa:	4a06      	ldr	r2, [pc, #24]	@ (8000bc4 <SE_LL_Buffer_part_of_SE_ram+0x2c>)
  if (((Length != 0U) && (!(((addr_start < SE_REGION_RAM_START) && (addr_end < SE_REGION_RAM_START)) ||
 8000bac:	4282      	cmp	r2, r0
 8000bae:	d203      	bcs.n	8000bb8 <SE_LL_Buffer_part_of_SE_ram+0x20>
                            ((addr_start > SE_REGION_RAM_END) && (addr_end > SE_REGION_RAM_END)))))
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d201      	bcs.n	8000bb8 <SE_LL_Buffer_part_of_SE_ram+0x20>
 8000bb4:	1840      	adds	r0, r0, r1
 8000bb6:	d301      	bcc.n	8000bbc <SE_LL_Buffer_part_of_SE_ram+0x24>
    NVIC_SystemReset();
 8000bb8:	f7ff ff08 	bl	80009cc <__NVIC_SystemReset>
}
 8000bbc:	4802      	ldr	r0, [pc, #8]	@ (8000bc8 <SE_LL_Buffer_part_of_SE_ram+0x30>)
 8000bbe:	bd08      	pop	{r3, pc}
 8000bc0:	20000000 	.word	0x20000000
 8000bc4:	200033ff 	.word	0x200033ff
 8000bc8:	00018799 	.word	0x00018799

08000bcc <SE_LL_Buffer_part_of_SE_rom>:
{
 8000bcc:	b508      	push	{r3, lr}
  if (((Length != 0U) && (!(((addr_start < SE_CODE_REGION_ROM_START) && (addr_end < SE_CODE_REGION_ROM_START))
 8000bce:	b179      	cbz	r1, 8000bf0 <SE_LL_Buffer_part_of_SE_rom+0x24>
 8000bd0:	4a08      	ldr	r2, [pc, #32]	@ (8000bf4 <SE_LL_Buffer_part_of_SE_rom+0x28>)
  uint32_t addr_end = addr_start + Length - 1U;
 8000bd2:	1e4b      	subs	r3, r1, #1
  if (((Length != 0U) && (!(((addr_start < SE_CODE_REGION_ROM_START) && (addr_end < SE_CODE_REGION_ROM_START))
 8000bd4:	4282      	cmp	r2, r0
  uint32_t addr_end = addr_start + Length - 1U;
 8000bd6:	4403      	add	r3, r0
  if (((Length != 0U) && (!(((addr_start < SE_CODE_REGION_ROM_START) && (addr_end < SE_CODE_REGION_ROM_START))
 8000bd8:	d901      	bls.n	8000bde <SE_LL_Buffer_part_of_SE_rom+0x12>
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	d804      	bhi.n	8000be8 <SE_LL_Buffer_part_of_SE_rom+0x1c>
                            || ((addr_start > SE_CODE_REGION_ROM_END) && (addr_end > SE_CODE_REGION_ROM_END))
 8000bde:	4a06      	ldr	r2, [pc, #24]	@ (8000bf8 <SE_LL_Buffer_part_of_SE_rom+0x2c>)
  if (((Length != 0U) && (!(((addr_start < SE_CODE_REGION_ROM_START) && (addr_end < SE_CODE_REGION_ROM_START))
 8000be0:	4282      	cmp	r2, r0
 8000be2:	d203      	bcs.n	8000bec <SE_LL_Buffer_part_of_SE_rom+0x20>
                            || ((addr_start > SE_CODE_REGION_ROM_END) && (addr_end > SE_CODE_REGION_ROM_END))
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d201      	bcs.n	8000bec <SE_LL_Buffer_part_of_SE_rom+0x20>
 8000be8:	1840      	adds	r0, r0, r1
 8000bea:	d301      	bcc.n	8000bf0 <SE_LL_Buffer_part_of_SE_rom+0x24>
    NVIC_SystemReset();
 8000bec:	f7ff feee 	bl	80009cc <__NVIC_SystemReset>
}
 8000bf0:	4802      	ldr	r0, [pc, #8]	@ (8000bfc <SE_LL_Buffer_part_of_SE_rom+0x30>)
 8000bf2:	bd08      	pop	{r3, pc}
 8000bf4:	08000200 	.word	0x08000200
 8000bf8:	080086ff 	.word	0x080086ff
 8000bfc:	00018799 	.word	0x00018799

08000c00 <SE_LL_Lock_Keys>:
{
 8000c00:	b510      	push	{r4, lr}
  if (KMS_LockKeyHandle(KMS_INDEX_BLOBIMPORT_VERIFY) == CKR_OK)
 8000c02:	2001      	movs	r0, #1
 8000c04:	f004 fc82 	bl	800550c <KMS_LockKeyHandle>
 8000c08:	fab0 f480 	clz	r4, r0
  if (KMS_LockKeyHandle(KMS_INDEX_BLOBIMPORT_DECRYPT) == CKR_OK)
 8000c0c:	2002      	movs	r0, #2
  if (KMS_LockKeyHandle(KMS_INDEX_BLOBIMPORT_VERIFY) == CKR_OK)
 8000c0e:	0964      	lsrs	r4, r4, #5
  if (KMS_LockKeyHandle(KMS_INDEX_BLOBIMPORT_DECRYPT) == CKR_OK)
 8000c10:	f004 fc7c 	bl	800550c <KMS_LockKeyHandle>
 8000c14:	b900      	cbnz	r0, 8000c18 <SE_LL_Lock_Keys+0x18>
    i_key_locked++;
 8000c16:	3401      	adds	r4, #1
  if (KMS_LockKeyHandle(KMS_SBSFU_KEY_1_AES128_OBJECT_HANDLE) == CKR_OK)
 8000c18:	2003      	movs	r0, #3
 8000c1a:	f004 fc77 	bl	800550c <KMS_LockKeyHandle>
 8000c1e:	b900      	cbnz	r0, 8000c22 <SE_LL_Lock_Keys+0x22>
    i_key_locked++;
 8000c20:	3401      	adds	r4, #1
  if (KMS_LockKeyHandle(KMS_SBSFU_KEY_2_AES128_OBJECT_HANDLE) == CKR_OK)
 8000c22:	2004      	movs	r0, #4
 8000c24:	f004 fc72 	bl	800550c <KMS_LockKeyHandle>
 8000c28:	b900      	cbnz	r0, 8000c2c <SE_LL_Lock_Keys+0x2c>
    i_key_locked++;
 8000c2a:	3401      	adds	r4, #1
  if (KMS_LockKeyHandle(KMS_SBSFU_KEY_3_AES128_OBJECT_HANDLE) == CKR_OK)
 8000c2c:	2005      	movs	r0, #5
 8000c2e:	f004 fc6d 	bl	800550c <KMS_LockKeyHandle>
 8000c32:	b900      	cbnz	r0, 8000c36 <SE_LL_Lock_Keys+0x36>
    i_key_locked++;
 8000c34:	3401      	adds	r4, #1
  if (KMS_LockKeyHandle(KMS_SBSFU_KEY_1_ECDSA_OBJECT_HANDLE) == CKR_OK)
 8000c36:	2006      	movs	r0, #6
 8000c38:	f004 fc68 	bl	800550c <KMS_LockKeyHandle>
 8000c3c:	b900      	cbnz	r0, 8000c40 <SE_LL_Lock_Keys+0x40>
    i_key_locked++;
 8000c3e:	3401      	adds	r4, #1
  if (KMS_LockKeyHandle(KMS_SBSFU_KEY_2_ECDSA_OBJECT_HANDLE) == CKR_OK)
 8000c40:	2007      	movs	r0, #7
 8000c42:	f004 fc63 	bl	800550c <KMS_LockKeyHandle>
 8000c46:	b900      	cbnz	r0, 8000c4a <SE_LL_Lock_Keys+0x4a>
    i_key_locked++;
 8000c48:	3401      	adds	r4, #1
  if (KMS_LockKeyHandle(KMS_SBSFU_KEY_3_ECDSA_OBJECT_HANDLE) == CKR_OK)
 8000c4a:	2008      	movs	r0, #8
 8000c4c:	f004 fc5e 	bl	800550c <KMS_LockKeyHandle>
 8000c50:	b928      	cbnz	r0, 8000c5e <SE_LL_Lock_Keys+0x5e>
    return SE_SUCCESS;
 8000c52:	4804      	ldr	r0, [pc, #16]	@ (8000c64 <SE_LL_Lock_Keys+0x64>)
 8000c54:	4b04      	ldr	r3, [pc, #16]	@ (8000c68 <SE_LL_Lock_Keys+0x68>)
 8000c56:	2c07      	cmp	r4, #7
 8000c58:	bf08      	it	eq
 8000c5a:	4618      	moveq	r0, r3
}
 8000c5c:	bd10      	pop	{r4, pc}
    return SE_ERROR;
 8000c5e:	4801      	ldr	r0, [pc, #4]	@ (8000c64 <SE_LL_Lock_Keys+0x64>)
 8000c60:	e7fc      	b.n	8000c5c <SE_LL_Lock_Keys+0x5c>
 8000c62:	bf00      	nop
 8000c64:	00018799 	.word	0x00018799
 8000c68:	0012310f 	.word	0x0012310f

08000c6c <SE_LL_CORE_Cleanup>:
  * The function is called  during SE_LOCK_RESTRICT_SERVICES.
  *
  */
void  SE_LL_CORE_Cleanup(void)
{
}
 8000c6c:	4770      	bx	lr

08000c6e <CRYP_SetKey>:
  *         occurs when the key is written out of HAL scope.
  * @retval None
  */
static void CRYP_SetKey(CRYP_HandleTypeDef *hcryp, uint32_t KeySize)
{
  if (hcryp->Init.pKey != NULL)
 8000c6e:	68c3      	ldr	r3, [r0, #12]
 8000c70:	b1a3      	cbz	r3, 8000c9c <CRYP_SetKey+0x2e>
  {
    switch (KeySize)
 8000c72:	b1a1      	cbz	r1, 8000c9e <CRYP_SetKey+0x30>
 8000c74:	f5b1 2f80 	cmp.w	r1, #262144	@ 0x40000
 8000c78:	d110      	bne.n	8000c9c <CRYP_SetKey+0x2e>
    {
      case CRYP_KEYSIZE_256B:
        hcryp->Instance->KEYR7 = *(uint32_t *)(hcryp->Init.pKey);
 8000c7a:	6802      	ldr	r2, [r0, #0]
 8000c7c:	6819      	ldr	r1, [r3, #0]
 8000c7e:	63d1      	str	r1, [r2, #60]	@ 0x3c
        hcryp->Instance->KEYR6 = *(uint32_t *)(hcryp->Init.pKey + 1U);
 8000c80:	6859      	ldr	r1, [r3, #4]
 8000c82:	6391      	str	r1, [r2, #56]	@ 0x38
        hcryp->Instance->KEYR5 = *(uint32_t *)(hcryp->Init.pKey + 2U);
 8000c84:	6899      	ldr	r1, [r3, #8]
 8000c86:	6351      	str	r1, [r2, #52]	@ 0x34
        hcryp->Instance->KEYR4 = *(uint32_t *)(hcryp->Init.pKey + 3U);
 8000c88:	68d9      	ldr	r1, [r3, #12]
 8000c8a:	6311      	str	r1, [r2, #48]	@ 0x30
        hcryp->Instance->KEYR3 = *(uint32_t *)(hcryp->Init.pKey + 4U);
 8000c8c:	6919      	ldr	r1, [r3, #16]
 8000c8e:	61d1      	str	r1, [r2, #28]
        hcryp->Instance->KEYR2 = *(uint32_t *)(hcryp->Init.pKey + 5U);
 8000c90:	6959      	ldr	r1, [r3, #20]
 8000c92:	6191      	str	r1, [r2, #24]
        hcryp->Instance->KEYR1 = *(uint32_t *)(hcryp->Init.pKey + 6U);
 8000c94:	6999      	ldr	r1, [r3, #24]
 8000c96:	6151      	str	r1, [r2, #20]
        hcryp->Instance->KEYR0 = *(uint32_t *)(hcryp->Init.pKey + 7U);
 8000c98:	69db      	ldr	r3, [r3, #28]
        break;
      case CRYP_KEYSIZE_128B:
        hcryp->Instance->KEYR3 = *(uint32_t *)(hcryp->Init.pKey);
        hcryp->Instance->KEYR2 = *(uint32_t *)(hcryp->Init.pKey + 1U);
        hcryp->Instance->KEYR1 = *(uint32_t *)(hcryp->Init.pKey + 2U);
        hcryp->Instance->KEYR0 = *(uint32_t *)(hcryp->Init.pKey + 3U);
 8000c9a:	6113      	str	r3, [r2, #16]
        break;
      default:
        break;
    }
  }
}
 8000c9c:	4770      	bx	lr
        hcryp->Instance->KEYR3 = *(uint32_t *)(hcryp->Init.pKey);
 8000c9e:	6802      	ldr	r2, [r0, #0]
 8000ca0:	6819      	ldr	r1, [r3, #0]
 8000ca2:	61d1      	str	r1, [r2, #28]
        hcryp->Instance->KEYR2 = *(uint32_t *)(hcryp->Init.pKey + 1U);
 8000ca4:	6859      	ldr	r1, [r3, #4]
 8000ca6:	6191      	str	r1, [r2, #24]
        hcryp->Instance->KEYR1 = *(uint32_t *)(hcryp->Init.pKey + 2U);
 8000ca8:	6899      	ldr	r1, [r3, #8]
 8000caa:	6151      	str	r1, [r2, #20]
        hcryp->Instance->KEYR0 = *(uint32_t *)(hcryp->Init.pKey + 3U);
 8000cac:	68db      	ldr	r3, [r3, #12]
 8000cae:	e7f4      	b.n	8000c9a <CRYP_SetKey+0x2c>

08000cb0 <CRYP_WaitOnCCFlag>:
  * @param  Timeout Timeout duration.
  * @note   This function can only be used in thread mode.
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_WaitOnCCFlag(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8000cb0:	b570      	push	{r4, r5, r6, lr}
 8000cb2:	4606      	mov	r6, r0
 8000cb4:	460c      	mov	r4, r1
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8000cb6:	f005 fda5 	bl	8006804 <HAL_GetTick>
 8000cba:	4605      	mov	r5, r0

  while (HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 8000cbc:	6832      	ldr	r2, [r6, #0]
 8000cbe:	6853      	ldr	r3, [r2, #4]
 8000cc0:	07db      	lsls	r3, r3, #31
 8000cc2:	d501      	bpl.n	8000cc8 <CRYP_WaitOnCCFlag+0x18>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8000cc4:	2000      	movs	r0, #0
}
 8000cc6:	bd70      	pop	{r4, r5, r6, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000cc8:	1c61      	adds	r1, r4, #1
 8000cca:	d0f8      	beq.n	8000cbe <CRYP_WaitOnCCFlag+0xe>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8000ccc:	f005 fd9a 	bl	8006804 <HAL_GetTick>
 8000cd0:	1b40      	subs	r0, r0, r5
 8000cd2:	42a0      	cmp	r0, r4
 8000cd4:	d801      	bhi.n	8000cda <CRYP_WaitOnCCFlag+0x2a>
 8000cd6:	2c00      	cmp	r4, #0
 8000cd8:	d1f0      	bne.n	8000cbc <CRYP_WaitOnCCFlag+0xc>
        return HAL_ERROR;
 8000cda:	2001      	movs	r0, #1
 8000cdc:	e7f3      	b.n	8000cc6 <CRYP_WaitOnCCFlag+0x16>
	...

08000ce0 <CRYP_GCMCCM_SetHeaderPhase>:
{
 8000ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t mask[12] = {0x0U, 0xFF000000U, 0xFFFF0000U, 0xFFFFFF00U,  /* 32-bit data type */
 8000ce4:	4e79      	ldr	r6, [pc, #484]	@ (8000ecc <CRYP_GCMCCM_SetHeaderPhase+0x1ec>)
{
 8000ce6:	4604      	mov	r4, r0
 8000ce8:	460f      	mov	r7, r1
  uint32_t mask[12] = {0x0U, 0xFF000000U, 0xFFFF0000U, 0xFFFFFF00U,  /* 32-bit data type */
 8000cea:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
 8000cec:	b08c      	sub	sp, #48	@ 0x30
  uint32_t mask[12] = {0x0U, 0xFF000000U, 0xFFFF0000U, 0xFFFFFF00U,  /* 32-bit data type */
 8000cee:	466d      	mov	r5, sp
 8000cf0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cf2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000cf4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cf6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000cfa:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  if (hcryp->Init.HeaderWidthUnit == CRYP_HEADERWIDTHUNIT_WORD)
 8000cfe:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    size_in_bytes = hcryp->Init.HeaderSize * 4U;
 8000d00:	69e5      	ldr	r5, [r4, #28]
  if (hcryp->Init.HeaderWidthUnit == CRYP_HEADERWIDTHUNIT_WORD)
 8000d02:	b903      	cbnz	r3, 8000d06 <CRYP_GCMCCM_SetHeaderPhase+0x26>
    size_in_bytes = hcryp->Init.HeaderSize * 4U;
 8000d04:	00ad      	lsls	r5, r5, #2
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_HEADER);
 8000d06:	6823      	ldr	r3, [r4, #0]
 8000d08:	681a      	ldr	r2, [r3, #0]
  if ((size_in_bytes != 0U))
 8000d0a:	2d00      	cmp	r5, #0
 8000d0c:	f000 80ce 	beq.w	8000eac <CRYP_GCMCCM_SetHeaderPhase+0x1cc>
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_HEADER);
 8000d10:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8000d14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000d18:	601a      	str	r2, [r3, #0]
    __HAL_CRYP_ENABLE(hcryp);
 8000d1a:	681a      	ldr	r2, [r3, #0]
    if ((size_in_bytes % 16U) == 0U)
 8000d1c:	f015 060f 	ands.w	r6, r5, #15
    __HAL_CRYP_ENABLE(hcryp);
 8000d20:	f042 0201 	orr.w	r2, r2, #1
 8000d24:	601a      	str	r2, [r3, #0]
    if ((size_in_bytes % 16U) == 0U)
 8000d26:	d01f      	beq.n	8000d68 <CRYP_GCMCCM_SetHeaderPhase+0x88>
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 16U) * 4U)); loopcounter += 4U)
 8000d28:	ea4f 1815 	mov.w	r8, r5, lsr #4
 8000d2c:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8000d30:	2600      	movs	r6, #0
 8000d32:	45b0      	cmp	r8, r6
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8000d34:	6823      	ldr	r3, [r4, #0]
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 16U) * 4U)); loopcounter += 4U)
 8000d36:	d85f      	bhi.n	8000df8 <CRYP_GCMCCM_SetHeaderPhase+0x118>
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 4U) % 4U)); loopcounter++)
 8000d38:	f3c5 0281 	ubfx	r2, r5, #2, #2
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	428a      	cmp	r2, r1
 8000d40:	f040 808c 	bne.w	8000e5c <CRYP_GCMCCM_SetHeaderPhase+0x17c>
      if ((size_in_bytes % 4U) == 0U)
 8000d44:	f015 0503 	ands.w	r5, r5, #3
 8000d48:	f040 8094 	bne.w	8000e74 <CRYP_GCMCCM_SetHeaderPhase+0x194>
          loopcounter++;
 8000d4c:	3101      	adds	r1, #1
        while (loopcounter < 4U)
 8000d4e:	2904      	cmp	r1, #4
          hcryp->Instance->DINR = 0x0U;
 8000d50:	609d      	str	r5, [r3, #8]
        while (loopcounter < 4U)
 8000d52:	d1fb      	bne.n	8000d4c <CRYP_GCMCCM_SetHeaderPhase+0x6c>
      if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8000d54:	4639      	mov	r1, r7
 8000d56:	4620      	mov	r0, r4
 8000d58:	f7ff ffaa 	bl	8000cb0 <CRYP_WaitOnCCFlag>
 8000d5c:	6823      	ldr	r3, [r4, #0]
 8000d5e:	2800      	cmp	r0, #0
 8000d60:	f000 809f 	beq.w	8000ea2 <CRYP_GCMCCM_SetHeaderPhase+0x1c2>
        __HAL_CRYP_DISABLE(hcryp);
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	e031      	b.n	8000dcc <CRYP_GCMCCM_SetHeaderPhase+0xec>
      for (loopcounter = 0U; (loopcounter < (size_in_bytes / 4U)); loopcounter += 4U)
 8000d68:	08ad      	lsrs	r5, r5, #2
 8000d6a:	42b5      	cmp	r5, r6
 8000d6c:	d801      	bhi.n	8000d72 <CRYP_GCMCCM_SetHeaderPhase+0x92>
  return HAL_OK;
 8000d6e:	2000      	movs	r0, #0
 8000d70:	e03a      	b.n	8000de8 <CRYP_GCMCCM_SetHeaderPhase+0x108>
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8000d72:	8fa3      	ldrh	r3, [r4, #60]	@ 0x3c
 8000d74:	69a1      	ldr	r1, [r4, #24]
 8000d76:	6822      	ldr	r2, [r4, #0]
 8000d78:	b29b      	uxth	r3, r3
        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8000d7a:	4620      	mov	r0, r4
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8000d7c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d80:	6093      	str	r3, [r2, #8]
        hcryp->CrypHeaderCount++ ;
 8000d82:	8fa3      	ldrh	r3, [r4, #60]	@ 0x3c
 8000d84:	3301      	adds	r3, #1
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	87a3      	strh	r3, [r4, #60]	@ 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8000d8a:	8fa3      	ldrh	r3, [r4, #60]	@ 0x3c
 8000d8c:	b29b      	uxth	r3, r3
 8000d8e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d92:	6093      	str	r3, [r2, #8]
        hcryp->CrypHeaderCount++ ;
 8000d94:	8fa3      	ldrh	r3, [r4, #60]	@ 0x3c
 8000d96:	3301      	adds	r3, #1
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	87a3      	strh	r3, [r4, #60]	@ 0x3c
        hcryp->Instance->DINR  = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8000d9c:	8fa3      	ldrh	r3, [r4, #60]	@ 0x3c
 8000d9e:	b29b      	uxth	r3, r3
 8000da0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000da4:	6093      	str	r3, [r2, #8]
        hcryp->CrypHeaderCount++ ;
 8000da6:	8fa3      	ldrh	r3, [r4, #60]	@ 0x3c
 8000da8:	3301      	adds	r3, #1
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	87a3      	strh	r3, [r4, #60]	@ 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8000dae:	8fa3      	ldrh	r3, [r4, #60]	@ 0x3c
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000db6:	6093      	str	r3, [r2, #8]
        hcryp->CrypHeaderCount++ ;
 8000db8:	8fa3      	ldrh	r3, [r4, #60]	@ 0x3c
 8000dba:	3301      	adds	r3, #1
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	87a3      	strh	r3, [r4, #60]	@ 0x3c
        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8000dc0:	4639      	mov	r1, r7
 8000dc2:	f7ff ff75 	bl	8000cb0 <CRYP_WaitOnCCFlag>
 8000dc6:	6823      	ldr	r3, [r4, #0]
          __HAL_CRYP_DISABLE(hcryp);
 8000dc8:	681a      	ldr	r2, [r3, #0]
        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8000dca:	b180      	cbz	r0, 8000dee <CRYP_GCMCCM_SetHeaderPhase+0x10e>
        __HAL_CRYP_DISABLE(hcryp);
 8000dcc:	f022 0201 	bic.w	r2, r2, #1
 8000dd0:	601a      	str	r2, [r3, #0]
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8000dd2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000dd4:	f043 0310 	orr.w	r3, r3, #16
 8000dd8:	6563      	str	r3, [r4, #84]	@ 0x54
        hcryp->State = HAL_CRYP_STATE_READY;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hcryp);
 8000de0:	2300      	movs	r3, #0
 8000de2:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
          return HAL_ERROR;
 8000de6:	2001      	movs	r0, #1
}
 8000de8:	b00c      	add	sp, #48	@ 0x30
 8000dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8000dee:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000df2:	601a      	str	r2, [r3, #0]
      for (loopcounter = 0U; (loopcounter < (size_in_bytes / 4U)); loopcounter += 4U)
 8000df4:	3604      	adds	r6, #4
 8000df6:	e7b8      	b.n	8000d6a <CRYP_GCMCCM_SetHeaderPhase+0x8a>
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8000df8:	8fa2      	ldrh	r2, [r4, #60]	@ 0x3c
 8000dfa:	69a1      	ldr	r1, [r4, #24]
 8000dfc:	b292      	uxth	r2, r2
        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8000dfe:	4620      	mov	r0, r4
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8000e00:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000e04:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8000e06:	8fa2      	ldrh	r2, [r4, #60]	@ 0x3c
 8000e08:	3201      	adds	r2, #1
 8000e0a:	b292      	uxth	r2, r2
 8000e0c:	87a2      	strh	r2, [r4, #60]	@ 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8000e0e:	8fa2      	ldrh	r2, [r4, #60]	@ 0x3c
 8000e10:	b292      	uxth	r2, r2
 8000e12:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000e16:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8000e18:	8fa2      	ldrh	r2, [r4, #60]	@ 0x3c
 8000e1a:	3201      	adds	r2, #1
 8000e1c:	b292      	uxth	r2, r2
 8000e1e:	87a2      	strh	r2, [r4, #60]	@ 0x3c
        hcryp->Instance->DINR  = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8000e20:	8fa2      	ldrh	r2, [r4, #60]	@ 0x3c
 8000e22:	b292      	uxth	r2, r2
 8000e24:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000e28:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8000e2a:	8fa2      	ldrh	r2, [r4, #60]	@ 0x3c
 8000e2c:	3201      	adds	r2, #1
 8000e2e:	b292      	uxth	r2, r2
 8000e30:	87a2      	strh	r2, [r4, #60]	@ 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8000e32:	8fa2      	ldrh	r2, [r4, #60]	@ 0x3c
 8000e34:	b292      	uxth	r2, r2
 8000e36:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000e3a:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8000e3c:	8fa3      	ldrh	r3, [r4, #60]	@ 0x3c
 8000e3e:	3301      	adds	r3, #1
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	87a3      	strh	r3, [r4, #60]	@ 0x3c
        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8000e44:	4639      	mov	r1, r7
 8000e46:	f7ff ff33 	bl	8000cb0 <CRYP_WaitOnCCFlag>
 8000e4a:	6823      	ldr	r3, [r4, #0]
          __HAL_CRYP_DISABLE(hcryp);
 8000e4c:	681a      	ldr	r2, [r3, #0]
        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8000e4e:	2800      	cmp	r0, #0
 8000e50:	d1bc      	bne.n	8000dcc <CRYP_GCMCCM_SetHeaderPhase+0xec>
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8000e52:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000e56:	601a      	str	r2, [r3, #0]
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 16U) * 4U)); loopcounter += 4U)
 8000e58:	3604      	adds	r6, #4
 8000e5a:	e76a      	b.n	8000d32 <CRYP_GCMCCM_SetHeaderPhase+0x52>
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8000e5c:	8fa0      	ldrh	r0, [r4, #60]	@ 0x3c
 8000e5e:	69a6      	ldr	r6, [r4, #24]
 8000e60:	b280      	uxth	r0, r0
 8000e62:	3101      	adds	r1, #1
 8000e64:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8000e68:	6098      	str	r0, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8000e6a:	8fa0      	ldrh	r0, [r4, #60]	@ 0x3c
 8000e6c:	3001      	adds	r0, #1
 8000e6e:	b280      	uxth	r0, r0
 8000e70:	87a0      	strh	r0, [r4, #60]	@ 0x3c
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 4U) % 4U)); loopcounter++)
 8000e72:	e764      	b.n	8000d3e <CRYP_GCMCCM_SetHeaderPhase+0x5e>
         tmp =  *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8000e74:	8fa1      	ldrh	r1, [r4, #60]	@ 0x3c
 8000e76:	69a0      	ldr	r0, [r4, #24]
 8000e78:	b289      	uxth	r1, r1
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 4U) % 4U)); loopcounter++)
 8000e7a:	3201      	adds	r2, #1
         tmp =  *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8000e7c:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
         tmp &= mask[(hcryp->Init.DataType * 2U) + (size_in_bytes % 4U)];
 8000e80:	6860      	ldr	r0, [r4, #4]
 8000e82:	eb05 0540 	add.w	r5, r5, r0, lsl #1
 8000e86:	a80c      	add	r0, sp, #48	@ 0x30
 8000e88:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8000e8c:	f855 0c30 	ldr.w	r0, [r5, #-48]
 8000e90:	4001      	ands	r1, r0
         hcryp->Instance->DINR = tmp;
 8000e92:	6099      	str	r1, [r3, #8]
           hcryp->Instance->DINR = 0x0U;
 8000e94:	2100      	movs	r1, #0
         while (loopcounter < 4U)
 8000e96:	2a04      	cmp	r2, #4
 8000e98:	f43f af5c 	beq.w	8000d54 <CRYP_GCMCCM_SetHeaderPhase+0x74>
           hcryp->Instance->DINR = 0x0U;
 8000e9c:	6099      	str	r1, [r3, #8]
           loopcounter++;
 8000e9e:	3201      	adds	r2, #1
 8000ea0:	e7f9      	b.n	8000e96 <CRYP_GCMCCM_SetHeaderPhase+0x1b6>
      __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	e760      	b.n	8000d6e <CRYP_GCMCCM_SetHeaderPhase+0x8e>
    MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE, hcryp->Init.DataType);
 8000eac:	6861      	ldr	r1, [r4, #4]
 8000eae:	f022 0206 	bic.w	r2, r2, #6
 8000eb2:	430a      	orrs	r2, r1
 8000eb4:	601a      	str	r2, [r3, #0]
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_HEADER);
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8000ebc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000ec0:	601a      	str	r2, [r3, #0]
    __HAL_CRYP_ENABLE(hcryp);
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	f042 0201 	orr.w	r2, r2, #1
 8000ec8:	e7ee      	b.n	8000ea8 <CRYP_GCMCCM_SetHeaderPhase+0x1c8>
 8000eca:	bf00      	nop
 8000ecc:	08006c40 	.word	0x08006c40

08000ed0 <HAL_CRYP_Init>:
{
 8000ed0:	b510      	push	{r4, lr}
  if (hcryp == NULL)
 8000ed2:	4604      	mov	r4, r0
 8000ed4:	b1e8      	cbz	r0, 8000f12 <HAL_CRYP_Init+0x42>
  if (hcryp->State == HAL_CRYP_STATE_RESET)
 8000ed6:	f890 3051 	ldrb.w	r3, [r0, #81]	@ 0x51
 8000eda:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8000ede:	b91b      	cbnz	r3, 8000ee8 <HAL_CRYP_Init+0x18>
    hcryp->Lock = HAL_UNLOCKED;
 8000ee0:	f880 2050 	strb.w	r2, [r0, #80]	@ 0x50
    HAL_CRYP_MspInit(hcryp);
 8000ee4:	f7ff fc72 	bl	80007cc <HAL_CRYP_MspInit>
  MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE | AES_CR_KEYSIZE | AES_CR_CHMOD, hcryp->Init.DataType | hcryp->Init.KeySize | hcryp->Init.Algorithm);
 8000ee8:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8000eec:	6821      	ldr	r1, [r4, #0]
 8000eee:	680a      	ldr	r2, [r1, #0]
 8000ef0:	4303      	orrs	r3, r0
 8000ef2:	6960      	ldr	r0, [r4, #20]
 8000ef4:	f422 22a0 	bic.w	r2, r2, #327680	@ 0x50000
 8000ef8:	4303      	orrs	r3, r0
 8000efa:	f022 0266 	bic.w	r2, r2, #102	@ 0x66
 8000efe:	4313      	orrs	r3, r2
 8000f00:	600b      	str	r3, [r1, #0]
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 8000f02:	2000      	movs	r0, #0
  hcryp->State = HAL_CRYP_STATE_READY;
 8000f04:	2301      	movs	r3, #1
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 8000f06:	6560      	str	r0, [r4, #84]	@ 0x54
  hcryp->KeyIVConfig = 0U;
 8000f08:	65a0      	str	r0, [r4, #88]	@ 0x58
  hcryp->State = HAL_CRYP_STATE_READY;
 8000f0a:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hcryp->Phase = CRYP_PHASE_READY;
 8000f0e:	6463      	str	r3, [r4, #68]	@ 0x44
}
 8000f10:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000f12:	2001      	movs	r0, #1
 8000f14:	e7fc      	b.n	8000f10 <HAL_CRYP_Init+0x40>

08000f16 <HAL_CRYP_DeInit>:
{
 8000f16:	b538      	push	{r3, r4, r5, lr}
  if (hcryp == NULL)
 8000f18:	4605      	mov	r5, r0
 8000f1a:	2401      	movs	r4, #1
 8000f1c:	b180      	cbz	r0, 8000f40 <HAL_CRYP_DeInit+0x2a>
  __HAL_CRYP_DISABLE(hcryp);
 8000f1e:	6802      	ldr	r2, [r0, #0]
  hcryp->Phase = CRYP_PHASE_READY;
 8000f20:	6444      	str	r4, [r0, #68]	@ 0x44
  hcryp->CrypInCount = 0;
 8000f22:	2400      	movs	r4, #0
 8000f24:	87c4      	strh	r4, [r0, #62]	@ 0x3e
  hcryp->CrypOutCount = 0;
 8000f26:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
  hcryp->CrypHeaderCount = 0;
 8000f2a:	8784      	strh	r4, [r0, #60]	@ 0x3c
  __HAL_CRYP_DISABLE(hcryp);
 8000f2c:	6813      	ldr	r3, [r2, #0]
 8000f2e:	f023 0301 	bic.w	r3, r3, #1
 8000f32:	6013      	str	r3, [r2, #0]
  HAL_CRYP_MspDeInit(hcryp);
 8000f34:	f7ff fc62 	bl	80007fc <HAL_CRYP_MspDeInit>
  hcryp->State = HAL_CRYP_STATE_RESET;
 8000f38:	f885 4051 	strb.w	r4, [r5, #81]	@ 0x51
  __HAL_UNLOCK(hcryp);
 8000f3c:	f885 4050 	strb.w	r4, [r5, #80]	@ 0x50
    return HAL_ERROR;
 8000f40:	4620      	mov	r0, r4
}
 8000f42:	bd38      	pop	{r3, r4, r5, pc}

08000f44 <HAL_CRYP_ErrorCallback>:
__weak void HAL_CRYP_ErrorCallback(CRYP_HandleTypeDef *hcryp)
 8000f44:	4770      	bx	lr

08000f46 <CRYP_AES_ProcessData>:
{
 8000f46:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8000f48:	8fc3      	ldrh	r3, [r0, #62]	@ 0x3e
 8000f4a:	6b45      	ldr	r5, [r0, #52]	@ 0x34
 8000f4c:	6802      	ldr	r2, [r0, #0]
 8000f4e:	b29b      	uxth	r3, r3
{
 8000f50:	4604      	mov	r4, r0
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8000f52:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8000f56:	6093      	str	r3, [r2, #8]
  hcryp->CrypInCount++;
 8000f58:	8fc3      	ldrh	r3, [r0, #62]	@ 0x3e
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	87c3      	strh	r3, [r0, #62]	@ 0x3e
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8000f60:	8fc3      	ldrh	r3, [r0, #62]	@ 0x3e
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8000f68:	6093      	str	r3, [r2, #8]
  hcryp->CrypInCount++;
 8000f6a:	8fc3      	ldrh	r3, [r0, #62]	@ 0x3e
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	87c3      	strh	r3, [r0, #62]	@ 0x3e
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8000f72:	8fc3      	ldrh	r3, [r0, #62]	@ 0x3e
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8000f7a:	6093      	str	r3, [r2, #8]
  hcryp->CrypInCount++;
 8000f7c:	8fc3      	ldrh	r3, [r0, #62]	@ 0x3e
 8000f7e:	3301      	adds	r3, #1
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	87c3      	strh	r3, [r0, #62]	@ 0x3e
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8000f84:	8fc3      	ldrh	r3, [r0, #62]	@ 0x3e
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8000f8c:	6093      	str	r3, [r2, #8]
  hcryp->CrypInCount++;
 8000f8e:	8fc3      	ldrh	r3, [r0, #62]	@ 0x3e
 8000f90:	3301      	adds	r3, #1
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	87c3      	strh	r3, [r0, #62]	@ 0x3e
  if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8000f96:	f7ff fe8b 	bl	8000cb0 <CRYP_WaitOnCCFlag>
 8000f9a:	b188      	cbz	r0, 8000fc0 <CRYP_AES_ProcessData+0x7a>
    __HAL_CRYP_DISABLE(hcryp);
 8000f9c:	6822      	ldr	r2, [r4, #0]
 8000f9e:	6813      	ldr	r3, [r2, #0]
 8000fa0:	f023 0301 	bic.w	r3, r3, #1
 8000fa4:	6013      	str	r3, [r2, #0]
    hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8000fa6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000fa8:	f043 0310 	orr.w	r3, r3, #16
 8000fac:	6563      	str	r3, [r4, #84]	@ 0x54
    hcryp->State = HAL_CRYP_STATE_READY;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
    __HAL_UNLOCK(hcryp);
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    HAL_CRYP_ErrorCallback(hcryp);
 8000fba:	4620      	mov	r0, r4
 8000fbc:	f7ff ffc2 	bl	8000f44 <HAL_CRYP_ErrorCallback>
  __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8000fc0:	6823      	ldr	r3, [r4, #0]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000fc8:	601a      	str	r2, [r3, #0]
    temp[i] = hcryp->Instance->DOUTR;
 8000fca:	68da      	ldr	r2, [r3, #12]
 8000fcc:	9200      	str	r2, [sp, #0]
 8000fce:	68da      	ldr	r2, [r3, #12]
 8000fd0:	9201      	str	r2, [sp, #4]
 8000fd2:	68da      	ldr	r2, [r3, #12]
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	9303      	str	r3, [sp, #12]
  while((hcryp->CrypOutCount < ((hcryp->Size + 3U)/4U)) && (i<4U))
 8000fd8:	f8b4 3042 	ldrh.w	r3, [r4, #66]	@ 0x42
    temp[i] = hcryp->Instance->DOUTR;
 8000fdc:	9202      	str	r2, [sp, #8]
  while((hcryp->CrypOutCount < ((hcryp->Size + 3U)/4U)) && (i<4U))
 8000fde:	3303      	adds	r3, #3
 8000fe0:	089b      	lsrs	r3, r3, #2
 8000fe2:	4668      	mov	r0, sp
  i= 0U;
 8000fe4:	2100      	movs	r1, #0
  while((hcryp->CrypOutCount < ((hcryp->Size + 3U)/4U)) && (i<4U))
 8000fe6:	f8b4 2040 	ldrh.w	r2, [r4, #64]	@ 0x40
 8000fea:	b292      	uxth	r2, r2
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d201      	bcs.n	8000ff4 <CRYP_AES_ProcessData+0xae>
 8000ff0:	2904      	cmp	r1, #4
 8000ff2:	d101      	bne.n	8000ff8 <CRYP_AES_ProcessData+0xb2>
}
 8000ff4:	b004      	add	sp, #16
 8000ff6:	bd70      	pop	{r4, r5, r6, pc}
    *(uint32_t *)(hcryp->pCrypOutBuffPtr + hcryp->CrypOutCount) = temp[i];
 8000ff8:	f8b4 2040 	ldrh.w	r2, [r4, #64]	@ 0x40
 8000ffc:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8000ffe:	f850 6b04 	ldr.w	r6, [r0], #4
 8001002:	b292      	uxth	r2, r2
    i++;
 8001004:	3101      	adds	r1, #1
    *(uint32_t *)(hcryp->pCrypOutBuffPtr + hcryp->CrypOutCount) = temp[i];
 8001006:	f845 6022 	str.w	r6, [r5, r2, lsl #2]
    hcryp->CrypOutCount++;
 800100a:	f8b4 2040 	ldrh.w	r2, [r4, #64]	@ 0x40
 800100e:	3201      	adds	r2, #1
 8001010:	b292      	uxth	r2, r2
 8001012:	f8a4 2040 	strh.w	r2, [r4, #64]	@ 0x40
    i++;
 8001016:	e7e6      	b.n	8000fe6 <CRYP_AES_ProcessData+0xa0>

08001018 <CRYP_AESCCM_Process>:
{
 8001018:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 800101c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
  uint32_t wordsize = ((uint32_t)hcryp->Size / 4U) ;
 800101e:	f8b0 5042 	ldrh.w	r5, [r0, #66]	@ 0x42
  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 8001022:	2b01      	cmp	r3, #1
{
 8001024:	4604      	mov	r4, r0
 8001026:	460e      	mov	r6, r1
  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 8001028:	d121      	bne.n	800106e <CRYP_AESCCM_Process+0x56>
    if (hcryp->KeyIVConfig == 1U)
 800102a:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 800102c:	2a01      	cmp	r2, #1
 800102e:	d11d      	bne.n	800106c <CRYP_AESCCM_Process+0x54>
      hcryp->SizesSum += hcryp->Size; /* Compute message total payload length */
 8001030:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8001032:	442b      	add	r3, r5
 8001034:	65c3      	str	r3, [r0, #92]	@ 0x5c
  if ((hcryp->Size % 16U) != 0U)
 8001036:	f8b4 3042 	ldrh.w	r3, [r4, #66]	@ 0x42
  uint32_t wordsize = ((uint32_t)hcryp->Size / 4U) ;
 800103a:	08ad      	lsrs	r5, r5, #2
  if ((hcryp->Size % 16U) != 0U)
 800103c:	0718      	lsls	r0, r3, #28
    wordsize = ((wordsize / 4U) * 4U) ;
 800103e:	bf18      	it	ne
 8001040:	f025 0503 	bicne.w	r5, r5, #3
  tickstart = HAL_GetTick();
 8001044:	f005 fbde 	bl	8006804 <HAL_GetTick>
 8001048:	4607      	mov	r7, r0
    incount = hcryp->CrypInCount;
 800104a:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
    outcount = hcryp->CrypOutCount;
 800104c:	f8b4 3040 	ldrh.w	r3, [r4, #64]	@ 0x40
    incount = hcryp->CrypInCount;
 8001050:	b292      	uxth	r2, r2
  while ((incount < wordsize) && (outcount < wordsize))
 8001052:	4295      	cmp	r5, r2
    outcount = hcryp->CrypOutCount;
 8001054:	b29b      	uxth	r3, r3
  while ((incount < wordsize) && (outcount < wordsize))
 8001056:	d901      	bls.n	800105c <CRYP_AESCCM_Process+0x44>
 8001058:	429d      	cmp	r5, r3
 800105a:	d84b      	bhi.n	80010f4 <CRYP_AESCCM_Process+0xdc>
  if ((hcryp->Size % 16U) != 0U)
 800105c:	f8b4 5042 	ldrh.w	r5, [r4, #66]	@ 0x42
 8001060:	072a      	lsls	r2, r5, #28
 8001062:	d164      	bne.n	800112e <CRYP_AESCCM_Process+0x116>
  return HAL_OK;
 8001064:	2000      	movs	r0, #0
}
 8001066:	b004      	add	sp, #16
 8001068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      hcryp->KeyIVConfig = 1U;
 800106c:	6583      	str	r3, [r0, #88]	@ 0x58
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_INIT);
 800106e:	6827      	ldr	r7, [r4, #0]
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8001070:	68a1      	ldr	r1, [r4, #8]
    hcryp->SizesSum = hcryp->Size;
 8001072:	65e5      	str	r5, [r4, #92]	@ 0x5c
    hcryp->CrypHeaderCount = 0U;
 8001074:	f04f 0800 	mov.w	r8, #0
 8001078:	f8a4 803c 	strh.w	r8, [r4, #60]	@ 0x3c
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_INIT);
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8001082:	603b      	str	r3, [r7, #0]
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8001084:	4620      	mov	r0, r4
 8001086:	f7ff fdf2 	bl	8000c6e <CRYP_SetKey>
    hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.B0);
 800108a:	6a23      	ldr	r3, [r4, #32]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	62fa      	str	r2, [r7, #44]	@ 0x2c
    hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.B0 + 1U);
 8001090:	685a      	ldr	r2, [r3, #4]
 8001092:	62ba      	str	r2, [r7, #40]	@ 0x28
    hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.B0 + 2U);
 8001094:	689a      	ldr	r2, [r3, #8]
 8001096:	627a      	str	r2, [r7, #36]	@ 0x24
    hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.B0 + 3U);
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	623b      	str	r3, [r7, #32]
    __HAL_CRYP_ENABLE(hcryp);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	f043 0301 	orr.w	r3, r3, #1
 80010a2:	603b      	str	r3, [r7, #0]
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 80010a4:	4631      	mov	r1, r6
 80010a6:	f7ff fe03 	bl	8000cb0 <CRYP_WaitOnCCFlag>
 80010aa:	b150      	cbz	r0, 80010c2 <CRYP_AESCCM_Process+0xaa>
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 80010ac:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      __HAL_UNLOCK(hcryp);
 80010ae:	f884 8050 	strb.w	r8, [r4, #80]	@ 0x50
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 80010b2:	f043 0310 	orr.w	r3, r3, #16
 80010b6:	6563      	str	r3, [r4, #84]	@ 0x54
      hcryp->State = HAL_CRYP_STATE_READY;
 80010b8:	2301      	movs	r3, #1
 80010ba:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
      return HAL_ERROR;
 80010be:	2001      	movs	r0, #1
 80010c0:	e7d1      	b.n	8001066 <CRYP_AESCCM_Process+0x4e>
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 80010c2:	6822      	ldr	r2, [r4, #0]
 80010c4:	6813      	ldr	r3, [r2, #0]
 80010c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010ca:	6013      	str	r3, [r2, #0]
    if (CRYP_GCMCCM_SetHeaderPhase(hcryp,  Timeout) != HAL_OK)
 80010cc:	4631      	mov	r1, r6
 80010ce:	4620      	mov	r0, r4
 80010d0:	f7ff fe06 	bl	8000ce0 <CRYP_GCMCCM_SetHeaderPhase>
 80010d4:	2800      	cmp	r0, #0
 80010d6:	d1f2      	bne.n	80010be <CRYP_AESCCM_Process+0xa6>
    MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, CRYP_PHASE_PAYLOAD);
 80010d8:	6822      	ldr	r2, [r4, #0]
    hcryp->Phase = CRYP_PHASE_PROCESS;
 80010da:	2302      	movs	r3, #2
 80010dc:	6463      	str	r3, [r4, #68]	@ 0x44
    MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, CRYP_PHASE_PAYLOAD);
 80010de:	6813      	ldr	r3, [r2, #0]
 80010e0:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 80010e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010e8:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, 0U);
 80010ea:	6813      	ldr	r3, [r2, #0]
 80010ec:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80010f0:	6013      	str	r3, [r2, #0]
 80010f2:	e7a0      	b.n	8001036 <CRYP_AESCCM_Process+0x1e>
    CRYP_AES_ProcessData(hcryp, Timeout);
 80010f4:	4631      	mov	r1, r6
 80010f6:	4620      	mov	r0, r4
 80010f8:	f7ff ff25 	bl	8000f46 <CRYP_AES_ProcessData>
    if (Timeout != HAL_MAX_DELAY)
 80010fc:	1c71      	adds	r1, r6, #1
 80010fe:	d0a4      	beq.n	800104a <CRYP_AESCCM_Process+0x32>
      if (((HAL_GetTick() - tickstart) > Timeout) ||(Timeout == 0U))
 8001100:	f005 fb80 	bl	8006804 <HAL_GetTick>
 8001104:	1bc0      	subs	r0, r0, r7
 8001106:	42b0      	cmp	r0, r6
 8001108:	d801      	bhi.n	800110e <CRYP_AESCCM_Process+0xf6>
 800110a:	2e00      	cmp	r6, #0
 800110c:	d19d      	bne.n	800104a <CRYP_AESCCM_Process+0x32>
        __HAL_CRYP_DISABLE(hcryp);
 800110e:	6822      	ldr	r2, [r4, #0]
 8001110:	6813      	ldr	r3, [r2, #0]
 8001112:	f023 0301 	bic.w	r3, r3, #1
 8001116:	6013      	str	r3, [r2, #0]
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8001118:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800111a:	f043 0310 	orr.w	r3, r3, #16
 800111e:	6563      	str	r3, [r4, #84]	@ 0x54
      hcryp->State = HAL_CRYP_STATE_READY;
 8001120:	2301      	movs	r3, #1
 8001122:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
      __HAL_UNLOCK(hcryp);
 8001126:	2300      	movs	r3, #0
 8001128:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
      return HAL_ERROR;
 800112c:	e7c7      	b.n	80010be <CRYP_AESCCM_Process+0xa6>
    if ((hcryp->Instance->CR & AES_CR_MODE) == CRYP_OPERATINGMODE_DECRYPT)
 800112e:	6822      	ldr	r2, [r4, #0]
 8001130:	6811      	ldr	r1, [r2, #0]
 8001132:	f001 0118 	and.w	r1, r1, #24
 8001136:	2910      	cmp	r1, #16
      MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, npblb << 20);
 8001138:	bf08      	it	eq
 800113a:	6811      	ldreq	r1, [r2, #0]
    npblb = ((((uint32_t)hcryp->Size / 16U) + 1U) * 16U) - ((uint32_t)hcryp->Size);
 800113c:	ea4f 1315 	mov.w	r3, r5, lsr #4
 8001140:	f103 0301 	add.w	r3, r3, #1
      MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, npblb << 20);
 8001144:	bf08      	it	eq
 8001146:	f421 0170 	biceq.w	r1, r1, #15728640	@ 0xf00000
    npblb = ((((uint32_t)hcryp->Size / 16U) + 1U) * 16U) - ((uint32_t)hcryp->Size);
 800114a:	ea4f 1003 	mov.w	r0, r3, lsl #4
 800114e:	ebc5 1303 	rsb	r3, r5, r3, lsl #4
      lastwordsize = (16U - npblb) / 4U;
 8001152:	f105 0510 	add.w	r5, r5, #16
      MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, npblb << 20);
 8001156:	bf08      	it	eq
 8001158:	ea41 5103 	orreq.w	r1, r1, r3, lsl #20
      lastwordsize = (16U - npblb) / 4U;
 800115c:	eba5 0500 	sub.w	r5, r5, r0
      MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, npblb << 20);
 8001160:	bf08      	it	eq
 8001162:	6011      	streq	r1, [r2, #0]
      lastwordsize = (16U - npblb) / 4U;
 8001164:	08ad      	lsrs	r5, r5, #2
    if ((npblb % 4U) == 0U)
 8001166:	079b      	lsls	r3, r3, #30
      lastwordsize = ((16U - npblb) / 4U) + 1U;
 8001168:	bf18      	it	ne
 800116a:	3501      	addne	r5, #1
    for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter ++)
 800116c:	2100      	movs	r1, #0
 800116e:	42a9      	cmp	r1, r5
 8001170:	d12a      	bne.n	80011c8 <CRYP_AESCCM_Process+0x1b0>
 8001172:	462b      	mov	r3, r5
      hcryp->Instance->DINR  = 0U;
 8001174:	2100      	movs	r1, #0
    while (loopcounter < 4U)
 8001176:	2b03      	cmp	r3, #3
 8001178:	d932      	bls.n	80011e0 <CRYP_AESCCM_Process+0x1c8>
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 800117a:	4631      	mov	r1, r6
 800117c:	4620      	mov	r0, r4
 800117e:	f7ff fd97 	bl	8000cb0 <CRYP_WaitOnCCFlag>
 8001182:	2800      	cmp	r0, #0
 8001184:	d1c8      	bne.n	8001118 <CRYP_AESCCM_Process+0x100>
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8001186:	6823      	ldr	r3, [r4, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800118e:	601a      	str	r2, [r3, #0]
      temp[loopcounter] = hcryp->Instance->DOUTR;
 8001190:	68da      	ldr	r2, [r3, #12]
 8001192:	9200      	str	r2, [sp, #0]
 8001194:	68da      	ldr	r2, [r3, #12]
 8001196:	9201      	str	r2, [sp, #4]
 8001198:	68da      	ldr	r2, [r3, #12]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	9202      	str	r2, [sp, #8]
 800119e:	9303      	str	r3, [sp, #12]
    for (loopcounter = 0U; loopcounter < 4U; loopcounter++)
 80011a0:	466a      	mov	r2, sp
    for (loopcounter = 0U; loopcounter<lastwordsize; loopcounter++)
 80011a2:	42a8      	cmp	r0, r5
 80011a4:	f43f af5e 	beq.w	8001064 <CRYP_AESCCM_Process+0x4c>
      *(uint32_t *)(hcryp->pCrypOutBuffPtr + hcryp->CrypOutCount) = temp[loopcounter];
 80011a8:	f8b4 3040 	ldrh.w	r3, [r4, #64]	@ 0x40
 80011ac:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80011ae:	f852 6b04 	ldr.w	r6, [r2], #4
 80011b2:	b29b      	uxth	r3, r3
    for (loopcounter = 0U; loopcounter<lastwordsize; loopcounter++)
 80011b4:	3001      	adds	r0, #1
      *(uint32_t *)(hcryp->pCrypOutBuffPtr + hcryp->CrypOutCount) = temp[loopcounter];
 80011b6:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
      hcryp->CrypOutCount++;
 80011ba:	f8b4 3040 	ldrh.w	r3, [r4, #64]	@ 0x40
 80011be:	3301      	adds	r3, #1
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
    for (loopcounter = 0U; loopcounter<lastwordsize; loopcounter++)
 80011c6:	e7ec      	b.n	80011a2 <CRYP_AESCCM_Process+0x18a>
      hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 80011c8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80011ca:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80011cc:	b29b      	uxth	r3, r3
    for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter ++)
 80011ce:	3101      	adds	r1, #1
      hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 80011d0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80011d4:	6093      	str	r3, [r2, #8]
      hcryp->CrypInCount++;
 80011d6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80011d8:	3301      	adds	r3, #1
 80011da:	b29b      	uxth	r3, r3
 80011dc:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter ++)
 80011de:	e7c6      	b.n	800116e <CRYP_AESCCM_Process+0x156>
      hcryp->Instance->DINR  = 0U;
 80011e0:	6091      	str	r1, [r2, #8]
      loopcounter++;
 80011e2:	3301      	adds	r3, #1
 80011e4:	e7c7      	b.n	8001176 <CRYP_AESCCM_Process+0x15e>

080011e6 <CRYP_AESGCM_Process>:
{
 80011e6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 80011ea:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
  uint32_t wordsize = ((uint32_t)hcryp->Size / 4U) ;
 80011ec:	f8b0 5042 	ldrh.w	r5, [r0, #66]	@ 0x42
  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 80011f0:	2b01      	cmp	r3, #1
{
 80011f2:	4604      	mov	r4, r0
 80011f4:	460e      	mov	r6, r1
  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 80011f6:	d121      	bne.n	800123c <CRYP_AESGCM_Process+0x56>
    if (hcryp->KeyIVConfig == 1U)
 80011f8:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 80011fa:	2a01      	cmp	r2, #1
 80011fc:	d11d      	bne.n	800123a <CRYP_AESGCM_Process+0x54>
      hcryp->SizesSum += hcryp->Size; /* Compute message total payload length */
 80011fe:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8001200:	442b      	add	r3, r5
 8001202:	65c3      	str	r3, [r0, #92]	@ 0x5c
  if ((hcryp->Size % 16U) != 0U)
 8001204:	f8b4 3042 	ldrh.w	r3, [r4, #66]	@ 0x42
  uint32_t wordsize = ((uint32_t)hcryp->Size / 4U) ;
 8001208:	08ad      	lsrs	r5, r5, #2
  if ((hcryp->Size % 16U) != 0U)
 800120a:	0718      	lsls	r0, r3, #28
    wordsize = ((wordsize / 4U) * 4U) ;
 800120c:	bf18      	it	ne
 800120e:	f025 0503 	bicne.w	r5, r5, #3
  tickstart = HAL_GetTick();
 8001212:	f005 faf7 	bl	8006804 <HAL_GetTick>
 8001216:	4607      	mov	r7, r0
    incount = hcryp->CrypInCount;
 8001218:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
    outcount = hcryp->CrypOutCount;
 800121a:	f8b4 3040 	ldrh.w	r3, [r4, #64]	@ 0x40
    incount = hcryp->CrypInCount;
 800121e:	b292      	uxth	r2, r2
  while ((incount < wordsize) && (outcount < wordsize))
 8001220:	4295      	cmp	r5, r2
    outcount = hcryp->CrypOutCount;
 8001222:	b29b      	uxth	r3, r3
  while ((incount < wordsize) && (outcount < wordsize))
 8001224:	d901      	bls.n	800122a <CRYP_AESGCM_Process+0x44>
 8001226:	429d      	cmp	r5, r3
 8001228:	d84b      	bhi.n	80012c2 <CRYP_AESGCM_Process+0xdc>
  if ((hcryp->Size % 16U) != 0U)
 800122a:	f8b4 5042 	ldrh.w	r5, [r4, #66]	@ 0x42
 800122e:	072a      	lsls	r2, r5, #28
 8001230:	d164      	bne.n	80012fc <CRYP_AESGCM_Process+0x116>
  return HAL_OK;
 8001232:	2000      	movs	r0, #0
}
 8001234:	b004      	add	sp, #16
 8001236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      hcryp->KeyIVConfig = 1U;
 800123a:	6583      	str	r3, [r0, #88]	@ 0x58
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_INIT);
 800123c:	6827      	ldr	r7, [r4, #0]
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 800123e:	68a1      	ldr	r1, [r4, #8]
    hcryp->SizesSum = hcryp->Size;
 8001240:	65e5      	str	r5, [r4, #92]	@ 0x5c
    hcryp->CrypHeaderCount = 0U;
 8001242:	f04f 0800 	mov.w	r8, #0
 8001246:	f8a4 803c 	strh.w	r8, [r4, #60]	@ 0x3c
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_INIT);
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8001250:	603b      	str	r3, [r7, #0]
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8001252:	4620      	mov	r0, r4
 8001254:	f7ff fd0b 	bl	8000c6e <CRYP_SetKey>
    hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 8001258:	6923      	ldr	r3, [r4, #16]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	62fa      	str	r2, [r7, #44]	@ 0x2c
    hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1U);
 800125e:	685a      	ldr	r2, [r3, #4]
 8001260:	62ba      	str	r2, [r7, #40]	@ 0x28
    hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2U);
 8001262:	689a      	ldr	r2, [r3, #8]
 8001264:	627a      	str	r2, [r7, #36]	@ 0x24
    hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3U);
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	623b      	str	r3, [r7, #32]
    __HAL_CRYP_ENABLE(hcryp);
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	603b      	str	r3, [r7, #0]
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8001272:	4631      	mov	r1, r6
 8001274:	f7ff fd1c 	bl	8000cb0 <CRYP_WaitOnCCFlag>
 8001278:	b150      	cbz	r0, 8001290 <CRYP_AESGCM_Process+0xaa>
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 800127a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      __HAL_UNLOCK(hcryp);
 800127c:	f884 8050 	strb.w	r8, [r4, #80]	@ 0x50
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8001280:	f043 0310 	orr.w	r3, r3, #16
 8001284:	6563      	str	r3, [r4, #84]	@ 0x54
      hcryp->State = HAL_CRYP_STATE_READY;
 8001286:	2301      	movs	r3, #1
 8001288:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
      return HAL_ERROR;
 800128c:	2001      	movs	r0, #1
 800128e:	e7d1      	b.n	8001234 <CRYP_AESGCM_Process+0x4e>
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8001290:	6822      	ldr	r2, [r4, #0]
 8001292:	6813      	ldr	r3, [r2, #0]
 8001294:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001298:	6013      	str	r3, [r2, #0]
    if (CRYP_GCMCCM_SetHeaderPhase(hcryp,  Timeout) != HAL_OK)
 800129a:	4631      	mov	r1, r6
 800129c:	4620      	mov	r0, r4
 800129e:	f7ff fd1f 	bl	8000ce0 <CRYP_GCMCCM_SetHeaderPhase>
 80012a2:	2800      	cmp	r0, #0
 80012a4:	d1f2      	bne.n	800128c <CRYP_AESGCM_Process+0xa6>
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_PAYLOAD);
 80012a6:	6822      	ldr	r2, [r4, #0]
    hcryp->Phase = CRYP_PHASE_PROCESS;
 80012a8:	2302      	movs	r3, #2
 80012aa:	6463      	str	r3, [r4, #68]	@ 0x44
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_PAYLOAD);
 80012ac:	6813      	ldr	r3, [r2, #0]
 80012ae:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 80012b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012b6:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, 0U);
 80012b8:	6813      	ldr	r3, [r2, #0]
 80012ba:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80012be:	6013      	str	r3, [r2, #0]
 80012c0:	e7a0      	b.n	8001204 <CRYP_AESGCM_Process+0x1e>
    CRYP_AES_ProcessData(hcryp, Timeout);
 80012c2:	4631      	mov	r1, r6
 80012c4:	4620      	mov	r0, r4
 80012c6:	f7ff fe3e 	bl	8000f46 <CRYP_AES_ProcessData>
    if (Timeout != HAL_MAX_DELAY)
 80012ca:	1c71      	adds	r1, r6, #1
 80012cc:	d0a4      	beq.n	8001218 <CRYP_AESGCM_Process+0x32>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80012ce:	f005 fa99 	bl	8006804 <HAL_GetTick>
 80012d2:	1bc0      	subs	r0, r0, r7
 80012d4:	42b0      	cmp	r0, r6
 80012d6:	d801      	bhi.n	80012dc <CRYP_AESGCM_Process+0xf6>
 80012d8:	2e00      	cmp	r6, #0
 80012da:	d19d      	bne.n	8001218 <CRYP_AESGCM_Process+0x32>
        __HAL_CRYP_DISABLE(hcryp);
 80012dc:	6822      	ldr	r2, [r4, #0]
 80012de:	6813      	ldr	r3, [r2, #0]
 80012e0:	f023 0301 	bic.w	r3, r3, #1
 80012e4:	6013      	str	r3, [r2, #0]
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 80012e6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80012e8:	f043 0310 	orr.w	r3, r3, #16
 80012ec:	6563      	str	r3, [r4, #84]	@ 0x54
        hcryp->State = HAL_CRYP_STATE_READY;
 80012ee:	2301      	movs	r3, #1
 80012f0:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hcryp);
 80012f4:	2300      	movs	r3, #0
 80012f6:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_ERROR;
 80012fa:	e7c7      	b.n	800128c <CRYP_AESGCM_Process+0xa6>
    if ((hcryp->Instance->CR & AES_CR_MODE) == CRYP_OPERATINGMODE_ENCRYPT)
 80012fc:	6822      	ldr	r2, [r4, #0]
 80012fe:	6811      	ldr	r1, [r2, #0]
 8001300:	f011 0f18 	tst.w	r1, #24
      MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, npblb << 20U);
 8001304:	bf08      	it	eq
 8001306:	6811      	ldreq	r1, [r2, #0]
    npblb = ((((uint32_t)hcryp->Size / 16U) + 1U) * 16U) - ((uint32_t)hcryp->Size);
 8001308:	ea4f 1315 	mov.w	r3, r5, lsr #4
 800130c:	f103 0301 	add.w	r3, r3, #1
      MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, npblb << 20U);
 8001310:	bf08      	it	eq
 8001312:	f421 0170 	biceq.w	r1, r1, #15728640	@ 0xf00000
    npblb = ((((uint32_t)hcryp->Size / 16U) + 1U) * 16U) - ((uint32_t)hcryp->Size);
 8001316:	ea4f 1003 	mov.w	r0, r3, lsl #4
 800131a:	ebc5 1303 	rsb	r3, r5, r3, lsl #4
      lastwordsize = (16U - npblb) / 4U;
 800131e:	f105 0510 	add.w	r5, r5, #16
      MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, npblb << 20U);
 8001322:	bf08      	it	eq
 8001324:	ea41 5103 	orreq.w	r1, r1, r3, lsl #20
      lastwordsize = (16U - npblb) / 4U;
 8001328:	eba5 0500 	sub.w	r5, r5, r0
      MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, npblb << 20U);
 800132c:	bf08      	it	eq
 800132e:	6011      	streq	r1, [r2, #0]
      lastwordsize = (16U - npblb) / 4U;
 8001330:	08ad      	lsrs	r5, r5, #2
    if ((npblb % 4U) == 0U)
 8001332:	079b      	lsls	r3, r3, #30
      lastwordsize = ((16U - npblb) / 4U) + 1U;
 8001334:	bf18      	it	ne
 8001336:	3501      	addne	r5, #1
    for (index = 0U; index < lastwordsize; index ++)
 8001338:	2100      	movs	r1, #0
 800133a:	42a9      	cmp	r1, r5
 800133c:	d133      	bne.n	80013a6 <CRYP_AESGCM_Process+0x1c0>
 800133e:	462b      	mov	r3, r5
      hcryp->Instance->DINR  = 0U;
 8001340:	2100      	movs	r1, #0
    while (index < 4U)
 8001342:	2b03      	cmp	r3, #3
 8001344:	d93b      	bls.n	80013be <CRYP_AESGCM_Process+0x1d8>
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8001346:	4631      	mov	r1, r6
 8001348:	4620      	mov	r0, r4
 800134a:	f7ff fcb1 	bl	8000cb0 <CRYP_WaitOnCCFlag>
 800134e:	b140      	cbz	r0, 8001362 <CRYP_AESGCM_Process+0x17c>
      hcryp->State = HAL_CRYP_STATE_READY;
 8001350:	2301      	movs	r3, #1
 8001352:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
      __HAL_UNLOCK(hcryp);
 8001356:	2300      	movs	r3, #0
 8001358:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
      HAL_CRYP_ErrorCallback(hcryp);
 800135c:	4620      	mov	r0, r4
 800135e:	f7ff fdf1 	bl	8000f44 <HAL_CRYP_ErrorCallback>
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8001362:	6823      	ldr	r3, [r4, #0]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800136a:	601a      	str	r2, [r3, #0]
      temp[index] = hcryp->Instance->DOUTR;
 800136c:	68da      	ldr	r2, [r3, #12]
 800136e:	9200      	str	r2, [sp, #0]
 8001370:	68da      	ldr	r2, [r3, #12]
 8001372:	9201      	str	r2, [sp, #4]
 8001374:	68da      	ldr	r2, [r3, #12]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	9202      	str	r2, [sp, #8]
 800137a:	9303      	str	r3, [sp, #12]
    for (index = 0U; index < 4U; index++)
 800137c:	4669      	mov	r1, sp
    for (index = 0U; index < lastwordsize; index++)
 800137e:	2200      	movs	r2, #0
 8001380:	42aa      	cmp	r2, r5
 8001382:	f43f af56 	beq.w	8001232 <CRYP_AESGCM_Process+0x4c>
      *(uint32_t *)(hcryp->pCrypOutBuffPtr + (hcryp->CrypOutCount)) = temp[index];
 8001386:	f8b4 3040 	ldrh.w	r3, [r4, #64]	@ 0x40
 800138a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800138c:	f851 6b04 	ldr.w	r6, [r1], #4
 8001390:	b29b      	uxth	r3, r3
    for (index = 0U; index < lastwordsize; index++)
 8001392:	3201      	adds	r2, #1
      *(uint32_t *)(hcryp->pCrypOutBuffPtr + (hcryp->CrypOutCount)) = temp[index];
 8001394:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
      hcryp->CrypOutCount++;
 8001398:	f8b4 3040 	ldrh.w	r3, [r4, #64]	@ 0x40
 800139c:	3301      	adds	r3, #1
 800139e:	b29b      	uxth	r3, r3
 80013a0:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
    for (index = 0U; index < lastwordsize; index++)
 80013a4:	e7ec      	b.n	8001380 <CRYP_AESGCM_Process+0x19a>
      hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 80013a6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80013a8:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80013aa:	b29b      	uxth	r3, r3
    for (index = 0U; index < lastwordsize; index ++)
 80013ac:	3101      	adds	r1, #1
      hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 80013ae:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80013b2:	6093      	str	r3, [r2, #8]
      hcryp->CrypInCount++;
 80013b4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80013b6:	3301      	adds	r3, #1
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    for (index = 0U; index < lastwordsize; index ++)
 80013bc:	e7bd      	b.n	800133a <CRYP_AESGCM_Process+0x154>
      hcryp->Instance->DINR  = 0U;
 80013be:	6091      	str	r1, [r2, #8]
      index++;
 80013c0:	3301      	adds	r3, #1
 80013c2:	e7be      	b.n	8001342 <CRYP_AESGCM_Process+0x15c>

080013c4 <HAL_CRYP_Encrypt>:
{
 80013c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013c6:	4604      	mov	r4, r0
  if (hcryp->State == HAL_CRYP_STATE_READY)
 80013c8:	f890 0051 	ldrb.w	r0, [r0, #81]	@ 0x51
{
 80013cc:	9e06      	ldr	r6, [sp, #24]
  if (hcryp->State == HAL_CRYP_STATE_READY)
 80013ce:	2801      	cmp	r0, #1
 80013d0:	b2c5      	uxtb	r5, r0
 80013d2:	f040 8082 	bne.w	80014da <HAL_CRYP_Encrypt+0x116>
    __HAL_LOCK(hcryp);
 80013d6:	f894 7050 	ldrb.w	r7, [r4, #80]	@ 0x50
    hcryp->State = HAL_CRYP_STATE_BUSY;
 80013da:	2002      	movs	r0, #2
    __HAL_LOCK(hcryp);
 80013dc:	2f01      	cmp	r7, #1
    hcryp->State = HAL_CRYP_STATE_BUSY;
 80013de:	f884 0051 	strb.w	r0, [r4, #81]	@ 0x51
    __HAL_LOCK(hcryp);
 80013e2:	d022      	beq.n	800142a <HAL_CRYP_Encrypt+0x66>
    hcryp->pCrypOutBuffPtr = Output;
 80013e4:	e9c4 130d 	strd	r1, r3, [r4, #52]	@ 0x34
    if (hcryp->Init.DataWidthUnit == CRYP_DATAWIDTHUNIT_WORD)
 80013e8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    __HAL_LOCK(hcryp);
 80013ea:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
    hcryp->CrypInCount = 0U;
 80013ee:	2000      	movs	r0, #0
 80013f0:	87e0      	strh	r0, [r4, #62]	@ 0x3e
    hcryp->CrypOutCount = 0U;
 80013f2:	f8a4 0040 	strh.w	r0, [r4, #64]	@ 0x40
    if (hcryp->Init.DataWidthUnit == CRYP_DATAWIDTHUNIT_WORD)
 80013f6:	b90b      	cbnz	r3, 80013fc <HAL_CRYP_Encrypt+0x38>
      hcryp->Size = Size * 4U;
 80013f8:	0092      	lsls	r2, r2, #2
 80013fa:	b292      	uxth	r2, r2
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_ENCRYPT);
 80013fc:	6825      	ldr	r5, [r4, #0]
 80013fe:	f8a4 2042 	strh.w	r2, [r4, #66]	@ 0x42
 8001402:	682b      	ldr	r3, [r5, #0]
 8001404:	f023 0318 	bic.w	r3, r3, #24
 8001408:	602b      	str	r3, [r5, #0]
    algo = hcryp->Instance->CR & AES_CR_CHMOD;
 800140a:	6829      	ldr	r1, [r5, #0]
 800140c:	4b35      	ldr	r3, [pc, #212]	@ (80014e4 <HAL_CRYP_Encrypt+0x120>)
 800140e:	400b      	ands	r3, r1
    switch (algo)
 8001410:	2b60      	cmp	r3, #96	@ 0x60
 8001412:	d05b      	beq.n	80014cc <HAL_CRYP_Encrypt+0x108>
 8001414:	d80a      	bhi.n	800142c <HAL_CRYP_Encrypt+0x68>
 8001416:	4a34      	ldr	r2, [pc, #208]	@ (80014e8 <HAL_CRYP_Encrypt+0x124>)
 8001418:	400a      	ands	r2, r1
 800141a:	b17a      	cbz	r2, 800143c <HAL_CRYP_Encrypt+0x78>
 800141c:	2b40      	cmp	r3, #64	@ 0x40
 800141e:	d00d      	beq.n	800143c <HAL_CRYP_Encrypt+0x78>
        hcryp->ErrorCode |= HAL_CRYP_ERROR_NOT_SUPPORTED;
 8001420:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001422:	f043 0320 	orr.w	r3, r3, #32
 8001426:	6563      	str	r3, [r4, #84]	@ 0x54
    status = HAL_ERROR;
 8001428:	2001      	movs	r0, #1
}
 800142a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (algo)
 800142c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001430:	d1f6      	bne.n	8001420 <HAL_CRYP_Encrypt+0x5c>
        status = CRYP_AESCCM_Process(hcryp, Timeout);
 8001432:	4631      	mov	r1, r6
 8001434:	4620      	mov	r0, r4
 8001436:	f7ff fdef 	bl	8001018 <CRYP_AESCCM_Process>
        break;
 800143a:	e04b      	b.n	80014d4 <HAL_CRYP_Encrypt+0x110>
  if ((hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)|| (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE))
 800143c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800143e:	2b01      	cmp	r3, #1
 8001440:	d001      	beq.n	8001446 <HAL_CRYP_Encrypt+0x82>
 8001442:	2b04      	cmp	r3, #4
 8001444:	d104      	bne.n	8001450 <HAL_CRYP_Encrypt+0x8c>
    if (hcryp->KeyIVConfig == 1U)
 8001446:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8001448:	2a01      	cmp	r2, #1
 800144a:	d033      	beq.n	80014b4 <HAL_CRYP_Encrypt+0xf0>
      hcryp->KeyIVConfig = 1U;
 800144c:	2301      	movs	r3, #1
 800144e:	65a3      	str	r3, [r4, #88]	@ 0x58
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8001450:	68a1      	ldr	r1, [r4, #8]
 8001452:	4620      	mov	r0, r4
 8001454:	f7ff fc0b 	bl	8000c6e <CRYP_SetKey>
    if (hcryp->Init.Algorithm != CRYP_AES_ECB)
 8001458:	6963      	ldr	r3, [r4, #20]
 800145a:	b143      	cbz	r3, 800146e <HAL_CRYP_Encrypt+0xaa>
      hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 800145c:	6923      	ldr	r3, [r4, #16]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	62ea      	str	r2, [r5, #44]	@ 0x2c
      hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1U);
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	62aa      	str	r2, [r5, #40]	@ 0x28
      hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2U);
 8001466:	689a      	ldr	r2, [r3, #8]
 8001468:	626a      	str	r2, [r5, #36]	@ 0x24
      hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3U);
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	622b      	str	r3, [r5, #32]
  hcryp->Phase = CRYP_PHASE_PROCESS;
 800146e:	2302      	movs	r3, #2
 8001470:	6463      	str	r3, [r4, #68]	@ 0x44
  __HAL_CRYP_ENABLE(hcryp);
 8001472:	682b      	ldr	r3, [r5, #0]
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	602b      	str	r3, [r5, #0]
    incount = hcryp->CrypInCount;
 800147a:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 800147c:	f8b4 1042 	ldrh.w	r1, [r4, #66]	@ 0x42
    outcount = hcryp->CrypOutCount;
 8001480:	f8b4 3040 	ldrh.w	r3, [r4, #64]	@ 0x40
    incount = hcryp->CrypInCount;
 8001484:	b292      	uxth	r2, r2
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 8001486:	ebb2 0f91 	cmp.w	r2, r1, lsr #2
    outcount = hcryp->CrypOutCount;
 800148a:	b29b      	uxth	r3, r3
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 800148c:	ea4f 0091 	mov.w	r0, r1, lsr #2
 8001490:	d201      	bcs.n	8001496 <HAL_CRYP_Encrypt+0xd2>
 8001492:	4298      	cmp	r0, r3
 8001494:	d815      	bhi.n	80014c2 <HAL_CRYP_Encrypt+0xfe>
  __HAL_CRYP_DISABLE(hcryp);
 8001496:	6822      	ldr	r2, [r4, #0]
 8001498:	6813      	ldr	r3, [r2, #0]
 800149a:	f023 0301 	bic.w	r3, r3, #1
 800149e:	6013      	str	r3, [r2, #0]
  hcryp->State = HAL_CRYP_STATE_READY;
 80014a0:	2301      	movs	r3, #1
 80014a2:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
      hcryp->State = HAL_CRYP_STATE_READY;
 80014a6:	2301      	movs	r3, #1
      __HAL_UNLOCK(hcryp);
 80014a8:	2000      	movs	r0, #0
      hcryp->State = HAL_CRYP_STATE_READY;
 80014aa:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
      __HAL_UNLOCK(hcryp);
 80014ae:	f884 0050 	strb.w	r0, [r4, #80]	@ 0x50
 80014b2:	e7ba      	b.n	800142a <HAL_CRYP_Encrypt+0x66>
    if (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE)
 80014b4:	2b04      	cmp	r3, #4
 80014b6:	d1da      	bne.n	800146e <HAL_CRYP_Encrypt+0xaa>
      CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 80014b8:	68a1      	ldr	r1, [r4, #8]
 80014ba:	4620      	mov	r0, r4
 80014bc:	f7ff fbd7 	bl	8000c6e <CRYP_SetKey>
 80014c0:	e7d5      	b.n	800146e <HAL_CRYP_Encrypt+0xaa>
    CRYP_AES_ProcessData(hcryp, Timeout);
 80014c2:	4631      	mov	r1, r6
 80014c4:	4620      	mov	r0, r4
 80014c6:	f7ff fd3e 	bl	8000f46 <CRYP_AES_ProcessData>
 80014ca:	e7d6      	b.n	800147a <HAL_CRYP_Encrypt+0xb6>
        status = CRYP_AESGCM_Process(hcryp, Timeout) ;
 80014cc:	4631      	mov	r1, r6
 80014ce:	4620      	mov	r0, r4
 80014d0:	f7ff fe89 	bl	80011e6 <CRYP_AESGCM_Process>
    if (status == HAL_OK)
 80014d4:	2800      	cmp	r0, #0
 80014d6:	d1a8      	bne.n	800142a <HAL_CRYP_Encrypt+0x66>
 80014d8:	e7e5      	b.n	80014a6 <HAL_CRYP_Encrypt+0xe2>
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 80014da:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80014dc:	f043 0308 	orr.w	r3, r3, #8
 80014e0:	e7a1      	b.n	8001426 <HAL_CRYP_Encrypt+0x62>
 80014e2:	bf00      	nop
 80014e4:	00010060 	.word	0x00010060
 80014e8:	00010040 	.word	0x00010040

080014ec <HAL_CRYP_Decrypt>:
{
 80014ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014f0:	4604      	mov	r4, r0
  if (hcryp->State == HAL_CRYP_STATE_READY)
 80014f2:	f890 0051 	ldrb.w	r0, [r0, #81]	@ 0x51
{
 80014f6:	9e06      	ldr	r6, [sp, #24]
  if (hcryp->State == HAL_CRYP_STATE_READY)
 80014f8:	2801      	cmp	r0, #1
 80014fa:	b2c5      	uxtb	r5, r0
 80014fc:	f040 80fd 	bne.w	80016fa <HAL_CRYP_Decrypt+0x20e>
    __HAL_LOCK(hcryp);
 8001500:	f894 7050 	ldrb.w	r7, [r4, #80]	@ 0x50
    hcryp->State = HAL_CRYP_STATE_BUSY;
 8001504:	2002      	movs	r0, #2
    __HAL_LOCK(hcryp);
 8001506:	2f01      	cmp	r7, #1
    hcryp->State = HAL_CRYP_STATE_BUSY;
 8001508:	f884 0051 	strb.w	r0, [r4, #81]	@ 0x51
    __HAL_LOCK(hcryp);
 800150c:	d063      	beq.n	80015d6 <HAL_CRYP_Decrypt+0xea>
    hcryp->pCrypOutBuffPtr = Output;
 800150e:	e9c4 130d 	strd	r1, r3, [r4, #52]	@ 0x34
    if (hcryp->Init.DataWidthUnit == CRYP_DATAWIDTHUNIT_WORD)
 8001512:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    __HAL_LOCK(hcryp);
 8001514:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
    hcryp->CrypInCount = 0U;
 8001518:	2000      	movs	r0, #0
 800151a:	87e0      	strh	r0, [r4, #62]	@ 0x3e
    hcryp->CrypOutCount = 0U;
 800151c:	f8a4 0040 	strh.w	r0, [r4, #64]	@ 0x40
    if (hcryp->Init.DataWidthUnit == CRYP_DATAWIDTHUNIT_WORD)
 8001520:	b90b      	cbnz	r3, 8001526 <HAL_CRYP_Decrypt+0x3a>
      hcryp->Size = Size * 4U;
 8001522:	0092      	lsls	r2, r2, #2
 8001524:	b292      	uxth	r2, r2
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 8001526:	6825      	ldr	r5, [r4, #0]
 8001528:	f8a4 2042 	strh.w	r2, [r4, #66]	@ 0x42
 800152c:	682b      	ldr	r3, [r5, #0]
 800152e:	f023 0318 	bic.w	r3, r3, #24
 8001532:	f043 0310 	orr.w	r3, r3, #16
 8001536:	602b      	str	r3, [r5, #0]
    algo = hcryp->Instance->CR & AES_CR_CHMOD;
 8001538:	6829      	ldr	r1, [r5, #0]
 800153a:	4b72      	ldr	r3, [pc, #456]	@ (8001704 <HAL_CRYP_Decrypt+0x218>)
 800153c:	400b      	ands	r3, r1
    switch (algo)
 800153e:	2b60      	cmp	r3, #96	@ 0x60
 8001540:	f000 80d3 	beq.w	80016ea <HAL_CRYP_Decrypt+0x1fe>
 8001544:	d809      	bhi.n	800155a <HAL_CRYP_Decrypt+0x6e>
 8001546:	4a70      	ldr	r2, [pc, #448]	@ (8001708 <HAL_CRYP_Decrypt+0x21c>)
 8001548:	400a      	ands	r2, r1
 800154a:	b172      	cbz	r2, 800156a <HAL_CRYP_Decrypt+0x7e>
 800154c:	2b40      	cmp	r3, #64	@ 0x40
 800154e:	d00c      	beq.n	800156a <HAL_CRYP_Decrypt+0x7e>
        hcryp->ErrorCode |= HAL_CRYP_ERROR_NOT_SUPPORTED;
 8001550:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001552:	f043 0320 	orr.w	r3, r3, #32
 8001556:	6563      	str	r3, [r4, #84]	@ 0x54
    if (status == HAL_OK)
 8001558:	e03c      	b.n	80015d4 <HAL_CRYP_Decrypt+0xe8>
    switch (algo)
 800155a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800155e:	d1f7      	bne.n	8001550 <HAL_CRYP_Decrypt+0x64>
        status = CRYP_AESCCM_Process(hcryp, Timeout);
 8001560:	4631      	mov	r1, r6
 8001562:	4620      	mov	r0, r4
 8001564:	f7ff fd58 	bl	8001018 <CRYP_AESCCM_Process>
        break;
 8001568:	e0c3      	b.n	80016f2 <HAL_CRYP_Decrypt+0x206>
  if ((hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE) || (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE))
 800156a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800156c:	2b01      	cmp	r3, #1
 800156e:	d001      	beq.n	8001574 <HAL_CRYP_Decrypt+0x88>
 8001570:	2b04      	cmp	r3, #4
 8001572:	d106      	bne.n	8001582 <HAL_CRYP_Decrypt+0x96>
    if (hcryp->KeyIVConfig == 1U)
 8001574:	f8d4 8058 	ldr.w	r8, [r4, #88]	@ 0x58
 8001578:	f1b8 0f01 	cmp.w	r8, #1
 800157c:	d02d      	beq.n	80015da <HAL_CRYP_Decrypt+0xee>
      hcryp->KeyIVConfig = 1U;
 800157e:	2301      	movs	r3, #1
 8001580:	65a3      	str	r3, [r4, #88]	@ 0x58
    if (hcryp->Init.Algorithm != CRYP_AES_CTR)   /*ECB or CBC*/
 8001582:	6963      	ldr	r3, [r4, #20]
        CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8001584:	68a1      	ldr	r1, [r4, #8]
    if (hcryp->Init.Algorithm != CRYP_AES_CTR)   /*ECB or CBC*/
 8001586:	2b40      	cmp	r3, #64	@ 0x40
 8001588:	f000 8086 	beq.w	8001698 <HAL_CRYP_Decrypt+0x1ac>
      if (hcryp->AutoKeyDerivation == DISABLE)/*Mode 2 Key preparation*/
 800158c:	f894 7030 	ldrb.w	r7, [r4, #48]	@ 0x30
 8001590:	2f00      	cmp	r7, #0
 8001592:	d179      	bne.n	8001688 <HAL_CRYP_Decrypt+0x19c>
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION);
 8001594:	682b      	ldr	r3, [r5, #0]
 8001596:	f023 0318 	bic.w	r3, r3, #24
 800159a:	f043 0308 	orr.w	r3, r3, #8
 800159e:	602b      	str	r3, [r5, #0]
        CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 80015a0:	4620      	mov	r0, r4
 80015a2:	f7ff fb64 	bl	8000c6e <CRYP_SetKey>
        __HAL_CRYP_ENABLE(hcryp);
 80015a6:	682b      	ldr	r3, [r5, #0]
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	602b      	str	r3, [r5, #0]
        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 80015ae:	4631      	mov	r1, r6
 80015b0:	f7ff fb7e 	bl	8000cb0 <CRYP_WaitOnCCFlag>
 80015b4:	6823      	ldr	r3, [r4, #0]
          __HAL_CRYP_DISABLE(hcryp);
 80015b6:	681a      	ldr	r2, [r3, #0]
        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 80015b8:	2800      	cmp	r0, #0
 80015ba:	d036      	beq.n	800162a <HAL_CRYP_Decrypt+0x13e>
          __HAL_CRYP_DISABLE(hcryp);
 80015bc:	f022 0201 	bic.w	r2, r2, #1
 80015c0:	601a      	str	r2, [r3, #0]
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 80015c2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80015c4:	f043 0310 	orr.w	r3, r3, #16
 80015c8:	6563      	str	r3, [r4, #84]	@ 0x54
          hcryp->State = HAL_CRYP_STATE_READY;
 80015ca:	2301      	movs	r3, #1
 80015cc:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
            __HAL_UNLOCK(hcryp);
 80015d0:	f884 7050 	strb.w	r7, [r4, #80]	@ 0x50
    status = HAL_ERROR;
 80015d4:	2001      	movs	r0, #1
}
 80015d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE)
 80015da:	2b04      	cmp	r3, #4
 80015dc:	d130      	bne.n	8001640 <HAL_CRYP_Decrypt+0x154>
      if (hcryp->Init.Algorithm != CRYP_AES_CTR)   /*ECB or CBC*/
 80015de:	6963      	ldr	r3, [r4, #20]
          CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 80015e0:	68a1      	ldr	r1, [r4, #8]
      if (hcryp->Init.Algorithm != CRYP_AES_CTR)   /*ECB or CBC*/
 80015e2:	2b40      	cmp	r3, #64	@ 0x40
 80015e4:	d078      	beq.n	80016d8 <HAL_CRYP_Decrypt+0x1ec>
        if (hcryp->AutoKeyDerivation == DISABLE)/*Mode 2 Key preparation*/
 80015e6:	f894 7030 	ldrb.w	r7, [r4, #48]	@ 0x30
 80015ea:	2f00      	cmp	r7, #0
 80015ec:	d16c      	bne.n	80016c8 <HAL_CRYP_Decrypt+0x1dc>
          MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION);
 80015ee:	682b      	ldr	r3, [r5, #0]
 80015f0:	f023 0318 	bic.w	r3, r3, #24
 80015f4:	f043 0308 	orr.w	r3, r3, #8
 80015f8:	602b      	str	r3, [r5, #0]
          CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 80015fa:	4620      	mov	r0, r4
 80015fc:	f7ff fb37 	bl	8000c6e <CRYP_SetKey>
          __HAL_CRYP_ENABLE(hcryp);
 8001600:	682b      	ldr	r3, [r5, #0]
 8001602:	f043 0301 	orr.w	r3, r3, #1
 8001606:	602b      	str	r3, [r5, #0]
          if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8001608:	4631      	mov	r1, r6
 800160a:	f7ff fb51 	bl	8000cb0 <CRYP_WaitOnCCFlag>
 800160e:	6823      	ldr	r3, [r4, #0]
            __HAL_CRYP_DISABLE(hcryp);
 8001610:	681a      	ldr	r2, [r3, #0]
          if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8001612:	2800      	cmp	r0, #0
 8001614:	d04e      	beq.n	80016b4 <HAL_CRYP_Decrypt+0x1c8>
            __HAL_CRYP_DISABLE(hcryp);
 8001616:	f022 0201 	bic.w	r2, r2, #1
 800161a:	601a      	str	r2, [r3, #0]
            hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 800161c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800161e:	f043 0310 	orr.w	r3, r3, #16
 8001622:	6563      	str	r3, [r4, #84]	@ 0x54
            hcryp->State = HAL_CRYP_STATE_READY;
 8001624:	f884 8051 	strb.w	r8, [r4, #81]	@ 0x51
 8001628:	e7d2      	b.n	80015d0 <HAL_CRYP_Decrypt+0xe4>
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 800162a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800162e:	601a      	str	r2, [r3, #0]
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	f022 0218 	bic.w	r2, r2, #24
 8001636:	f042 0210 	orr.w	r2, r2, #16
 800163a:	601a      	str	r2, [r3, #0]
    if (hcryp->Init.Algorithm != CRYP_AES_ECB)
 800163c:	6963      	ldr	r3, [r4, #20]
 800163e:	bb73      	cbnz	r3, 800169e <HAL_CRYP_Decrypt+0x1b2>
  __HAL_CRYP_ENABLE(hcryp);
 8001640:	6822      	ldr	r2, [r4, #0]
  hcryp->Phase = CRYP_PHASE_PROCESS;
 8001642:	2302      	movs	r3, #2
 8001644:	6463      	str	r3, [r4, #68]	@ 0x44
  __HAL_CRYP_ENABLE(hcryp);
 8001646:	6813      	ldr	r3, [r2, #0]
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6013      	str	r3, [r2, #0]
    incount = hcryp->CrypInCount;
 800164e:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 8001650:	f8b4 1042 	ldrh.w	r1, [r4, #66]	@ 0x42
    outcount = hcryp->CrypOutCount;
 8001654:	f8b4 3040 	ldrh.w	r3, [r4, #64]	@ 0x40
    incount = hcryp->CrypInCount;
 8001658:	b292      	uxth	r2, r2
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 800165a:	ebb2 0f91 	cmp.w	r2, r1, lsr #2
    outcount = hcryp->CrypOutCount;
 800165e:	b29b      	uxth	r3, r3
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 8001660:	ea4f 0091 	mov.w	r0, r1, lsr #2
 8001664:	d201      	bcs.n	800166a <HAL_CRYP_Decrypt+0x17e>
 8001666:	4298      	cmp	r0, r3
 8001668:	d83a      	bhi.n	80016e0 <HAL_CRYP_Decrypt+0x1f4>
  __HAL_CRYP_DISABLE(hcryp);
 800166a:	6822      	ldr	r2, [r4, #0]
 800166c:	6813      	ldr	r3, [r2, #0]
 800166e:	f023 0301 	bic.w	r3, r3, #1
 8001672:	6013      	str	r3, [r2, #0]
  hcryp->State = HAL_CRYP_STATE_READY;
 8001674:	2301      	movs	r3, #1
 8001676:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
      hcryp->State = HAL_CRYP_STATE_READY;
 800167a:	2301      	movs	r3, #1
      __HAL_UNLOCK(hcryp);
 800167c:	2000      	movs	r0, #0
      hcryp->State = HAL_CRYP_STATE_READY;
 800167e:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
      __HAL_UNLOCK(hcryp);
 8001682:	f884 0050 	strb.w	r0, [r4, #80]	@ 0x50
 8001686:	e7a6      	b.n	80015d6 <HAL_CRYP_Decrypt+0xea>
        CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8001688:	4620      	mov	r0, r4
 800168a:	f7ff faf0 	bl	8000c6e <CRYP_SetKey>
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION_DECRYPT);
 800168e:	682b      	ldr	r3, [r5, #0]
 8001690:	f043 0318 	orr.w	r3, r3, #24
 8001694:	602b      	str	r3, [r5, #0]
 8001696:	e7d1      	b.n	800163c <HAL_CRYP_Decrypt+0x150>
      CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8001698:	4620      	mov	r0, r4
 800169a:	f7ff fae8 	bl	8000c6e <CRYP_SetKey>
      hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 800169e:	6922      	ldr	r2, [r4, #16]
 80016a0:	6823      	ldr	r3, [r4, #0]
 80016a2:	6811      	ldr	r1, [r2, #0]
 80016a4:	62d9      	str	r1, [r3, #44]	@ 0x2c
      hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1U);
 80016a6:	6851      	ldr	r1, [r2, #4]
 80016a8:	6299      	str	r1, [r3, #40]	@ 0x28
      hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2U);
 80016aa:	6891      	ldr	r1, [r2, #8]
 80016ac:	6259      	str	r1, [r3, #36]	@ 0x24
      hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3U);
 80016ae:	68d2      	ldr	r2, [r2, #12]
 80016b0:	621a      	str	r2, [r3, #32]
 80016b2:	e7c5      	b.n	8001640 <HAL_CRYP_Decrypt+0x154>
          __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 80016b4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80016b8:	601a      	str	r2, [r3, #0]
          MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	f022 0218 	bic.w	r2, r2, #24
 80016c0:	f042 0210 	orr.w	r2, r2, #16
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	e7bb      	b.n	8001640 <HAL_CRYP_Decrypt+0x154>
          CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 80016c8:	4620      	mov	r0, r4
 80016ca:	f7ff fad0 	bl	8000c6e <CRYP_SetKey>
          MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION_DECRYPT);
 80016ce:	682b      	ldr	r3, [r5, #0]
 80016d0:	f043 0318 	orr.w	r3, r3, #24
 80016d4:	602b      	str	r3, [r5, #0]
 80016d6:	e7b3      	b.n	8001640 <HAL_CRYP_Decrypt+0x154>
        CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 80016d8:	4620      	mov	r0, r4
 80016da:	f7ff fac8 	bl	8000c6e <CRYP_SetKey>
 80016de:	e7af      	b.n	8001640 <HAL_CRYP_Decrypt+0x154>
    CRYP_AES_ProcessData(hcryp, Timeout);
 80016e0:	4631      	mov	r1, r6
 80016e2:	4620      	mov	r0, r4
 80016e4:	f7ff fc2f 	bl	8000f46 <CRYP_AES_ProcessData>
 80016e8:	e7b1      	b.n	800164e <HAL_CRYP_Decrypt+0x162>
        status = CRYP_AESGCM_Process(hcryp, Timeout) ;
 80016ea:	4631      	mov	r1, r6
 80016ec:	4620      	mov	r0, r4
 80016ee:	f7ff fd7a 	bl	80011e6 <CRYP_AESGCM_Process>
    if (status == HAL_OK)
 80016f2:	2800      	cmp	r0, #0
 80016f4:	f47f af6f 	bne.w	80015d6 <HAL_CRYP_Decrypt+0xea>
 80016f8:	e7bf      	b.n	800167a <HAL_CRYP_Decrypt+0x18e>
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 80016fa:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80016fc:	f043 0308 	orr.w	r3, r3, #8
 8001700:	e729      	b.n	8001556 <HAL_CRYP_Decrypt+0x6a>
 8001702:	bf00      	nop
 8001704:	00010060 	.word	0x00010060
 8001708:	00010040 	.word	0x00010040

0800170c <HAL_CRYPEx_AESGCM_GenerateAuthTAG>:
  * @param  AuthTag Pointer to the authentication buffer
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYPEx_AESGCM_GenerateAuthTAG(CRYP_HandleTypeDef *hcryp, uint32_t *AuthTag, uint32_t Timeout)
{
 800170c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  /* Assume first Init.HeaderSize is in words */
  uint64_t headerlength = (uint64_t)hcryp->Init.HeaderSize * 32U; /* Header length in bits */
 800170e:	69c5      	ldr	r5, [r0, #28]
{
 8001710:	460e      	mov	r6, r1
  uint64_t inputlength = (uint64_t)hcryp->SizesSum * 8U; /* Input length in bits */
  uint32_t tagaddr = (uint32_t)AuthTag;

  /* Correct headerlength if Init.HeaderSize is actually in bytes */
  if (hcryp->Init.HeaderWidthUnit == CRYP_HEADERWIDTHUNIT_BYTE)
 8001712:	6a81      	ldr	r1, [r0, #40]	@ 0x28
  uint64_t headerlength = (uint64_t)hcryp->Init.HeaderSize * 32U; /* Header length in bits */
 8001714:	0eeb      	lsrs	r3, r5, #27
  if (hcryp->Init.HeaderWidthUnit == CRYP_HEADERWIDTHUNIT_BYTE)
 8001716:	2901      	cmp	r1, #1
  uint64_t headerlength = (uint64_t)hcryp->Init.HeaderSize * 32U; /* Header length in bits */
 8001718:	ea4f 1545 	mov.w	r5, r5, lsl #5
  {
    headerlength /= 4U;
 800171c:	bf04      	itt	eq
 800171e:	08ad      	lsreq	r5, r5, #2
 8001720:	ea45 7583 	orreq.w	r5, r5, r3, lsl #30
  }

  if (hcryp->State == HAL_CRYP_STATE_READY)
 8001724:	f890 3051 	ldrb.w	r3, [r0, #81]	@ 0x51
 8001728:	2b01      	cmp	r3, #1
{
 800172a:	4617      	mov	r7, r2
 800172c:	4604      	mov	r4, r0
  uint64_t inputlength = (uint64_t)hcryp->SizesSum * 8U; /* Input length in bits */
 800172e:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
  if (hcryp->State == HAL_CRYP_STATE_READY)
 8001730:	b2d9      	uxtb	r1, r3
 8001732:	d160      	bne.n	80017f6 <HAL_CRYPEx_AESGCM_GenerateAuthTAG+0xea>
  {
    /* Process locked */
    __HAL_LOCK(hcryp);
 8001734:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 8001738:	2b01      	cmp	r3, #1
 800173a:	f04f 0002 	mov.w	r0, #2
 800173e:	d043      	beq.n	80017c8 <HAL_CRYPEx_AESGCM_GenerateAuthTAG+0xbc>

    /* Change the CRYP peripheral state */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 8001740:	f884 0051 	strb.w	r0, [r4, #81]	@ 0x51

    /* Check if initialization phase has already been performed */
    if (hcryp->Phase == CRYPEx_PHASE_PROCESS)
 8001744:	6c60      	ldr	r0, [r4, #68]	@ 0x44
      __HAL_UNLOCK(hcryp);
      return HAL_ERROR;
    }

    /* Select final phase */
    MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, CRYP_PHASE_FINAL);
 8001746:	6823      	ldr	r3, [r4, #0]
    __HAL_LOCK(hcryp);
 8001748:	f884 1050 	strb.w	r1, [r4, #80]	@ 0x50
    if (hcryp->Phase == CRYPEx_PHASE_PROCESS)
 800174c:	2802      	cmp	r0, #2
 800174e:	d12d      	bne.n	80017ac <HAL_CRYPEx_AESGCM_GenerateAuthTAG+0xa0>
      hcryp->Phase = CRYPEx_PHASE_FINAL;
 8001750:	2103      	movs	r1, #3
 8001752:	6461      	str	r1, [r4, #68]	@ 0x44
    MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, CRYP_PHASE_FINAL);
 8001754:	6819      	ldr	r1, [r3, #0]
 8001756:	f441 41c0 	orr.w	r1, r1, #24576	@ 0x6000
 800175a:	6019      	str	r1, [r3, #0]

    /* Set the encrypt operating mode*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_ENCRYPT);
 800175c:	6819      	ldr	r1, [r3, #0]
 800175e:	f021 0118 	bic.w	r1, r1, #24
 8001762:	6019      	str	r1, [r3, #0]
  uint64_t inputlength = (uint64_t)hcryp->SizesSum * 8U; /* Input length in bits */
 8001764:	00d2      	lsls	r2, r2, #3

    /*TinyAES peripheral from V3.1.1 : data has to be inserted normally (no swapping)*/
    /* Write into the AES_DINR register the number of bits in header (64 bits)
    followed by the number of bits in the payload */

    hcryp->Instance->DINR = 0U;
 8001766:	2100      	movs	r1, #0
 8001768:	6099      	str	r1, [r3, #8]
    hcryp->Instance->DINR = (uint32_t)(headerlength);
 800176a:	609d      	str	r5, [r3, #8]
    hcryp->Instance->DINR = 0U;
 800176c:	6099      	str	r1, [r3, #8]
    hcryp->Instance->DINR = (uint32_t)(inputlength);
 800176e:	609a      	str	r2, [r3, #8]

    /* Wait for CCF flag to be raised */
    tickstart = HAL_GetTick();
 8001770:	f005 f848 	bl	8006804 <HAL_GetTick>
 8001774:	4605      	mov	r5, r0
    while (HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 8001776:	6823      	ldr	r3, [r4, #0]
 8001778:	685a      	ldr	r2, [r3, #4]
 800177a:	07d2      	lsls	r2, r2, #31
 800177c:	d525      	bpl.n	80017ca <HAL_CRYPEx_AESGCM_GenerateAuthTAG+0xbe>
        }
      }
    }

    /* Read the authentication TAG in the output FIFO */
    *(uint32_t *)(tagaddr) = hcryp->Instance->DOUTR;
 800177e:	68da      	ldr	r2, [r3, #12]
 8001780:	6032      	str	r2, [r6, #0]
    tagaddr += 4U;
    *(uint32_t *)(tagaddr) = hcryp->Instance->DOUTR;
 8001782:	68da      	ldr	r2, [r3, #12]
 8001784:	6072      	str	r2, [r6, #4]
    tagaddr += 4U;
    *(uint32_t *)(tagaddr) = hcryp->Instance->DOUTR;
 8001786:	68da      	ldr	r2, [r3, #12]
 8001788:	60b2      	str	r2, [r6, #8]
    tagaddr += 4U;
    *(uint32_t *)(tagaddr) = hcryp->Instance->DOUTR;
 800178a:	68da      	ldr	r2, [r3, #12]
 800178c:	60f2      	str	r2, [r6, #12]

    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001794:	601a      	str	r2, [r3, #0]

    /* Disable the peripheral */
    __HAL_CRYP_DISABLE(hcryp);
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	f022 0201 	bic.w	r2, r2, #1
 800179c:	601a      	str	r2, [r3, #0]

    /* Change the CRYP peripheral state */
    hcryp->State = HAL_CRYP_STATE_READY;

    /* Process unlocked */
    __HAL_UNLOCK(hcryp);
 800179e:	2000      	movs	r0, #0
    hcryp->State = HAL_CRYP_STATE_READY;
 80017a0:	2301      	movs	r3, #1
 80017a2:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
    __HAL_UNLOCK(hcryp);
 80017a6:	f884 0050 	strb.w	r0, [r4, #80]	@ 0x50
    /* Busy error code field */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
    return HAL_ERROR;
  }
  /* Return function status */
  return HAL_OK;
 80017aa:	e00d      	b.n	80017c8 <HAL_CRYPEx_AESGCM_GenerateAuthTAG+0xbc>
      __HAL_CRYP_DISABLE(hcryp);
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	f022 0201 	bic.w	r2, r2, #1
 80017b2:	601a      	str	r2, [r3, #0]
      hcryp->ErrorCode |= HAL_CRYP_ERROR_AUTH_TAG_SEQUENCE;
 80017b4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80017b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017ba:	6563      	str	r3, [r4, #84]	@ 0x54
      hcryp->State = HAL_CRYP_STATE_READY;
 80017bc:	f884 1051 	strb.w	r1, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hcryp);
 80017c0:	2300      	movs	r3, #0
 80017c2:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
      return HAL_ERROR;
 80017c6:	2001      	movs	r0, #1
}
 80017c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (Timeout != HAL_MAX_DELAY)
 80017ca:	1c79      	adds	r1, r7, #1
 80017cc:	d0d4      	beq.n	8001778 <HAL_CRYPEx_AESGCM_GenerateAuthTAG+0x6c>
        if (((HAL_GetTick() - tickstart) > Timeout)||(Timeout == 0U))
 80017ce:	f005 f819 	bl	8006804 <HAL_GetTick>
 80017d2:	1b40      	subs	r0, r0, r5
 80017d4:	42b8      	cmp	r0, r7
 80017d6:	d801      	bhi.n	80017dc <HAL_CRYPEx_AESGCM_GenerateAuthTAG+0xd0>
 80017d8:	2f00      	cmp	r7, #0
 80017da:	d1cc      	bne.n	8001776 <HAL_CRYPEx_AESGCM_GenerateAuthTAG+0x6a>
          __HAL_CRYP_DISABLE(hcryp);
 80017dc:	6822      	ldr	r2, [r4, #0]
 80017de:	6813      	ldr	r3, [r2, #0]
 80017e0:	f023 0301 	bic.w	r3, r3, #1
 80017e4:	6013      	str	r3, [r2, #0]
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 80017e6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80017e8:	f043 0310 	orr.w	r3, r3, #16
 80017ec:	6563      	str	r3, [r4, #84]	@ 0x54
          hcryp->State = HAL_CRYP_STATE_READY;
 80017ee:	2301      	movs	r3, #1
 80017f0:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
 80017f4:	e7e4      	b.n	80017c0 <HAL_CRYPEx_AESGCM_GenerateAuthTAG+0xb4>
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 80017f6:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80017f8:	f043 0308 	orr.w	r3, r3, #8
 80017fc:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 80017fe:	e7e2      	b.n	80017c6 <HAL_CRYPEx_AESGCM_GenerateAuthTAG+0xba>

08001800 <FLASH_Program_Fast>:

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8001800:	4a0a      	ldr	r2, [pc, #40]	@ (800182c <FLASH_Program_Fast+0x2c>)
 8001802:	6953      	ldr	r3, [r2, #20]
 8001804:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
{
 8001808:	b530      	push	{r4, r5, lr}
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800180a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800180c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001810:	b672      	cpsid	i
}
 8001812:	2300      	movs	r3, #0
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8001814:	58cd      	ldr	r5, [r1, r3]
 8001816:	50c5      	str	r5, [r0, r3]
    dest_addr++;
    src_addr++;
    row_index--;
  }
  while (row_index != 0U);
 8001818:	3304      	adds	r3, #4
 800181a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800181e:	d1f9      	bne.n	8001814 <FLASH_Program_Fast+0x14>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8001820:	6913      	ldr	r3, [r2, #16]
 8001822:	03db      	lsls	r3, r3, #15
 8001824:	d4fc      	bmi.n	8001820 <FLASH_Program_Fast+0x20>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001826:	f384 8810 	msr	PRIMASK, r4
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 800182a:	bd30      	pop	{r4, r5, pc}
 800182c:	58004000 	.word	0x58004000

08001830 <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001830:	4b06      	ldr	r3, [pc, #24]	@ (800184c <HAL_FLASH_Unlock+0x1c>)
 8001832:	695a      	ldr	r2, [r3, #20]
 8001834:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001836:	bfbf      	itttt	lt
 8001838:	4a05      	ldrlt	r2, [pc, #20]	@ (8001850 <HAL_FLASH_Unlock+0x20>)
 800183a:	609a      	strlt	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800183c:	f102 3288 	addlt.w	r2, r2, #2290649224	@ 0x88888888
 8001840:	609a      	strlt	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001842:	bfba      	itte	lt
 8001844:	6958      	ldrlt	r0, [r3, #20]
 8001846:	0fc0      	lsrlt	r0, r0, #31
  HAL_StatusTypeDef status = HAL_OK;
 8001848:	2000      	movge	r0, #0
}
 800184a:	4770      	bx	lr
 800184c:	58004000 	.word	0x58004000
 8001850:	45670123 	.word	0x45670123

08001854 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001854:	4b04      	ldr	r3, [pc, #16]	@ (8001868 <HAL_FLASH_Lock+0x14>)
 8001856:	695a      	ldr	r2, [r3, #20]
 8001858:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800185c:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 800185e:	6958      	ldr	r0, [r3, #20]
}
 8001860:	43c0      	mvns	r0, r0
 8001862:	0fc0      	lsrs	r0, r0, #31
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	58004000 	.word	0x58004000

0800186c <FLASH_WaitForLastOperation>:
{
 800186c:	b570      	push	{r4, r5, r6, lr}
 800186e:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8001870:	f004 ffc8 	bl	8006804 <HAL_GetTick>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001874:	4e12      	ldr	r6, [pc, #72]	@ (80018c0 <FLASH_WaitForLastOperation+0x54>)
  uint32_t tickstart = HAL_GetTick();
 8001876:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001878:	6933      	ldr	r3, [r6, #16]
 800187a:	03d9      	lsls	r1, r3, #15
 800187c:	d413      	bmi.n	80018a6 <FLASH_WaitForLastOperation+0x3a>
  error = FLASH->SR;
 800187e:	6933      	ldr	r3, [r6, #16]
  if ((error & FLASH_FLAG_EOP) != 0U)
 8001880:	07da      	lsls	r2, r3, #31
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001882:	bf44      	itt	mi
 8001884:	2201      	movmi	r2, #1
 8001886:	6132      	strmi	r2, [r6, #16]
  error &= FLASH_FLAG_SR_ERRORS;
 8001888:	f24c 32fa 	movw	r2, #50170	@ 0xc3fa
  __HAL_FLASH_CLEAR_FLAG(error);
 800188c:	4013      	ands	r3, r2
 800188e:	d111      	bne.n	80018b4 <FLASH_WaitForLastOperation+0x48>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8001890:	4e0b      	ldr	r6, [pc, #44]	@ (80018c0 <FLASH_WaitForLastOperation+0x54>)
 8001892:	6930      	ldr	r0, [r6, #16]
 8001894:	f410 2080 	ands.w	r0, r0, #262144	@ 0x40000
 8001898:	d00b      	beq.n	80018b2 <FLASH_WaitForLastOperation+0x46>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800189a:	f004 ffb3 	bl	8006804 <HAL_GetTick>
 800189e:	1b00      	subs	r0, r0, r4
 80018a0:	42a8      	cmp	r0, r5
 80018a2:	d3f6      	bcc.n	8001892 <FLASH_WaitForLastOperation+0x26>
 80018a4:	e004      	b.n	80018b0 <FLASH_WaitForLastOperation+0x44>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80018a6:	f004 ffad 	bl	8006804 <HAL_GetTick>
 80018aa:	1b00      	subs	r0, r0, r4
 80018ac:	42a8      	cmp	r0, r5
 80018ae:	d3e3      	bcc.n	8001878 <FLASH_WaitForLastOperation+0xc>
      return HAL_TIMEOUT;
 80018b0:	2003      	movs	r0, #3
}
 80018b2:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_FLASH_CLEAR_FLAG(error);
 80018b4:	4a02      	ldr	r2, [pc, #8]	@ (80018c0 <FLASH_WaitForLastOperation+0x54>)
 80018b6:	6113      	str	r3, [r2, #16]
    pFlash.ErrorCode = error;
 80018b8:	4a02      	ldr	r2, [pc, #8]	@ (80018c4 <FLASH_WaitForLastOperation+0x58>)
    return HAL_ERROR;
 80018ba:	2001      	movs	r0, #1
    pFlash.ErrorCode = error;
 80018bc:	6053      	str	r3, [r2, #4]
    return HAL_ERROR;
 80018be:	e7f8      	b.n	80018b2 <FLASH_WaitForLastOperation+0x46>
 80018c0:	58004000 	.word	0x58004000
 80018c4:	20000c30 	.word	0x20000c30

080018c8 <HAL_FLASH_Program>:
{
 80018c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 80018cc:	4d18      	ldr	r5, [pc, #96]	@ (8001930 <HAL_FLASH_Program+0x68>)
{
 80018ce:	4698      	mov	r8, r3
  __HAL_LOCK(&pFlash);
 80018d0:	782b      	ldrb	r3, [r5, #0]
 80018d2:	2b01      	cmp	r3, #1
{
 80018d4:	4606      	mov	r6, r0
 80018d6:	460c      	mov	r4, r1
 80018d8:	4617      	mov	r7, r2
  __HAL_LOCK(&pFlash);
 80018da:	d026      	beq.n	800192a <HAL_FLASH_Program+0x62>
 80018dc:	2301      	movs	r3, #1
 80018de:	702b      	strb	r3, [r5, #0]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80018e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80018e4:	2300      	movs	r3, #0
 80018e6:	606b      	str	r3, [r5, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80018e8:	f7ff ffc0 	bl	800186c <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 80018ec:	b9a0      	cbnz	r0, 8001918 <HAL_FLASH_Program+0x50>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80018ee:	2e01      	cmp	r6, #1
 80018f0:	d116      	bne.n	8001920 <HAL_FLASH_Program+0x58>
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80018f2:	4a10      	ldr	r2, [pc, #64]	@ (8001934 <HAL_FLASH_Program+0x6c>)
 80018f4:	6953      	ldr	r3, [r2, #20]
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	6153      	str	r3, [r2, #20]
  *(uint32_t *)Address = (uint32_t)Data;
 80018fc:	6027      	str	r7, [r4, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80018fe:	f3bf 8f6f 	isb	sy
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8001902:	f8c4 8004 	str.w	r8, [r4, #4]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001906:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800190a:	f7ff ffaf 	bl	800186c <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, TypeProgram);
 800190e:	4a09      	ldr	r2, [pc, #36]	@ (8001934 <HAL_FLASH_Program+0x6c>)
 8001910:	6953      	ldr	r3, [r2, #20]
 8001912:	ea23 0306 	bic.w	r3, r3, r6
 8001916:	6153      	str	r3, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 8001918:	2300      	movs	r3, #0
 800191a:	702b      	strb	r3, [r5, #0]
}
 800191c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8001920:	4639      	mov	r1, r7
 8001922:	4620      	mov	r0, r4
 8001924:	f7ff ff6c 	bl	8001800 <FLASH_Program_Fast>
 8001928:	e7ed      	b.n	8001906 <HAL_FLASH_Program+0x3e>
  __HAL_LOCK(&pFlash);
 800192a:	2002      	movs	r0, #2
 800192c:	e7f6      	b.n	800191c <HAL_FLASH_Program+0x54>
 800192e:	bf00      	nop
 8001930:	20000c30 	.word	0x20000c30
 8001934:	58004000 	.word	0x58004000

08001938 <FLASH_PageErase>:

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8001938:	4a05      	ldr	r2, [pc, #20]	@ (8001950 <FLASH_PageErase+0x18>)
 800193a:	6953      	ldr	r3, [r2, #20]
 800193c:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 8001940:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
 8001944:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 8001948:	f040 0002 	orr.w	r0, r0, #2
 800194c:	6150      	str	r0, [r2, #20]
#endif
}
 800194e:	4770      	bx	lr
 8001950:	58004000 	.word	0x58004000

08001954 <HAL_FLASHEx_Erase>:
{
 8001954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8001958:	4f23      	ldr	r7, [pc, #140]	@ (80019e8 <HAL_FLASHEx_Erase+0x94>)
 800195a:	783b      	ldrb	r3, [r7, #0]
 800195c:	2b01      	cmp	r3, #1
{
 800195e:	4605      	mov	r5, r0
 8001960:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8001962:	d03f      	beq.n	80019e4 <HAL_FLASHEx_Erase+0x90>
 8001964:	2301      	movs	r3, #1
 8001966:	703b      	strb	r3, [r7, #0]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001968:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800196c:	2300      	movs	r3, #0
 800196e:	607b      	str	r3, [r7, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001970:	f7ff ff7c 	bl	800186c <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8001974:	4604      	mov	r4, r0
 8001976:	b988      	cbnz	r0, 800199c <HAL_FLASHEx_Erase+0x48>
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001978:	682b      	ldr	r3, [r5, #0]
 800197a:	2b04      	cmp	r3, #4
 800197c:	d113      	bne.n	80019a6 <HAL_FLASHEx_Erase+0x52>
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 800197e:	4a1b      	ldr	r2, [pc, #108]	@ (80019ec <HAL_FLASHEx_Erase+0x98>)
 8001980:	6953      	ldr	r3, [r2, #20]
 8001982:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001986:	f043 0304 	orr.w	r3, r3, #4
 800198a:	6153      	str	r3, [r2, #20]
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800198c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001990:	f7ff ff6c 	bl	800186c <FLASH_WaitForLastOperation>
 8001994:	4604      	mov	r4, r0
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8001996:	4b15      	ldr	r3, [pc, #84]	@ (80019ec <HAL_FLASHEx_Erase+0x98>)
 8001998:	681a      	ldr	r2, [r3, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 800199a:	681b      	ldr	r3, [r3, #0]
  __HAL_UNLOCK(&pFlash);
 800199c:	2300      	movs	r3, #0
 800199e:	703b      	strb	r3, [r7, #0]
}
 80019a0:	4620      	mov	r0, r4
 80019a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *PageError = 0xFFFFFFFFU;
 80019a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019aa:	f8c8 3000 	str.w	r3, [r8]
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80019ae:	686e      	ldr	r6, [r5, #4]
 80019b0:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 80019b4:	4413      	add	r3, r2
 80019b6:	42b3      	cmp	r3, r6
 80019b8:	d90a      	bls.n	80019d0 <HAL_FLASHEx_Erase+0x7c>
        FLASH_PageErase(index);
 80019ba:	4630      	mov	r0, r6
 80019bc:	f7ff ffbc 	bl	8001938 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80019c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019c4:	f7ff ff52 	bl	800186c <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 80019c8:	b150      	cbz	r0, 80019e0 <HAL_FLASHEx_Erase+0x8c>
          *PageError = index;
 80019ca:	f8c8 6000 	str.w	r6, [r8]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80019ce:	4604      	mov	r4, r0
static void FLASH_AcknowledgePageErase(void)
{
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80019d0:	4a06      	ldr	r2, [pc, #24]	@ (80019ec <HAL_FLASHEx_Erase+0x98>)
 80019d2:	6953      	ldr	r3, [r2, #20]
 80019d4:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 80019d8:	f023 0302 	bic.w	r3, r3, #2
 80019dc:	6153      	str	r3, [r2, #20]
#endif
}
 80019de:	e7da      	b.n	8001996 <HAL_FLASHEx_Erase+0x42>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80019e0:	3601      	adds	r6, #1
 80019e2:	e7e5      	b.n	80019b0 <HAL_FLASHEx_Erase+0x5c>
  __HAL_LOCK(&pFlash);
 80019e4:	2402      	movs	r4, #2
 80019e6:	e7db      	b.n	80019a0 <HAL_FLASHEx_Erase+0x4c>
 80019e8:	20000c30 	.word	0x20000c30
 80019ec:	58004000 	.word	0x58004000

080019f0 <HAL_PKA_Init>:
  *         parameters in the PKA_InitTypeDef and initialize the associated handle.
  * @param  hpka PKA handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PKA_Init(PKA_HandleTypeDef *hpka)
{
 80019f0:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef err = HAL_OK;
  uint32_t tickstart;

  /* Check the PKA handle allocation */
  if (hpka != NULL)
 80019f2:	4604      	mov	r4, r0
 80019f4:	b310      	cbz	r0, 8001a3c <HAL_PKA_Init+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_PKA_ALL_INSTANCE(hpka->Instance));

    if (hpka->State == HAL_PKA_STATE_RESET)
 80019f6:	7903      	ldrb	r3, [r0, #4]
 80019f8:	b90b      	cbnz	r3, 80019fe <HAL_PKA_Init+0xe>

      /* Init the low level hardware */
      hpka->MspInitCallback(hpka);
#else
      /* Init the low level hardware */
      HAL_PKA_MspInit(hpka);
 80019fa:	f7fe ff11 	bl	8000820 <HAL_PKA_MspInit>
#endif /* USE_HAL_PKA_REGISTER_CALLBACKS */
    }

    /* Set the state to busy */
    hpka->State = HAL_PKA_STATE_BUSY;
 80019fe:	2302      	movs	r3, #2
 8001a00:	7123      	strb	r3, [r4, #4]

    /* Get current tick */
    tickstart = HAL_GetTick();
 8001a02:	f004 feff 	bl	8006804 <HAL_GetTick>

    /* Reset the control register and enable the PKA (wait the end of PKA RAM erase) */
    while ((hpka->Instance->CR & PKA_CR_EN) != PKA_CR_EN)
    {
      hpka->Instance->CR = PKA_CR_EN;
 8001a06:	2601      	movs	r6, #1
    tickstart = HAL_GetTick();
 8001a08:	4605      	mov	r5, r0
    while ((hpka->Instance->CR & PKA_CR_EN) != PKA_CR_EN)
 8001a0a:	6823      	ldr	r3, [r4, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	07d2      	lsls	r2, r2, #31
 8001a10:	d508      	bpl.n	8001a24 <HAL_PKA_Init+0x34>
    }

    if (err == HAL_OK)
    {
      /* Reset any pending flag */
      SET_BIT(hpka->Instance->CLRFR, PKA_CLRFR_PROCENDFC | PKA_CLRFR_RAMERRFC | PKA_CLRFR_ADDRERRFC);
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	f442 12d0 	orr.w	r2, r2, #1703936	@ 0x1a0000
 8001a18:	609a      	str	r2, [r3, #8]

      /* Initialize the error code */
      hpka->ErrorCode = HAL_PKA_ERROR_NONE;
 8001a1a:	2000      	movs	r0, #0

      /* Set the state to ready */
      hpka->State = HAL_PKA_STATE_READY;
 8001a1c:	2301      	movs	r3, #1
      hpka->ErrorCode = HAL_PKA_ERROR_NONE;
 8001a1e:	60a0      	str	r0, [r4, #8]
      hpka->State = HAL_PKA_STATE_READY;
 8001a20:	7123      	strb	r3, [r4, #4]
 8001a22:	e00c      	b.n	8001a3e <HAL_PKA_Init+0x4e>
      hpka->Instance->CR = PKA_CR_EN;
 8001a24:	601e      	str	r6, [r3, #0]
      if ((HAL_GetTick() - tickstart) > PKA_RAM_ERASE_TIMEOUT)
 8001a26:	f004 feed 	bl	8006804 <HAL_GetTick>
 8001a2a:	1b40      	subs	r0, r0, r5
 8001a2c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8001a30:	d9eb      	bls.n	8001a0a <HAL_PKA_Init+0x1a>
    }
    else
    {
      /* Set the error code to timeout error */
      hpka->ErrorCode = HAL_PKA_ERROR_TIMEOUT;
 8001a32:	2304      	movs	r3, #4

      /* Set the state to error */
      hpka->State = HAL_PKA_STATE_ERROR;
 8001a34:	2003      	movs	r0, #3
      hpka->ErrorCode = HAL_PKA_ERROR_TIMEOUT;
 8001a36:	60a3      	str	r3, [r4, #8]
      hpka->State = HAL_PKA_STATE_ERROR;
 8001a38:	7120      	strb	r0, [r4, #4]
  else
  {
    err = HAL_ERROR;
  }

  return err;
 8001a3a:	e000      	b.n	8001a3e <HAL_PKA_Init+0x4e>
    err = HAL_ERROR;
 8001a3c:	2001      	movs	r0, #1
}
 8001a3e:	bd70      	pop	{r4, r5, r6, pc}

08001a40 <HAL_PKA_DeInit>:
  * @brief  DeInitialize the PKA peripheral.
  * @param  hpka PKA handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PKA_DeInit(PKA_HandleTypeDef *hpka)
{
 8001a40:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef err = HAL_OK;

  /* Check the PKA handle allocation */
  if (hpka != NULL)
 8001a42:	4605      	mov	r5, r0
 8001a44:	b170      	cbz	r0, 8001a64 <HAL_PKA_DeInit+0x24>
  {
    /* Check the parameters */
    assert_param(IS_PKA_ALL_INSTANCE(hpka->Instance));

    /* Set the state to busy */
    hpka->State = HAL_PKA_STATE_BUSY;
 8001a46:	2302      	movs	r3, #2
 8001a48:	7103      	strb	r3, [r0, #4]

    /* Reset the control register */
    /* This abort any operation in progress (PKA RAM content is not guaranteed in this case) */
    hpka->Instance->CR = 0;
 8001a4a:	6803      	ldr	r3, [r0, #0]
 8001a4c:	2400      	movs	r4, #0
 8001a4e:	601c      	str	r4, [r3, #0]

    /* Reset any pending flag */
    SET_BIT(hpka->Instance->CLRFR, PKA_CLRFR_PROCENDFC | PKA_CLRFR_RAMERRFC | PKA_CLRFR_ADDRERRFC);
 8001a50:	689a      	ldr	r2, [r3, #8]
 8001a52:	f442 12d0 	orr.w	r2, r2, #1703936	@ 0x1a0000
 8001a56:	609a      	str	r2, [r3, #8]

    /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
    hpka->MspDeInitCallback(hpka);
#else
    /* DeInit the low level hardware: CLOCK, NVIC */
    HAL_PKA_MspDeInit(hpka);
 8001a58:	f7fe fefa 	bl	8000850 <HAL_PKA_MspDeInit>
#endif /* USE_HAL_PKA_REGISTER_CALLBACKS */

    /* Reset the error code */
    hpka->ErrorCode = HAL_PKA_ERROR_NONE;
 8001a5c:	60ac      	str	r4, [r5, #8]
  HAL_StatusTypeDef err = HAL_OK;
 8001a5e:	4620      	mov	r0, r4

    /* Reset the state */
    hpka->State = HAL_PKA_STATE_RESET;
 8001a60:	712c      	strb	r4, [r5, #4]
  {
    err = HAL_ERROR;
  }

  return err;
}
 8001a62:	bd38      	pop	{r3, r4, r5, pc}
    err = HAL_ERROR;
 8001a64:	2001      	movs	r0, #1
 8001a66:	e7fc      	b.n	8001a62 <HAL_PKA_DeInit+0x22>

08001a68 <HAL_PKA_ECDSAVerif_IsValidSignature>:
  * @retval 1 if signature is verified, 0 in other case
  */
uint32_t HAL_PKA_ECDSAVerif_IsValidSignature(PKA_HandleTypeDef const *const hpka)
{
  /* Invert the state of the PKA RAM bit containing the result of the operation */
  return (hpka->Instance->RAM[PKA_ECDSA_VERIF_OUT_RESULT] == 0UL) ? 1UL : 0UL;
 8001a68:	6803      	ldr	r3, [r0, #0]
 8001a6a:	f8d3 05b0 	ldr.w	r0, [r3, #1456]	@ 0x5b0
}
 8001a6e:	fab0 f080 	clz	r0, r0
 8001a72:	0940      	lsrs	r0, r0, #5
 8001a74:	4770      	bx	lr

08001a76 <PKA_PollEndOfOperation>:
  * @param  Timeout Timeout duration in millisecond.
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
HAL_StatusTypeDef PKA_PollEndOfOperation(PKA_HandleTypeDef *hpka, uint32_t Timeout, uint32_t Tickstart)
{
 8001a76:	b570      	push	{r4, r5, r6, lr}
 8001a78:	4605      	mov	r5, r0
 8001a7a:	460c      	mov	r4, r1
 8001a7c:	4616      	mov	r6, r2
  /* Wait for the end of operation or timeout */
  while ((hpka->Instance->SR & PKA_SR_PROCENDF) == 0UL)
 8001a7e:	682a      	ldr	r2, [r5, #0]
 8001a80:	6853      	ldr	r3, [r2, #4]
 8001a82:	039b      	lsls	r3, r3, #14
 8001a84:	d501      	bpl.n	8001a8a <PKA_PollEndOfOperation+0x14>
      {
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001a86:	2000      	movs	r0, #0
}
 8001a88:	bd70      	pop	{r4, r5, r6, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001a8a:	1c61      	adds	r1, r4, #1
 8001a8c:	d0f8      	beq.n	8001a80 <PKA_PollEndOfOperation+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0UL))
 8001a8e:	f004 feb9 	bl	8006804 <HAL_GetTick>
 8001a92:	1b80      	subs	r0, r0, r6
 8001a94:	42a0      	cmp	r0, r4
 8001a96:	d801      	bhi.n	8001a9c <PKA_PollEndOfOperation+0x26>
 8001a98:	2c00      	cmp	r4, #0
 8001a9a:	d1f0      	bne.n	8001a7e <PKA_PollEndOfOperation+0x8>
        return HAL_TIMEOUT;
 8001a9c:	2003      	movs	r0, #3
 8001a9e:	e7f3      	b.n	8001a88 <PKA_PollEndOfOperation+0x12>

08001aa0 <PKA_CheckError>:
uint32_t PKA_CheckError(PKA_HandleTypeDef *hpka, uint32_t mode)
{
  uint32_t err = HAL_PKA_ERROR_NONE;

  /* Check RAMERR error */
  if (__HAL_PKA_GET_FLAG(hpka, PKA_FLAG_RAMERR) == SET)
 8001aa0:	6803      	ldr	r3, [r0, #0]
 8001aa2:	6858      	ldr	r0, [r3, #4]
  {
    err |= HAL_PKA_ERROR_RAMERR;
  }

  /* Check ADDRERR error */
  if (__HAL_PKA_GET_FLAG(hpka, PKA_FLAG_ADDRERR) == SET)
 8001aa4:	685a      	ldr	r2, [r3, #4]
  if (__HAL_PKA_GET_FLAG(hpka, PKA_FLAG_RAMERR) == SET)
 8001aa6:	f3c0 40c0 	ubfx	r0, r0, #19, #1
  if (__HAL_PKA_GET_FLAG(hpka, PKA_FLAG_ADDRERR) == SET)
 8001aaa:	02d2      	lsls	r2, r2, #11
  if (__HAL_PKA_GET_FLAG(hpka, PKA_FLAG_RAMERR) == SET)
 8001aac:	ea4f 0040 	mov.w	r0, r0, lsl #1
  {
    err |= HAL_PKA_ERROR_ADDRERR;
 8001ab0:	bf48      	it	mi
 8001ab2:	f040 0001 	orrmi.w	r0, r0, #1
  }

  /* Check the operation success in case of ECDSA signature */
  if (mode == PKA_MODE_ECDSA_SIGNATURE)
 8001ab6:	2924      	cmp	r1, #36	@ 0x24
 8001ab8:	d104      	bne.n	8001ac4 <PKA_CheckError+0x24>
  {
#define EDCSA_SIGN_NOERROR 0UL
    /* If error output result is different from no error, ecsa sign operation need to be repeated */
    if (hpka->Instance->RAM[PKA_ECDSA_SIGN_OUT_ERROR] != EDCSA_SIGN_NOERROR)
 8001aba:	f8d3 3ee8 	ldr.w	r3, [r3, #3816]	@ 0xee8
 8001abe:	b10b      	cbz	r3, 8001ac4 <PKA_CheckError+0x24>
    {
      err |= HAL_PKA_ERROR_OPERATION;
 8001ac0:	f040 0008 	orr.w	r0, r0, #8
    }
  }

  return err;
}
 8001ac4:	4770      	bx	lr

08001ac6 <PKA_GetOptBitSize_u8>:
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ac6:	b129      	cbz	r1, 8001ad4 <PKA_GetOptBitSize_u8+0xe>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001ac8:	fab1 f181 	clz	r1, r1
  }
#else
  position = 32UL - __CLZ(msb);
#endif

  return (((byteNumber - 1UL) * 8UL) + position);
 8001acc:	ebc1 00c0 	rsb	r0, r1, r0, lsl #3
}
 8001ad0:	3018      	adds	r0, #24
 8001ad2:	4770      	bx	lr
    return 32U;
 8001ad4:	2120      	movs	r1, #32
 8001ad6:	e7f9      	b.n	8001acc <PKA_GetOptBitSize_u8+0x6>

08001ad8 <PKA_Memcpy_u8_to_u32>:
  * @param  src Pointer to source
  * @param  n Number of uint8_t to copy (must be multiple of 4)
  * @retval dst
  */
void PKA_Memcpy_u8_to_u32(__IO uint32_t dst[], const uint8_t src[], size_t n)
{
 8001ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (dst != NULL)
 8001ada:	b190      	cbz	r0, 8001b02 <PKA_Memcpy_u8_to_u32+0x2a>
  {
    if (src != NULL)
 8001adc:	b189      	cbz	r1, 8001b02 <PKA_Memcpy_u8_to_u32+0x2a>
 8001ade:	f022 0603 	bic.w	r6, r2, #3
 8001ae2:	188d      	adds	r5, r1, r2
 8001ae4:	4607      	mov	r7, r0
    {
      uint32_t index = 0UL; /* This index is used outside of the loop */

      for (; index < (n / 4UL); index++)
 8001ae6:	0894      	lsrs	r4, r2, #2
 8001ae8:	eb06 0c00 	add.w	ip, r6, r0
 8001aec:	4567      	cmp	r7, ip
 8001aee:	d109      	bne.n	8001b04 <PKA_Memcpy_u8_to_u32+0x2c>
                     | ((uint32_t)src[(n - (index * 4UL) - 3UL)] << 16UL) \
                     | ((uint32_t)src[(n - (index * 4UL) - 4UL)] << 24UL);
      }

      /* Manage the buffers not aligned on uint32_t */
      if ((n % 4UL) == 1UL)
 8001af0:	f002 0303 	and.w	r3, r2, #3
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d117      	bne.n	8001b28 <PKA_Memcpy_u8_to_u32+0x50>
      {
        dst[index] = (uint32_t)src[(n - (index * 4UL) - 1UL)];
 8001af8:	3a01      	subs	r2, #1
 8001afa:	1b92      	subs	r2, r2, r6
 8001afc:	5c8b      	ldrb	r3, [r1, r2]
        dst[index] = ((uint32_t)src[(n - (index * 4UL) - 1UL)]) \
                     | ((uint32_t)src[(n - (index * 4UL) - 2UL)] << 8UL);
      }
      else if ((n % 4UL) == 3UL)
      {
        dst[index] = ((uint32_t)src[(n - (index * 4UL) - 1UL)]) \
 8001afe:	f840 3024 	str.w	r3, [r0, r4, lsl #2]
      {
        /* The last element is already handle in the loop */
      }
    }
  }
}
 8001b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
                     | ((uint32_t)src[(n - (index * 4UL) - 3UL)] << 16UL) \
 8001b04:	f815 3c03 	ldrb.w	r3, [r5, #-3]
                     | ((uint32_t)src[(n - (index * 4UL) - 2UL)] << 8UL) \
 8001b08:	f815 ec02 	ldrb.w	lr, [r5, #-2]
                     | ((uint32_t)src[(n - (index * 4UL) - 3UL)] << 16UL) \
 8001b0c:	041b      	lsls	r3, r3, #16
 8001b0e:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
        dst[index] = ((uint32_t)src[(n - (index * 4UL) - 1UL)]) \
 8001b12:	f815 ec01 	ldrb.w	lr, [r5, #-1]
                     | ((uint32_t)src[(n - (index * 4UL) - 3UL)] << 16UL) \
 8001b16:	ea43 030e 	orr.w	r3, r3, lr
                     | ((uint32_t)src[(n - (index * 4UL) - 4UL)] << 24UL);
 8001b1a:	f815 ed04 	ldrb.w	lr, [r5, #-4]!
 8001b1e:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
        dst[index] = ((uint32_t)src[(n - (index * 4UL) - 1UL)]) \
 8001b22:	f847 3b04 	str.w	r3, [r7], #4
      for (; index < (n / 4UL); index++)
 8001b26:	e7e1      	b.n	8001aec <PKA_Memcpy_u8_to_u32+0x14>
      else if ((n % 4UL) == 2UL)
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d108      	bne.n	8001b3e <PKA_Memcpy_u8_to_u32+0x66>
        dst[index] = ((uint32_t)src[(n - (index * 4UL) - 1UL)]) \
 8001b2c:	1b92      	subs	r2, r2, r6
                     | ((uint32_t)src[(n - (index * 4UL) - 2UL)] << 8UL);
 8001b2e:	4411      	add	r1, r2
 8001b30:	f811 2c02 	ldrb.w	r2, [r1, #-2]
        dst[index] = ((uint32_t)src[(n - (index * 4UL) - 1UL)]) \
 8001b34:	f811 3c01 	ldrb.w	r3, [r1, #-1]
                     | ((uint32_t)src[(n - (index * 4UL) - 2UL)] << 8UL);
 8001b38:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001b3c:	e7df      	b.n	8001afe <PKA_Memcpy_u8_to_u32+0x26>
      else if ((n % 4UL) == 3UL)
 8001b3e:	2b03      	cmp	r3, #3
 8001b40:	d1df      	bne.n	8001b02 <PKA_Memcpy_u8_to_u32+0x2a>
        dst[index] = ((uint32_t)src[(n - (index * 4UL) - 1UL)]) \
 8001b42:	1b92      	subs	r2, r2, r6
                     | ((uint32_t)src[(n - (index * 4UL) - 2UL)] << 8UL) \
 8001b44:	4411      	add	r1, r2
                     | ((uint32_t)src[(n - (index * 4UL) - 3UL)] << 16UL);
 8001b46:	f811 3c03 	ldrb.w	r3, [r1, #-3]
                     | ((uint32_t)src[(n - (index * 4UL) - 2UL)] << 8UL) \
 8001b4a:	f811 2c02 	ldrb.w	r2, [r1, #-2]
                     | ((uint32_t)src[(n - (index * 4UL) - 3UL)] << 16UL);
 8001b4e:	041b      	lsls	r3, r3, #16
 8001b50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        dst[index] = ((uint32_t)src[(n - (index * 4UL) - 1UL)]) \
 8001b54:	f811 2c01 	ldrb.w	r2, [r1, #-1]
                     | ((uint32_t)src[(n - (index * 4UL) - 3UL)] << 16UL);
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	e7d0      	b.n	8001afe <PKA_Memcpy_u8_to_u32+0x26>

08001b5c <PKA_Process>:
  * @param  mode PKA operation
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef PKA_Process(PKA_HandleTypeDef *hpka, uint32_t mode, uint32_t Timeout)
{
 8001b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef err = HAL_OK;
  uint32_t tickstart;

  if (hpka->State == HAL_PKA_STATE_READY)
 8001b5e:	7903      	ldrb	r3, [r0, #4]
 8001b60:	2b01      	cmp	r3, #1
{
 8001b62:	4604      	mov	r4, r0
 8001b64:	460d      	mov	r5, r1
 8001b66:	4617      	mov	r7, r2
  if (hpka->State == HAL_PKA_STATE_READY)
 8001b68:	d138      	bne.n	8001bdc <PKA_Process+0x80>
  {
    /* Set the state to busy */
    hpka->State = HAL_PKA_STATE_BUSY;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	7103      	strb	r3, [r0, #4]

    /* Clear any pending error */
    hpka->ErrorCode = HAL_PKA_ERROR_NONE;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	6083      	str	r3, [r0, #8]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b72:	f004 fe47 	bl	8006804 <HAL_GetTick>

    /* Set the mode and deactivate the interrupts */
    MODIFY_REG(hpka->Instance->CR, PKA_CR_MODE | PKA_CR_PROCENDIE | PKA_CR_RAMERRIE | PKA_CR_ADDRERRIE,
 8001b76:	6826      	ldr	r6, [r4, #0]
 8001b78:	6833      	ldr	r3, [r6, #0]
 8001b7a:	f423 13d1 	bic.w	r3, r3, #1712128	@ 0x1a2000
 8001b7e:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8001b82:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8001b86:	6033      	str	r3, [r6, #0]
               mode << PKA_CR_MODE_Pos);

    /* Start the computation */
    hpka->Instance->CR |= PKA_CR_START;
 8001b88:	6833      	ldr	r3, [r6, #0]
 8001b8a:	f043 0302 	orr.w	r3, r3, #2
    tickstart = HAL_GetTick();
 8001b8e:	4602      	mov	r2, r0
    hpka->Instance->CR |= PKA_CR_START;
 8001b90:	6033      	str	r3, [r6, #0]

    /* Wait for the end of operation or timeout */
    if (PKA_PollEndOfOperation(hpka, Timeout, tickstart) != HAL_OK)
 8001b92:	4639      	mov	r1, r7
 8001b94:	4620      	mov	r0, r4
 8001b96:	f7ff ff6e 	bl	8001a76 <PKA_PollEndOfOperation>
 8001b9a:	b160      	cbz	r0, 8001bb6 <PKA_Process+0x5a>
    {
      /* Abort any ongoing operation */
      CLEAR_BIT(hpka->Instance->CR, PKA_CR_EN);
 8001b9c:	6823      	ldr	r3, [r4, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	f022 0201 	bic.w	r2, r2, #1
 8001ba4:	601a      	str	r2, [r3, #0]

      hpka->ErrorCode |= HAL_PKA_ERROR_TIMEOUT;
 8001ba6:	68a2      	ldr	r2, [r4, #8]
 8001ba8:	f042 0204 	orr.w	r2, r2, #4
 8001bac:	60a2      	str	r2, [r4, #8]

      /* Make ready for the next operation */
      SET_BIT(hpka->Instance->CR, PKA_CR_EN);
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	f042 0201 	orr.w	r2, r2, #1
 8001bb4:	601a      	str	r2, [r3, #0]
    }

    /* Check error */
    hpka->ErrorCode |= PKA_CheckError(hpka, mode);
 8001bb6:	4629      	mov	r1, r5
 8001bb8:	4620      	mov	r0, r4
 8001bba:	f7ff ff71 	bl	8001aa0 <PKA_CheckError>
 8001bbe:	68a3      	ldr	r3, [r4, #8]

    /* Clear all flags */
    hpka->Instance->CLRFR |= (PKA_CLRFR_PROCENDFC | PKA_CLRFR_RAMERRFC | PKA_CLRFR_ADDRERRFC);
 8001bc0:	6822      	ldr	r2, [r4, #0]
    hpka->ErrorCode |= PKA_CheckError(hpka, mode);
 8001bc2:	4303      	orrs	r3, r0
 8001bc4:	60a3      	str	r3, [r4, #8]
    hpka->Instance->CLRFR |= (PKA_CLRFR_PROCENDFC | PKA_CLRFR_RAMERRFC | PKA_CLRFR_ADDRERRFC);
 8001bc6:	6893      	ldr	r3, [r2, #8]
 8001bc8:	f443 13d0 	orr.w	r3, r3, #1703936	@ 0x1a0000
 8001bcc:	6093      	str	r3, [r2, #8]

    /* Set the state to ready */
    hpka->State = HAL_PKA_STATE_READY;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	7123      	strb	r3, [r4, #4]

    /* Manage the result based on encountered errors */
    if (hpka->ErrorCode != HAL_PKA_ERROR_NONE)
 8001bd2:	68a0      	ldr	r0, [r4, #8]
 8001bd4:	3800      	subs	r0, #0
 8001bd6:	bf18      	it	ne
 8001bd8:	2001      	movne	r0, #1
  else
  {
    err = HAL_ERROR;
  }
  return err;
}
 8001bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      err = HAL_ERROR;
 8001bdc:	2001      	movs	r0, #1
 8001bde:	e7fc      	b.n	8001bda <PKA_Process+0x7e>

08001be0 <PKA_ECDSAVerif_Set>:
  * @brief  Set input parameters.
  * @param  hpka PKA handle
  * @param  in Input information
  */
void PKA_ECDSAVerif_Set(PKA_HandleTypeDef *hpka, PKA_ECDSAVerifInTypeDef *in)
{
 8001be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001be4:	460c      	mov	r4, r1
  /* Get the prime order n length */
  hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_ORDER_NB_BITS] = PKA_GetOptBitSize_u8(in->primeOrderSize, *(in->primeOrder));
 8001be6:	6b0f      	ldr	r7, [r1, #48]	@ 0x30
 8001be8:	6805      	ldr	r5, [r0, #0]
 8001bea:	7839      	ldrb	r1, [r7, #0]
 8001bec:	6820      	ldr	r0, [r4, #0]
 8001bee:	f7ff ff6a 	bl	8001ac6 <PKA_GetOptBitSize_u8>

  /* Get the modulus p length */
  hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_MOD_NB_BITS] = PKA_GetOptBitSize_u8(in->modulusSize, *(in->modulus));
 8001bf2:	6862      	ldr	r2, [r4, #4]
 8001bf4:	f8d4 8010 	ldr.w	r8, [r4, #16]
  hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_ORDER_NB_BITS] = PKA_GetOptBitSize_u8(in->primeOrderSize, *(in->primeOrder));
 8001bf8:	f8c5 0404 	str.w	r0, [r5, #1028]	@ 0x404
  hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_MOD_NB_BITS] = PKA_GetOptBitSize_u8(in->modulusSize, *(in->modulus));
 8001bfc:	f898 1000 	ldrb.w	r1, [r8]
 8001c00:	4610      	mov	r0, r2
 8001c02:	f7ff ff60 	bl	8001ac6 <PKA_GetOptBitSize_u8>

  /* Get the coefficient a sign */
  hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_A_COEFF_SIGN] = in->coefSign;
 8001c06:	68a3      	ldr	r3, [r4, #8]
  hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_MOD_NB_BITS] = PKA_GetOptBitSize_u8(in->modulusSize, *(in->modulus));
 8001c08:	f8c5 04b4 	str.w	r0, [r5, #1204]	@ 0x4b4

  /* Move the input parameters coefficient |a| to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_A_COEFF], in->coef, in->modulusSize);
 8001c0c:	68e1      	ldr	r1, [r4, #12]
  hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_A_COEFF_SIGN] = in->coefSign;
 8001c0e:	f8c5 345c 	str.w	r3, [r5, #1116]	@ 0x45c
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_A_COEFF], in->coef, in->modulusSize);
 8001c12:	f505 608c 	add.w	r0, r5, #1120	@ 0x460
 8001c16:	f7ff ff5f 	bl	8001ad8 <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_VERIF_IN_A_COEFF + ((in->modulusSize + 3UL) / 4UL));
 8001c1a:	6862      	ldr	r2, [r4, #4]
 8001c1c:	1cd3      	adds	r3, r2, #3
 8001c1e:	089b      	lsrs	r3, r3, #2
 8001c20:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8001c24:	2600      	movs	r6, #0
 8001c26:	f845 6023 	str.w	r6, [r5, r3, lsl #2]

  /* Move the input parameters modulus value p to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_MOD_GF], in->modulus, in->modulusSize);
 8001c2a:	4641      	mov	r1, r8
 8001c2c:	f505 6097 	add.w	r0, r5, #1208	@ 0x4b8
 8001c30:	f7ff ff52 	bl	8001ad8 <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_VERIF_IN_MOD_GF + ((in->modulusSize + 3UL) / 4UL));
 8001c34:	6862      	ldr	r2, [r4, #4]

  /* Move the input parameters base point G coordinate x to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_INITIAL_POINT_X], in->basePointX, in->modulusSize);
 8001c36:	6961      	ldr	r1, [r4, #20]
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_VERIF_IN_MOD_GF + ((in->modulusSize + 3UL) / 4UL));
 8001c38:	1cd3      	adds	r3, r2, #3
 8001c3a:	089b      	lsrs	r3, r3, #2
 8001c3c:	f503 7397 	add.w	r3, r3, #302	@ 0x12e
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_INITIAL_POINT_X], in->basePointX, in->modulusSize);
 8001c40:	f505 60bd 	add.w	r0, r5, #1512	@ 0x5e8
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_VERIF_IN_MOD_GF + ((in->modulusSize + 3UL) / 4UL));
 8001c44:	f845 6023 	str.w	r6, [r5, r3, lsl #2]
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_INITIAL_POINT_X], in->basePointX, in->modulusSize);
 8001c48:	f7ff ff46 	bl	8001ad8 <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_VERIF_IN_INITIAL_POINT_X + ((in->modulusSize + 3UL) / 4UL));
 8001c4c:	6862      	ldr	r2, [r4, #4]

  /* Move the input parameters base point G coordinate y to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_INITIAL_POINT_Y], in->basePointY, in->modulusSize);
 8001c4e:	69a1      	ldr	r1, [r4, #24]
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_VERIF_IN_INITIAL_POINT_X + ((in->modulusSize + 3UL) / 4UL));
 8001c50:	1cd3      	adds	r3, r2, #3
 8001c52:	089b      	lsrs	r3, r3, #2
 8001c54:	f503 73bd 	add.w	r3, r3, #378	@ 0x17a
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_INITIAL_POINT_Y], in->basePointY, in->modulusSize);
 8001c58:	f205 603c 	addw	r0, r5, #1596	@ 0x63c
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_VERIF_IN_INITIAL_POINT_X + ((in->modulusSize + 3UL) / 4UL));
 8001c5c:	f845 6023 	str.w	r6, [r5, r3, lsl #2]
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_INITIAL_POINT_Y], in->basePointY, in->modulusSize);
 8001c60:	f7ff ff3a 	bl	8001ad8 <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_VERIF_IN_INITIAL_POINT_Y + ((in->modulusSize + 3UL) / 4UL));
 8001c64:	6862      	ldr	r2, [r4, #4]

  /* Move the input parameters public-key curve point Q coordinate xQ to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_PUBLIC_KEY_POINT_X], in->pPubKeyCurvePtX,
 8001c66:	69e1      	ldr	r1, [r4, #28]
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_VERIF_IN_INITIAL_POINT_Y + ((in->modulusSize + 3UL) / 4UL));
 8001c68:	1cd3      	adds	r3, r2, #3
 8001c6a:	089b      	lsrs	r3, r3, #2
 8001c6c:	f203 138f 	addw	r3, r3, #399	@ 0x18f
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_PUBLIC_KEY_POINT_X], in->pPubKeyCurvePtX,
 8001c70:	f505 6074 	add.w	r0, r5, #3904	@ 0xf40
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_VERIF_IN_INITIAL_POINT_Y + ((in->modulusSize + 3UL) / 4UL));
 8001c74:	f845 6023 	str.w	r6, [r5, r3, lsl #2]
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_PUBLIC_KEY_POINT_X], in->pPubKeyCurvePtX,
 8001c78:	f7ff ff2e 	bl	8001ad8 <PKA_Memcpy_u8_to_u32>
                       in->modulusSize);
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_VERIF_IN_PUBLIC_KEY_POINT_X + ((in->modulusSize + 3UL) / 4UL));
 8001c7c:	6862      	ldr	r2, [r4, #4]

  /* Move the input parameters public-key curve point Q coordinate xQ to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_PUBLIC_KEY_POINT_Y], in->pPubKeyCurvePtY,
 8001c7e:	6a21      	ldr	r1, [r4, #32]
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_VERIF_IN_PUBLIC_KEY_POINT_X + ((in->modulusSize + 3UL) / 4UL));
 8001c80:	1cd3      	adds	r3, r2, #3
 8001c82:	089b      	lsrs	r3, r3, #2
 8001c84:	f503 7374 	add.w	r3, r3, #976	@ 0x3d0
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_PUBLIC_KEY_POINT_Y], in->pPubKeyCurvePtY,
 8001c88:	f605 7094 	addw	r0, r5, #3988	@ 0xf94
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_VERIF_IN_PUBLIC_KEY_POINT_X + ((in->modulusSize + 3UL) / 4UL));
 8001c8c:	f845 6023 	str.w	r6, [r5, r3, lsl #2]
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_PUBLIC_KEY_POINT_Y], in->pPubKeyCurvePtY,
 8001c90:	f7ff ff22 	bl	8001ad8 <PKA_Memcpy_u8_to_u32>
                       in->modulusSize);
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_VERIF_IN_PUBLIC_KEY_POINT_Y + ((in->modulusSize + 3UL) / 4UL));
 8001c94:	6863      	ldr	r3, [r4, #4]

  /* Move the input parameters signature part r to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_SIGNATURE_R], in->RSign, in->primeOrderSize);
 8001c96:	6822      	ldr	r2, [r4, #0]
 8001c98:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_VERIF_IN_PUBLIC_KEY_POINT_Y + ((in->modulusSize + 3UL) / 4UL));
 8001c9a:	3303      	adds	r3, #3
 8001c9c:	089b      	lsrs	r3, r3, #2
 8001c9e:	f203 33e5 	addw	r3, r3, #997	@ 0x3e5
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_SIGNATURE_R], in->RSign, in->primeOrderSize);
 8001ca2:	f505 5084 	add.w	r0, r5, #4224	@ 0x1080
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_VERIF_IN_PUBLIC_KEY_POINT_Y + ((in->modulusSize + 3UL) / 4UL));
 8001ca6:	f845 6023 	str.w	r6, [r5, r3, lsl #2]
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_SIGNATURE_R], in->RSign, in->primeOrderSize);
 8001caa:	3018      	adds	r0, #24
 8001cac:	f7ff ff14 	bl	8001ad8 <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_VERIF_IN_SIGNATURE_R + ((in->primeOrderSize + 3UL) / 4UL));
 8001cb0:	6822      	ldr	r2, [r4, #0]

  /* Move the input parameters signature part s to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_SIGNATURE_S], in->SSign, in->primeOrderSize);
 8001cb2:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_VERIF_IN_SIGNATURE_R + ((in->primeOrderSize + 3UL) / 4UL));
 8001cb4:	1cd3      	adds	r3, r2, #3
 8001cb6:	089b      	lsrs	r3, r3, #2
 8001cb8:	f203 4326 	addw	r3, r3, #1062	@ 0x426
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_SIGNATURE_S], in->SSign, in->primeOrderSize);
 8001cbc:	f605 2044 	addw	r0, r5, #2628	@ 0xa44
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_VERIF_IN_SIGNATURE_R + ((in->primeOrderSize + 3UL) / 4UL));
 8001cc0:	f845 6023 	str.w	r6, [r5, r3, lsl #2]
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_SIGNATURE_S], in->SSign, in->primeOrderSize);
 8001cc4:	f7ff ff08 	bl	8001ad8 <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_VERIF_IN_SIGNATURE_S + ((in->primeOrderSize + 3UL) / 4UL));
 8001cc8:	6822      	ldr	r2, [r4, #0]

  /* Move the input parameters hash of message z to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_HASH_E], in->hash, in->primeOrderSize);
 8001cca:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_VERIF_IN_SIGNATURE_S + ((in->primeOrderSize + 3UL) / 4UL));
 8001ccc:	1cd3      	adds	r3, r2, #3
 8001cce:	089b      	lsrs	r3, r3, #2
 8001cd0:	f203 2391 	addw	r3, r3, #657	@ 0x291
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_HASH_E], in->hash, in->primeOrderSize);
 8001cd4:	f605 70e8 	addw	r0, r5, #4072	@ 0xfe8
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_VERIF_IN_SIGNATURE_S + ((in->primeOrderSize + 3UL) / 4UL));
 8001cd8:	f845 6023 	str.w	r6, [r5, r3, lsl #2]
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_HASH_E], in->hash, in->primeOrderSize);
 8001cdc:	f7ff fefc 	bl	8001ad8 <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_VERIF_IN_HASH_E + ((in->primeOrderSize + 3UL) / 4UL));
 8001ce0:	6822      	ldr	r2, [r4, #0]
 8001ce2:	1cd3      	adds	r3, r2, #3
 8001ce4:	089b      	lsrs	r3, r3, #2
 8001ce6:	f203 33fa 	addw	r3, r3, #1018	@ 0x3fa

  /* Move the input parameters curve prime order n to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_ORDER_N], in->primeOrder, in->primeOrderSize);
 8001cea:	4639      	mov	r1, r7
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_VERIF_IN_HASH_E + ((in->primeOrderSize + 3UL) / 4UL));
 8001cec:	f845 6023 	str.w	r6, [r5, r3, lsl #2]
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_ECDSA_VERIF_IN_ORDER_N], in->primeOrder, in->primeOrderSize);
 8001cf0:	f605 505c 	addw	r0, r5, #3420	@ 0xd5c
 8001cf4:	f7ff fef0 	bl	8001ad8 <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_ECDSA_VERIF_IN_ORDER_N + ((in->primeOrderSize + 3UL) / 4UL));
 8001cf8:	6823      	ldr	r3, [r4, #0]
 8001cfa:	3303      	adds	r3, #3
 8001cfc:	089b      	lsrs	r3, r3, #2
 8001cfe:	f203 3357 	addw	r3, r3, #855	@ 0x357
 8001d02:	f845 6023 	str.w	r6, [r5, r3, lsl #2]
}
 8001d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001d0a <HAL_PKA_ECDSAVerif>:
{
 8001d0a:	b538      	push	{r3, r4, r5, lr}
 8001d0c:	4604      	mov	r4, r0
 8001d0e:	4615      	mov	r5, r2
  PKA_ECDSAVerif_Set(hpka, in);
 8001d10:	f7ff ff66 	bl	8001be0 <PKA_ECDSAVerif_Set>
  return PKA_Process(hpka, PKA_MODE_ECDSA_VERIFICATION, Timeout);
 8001d14:	462a      	mov	r2, r5
 8001d16:	4620      	mov	r0, r4
 8001d18:	2126      	movs	r1, #38	@ 0x26
}
 8001d1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return PKA_Process(hpka, PKA_MODE_ECDSA_VERIFICATION, Timeout);
 8001d1e:	f7ff bf1d 	b.w	8001b5c <PKA_Process>

08001d22 <load_block>:
  * @retval  None
  */
static void load_block(const uint8_t *input_start,
                       uint32_t num_els,
                       uint32_t *load_buffer)
{
 8001d22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d24:	4615      	mov	r5, r2
  uint32_t i;
  uint32_t j;
  uint32_t full_words = num_els / 4u;
 8001d26:	088c      	lsrs	r4, r1, #2

  uint32_t remaining_bytes = num_els % 4u;
 8001d28:	f001 0603 	and.w	r6, r1, #3
  uint32_t temp_word;

  /* Convert any 4 bytes in one 32 bits word */
  for (i = 0; i < full_words; i++)
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	2700      	movs	r7, #0
 8001d30:	42a7      	cmp	r7, r4
 8001d32:	f102 0204 	add.w	r2, r2, #4
 8001d36:	d123      	bne.n	8001d80 <load_block+0x5e>
  {
    load_buffer[i] = BYTES_TO_WORD(input_start, 4u * i);
  }

  /* If the block is not multiple of 16 bytes, pad the buffer */
  if ((num_els == 0u) || (full_words < 4u))
 8001d38:	290f      	cmp	r1, #15
 8001d3a:	d83d      	bhi.n	8001db8 <load_block+0x96>
  {
    /* last block: 0x [remaining data] 80 00 00 .. 00 */
    temp_word = 0x80u;

    /* Insert the 0x80 byte in the correct position */
    load_buffer[full_words] = temp_word << (24u - (8u * remaining_bytes));
 8001d3c:	f1c6 0203 	rsb	r2, r6, #3
 8001d40:	f021 0103 	bic.w	r1, r1, #3
 8001d44:	00d2      	lsls	r2, r2, #3
 8001d46:	2380      	movs	r3, #128	@ 0x80
 8001d48:	4093      	lsls	r3, r2
 8001d4a:	eb05 0c01 	add.w	ip, r5, r1
 8001d4e:	4408      	add	r0, r1

    /* Include the remaining bytes of data */
    for (j = 0u; j < remaining_bytes; j++)
 8001d50:	2200      	movs	r2, #0
    {
      load_buffer[full_words]
      |= (uint32_t)(input_start[(4u * full_words) + j]) << (24u - (8u * j));
 8001d52:	f06f 0e07 	mvn.w	lr, #7
    for (j = 0u; j < remaining_bytes; j++)
 8001d56:	42b2      	cmp	r2, r6
    load_buffer[full_words] = temp_word << (24u - (8u * remaining_bytes));
 8001d58:	f8cc 3000 	str.w	r3, [ip]
    for (j = 0u; j < remaining_bytes; j++)
 8001d5c:	d123      	bne.n	8001da6 <load_block+0x84>
    }

    /* Fill the rest of the block with zeros */
    for (i = full_words + 1u; i < 4u; i++)
 8001d5e:	1c60      	adds	r0, r4, #1
    {
      load_buffer[i] = 0u;
 8001d60:	f1c4 0303 	rsb	r3, r4, #3
 8001d64:	2804      	cmp	r0, #4
 8001d66:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001d6a:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8001d6e:	bf98      	it	ls
 8001d70:	461a      	movls	r2, r3
    }
  }
}
 8001d72:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      load_buffer[i] = 0u;
 8001d76:	bf88      	it	hi
 8001d78:	2200      	movhi	r2, #0
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	f004 bf3e 	b.w	8006bfc <memset>
    load_buffer[i] = BYTES_TO_WORD(input_start, 4u * i);
 8001d80:	f812 3c03 	ldrb.w	r3, [r2, #-3]
 8001d84:	f812 cc04 	ldrb.w	ip, [r2, #-4]
 8001d88:	041b      	lsls	r3, r3, #16
 8001d8a:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 8001d8e:	f812 cc01 	ldrb.w	ip, [r2, #-1]
 8001d92:	ea43 030c 	orr.w	r3, r3, ip
 8001d96:	f812 cc02 	ldrb.w	ip, [r2, #-2]
 8001d9a:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8001d9e:	f845 3027 	str.w	r3, [r5, r7, lsl #2]
  for (i = 0; i < full_words; i++)
 8001da2:	3701      	adds	r7, #1
 8001da4:	e7c4      	b.n	8001d30 <load_block+0xe>
      |= (uint32_t)(input_start[(4u * full_words) + j]) << (24u - (8u * j));
 8001da6:	fb0e f702 	mul.w	r7, lr, r2
 8001daa:	f810 1b01 	ldrb.w	r1, [r0], #1
 8001dae:	3718      	adds	r7, #24
 8001db0:	40b9      	lsls	r1, r7
 8001db2:	430b      	orrs	r3, r1
    for (j = 0u; j < remaining_bytes; j++)
 8001db4:	3201      	adds	r2, #1
 8001db6:	e7ce      	b.n	8001d56 <load_block+0x34>
}
 8001db8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001dba <derive_subkey2>:
  * @param   output_buffer Buffer that will contain the computed K2 subkey
  *
  * @retval  None
  */
static void derive_subkey2(const uint32_t *sub_key1, uint32_t *output_buffer)
{
 8001dba:	b510      	push	{r4, lr}
  uint32_t carry = ((sub_key1[0] >> 31) & 1u) * 0x00000087u;

  output_buffer[0] = ((sub_key1[0] << 1) | (sub_key1[1] >> 31));
 8001dbc:	e9d0 3400 	ldrd	r3, r4, [r0]
 8001dc0:	005a      	lsls	r2, r3, #1
 8001dc2:	ea42 72d4 	orr.w	r2, r2, r4, lsr #31
 8001dc6:	600a      	str	r2, [r1, #0]
  output_buffer[1] = ((sub_key1[1] << 1) | (sub_key1[2] >> 31));
 8001dc8:	e9d0 4201 	ldrd	r4, r2, [r0, #4]
 8001dcc:	0fd2      	lsrs	r2, r2, #31
 8001dce:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8001dd2:	604a      	str	r2, [r1, #4]
  output_buffer[2] = ((sub_key1[2] << 1) | (sub_key1[3] >> 31));
 8001dd4:	e9d0 4202 	ldrd	r4, r2, [r0, #8]
 8001dd8:	0fd2      	lsrs	r2, r2, #31
 8001dda:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8001dde:	608a      	str	r2, [r1, #8]
  output_buffer[3] = (sub_key1[3] << 1) ^ carry;
 8001de0:	68c2      	ldr	r2, [r0, #12]
  uint32_t carry = ((sub_key1[0] >> 31) & 1u) * 0x00000087u;
 8001de2:	0fdb      	lsrs	r3, r3, #31
 8001de4:	2087      	movs	r0, #135	@ 0x87
 8001de6:	4343      	muls	r3, r0
  output_buffer[3] = (sub_key1[3] << 1) ^ carry;
 8001de8:	ea83 0342 	eor.w	r3, r3, r2, lsl #1
 8001dec:	60cb      	str	r3, [r1, #12]

}
 8001dee:	bd10      	pop	{r4, pc}

08001df0 <xor_key>:
  * @param   key Buffer containing the key
  *
  * @retval  None
  */
static void xor_key(uint32_t *block, const uint32_t *key)
{
 8001df0:	b510      	push	{r4, lr}
 8001df2:	1f03      	subs	r3, r0, #4
 8001df4:	3904      	subs	r1, #4
 8001df6:	300c      	adds	r0, #12
  uint32_t i;

  for (i = 0u; i < 4u; i++)
  {
    block[i] ^= key[i];
 8001df8:	f853 2f04 	ldr.w	r2, [r3, #4]!
 8001dfc:	f851 4f04 	ldr.w	r4, [r1, #4]!
  for (i = 0u; i < 4u; i++)
 8001e00:	4283      	cmp	r3, r0
    block[i] ^= key[i];
 8001e02:	ea82 0204 	eor.w	r2, r2, r4
 8001e06:	601a      	str	r2, [r3, #0]
  for (i = 0u; i < 4u; i++)
 8001e08:	d1f6      	bne.n	8001df8 <xor_key+0x8>
  }
}
 8001e0a:	bd10      	pop	{r4, pc}

08001e0c <cleanup_handle>:
#endif /* KMS_ENCRYPT_DECRYPT_BLOB */

/* Private function definitions -----------------------------------------------*/
static void cleanup_handle(CRYP_HandleTypeDef *CrypHandle)
{
  (void)memset(CrypHandle, 0, sizeof(CRYP_HandleTypeDef));
 8001e0c:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001e10:	2100      	movs	r1, #0
 8001e12:	f004 bef3 	b.w	8006bfc <memset>

08001e16 <wrap_allocate_memory>:
  * @param[in]  size Size of area to reserved
  * @param[in]  P_pMemBuf Buffer in which area must be reserved
  * @retval     Area pointer if success, NULL otherwise
  */
uint32_t wrap_allocate_memory(uint32_t size, CA_membuf_stt *P_pMemBuf)
{
 8001e16:	b510      	push	{r4, lr}
 8001e18:	4604      	mov	r4, r0
  uint32_t ptr;
  /* Check memory buffer exists and available size is enough */
  if ((P_pMemBuf == NULL) || ((P_pMemBuf->mSize - P_pMemBuf->mUsed) < (uint16_t)size))
 8001e1a:	b151      	cbz	r1, 8001e32 <wrap_allocate_memory+0x1c>
 8001e1c:	88ca      	ldrh	r2, [r1, #6]
 8001e1e:	888b      	ldrh	r3, [r1, #4]
 8001e20:	b280      	uxth	r0, r0
 8001e22:	1a9b      	subs	r3, r3, r2
 8001e24:	4283      	cmp	r3, r0
 8001e26:	db04      	blt.n	8001e32 <wrap_allocate_memory+0x1c>
  {
    return (uint32_t)NULL;
  }
  /* Return current buffer pointer */
  ptr = (((uint32_t)(P_pMemBuf->pmBuf)) + P_pMemBuf->mUsed);
 8001e28:	680b      	ldr	r3, [r1, #0]
 8001e2a:	1898      	adds	r0, r3, r2
  /* Remove the allocated bytes from the available ones */
  P_pMemBuf->mUsed += (uint16_t)size;
 8001e2c:	4422      	add	r2, r4
 8001e2e:	80ca      	strh	r2, [r1, #6]
  return ptr;
}
 8001e30:	bd10      	pop	{r4, pc}
    return (uint32_t)NULL;
 8001e32:	2000      	movs	r0, #0
 8001e34:	e7fc      	b.n	8001e30 <wrap_allocate_memory+0x1a>

08001e36 <wrap_uint8_to_BigNum>:
  * @param[in]  Psize: Size of the Array in bytes
  * @retval     WRAP_SUCCESS: On success
  * @reval      WRAP_FAILURE: An error occur
  */
uint8_t wrap_uint8_to_BigNum(CA_BigNum_stt *P_pBigNum, const uint8_t *P_pArray, int32_t Psize)
{
 8001e36:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001e3a:	460f      	mov	r7, r1
 8001e3c:	4616      	mov	r6, r2
  uint32_t size_tp;
  uint32_t size_counter = 0;
  uint32_t psize = (uint32_t)Psize;

  /* Check parameters */
  if ((P_pBigNum == NULL)
 8001e3e:	4604      	mov	r4, r0
 8001e40:	2800      	cmp	r0, #0
 8001e42:	d03c      	beq.n	8001ebe <wrap_uint8_to_BigNum+0x88>
      || (P_pArray == NULL))
 8001e44:	2900      	cmp	r1, #0
 8001e46:	d03a      	beq.n	8001ebe <wrap_uint8_to_BigNum+0x88>
  {
    return WRAP_FAILURE;
  }
  if (Psize <= 0)
 8001e48:	2a00      	cmp	r2, #0
 8001e4a:	dd38      	ble.n	8001ebe <wrap_uint8_to_BigNum+0x88>
  {
    return WRAP_FAILURE;
  }

  if (P_pBigNum->pmDigit == NULL)
 8001e4c:	6800      	ldr	r0, [r0, #0]
 8001e4e:	b3b0      	cbz	r0, 8001ebe <wrap_uint8_to_BigNum+0x88>
  {
    /* Compute size of u32 buffer to host u8 buffer.
     * Taking into account if bytes buffer length is or not a multiple of 4 */
    if ((psize % 4UL) > 0UL)
    {
      size_tp = (psize / 4UL) + 1UL;
 8001e50:	0895      	lsrs	r5, r2, #2
    if ((psize % 4UL) > 0UL)
 8001e52:	0793      	lsls	r3, r2, #30
      size_tp = (psize / 4UL) + 1UL;
 8001e54:	bf18      	it	ne
 8001e56:	3501      	addne	r5, #1
    else
    {
      size_tp = psize / 4UL;
    }
    /*Set to zero*/
    (void)memset(P_pBigNum->pmDigit, 0, size_tp * 4U);
 8001e58:	00aa      	lsls	r2, r5, #2
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	f004 fece 	bl	8006bfc <memset>
          P_pBigNum->pmDigit[size_tp - i - 1U] += (uint32_t)(P_pArray[(4U * i) + j]) << (8U * (3U - j));
        }
        else
        {
          /* When there is not enough u8 to fill all the u32, pad with previous u8 */
          P_pBigNum->pmDigit[size_tp - i - 1U] = P_pBigNum->pmDigit[size_tp - i - 1U] >> 8U;
 8001e60:	f105 4c80 	add.w	ip, r5, #1073741824	@ 0x40000000
    for (i = 0U; i < size_tp; i++)
 8001e64:	2200      	movs	r2, #0
          P_pBigNum->pmDigit[size_tp - i - 1U] = P_pBigNum->pmDigit[size_tp - i - 1U] >> 8U;
 8001e66:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8001e6a:	b2d3      	uxtb	r3, r2
    for (i = 0U; i < size_tp; i++)
 8001e6c:	42ab      	cmp	r3, r5
 8001e6e:	ea4f 0082 	mov.w	r0, r2, lsl #2
 8001e72:	d304      	bcc.n	8001e7e <wrap_uint8_to_BigNum+0x48>
        }
      }
    }
    /*Fill the rest of the structure*/
    P_pBigNum->mNumDigits = (uint16_t) size_tp;
    P_pBigNum->mSignFlag = CA_SIGN_POSITIVE;
 8001e74:	2000      	movs	r0, #0
    P_pBigNum->mNumDigits = (uint16_t) size_tp;
 8001e76:	80a5      	strh	r5, [r4, #4]
    P_pBigNum->mSignFlag = CA_SIGN_POSITIVE;
 8001e78:	71e0      	strb	r0, [r4, #7]
  }
  return WRAP_SUCCESS;
}
 8001e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          P_pBigNum->pmDigit[size_tp - i - 1U] += (uint32_t)(P_pArray[(4U * i) + j]) << (8U * (3U - j));
 8001e7e:	6821      	ldr	r1, [r4, #0]
 8001e80:	eb07 0e83 	add.w	lr, r7, r3, lsl #2
          P_pBigNum->pmDigit[size_tp - i - 1U] = P_pBigNum->pmDigit[size_tp - i - 1U] >> 8U;
 8001e84:	ebac 0303 	sub.w	r3, ip, r3
          P_pBigNum->pmDigit[size_tp - i - 1U] += (uint32_t)(P_pArray[(4U * i) + j]) << (8U * (3U - j));
 8001e88:	eb01 0883 	add.w	r8, r1, r3, lsl #2
 8001e8c:	2118      	movs	r1, #24
        size_counter ++;
 8001e8e:	3001      	adds	r0, #1
        if (size_counter <= psize)
 8001e90:	4286      	cmp	r6, r0
          P_pBigNum->pmDigit[size_tp - i - 1U] += (uint32_t)(P_pArray[(4U * i) + j]) << (8U * (3U - j));
 8001e92:	bf28      	it	cs
 8001e94:	f89e 9000 	ldrbcs.w	r9, [lr]
 8001e98:	f8d8 3000 	ldr.w	r3, [r8]
 8001e9c:	bf28      	it	cs
 8001e9e:	fa09 f901 	lslcs.w	r9, r9, r1
      for (j = 0U; j < 4U; j++)
 8001ea2:	f1a1 0108 	sub.w	r1, r1, #8
          P_pBigNum->pmDigit[size_tp - i - 1U] += (uint32_t)(P_pArray[(4U * i) + j]) << (8U * (3U - j));
 8001ea6:	bf2c      	ite	cs
 8001ea8:	444b      	addcs	r3, r9
          P_pBigNum->pmDigit[size_tp - i - 1U] = P_pBigNum->pmDigit[size_tp - i - 1U] >> 8U;
 8001eaa:	0a1b      	lsrcc	r3, r3, #8
      for (j = 0U; j < 4U; j++)
 8001eac:	f111 0f08 	cmn.w	r1, #8
          P_pBigNum->pmDigit[size_tp - i - 1U] += (uint32_t)(P_pArray[(4U * i) + j]) << (8U * (3U - j));
 8001eb0:	f8c8 3000 	str.w	r3, [r8]
      for (j = 0U; j < 4U; j++)
 8001eb4:	f10e 0e01 	add.w	lr, lr, #1
 8001eb8:	d1e9      	bne.n	8001e8e <wrap_uint8_to_BigNum+0x58>
    for (i = 0U; i < size_tp; i++)
 8001eba:	3201      	adds	r2, #1
 8001ebc:	e7d5      	b.n	8001e6a <wrap_uint8_to_BigNum+0x34>
    return WRAP_FAILURE;
 8001ebe:	2001      	movs	r0, #1
 8001ec0:	e7db      	b.n	8001e7a <wrap_uint8_to_BigNum+0x44>

08001ec2 <wrap_BigNum_to_uint8>:
  * @reval      WRAP_FAILURE: An error occurs
  */
uint8_t wrap_BigNum_to_uint8(uint8_t *P_pArray,
                             const CA_BigNum_stt *P_pBigNum,
                             int32_t *P_psize)
{
 8001ec2:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t i;
  uint16_t j;
  /* Check parameters */
  if ((P_pBigNum == NULL)
 8001ec4:	b301      	cbz	r1, 8001f08 <wrap_BigNum_to_uint8+0x46>
      || (P_pArray == NULL))
 8001ec6:	b1f8      	cbz	r0, 8001f08 <wrap_BigNum_to_uint8+0x46>
 8001ec8:	2500      	movs	r5, #0
    return WRAP_FAILURE;
  }

  /* Fill the array */
  /* Loop on u32 buffer */
  for (i = 0U; i < P_pBigNum->mNumDigits; i++)
 8001eca:	888b      	ldrh	r3, [r1, #4]
 8001ecc:	b2ac      	uxth	r4, r5
 8001ece:	42a3      	cmp	r3, r4
 8001ed0:	d802      	bhi.n	8001ed8 <wrap_BigNum_to_uint8+0x16>
    for (j = 4U; j > 0U; j--)
    {
      P_pArray[(P_pBigNum->mNumDigits * 4U) - (i * 4U) - j] = (uint8_t)(P_pBigNum->pmDigit[i] >> ((j - 1U) * 8U));
    }
  }
  if (P_psize != NULL)
 8001ed2:	b9b2      	cbnz	r2, 8001f02 <wrap_BigNum_to_uint8+0x40>
 8001ed4:	2000      	movs	r0, #0
  {
    *P_psize = ((int32_t)(P_pBigNum->mNumDigits) * 4); /*uint32 -> uint8*/
  }

  return WRAP_SUCCESS;
}
 8001ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ed8:	fa1f fc85 	uxth.w	ip, r5
      P_pArray[(P_pBigNum->mNumDigits * 4U) - (i * 4U) - j] = (uint8_t)(P_pBigNum->pmDigit[i] >> ((j - 1U) * 8U));
 8001edc:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
 8001ee0:	2304      	movs	r3, #4
 8001ee2:	888c      	ldrh	r4, [r1, #4]
 8001ee4:	680e      	ldr	r6, [r1, #0]
 8001ee6:	00df      	lsls	r7, r3, #3
 8001ee8:	f856 600e 	ldr.w	r6, [r6, lr]
 8001eec:	eba4 040c 	sub.w	r4, r4, ip
 8001ef0:	ebc3 0484 	rsb	r4, r3, r4, lsl #2
 8001ef4:	3f08      	subs	r7, #8
 8001ef6:	40fe      	lsrs	r6, r7
    for (j = 4U; j > 0U; j--)
 8001ef8:	3b01      	subs	r3, #1
      P_pArray[(P_pBigNum->mNumDigits * 4U) - (i * 4U) - j] = (uint8_t)(P_pBigNum->pmDigit[i] >> ((j - 1U) * 8U));
 8001efa:	5506      	strb	r6, [r0, r4]
    for (j = 4U; j > 0U; j--)
 8001efc:	d1f1      	bne.n	8001ee2 <wrap_BigNum_to_uint8+0x20>
  for (i = 0U; i < P_pBigNum->mNumDigits; i++)
 8001efe:	3501      	adds	r5, #1
 8001f00:	e7e3      	b.n	8001eca <wrap_BigNum_to_uint8+0x8>
    *P_psize = ((int32_t)(P_pBigNum->mNumDigits) * 4); /*uint32 -> uint8*/
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	6013      	str	r3, [r2, #0]
 8001f06:	e7e5      	b.n	8001ed4 <wrap_BigNum_to_uint8+0x12>
    return WRAP_FAILURE;
 8001f08:	2001      	movs	r0, #1
 8001f0a:	e7e4      	b.n	8001ed6 <wrap_BigNum_to_uint8+0x14>

08001f0c <CMAC_compute>:
                         uint32_t inputDataLength,
                         const uint8_t *key,
                         uint32_t keySize,
                         uint32_t macSize,
                         uint8_t *macBuff)
{
 8001f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f10:	f5ad 7d1f 	sub.w	sp, sp, #636	@ 0x27c
  mac_error_t retval;

  /* Internal variables, buffers */
  uint32_t temp_iv[4] = {0,};
 8001f14:	ac07      	add	r4, sp, #28
{
 8001f16:	4693      	mov	fp, r2
 8001f18:	4680      	mov	r8, r0
  uint32_t temp_iv[4] = {0,};
 8001f1a:	2210      	movs	r2, #16
{
 8001f1c:	460e      	mov	r6, r1
  uint32_t temp_iv[4] = {0,};
 8001f1e:	4620      	mov	r0, r4
 8001f20:	2100      	movs	r1, #0
{
 8001f22:	4699      	mov	r9, r3
 8001f24:	e9dd 5aa8 	ldrd	r5, sl, [sp, #672]	@ 0x2a0
  uint32_t temp_key[8] = {0,};
  uint32_t temp_buffer[4u * MAX_PROCESSED_BLOCKS];

  uint32_t k1[4] = {0,};
 8001f28:	af0b      	add	r7, sp, #44	@ 0x2c
  uint32_t temp_iv[4] = {0,};
 8001f2a:	f004 fe67 	bl	8006bfc <memset>
  uint32_t temp_key[8] = {0,};
 8001f2e:	2220      	movs	r2, #32
 8001f30:	2100      	movs	r1, #0
 8001f32:	a813      	add	r0, sp, #76	@ 0x4c
 8001f34:	f004 fe62 	bl	8006bfc <memset>
  uint32_t k1[4] = {0,};
 8001f38:	2210      	movs	r2, #16
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	4638      	mov	r0, r7
 8001f3e:	f004 fe5d 	bl	8006bfc <memset>
  uint32_t k2[4] = {0,};
 8001f42:	2210      	movs	r2, #16
 8001f44:	2100      	movs	r1, #0
 8001f46:	a80f      	add	r0, sp, #60	@ 0x3c
 8001f48:	f004 fe58 	bl	8006bfc <memset>

  CRYP_HandleTypeDef hcryp;
  HAL_StatusTypeDef periph_retval;

  /* Check that pointers to buffers are not null */
  if ((key == NULL) || (macBuff == NULL))
 8001f4c:	f1bb 0f00 	cmp.w	fp, #0
 8001f50:	f000 80c6 	beq.w	80020e0 <CMAC_compute+0x1d4>
 8001f54:	f1ba 0f00 	cmp.w	sl, #0
 8001f58:	f000 80c2 	beq.w	80020e0 <CMAC_compute+0x1d4>
  {
    return MAC_ERROR_BAD_PARAMETER;
  }

  /* Plaintext buffer can be null only when there is no data to authenticate */
  if ((inputData == NULL) && (inputDataLength > 0u))
 8001f5c:	f1b8 0f00 	cmp.w	r8, #0
 8001f60:	d102      	bne.n	8001f68 <CMAC_compute+0x5c>
 8001f62:	2e00      	cmp	r6, #0
 8001f64:	f040 80bc 	bne.w	80020e0 <CMAC_compute+0x1d4>
  {
    return MAC_ERROR_BAD_PARAMETER;
  }

  /* check that the requested mac size is less or equal than the block size */
  if (macSize > AES_BLOCK_SIZE)
 8001f68:	1e6b      	subs	r3, r5, #1
 8001f6a:	2b0f      	cmp	r3, #15
 8001f6c:	f200 80ba 	bhi.w	80020e4 <CMAC_compute+0x1d8>
  {
    return MAC_ERROR_WRONG_MAC_SIZE;
  }

  /* Initialize the AES peripheral */
  (void)memset((uint8_t *)&hcryp, 0, sizeof(CRYP_HandleTypeDef));
 8001f70:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8001f74:	2100      	movs	r1, #0
 8001f76:	a85b      	add	r0, sp, #364	@ 0x16c
 8001f78:	f004 fe40 	bl	8006bfc <memset>

  /* check that the provided key size is acceptable */
  switch (keySize)
 8001f7c:	f1b9 0f10 	cmp.w	r9, #16
 8001f80:	d006      	beq.n	8001f90 <CMAC_compute+0x84>
 8001f82:	f1b9 0f20 	cmp.w	r9, #32
 8001f86:	f040 80af 	bne.w	80020e8 <CMAC_compute+0x1dc>
  {
    case AES128_KEY:
      hcryp.Init.KeySize = CRYP_KEYSIZE_128B;
      break;
    case AES256_KEY:
      hcryp.Init.KeySize = CRYP_KEYSIZE_256B;
 8001f8a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001f8e:	935d      	str	r3, [sp, #372]	@ 0x174
      return MAC_ERROR_UNSUPPORTED_KEY_SIZE;
      break;
  }

  /* Complete the configuration of the AES peripheral */
  hcryp.Instance = CA_AES_INSTANCE;
 8001f90:	4b56      	ldr	r3, [pc, #344]	@ (80020ec <CMAC_compute+0x1e0>)
 8001f92:	935b      	str	r3, [sp, #364]	@ 0x16c
  hcryp.Init.DataType = CRYP_DATATYPE_32B;
  hcryp.Init.Algorithm = CRYP_AES_CBC;
  hcryp.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_WORD;

  /* Initialize the CRYP peripheral */
  periph_retval = HAL_CRYP_Init(&hcryp);
 8001f94:	a85b      	add	r0, sp, #364	@ 0x16c
  hcryp.Init.Algorithm = CRYP_AES_CBC;
 8001f96:	2320      	movs	r3, #32
 8001f98:	9360      	str	r3, [sp, #384]	@ 0x180
  periph_retval = HAL_CRYP_Init(&hcryp);
 8001f9a:	f7fe ff99 	bl	8000ed0 <HAL_CRYP_Init>
  if (periph_retval != HAL_OK)
 8001f9e:	b120      	cbz	r0, 8001faa <CMAC_compute+0x9e>
  {
    return MAC_ERROR_HW_FAILURE;
 8001fa0:	2004      	movs	r0, #4
      macBuff[((macSize / 4u) * 4u) + i] = BYTE_X(temp_iv[macSize / 4u], i);
    }
  }

  return retval;
}
 8001fa2:	f50d 7d1f 	add.w	sp, sp, #636	@ 0x27c
 8001fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  load_block(key, keySize, temp_key);
 8001faa:	aa13      	add	r2, sp, #76	@ 0x4c
 8001fac:	4649      	mov	r1, r9
 8001fae:	4658      	mov	r0, fp
 8001fb0:	f7ff feb7 	bl	8001d22 <load_block>
  hcryp->Init.pKey = key;
 8001fb4:	ab13      	add	r3, sp, #76	@ 0x4c
  hcryp->Init.pInitVect = iv;
 8001fb6:	e9cd 375e 	strd	r3, r7, [sp, #376]	@ 0x178
  periph_retval = HAL_CRYP_Encrypt(hcryp, input, (uint16_t)inputSize,
 8001fba:	23ff      	movs	r3, #255	@ 0xff
 8001fbc:	9300      	str	r3, [sp, #0]
 8001fbe:	2204      	movs	r2, #4
 8001fc0:	463b      	mov	r3, r7
 8001fc2:	4639      	mov	r1, r7
 8001fc4:	a85b      	add	r0, sp, #364	@ 0x16c
 8001fc6:	f7ff f9fd 	bl	80013c4 <HAL_CRYP_Encrypt>
  if (periph_retval != HAL_OK)
 8001fca:	2800      	cmp	r0, #0
 8001fcc:	d1e8      	bne.n	8001fa0 <CMAC_compute+0x94>
    derive_subkey2(output_buffer, output_buffer);
 8001fce:	4639      	mov	r1, r7
 8001fd0:	4638      	mov	r0, r7
 8001fd2:	f7ff fef2 	bl	8001dba <derive_subkey2>
  derive_subkey2(k1, k2);
 8001fd6:	4638      	mov	r0, r7
 8001fd8:	a90f      	add	r1, sp, #60	@ 0x3c
 8001fda:	f7ff feee 	bl	8001dba <derive_subkey2>
  num_blocks = inputDataLength / AES_BLOCK_SIZE;
 8001fde:	0933      	lsrs	r3, r6, #4
  if (remaining_bytes > 0u)
 8001fe0:	0732      	lsls	r2, r6, #28
    num_blocks++;
 8001fe2:	bf18      	it	ne
 8001fe4:	3301      	addne	r3, #1
  num_blocks *= AES_BLOCK_SIZE;
 8001fe6:	011b      	lsls	r3, r3, #4
 8001fe8:	9304      	str	r3, [sp, #16]
    load_block(&inputData[i], block_size, &temp_buffer[processed_block * 4u]);
 8001fea:	eb08 0306 	add.w	r3, r8, r6
  num_blocks *= AES_BLOCK_SIZE;
 8001fee:	4637      	mov	r7, r6
  uint32_t processed_block = 0u;
 8001ff0:	f04f 0b00 	mov.w	fp, #0
    load_block(&inputData[i], block_size, &temp_buffer[processed_block * 4u]);
 8001ff4:	9305      	str	r3, [sp, #20]
    if ((inputDataLength - i) < AES_BLOCK_SIZE)
 8001ff6:	2f0f      	cmp	r7, #15
 8001ff8:	bf8c      	ite	hi
 8001ffa:	2300      	movhi	r3, #0
 8001ffc:	2301      	movls	r3, #1
 8001ffe:	9303      	str	r3, [sp, #12]
    load_block(&inputData[i], block_size, &temp_buffer[processed_block * 4u]);
 8002000:	ab1b      	add	r3, sp, #108	@ 0x6c
 8002002:	eb03 180b 	add.w	r8, r3, fp, lsl #4
 8002006:	9b05      	ldr	r3, [sp, #20]
    if ((inputDataLength - i) < AES_BLOCK_SIZE)
 8002008:	bf94      	ite	ls
 800200a:	46b9      	movls	r9, r7
 800200c:	f04f 0910 	movhi.w	r9, #16
    load_block(&inputData[i], block_size, &temp_buffer[processed_block * 4u]);
 8002010:	4649      	mov	r1, r9
 8002012:	4642      	mov	r2, r8
 8002014:	1bd8      	subs	r0, r3, r7
 8002016:	f7ff fe84 	bl	8001d22 <load_block>
    if (block_size < AES_BLOCK_SIZE)
 800201a:	f1b9 0f10 	cmp.w	r9, #16
 800201e:	f10b 0901 	add.w	r9, fp, #1
 8002022:	d00a      	beq.n	800203a <CMAC_compute+0x12e>
      xor_key(&temp_buffer[processed_block * 4u], k2);
 8002024:	a90f      	add	r1, sp, #60	@ 0x3c
 8002026:	4640      	mov	r0, r8
 8002028:	f7ff fee2 	bl	8001df0 <xor_key>
    if (processed_block == (MAX_PROCESSED_BLOCKS - 1u))
 800202c:	f1bb 0f0f 	cmp.w	fp, #15
 8002030:	d009      	beq.n	8002046 <CMAC_compute+0x13a>
    if (encrypt == 0u)
 8002032:	9b03      	ldr	r3, [sp, #12]
 8002034:	b93b      	cbnz	r3, 8002046 <CMAC_compute+0x13a>
      processed_block++;
 8002036:	46cb      	mov	fp, r9
 8002038:	e019      	b.n	800206e <CMAC_compute+0x162>
    else if ((inputDataLength - i) == AES_BLOCK_SIZE)
 800203a:	2f10      	cmp	r7, #16
 800203c:	d1f6      	bne.n	800202c <CMAC_compute+0x120>
      xor_key(&temp_buffer[processed_block * 4u], k1);
 800203e:	a90b      	add	r1, sp, #44	@ 0x2c
 8002040:	4640      	mov	r0, r8
 8002042:	f7ff fed5 	bl	8001df0 <xor_key>
  hcryp->Init.pKey = key;
 8002046:	ab13      	add	r3, sp, #76	@ 0x4c
  hcryp->Init.pInitVect = iv;
 8002048:	e9cd 345e 	strd	r3, r4, [sp, #376]	@ 0x178
  periph_retval = HAL_CRYP_Encrypt(hcryp, input, (uint16_t)inputSize,
 800204c:	23ff      	movs	r3, #255	@ 0xff
 800204e:	9300      	str	r3, [sp, #0]
      retval = AES_Encrypt(&hcryp, temp_buffer, 4u * (processed_block + 1u),
 8002050:	ea4f 0289 	mov.w	r2, r9, lsl #2
  periph_retval = HAL_CRYP_Encrypt(hcryp, input, (uint16_t)inputSize,
 8002054:	ab1b      	add	r3, sp, #108	@ 0x6c
 8002056:	b292      	uxth	r2, r2
 8002058:	4619      	mov	r1, r3
 800205a:	a85b      	add	r0, sp, #364	@ 0x16c
 800205c:	f7ff f9b2 	bl	80013c4 <HAL_CRYP_Encrypt>
  if (periph_retval != HAL_OK)
 8002060:	4683      	mov	fp, r0
 8002062:	2800      	cmp	r0, #0
 8002064:	d19c      	bne.n	8001fa0 <CMAC_compute+0x94>
        temp_iv[j] = temp_buffer[(processed_block * 4u) + j];
 8002066:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800206a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  } while (i < num_blocks);
 800206e:	9b04      	ldr	r3, [sp, #16]
 8002070:	3f10      	subs	r7, #16
 8002072:	1bf2      	subs	r2, r6, r7
 8002074:	429a      	cmp	r2, r3
 8002076:	d3be      	bcc.n	8001ff6 <CMAC_compute+0xea>
  periph_retval = HAL_CRYP_DeInit(&hcryp);
 8002078:	a85b      	add	r0, sp, #364	@ 0x16c
 800207a:	f7fe ff4c 	bl	8000f16 <HAL_CRYP_DeInit>
  if (periph_retval != HAL_OK)
 800207e:	2800      	cmp	r0, #0
 8002080:	d18e      	bne.n	8001fa0 <CMAC_compute+0x94>
 8002082:	f025 0103 	bic.w	r1, r5, #3
  for (i = 0u; i < (macSize / 4u); i++)
 8002086:	08ae      	lsrs	r6, r5, #2
 8002088:	4627      	mov	r7, r4
 800208a:	4653      	mov	r3, sl
 800208c:	4451      	add	r1, sl
 800208e:	428b      	cmp	r3, r1
 8002090:	d109      	bne.n	80020a6 <CMAC_compute+0x19a>
  if (macSize < 16u)
 8002092:	2d10      	cmp	r5, #16
 8002094:	d085      	beq.n	8001fa2 <CMAC_compute+0x96>
    for (i = 0; i < (macSize % 4u); i++)
 8002096:	f005 0703 	and.w	r7, r5, #3
 800209a:	2300      	movs	r3, #0
      macBuff[((macSize / 4u) * 4u) + i] = BYTE_X(temp_iv[macSize / 4u], i);
 800209c:	f025 0503 	bic.w	r5, r5, #3
 80020a0:	f06f 0c07 	mvn.w	ip, #7
 80020a4:	e019      	b.n	80020da <CMAC_compute+0x1ce>
    WORD_TO_BYTES(temp_iv[i], macBuff[(4u * i) + 3u], macBuff[(4u * i) + 2u],
 80020a6:	f857 2b04 	ldr.w	r2, [r7], #4
 80020aa:	70da      	strb	r2, [r3, #3]
 80020ac:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 80020b0:	f883 c002 	strb.w	ip, [r3, #2]
 80020b4:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80020b8:	0e12      	lsrs	r2, r2, #24
 80020ba:	f883 c001 	strb.w	ip, [r3, #1]
 80020be:	f803 2b04 	strb.w	r2, [r3], #4
  for (i = 0u; i < (macSize / 4u); i++)
 80020c2:	e7e4      	b.n	800208e <CMAC_compute+0x182>
      macBuff[((macSize / 4u) * 4u) + i] = BYTE_X(temp_iv[macSize / 4u], i);
 80020c4:	fb0c f103 	mul.w	r1, ip, r3
 80020c8:	f854 2026 	ldr.w	r2, [r4, r6, lsl #2]
 80020cc:	eb0a 0e03 	add.w	lr, sl, r3
 80020d0:	3118      	adds	r1, #24
 80020d2:	40ca      	lsrs	r2, r1
 80020d4:	f80e 2005 	strb.w	r2, [lr, r5]
    for (i = 0; i < (macSize % 4u); i++)
 80020d8:	3301      	adds	r3, #1
 80020da:	429f      	cmp	r7, r3
 80020dc:	d8f2      	bhi.n	80020c4 <CMAC_compute+0x1b8>
 80020de:	e760      	b.n	8001fa2 <CMAC_compute+0x96>
    return MAC_ERROR_BAD_PARAMETER;
 80020e0:	2001      	movs	r0, #1
 80020e2:	e75e      	b.n	8001fa2 <CMAC_compute+0x96>
    return MAC_ERROR_WRONG_MAC_SIZE;
 80020e4:	2002      	movs	r0, #2
 80020e6:	e75c      	b.n	8001fa2 <CMAC_compute+0x96>
  switch (keySize)
 80020e8:	2003      	movs	r0, #3
 80020ea:	e75a      	b.n	8001fa2 <CMAC_compute+0x96>
 80020ec:	58001800 	.word	0x58001800

080020f0 <CA_AES_CBC_Encrypt_Init>:
  *                                  See note
  */
int32_t CA_AES_CBC_Encrypt_Init(CA_AESCBCctx_stt *P_pAESCBCctx,
                                const uint8_t *P_pKey,
                                const uint8_t *P_pIv)
{
 80020f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020f4:	460e      	mov	r6, r1
 80020f6:	4615      	mov	r5, r2
  int32_t aes_ret_status = CA_AES_SUCCESS;

  if ((P_pAESCBCctx == NULL) || (P_pKey == NULL) || (P_pIv == NULL))
 80020f8:	4604      	mov	r4, r0
 80020fa:	2800      	cmp	r0, #0
 80020fc:	d06c      	beq.n	80021d8 <CA_AES_CBC_Encrypt_Init+0xe8>
 80020fe:	2900      	cmp	r1, #0
 8002100:	d06a      	beq.n	80021d8 <CA_AES_CBC_Encrypt_Init+0xe8>
 8002102:	2a00      	cmp	r2, #0
 8002104:	d068      	beq.n	80021d8 <CA_AES_CBC_Encrypt_Init+0xe8>
  {
    return CA_AES_ERR_BAD_PARAMETER;
  }

  if ((P_pAESCBCctx->mKeySize == 0)
 8002106:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002108:	b10b      	cbz	r3, 800210e <CA_AES_CBC_Encrypt_Init+0x1e>
      || (P_pAESCBCctx->mIvSize == 0))
 800210a:	6903      	ldr	r3, [r0, #16]
 800210c:	b91b      	cbnz	r3, 8002116 <CA_AES_CBC_Encrypt_Init+0x26>
  {
    return CA_AES_ERR_BAD_CONTEXT;
 800210e:	f640 401f 	movw	r0, #3103	@ 0xc1f
  {
    /* Initialization Error */
    aes_ret_status = CA_AES_ERR_BAD_CONTEXT;
  }
  return aes_ret_status;
}
 8002112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  cleanup_handle(&(P_pAESCBCctx->CrypHandle));
 8002116:	f100 072c 	add.w	r7, r0, #44	@ 0x2c
 800211a:	4638      	mov	r0, r7
 800211c:	f7ff fe76 	bl	8001e0c <cleanup_handle>
  P_pAESCBCctx->CrypHandle.Instance = CA_AES_INSTANCE;
 8002120:	4b2f      	ldr	r3, [pc, #188]	@ (80021e0 <CA_AES_CBC_Encrypt_Init+0xf0>)
 8002122:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (HAL_CRYP_DeInit(&P_pAESCBCctx->CrypHandle) != HAL_OK)
 8002124:	4638      	mov	r0, r7
 8002126:	f7fe fef6 	bl	8000f16 <HAL_CRYP_DeInit>
 800212a:	2800      	cmp	r0, #0
 800212c:	d1ef      	bne.n	800210e <CA_AES_CBC_Encrypt_Init+0x1e>
  if (P_pAESCBCctx->mKeySize == (int32_t)CA_CRL_AES128_KEY)
 800212e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  P_pAESCBCctx->CrypHandle.Init.DataType      = CRYP_DATATYPE_8B;
 8002130:	2304      	movs	r3, #4
  if (P_pAESCBCctx->mKeySize == (int32_t)CA_CRL_AES128_KEY)
 8002132:	2910      	cmp	r1, #16
  P_pAESCBCctx->CrypHandle.Init.DataType      = CRYP_DATATYPE_8B;
 8002134:	6323      	str	r3, [r4, #48]	@ 0x30
  if (P_pAESCBCctx->mKeySize == (int32_t)CA_CRL_AES128_KEY)
 8002136:	d003      	beq.n	8002140 <CA_AES_CBC_Encrypt_Init+0x50>
  else if (P_pAESCBCctx->mKeySize == (int32_t)CA_CRL_AES256_KEY)
 8002138:	2920      	cmp	r1, #32
 800213a:	d1e8      	bne.n	800210e <CA_AES_CBC_Encrypt_Init+0x1e>
 800213c:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
    P_pAESCBCctx->CrypHandle.Init.KeySize     = CRYP_KEYSIZE_128B;
 8002140:	6360      	str	r0, [r4, #52]	@ 0x34
 8002142:	462a      	mov	r2, r5
 8002144:	4623      	mov	r3, r4
 8002146:	f104 0010 	add.w	r0, r4, #16
    P_pAESCBCctx->Iv_endian[4U * i]        = P_pIv[3U + (4U * i)];
 800214a:	78d5      	ldrb	r5, [r2, #3]
 800214c:	f883 5138 	strb.w	r5, [r3, #312]	@ 0x138
    P_pAESCBCctx->Iv_endian[1U + (4U * i)] = P_pIv[2U + (4U * i)];
 8002150:	7895      	ldrb	r5, [r2, #2]
 8002152:	f883 5139 	strb.w	r5, [r3, #313]	@ 0x139
    P_pAESCBCctx->Iv_endian[2U + (4U * i)] = P_pIv[1U + (4U * i)];
 8002156:	7855      	ldrb	r5, [r2, #1]
 8002158:	f883 513a 	strb.w	r5, [r3, #314]	@ 0x13a
    P_pAESCBCctx->Iv_endian[3U + (4U * i)] = P_pIv[4U * i];
 800215c:	f812 5b04 	ldrb.w	r5, [r2], #4
 8002160:	f883 513b 	strb.w	r5, [r3, #315]	@ 0x13b
  for (uint8_t i = 0; i < 4U; i++)
 8002164:	3304      	adds	r3, #4
 8002166:	4283      	cmp	r3, r0
 8002168:	d1ef      	bne.n	800214a <CA_AES_CBC_Encrypt_Init+0x5a>
  for (uint8_t i = 0; i < ((uint32_t)(P_pAESCBCctx->mKeySize) / 4U); i++)
 800216a:	088d      	lsrs	r5, r1, #2
 800216c:	f04f 0c00 	mov.w	ip, #0
 8002170:	fa5f f08c 	uxtb.w	r0, ip
 8002174:	4285      	cmp	r5, r0
 8002176:	f10c 0c01 	add.w	ip, ip, #1
 800217a:	d814      	bhi.n	80021a6 <CA_AES_CBC_Encrypt_Init+0xb6>
  P_pAESCBCctx->CrypHandle.Init.Algorithm       = CRYP_AES_CBC;
 800217c:	2320      	movs	r3, #32
 800217e:	6423      	str	r3, [r4, #64]	@ 0x40
  P_pAESCBCctx->CrypHandle.Init.pKey = (uint32_t *)(uint32_t)(P_pAESCBCctx->Key_endian);
 8002180:	f504 73a4 	add.w	r3, r4, #328	@ 0x148
 8002184:	63a3      	str	r3, [r4, #56]	@ 0x38
  P_pAESCBCctx->CrypHandle.Init.pInitVect = (uint32_t *)(uint32_t)(P_pAESCBCctx->Iv_endian);
 8002186:	f504 739c 	add.w	r3, r4, #312	@ 0x138
 800218a:	63e3      	str	r3, [r4, #60]	@ 0x3c
  P_pAESCBCctx->CrypHandle.Init.Header = NULL;
 800218c:	2300      	movs	r3, #0
  P_pAESCBCctx->CrypHandle.Init.HeaderSize = 0;
 800218e:	e9c4 3311 	strd	r3, r3, [r4, #68]	@ 0x44
  P_pAESCBCctx->CrypHandle.Init.B0 = NULL;
 8002192:	64e3      	str	r3, [r4, #76]	@ 0x4c
  P_pAESCBCctx->CrypHandle.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_BYTE;
 8002194:	2301      	movs	r3, #1
 8002196:	6523      	str	r3, [r4, #80]	@ 0x50
  P_pAESCBCctx->CrypHandle.Init.KeyIVConfigSkip = CRYP_KEYIVCONFIG_ONCE;
 8002198:	65a3      	str	r3, [r4, #88]	@ 0x58
  if (HAL_CRYP_Init(&P_pAESCBCctx->CrypHandle) != HAL_OK)
 800219a:	4638      	mov	r0, r7
 800219c:	f7fe fe98 	bl	8000ed0 <HAL_CRYP_Init>
 80021a0:	2800      	cmp	r0, #0
 80021a2:	d0b6      	beq.n	8002112 <CA_AES_CBC_Encrypt_Init+0x22>
 80021a4:	e7b3      	b.n	800210e <CA_AES_CBC_Encrypt_Init+0x1e>
    P_pAESCBCctx->Key_endian[4U * i]        = P_pKey[3U + (4U * i)];
 80021a6:	0083      	lsls	r3, r0, #2
 80021a8:	1cda      	adds	r2, r3, #3
 80021aa:	18e1      	adds	r1, r4, r3
 80021ac:	f816 e002 	ldrb.w	lr, [r6, r2]
 80021b0:	f881 e148 	strb.w	lr, [r1, #328]	@ 0x148
    P_pAESCBCctx->Key_endian[1U + (4U * i)] = P_pKey[2U + (4U * i)];
 80021b4:	1c99      	adds	r1, r3, #2
 80021b6:	3301      	adds	r3, #1
 80021b8:	eb04 0e03 	add.w	lr, r4, r3
 80021bc:	f816 8001 	ldrb.w	r8, [r6, r1]
 80021c0:	f88e 8148 	strb.w	r8, [lr, #328]	@ 0x148
    P_pAESCBCctx->Key_endian[2U + (4U * i)] = P_pKey[1U + (4U * i)];
 80021c4:	4421      	add	r1, r4
 80021c6:	5cf3      	ldrb	r3, [r6, r3]
 80021c8:	f881 3148 	strb.w	r3, [r1, #328]	@ 0x148
    P_pAESCBCctx->Key_endian[3U + (4U * i)] = P_pKey[4U * i];
 80021cc:	4422      	add	r2, r4
 80021ce:	f816 3020 	ldrb.w	r3, [r6, r0, lsl #2]
 80021d2:	f882 3148 	strb.w	r3, [r2, #328]	@ 0x148
  for (uint8_t i = 0; i < ((uint32_t)(P_pAESCBCctx->mKeySize) / 4U); i++)
 80021d6:	e7cb      	b.n	8002170 <CA_AES_CBC_Encrypt_Init+0x80>
    return CA_AES_ERR_BAD_PARAMETER;
 80021d8:	f44f 6042 	mov.w	r0, #3104	@ 0xc20
 80021dc:	e799      	b.n	8002112 <CA_AES_CBC_Encrypt_Init+0x22>
 80021de:	bf00      	nop
 80021e0:	58001800 	.word	0x58001800

080021e4 <CA_AES_CBC_Encrypt_Append>:
int32_t CA_AES_CBC_Encrypt_Append(CA_AESCBCctx_stt *P_pAESCBCctx,
                                  const uint8_t *P_pInputBuffer,
                                  int32_t P_inputSize,
                                  uint8_t *P_pOutputBuffer,
                                  int32_t *P_pOutputSize)
{
 80021e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80021e6:	9e06      	ldr	r6, [sp, #24]
 80021e8:	4614      	mov	r4, r2

  int32_t aes_ret_status = CA_AES_SUCCESS;

  if ((P_pAESCBCctx == NULL)
 80021ea:	b170      	cbz	r0, 800220a <CA_AES_CBC_Encrypt_Append+0x26>
      || (P_pInputBuffer == NULL)
 80021ec:	b169      	cbz	r1, 800220a <CA_AES_CBC_Encrypt_Append+0x26>
      || (P_pOutputBuffer == NULL)
 80021ee:	b163      	cbz	r3, 800220a <CA_AES_CBC_Encrypt_Append+0x26>
      || (P_pOutputSize == NULL))
 80021f0:	b15e      	cbz	r6, 800220a <CA_AES_CBC_Encrypt_Append+0x26>
  {
    return CA_AES_ERR_BAD_PARAMETER;
  }
  if (P_inputSize < (int32_t)CA_CRL_AES_BLOCK)
 80021f2:	2c0f      	cmp	r4, #15
 80021f4:	dd0c      	ble.n	8002210 <CA_AES_CBC_Encrypt_Append+0x2c>
  {
    return CA_AES_ERR_BAD_INPUT_SIZE;
  }

  if (HAL_CRYP_Encrypt(&P_pAESCBCctx->CrypHandle, (uint32_t *)(uint32_t)P_pInputBuffer, (uint16_t)P_inputSize,
 80021f6:	22ff      	movs	r2, #255	@ 0xff
 80021f8:	9200      	str	r2, [sp, #0]
 80021fa:	302c      	adds	r0, #44	@ 0x2c
 80021fc:	b2a2      	uxth	r2, r4
 80021fe:	f7ff f8e1 	bl	80013c4 <HAL_CRYP_Encrypt>
 8002202:	b940      	cbnz	r0, 8002216 <CA_AES_CBC_Encrypt_Append+0x32>
  {
    aes_ret_status = CA_AES_ERR_BAD_OPERATION;
  }
  else
  {
    *P_pOutputSize = P_inputSize;
 8002204:	6034      	str	r4, [r6, #0]
  }

  return aes_ret_status;
}
 8002206:	b002      	add	sp, #8
 8002208:	bd70      	pop	{r4, r5, r6, pc}
    return CA_AES_ERR_BAD_PARAMETER;
 800220a:	f44f 6042 	mov.w	r0, #3104	@ 0xc20
 800220e:	e7fa      	b.n	8002206 <CA_AES_CBC_Encrypt_Append+0x22>
    return CA_AES_ERR_BAD_INPUT_SIZE;
 8002210:	f640 401d 	movw	r0, #3101	@ 0xc1d
 8002214:	e7f7      	b.n	8002206 <CA_AES_CBC_Encrypt_Append+0x22>
    aes_ret_status = CA_AES_ERR_BAD_OPERATION;
 8002216:	f640 401e 	movw	r0, #3102	@ 0xc1e
 800221a:	e7f4      	b.n	8002206 <CA_AES_CBC_Encrypt_Append+0x22>

0800221c <CA_AES_CBC_Encrypt_Finish>:
  * @retval     CA_AES_ERR_BAD_PARAMETER: At least one parameter is a NULL pointer
  */
int32_t CA_AES_CBC_Encrypt_Finish(CA_AESCBCctx_stt *P_pAESCBCctx,
                                  uint8_t       *P_pOutputBuffer,
                                  int32_t       *P_pOutputSize)
{
 800221c:	b538      	push	{r3, r4, r5, lr}
  int32_t aes_ret_status = CA_AES_SUCCESS;

  (void)P_pOutputBuffer;
  (void)P_pOutputSize;

  if (HAL_CRYP_DeInit(&P_pAESCBCctx->CrypHandle) != HAL_OK)
 800221e:	f100 042c 	add.w	r4, r0, #44	@ 0x2c
 8002222:	4620      	mov	r0, r4
 8002224:	f7fe fe77 	bl	8000f16 <HAL_CRYP_DeInit>
  int32_t aes_ret_status = CA_AES_SUCCESS;
 8002228:	2800      	cmp	r0, #0
 800222a:	bf14      	ite	ne
 800222c:	f44f 6542 	movne.w	r5, #3104	@ 0xc20
 8002230:	2500      	moveq	r5, #0
  {
    aes_ret_status = CA_AES_ERR_BAD_PARAMETER;
  }
  cleanup_handle(&(P_pAESCBCctx->CrypHandle));
 8002232:	4620      	mov	r0, r4
 8002234:	f7ff fdea 	bl	8001e0c <cleanup_handle>

  return aes_ret_status;
}
 8002238:	4628      	mov	r0, r5
 800223a:	bd38      	pop	{r3, r4, r5, pc}

0800223c <CA_AES_CBC_Decrypt_Init>:
  *                                  See note
  */
int32_t CA_AES_CBC_Decrypt_Init(CA_AESCBCctx_stt *P_pAESCBCctx,
                                const uint8_t *P_pKey,
                                const uint8_t *P_pIv)
{
 800223c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800223e:	460d      	mov	r5, r1
 8002240:	4616      	mov	r6, r2
  int32_t aes_ret_status = CA_AES_SUCCESS;

  if ((P_pAESCBCctx == NULL) || (P_pKey == NULL) || (P_pIv == NULL))
 8002242:	4604      	mov	r4, r0
 8002244:	2800      	cmp	r0, #0
 8002246:	d067      	beq.n	8002318 <CA_AES_CBC_Decrypt_Init+0xdc>
 8002248:	2900      	cmp	r1, #0
 800224a:	d065      	beq.n	8002318 <CA_AES_CBC_Decrypt_Init+0xdc>
 800224c:	2a00      	cmp	r2, #0
 800224e:	d063      	beq.n	8002318 <CA_AES_CBC_Decrypt_Init+0xdc>
  {
    return CA_AES_ERR_BAD_PARAMETER;
  }

  if ((P_pAESCBCctx->mKeySize == 0)
 8002250:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002252:	b10b      	cbz	r3, 8002258 <CA_AES_CBC_Decrypt_Init+0x1c>
      || (P_pAESCBCctx->mIvSize == 0))
 8002254:	6903      	ldr	r3, [r0, #16]
 8002256:	b913      	cbnz	r3, 800225e <CA_AES_CBC_Decrypt_Init+0x22>
  {
    return CA_AES_ERR_BAD_CONTEXT;
 8002258:	f640 401f 	movw	r0, #3103	@ 0xc1f
  {
    add_aec_cbc_decrypt_handle(&P_pAESCBCctx->CrypHandle);
  }
#endif /* KMS_ENCRYPT_DECRYPT_BLOB */
  return aes_ret_status;
}
 800225c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  cleanup_handle(&(P_pAESCBCctx->CrypHandle));
 800225e:	f100 072c 	add.w	r7, r0, #44	@ 0x2c
 8002262:	4638      	mov	r0, r7
 8002264:	f7ff fdd2 	bl	8001e0c <cleanup_handle>
  P_pAESCBCctx->CrypHandle.Instance = CA_AES_INSTANCE;
 8002268:	4b2d      	ldr	r3, [pc, #180]	@ (8002320 <CA_AES_CBC_Decrypt_Init+0xe4>)
 800226a:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (HAL_CRYP_DeInit(&P_pAESCBCctx->CrypHandle) != HAL_OK)
 800226c:	4638      	mov	r0, r7
 800226e:	f7fe fe52 	bl	8000f16 <HAL_CRYP_DeInit>
 8002272:	2800      	cmp	r0, #0
 8002274:	d1f0      	bne.n	8002258 <CA_AES_CBC_Decrypt_Init+0x1c>
  if (P_pAESCBCctx->mKeySize == (int32_t)CA_CRL_AES128_KEY)
 8002276:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  P_pAESCBCctx->CrypHandle.Init.DataType      = CRYP_DATATYPE_8B;
 8002278:	2304      	movs	r3, #4
  if (P_pAESCBCctx->mKeySize == (int32_t)CA_CRL_AES128_KEY)
 800227a:	2910      	cmp	r1, #16
  P_pAESCBCctx->CrypHandle.Init.DataType      = CRYP_DATATYPE_8B;
 800227c:	6323      	str	r3, [r4, #48]	@ 0x30
  if (P_pAESCBCctx->mKeySize == (int32_t)CA_CRL_AES128_KEY)
 800227e:	d003      	beq.n	8002288 <CA_AES_CBC_Decrypt_Init+0x4c>
  else if (P_pAESCBCctx->mKeySize == (int32_t)CA_CRL_AES256_KEY)
 8002280:	2920      	cmp	r1, #32
 8002282:	d1e9      	bne.n	8002258 <CA_AES_CBC_Decrypt_Init+0x1c>
 8002284:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
    P_pAESCBCctx->CrypHandle.Init.KeySize     = CRYP_KEYSIZE_128B;
 8002288:	6360      	str	r0, [r4, #52]	@ 0x34
 800228a:	4632      	mov	r2, r6
 800228c:	4623      	mov	r3, r4
 800228e:	f104 0010 	add.w	r0, r4, #16
    P_pAESCBCctx->Iv_endian[4U * i]        = P_pIv[3U + (4U * i)];
 8002292:	78d6      	ldrb	r6, [r2, #3]
 8002294:	f883 6138 	strb.w	r6, [r3, #312]	@ 0x138
    P_pAESCBCctx->Iv_endian[1U + (4U * i)] = P_pIv[2U + (4U * i)];
 8002298:	7896      	ldrb	r6, [r2, #2]
 800229a:	f883 6139 	strb.w	r6, [r3, #313]	@ 0x139
    P_pAESCBCctx->Iv_endian[2U + (4U * i)] = P_pIv[1U + (4U * i)];
 800229e:	7856      	ldrb	r6, [r2, #1]
 80022a0:	f883 613a 	strb.w	r6, [r3, #314]	@ 0x13a
    P_pAESCBCctx->Iv_endian[3U + (4U * i)] = P_pIv[4U * i];
 80022a4:	f812 6b04 	ldrb.w	r6, [r2], #4
 80022a8:	f883 613b 	strb.w	r6, [r3, #315]	@ 0x13b
  for (uint8_t i = 0; i < 4U; i++)
 80022ac:	3304      	adds	r3, #4
 80022ae:	4283      	cmp	r3, r0
 80022b0:	d1ef      	bne.n	8002292 <CA_AES_CBC_Decrypt_Init+0x56>
 80022b2:	f504 73a4 	add.w	r3, r4, #328	@ 0x148
  for (uint8_t i = 0; i < ((uint8_t)(P_pAESCBCctx->mKeySize) / 4U); i++)
 80022b6:	f3c1 0285 	ubfx	r2, r1, #2, #6
 80022ba:	2000      	movs	r0, #0
 80022bc:	4629      	mov	r1, r5
 80022be:	461d      	mov	r5, r3
 80022c0:	b2c6      	uxtb	r6, r0
 80022c2:	42b2      	cmp	r2, r6
 80022c4:	f101 0104 	add.w	r1, r1, #4
 80022c8:	f103 0304 	add.w	r3, r3, #4
 80022cc:	d812      	bhi.n	80022f4 <CA_AES_CBC_Decrypt_Init+0xb8>
  P_pAESCBCctx->CrypHandle.Init.Algorithm       = CRYP_AES_CBC;
 80022ce:	2320      	movs	r3, #32
 80022d0:	6423      	str	r3, [r4, #64]	@ 0x40
  P_pAESCBCctx->CrypHandle.Init.pInitVect = (uint32_t *)(uint32_t)(P_pAESCBCctx->Iv_endian);
 80022d2:	f504 739c 	add.w	r3, r4, #312	@ 0x138
 80022d6:	63e3      	str	r3, [r4, #60]	@ 0x3c
  P_pAESCBCctx->CrypHandle.Init.Header = NULL;
 80022d8:	2300      	movs	r3, #0
  P_pAESCBCctx->CrypHandle.Init.HeaderSize = 0;
 80022da:	e9c4 3311 	strd	r3, r3, [r4, #68]	@ 0x44
  P_pAESCBCctx->CrypHandle.Init.B0 = NULL;
 80022de:	64e3      	str	r3, [r4, #76]	@ 0x4c
  P_pAESCBCctx->CrypHandle.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_BYTE;
 80022e0:	2301      	movs	r3, #1
  P_pAESCBCctx->CrypHandle.Init.pKey = (uint32_t *)(uint32_t)(P_pAESCBCctx->Key_endian);
 80022e2:	63a5      	str	r5, [r4, #56]	@ 0x38
  P_pAESCBCctx->CrypHandle.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_BYTE;
 80022e4:	6523      	str	r3, [r4, #80]	@ 0x50
  P_pAESCBCctx->CrypHandle.Init.KeyIVConfigSkip = CRYP_KEYIVCONFIG_ONCE;
 80022e6:	65a3      	str	r3, [r4, #88]	@ 0x58
  if (HAL_CRYP_Init(&P_pAESCBCctx->CrypHandle) != HAL_OK)
 80022e8:	4638      	mov	r0, r7
 80022ea:	f7fe fdf1 	bl	8000ed0 <HAL_CRYP_Init>
 80022ee:	2800      	cmp	r0, #0
 80022f0:	d0b4      	beq.n	800225c <CA_AES_CBC_Decrypt_Init+0x20>
 80022f2:	e7b1      	b.n	8002258 <CA_AES_CBC_Decrypt_Init+0x1c>
    P_pAESCBCctx->Key_endian[4U * i]        = P_pKey[3U + (4U * i)];
 80022f4:	f811 6c01 	ldrb.w	r6, [r1, #-1]
 80022f8:	f803 6c04 	strb.w	r6, [r3, #-4]
    P_pAESCBCctx->Key_endian[1U + (4U * i)] = P_pKey[2U + (4U * i)];
 80022fc:	f811 6c02 	ldrb.w	r6, [r1, #-2]
 8002300:	f803 6c03 	strb.w	r6, [r3, #-3]
    P_pAESCBCctx->Key_endian[2U + (4U * i)] = P_pKey[1U + (4U * i)];
 8002304:	f811 6c03 	ldrb.w	r6, [r1, #-3]
 8002308:	f803 6c02 	strb.w	r6, [r3, #-2]
    P_pAESCBCctx->Key_endian[3U + (4U * i)] = P_pKey[4U * i];
 800230c:	f811 6c04 	ldrb.w	r6, [r1, #-4]
 8002310:	f803 6c01 	strb.w	r6, [r3, #-1]
  for (uint8_t i = 0; i < ((uint8_t)(P_pAESCBCctx->mKeySize) / 4U); i++)
 8002314:	3001      	adds	r0, #1
 8002316:	e7d3      	b.n	80022c0 <CA_AES_CBC_Decrypt_Init+0x84>
    return CA_AES_ERR_BAD_PARAMETER;
 8002318:	f44f 6042 	mov.w	r0, #3104	@ 0xc20
 800231c:	e79e      	b.n	800225c <CA_AES_CBC_Decrypt_Init+0x20>
 800231e:	bf00      	nop
 8002320:	58001800 	.word	0x58001800

08002324 <CA_AES_CBC_Decrypt_Append>:
int32_t CA_AES_CBC_Decrypt_Append(CA_AESCBCctx_stt *P_pAESCBCctx,
                                  const uint8_t *P_pInputBuffer,
                                  int32_t        P_inputSize,
                                  uint8_t       *P_pOutputBuffer,
                                  int32_t       *P_pOutputSize)
{
 8002324:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002326:	9e06      	ldr	r6, [sp, #24]
 8002328:	4614      	mov	r4, r2
  int32_t aes_ret_status = CA_AES_SUCCESS;

  if ((P_pAESCBCctx == NULL)
 800232a:	b170      	cbz	r0, 800234a <CA_AES_CBC_Decrypt_Append+0x26>
      || (P_pInputBuffer == NULL)
 800232c:	b169      	cbz	r1, 800234a <CA_AES_CBC_Decrypt_Append+0x26>
      || (P_pOutputBuffer == NULL)
 800232e:	b163      	cbz	r3, 800234a <CA_AES_CBC_Decrypt_Append+0x26>
      || (P_pOutputSize == NULL))
 8002330:	b15e      	cbz	r6, 800234a <CA_AES_CBC_Decrypt_Append+0x26>
  {
    return CA_AES_ERR_BAD_PARAMETER;
  }
  if (P_inputSize < (int32_t)CA_CRL_AES_BLOCK)
 8002332:	2c0f      	cmp	r4, #15
 8002334:	dd0c      	ble.n	8002350 <CA_AES_CBC_Decrypt_Append+0x2c>
  {
    return CA_AES_ERR_BAD_INPUT_SIZE;
  }


  if (HAL_CRYP_Decrypt(&P_pAESCBCctx->CrypHandle, (uint32_t *)(uint32_t)P_pInputBuffer, (uint16_t)P_inputSize,
 8002336:	22ff      	movs	r2, #255	@ 0xff
 8002338:	9200      	str	r2, [sp, #0]
 800233a:	302c      	adds	r0, #44	@ 0x2c
 800233c:	b2a2      	uxth	r2, r4
 800233e:	f7ff f8d5 	bl	80014ec <HAL_CRYP_Decrypt>
 8002342:	b940      	cbnz	r0, 8002356 <CA_AES_CBC_Decrypt_Append+0x32>
  {
    aes_ret_status = CA_AES_ERR_BAD_OPERATION;
  }
  else
  {
    *P_pOutputSize = P_inputSize;
 8002344:	6034      	str	r4, [r6, #0]
  }

  return aes_ret_status;
}
 8002346:	b002      	add	sp, #8
 8002348:	bd70      	pop	{r4, r5, r6, pc}
    return CA_AES_ERR_BAD_PARAMETER;
 800234a:	f44f 6042 	mov.w	r0, #3104	@ 0xc20
 800234e:	e7fa      	b.n	8002346 <CA_AES_CBC_Decrypt_Append+0x22>
    return CA_AES_ERR_BAD_INPUT_SIZE;
 8002350:	f640 401d 	movw	r0, #3101	@ 0xc1d
 8002354:	e7f7      	b.n	8002346 <CA_AES_CBC_Decrypt_Append+0x22>
    aes_ret_status = CA_AES_ERR_BAD_OPERATION;
 8002356:	f640 401e 	movw	r0, #3102	@ 0xc1e
 800235a:	e7f4      	b.n	8002346 <CA_AES_CBC_Decrypt_Append+0x22>

0800235c <CA_AES_CBC_Decrypt_Finish>:
  *             output data, in bytes. Not used.
  * @note       This function will DeInit AES handle.
  * @retval     CA_AES_SUCCESS: Operation Successful
  * @retval     CA_AES_ERR_BAD_PARAMETER: At least one parameter is a NULL pointer
  */
int32_t CA_AES_CBC_Decrypt_Finish(CA_AESCBCctx_stt *P_pAESCBCctx,
 800235c:	f7ff bf5e 	b.w	800221c <CA_AES_CBC_Encrypt_Finish>

08002360 <CA_AES_CMAC_Encrypt_Init>:
  * @retval     CA_AES_ERR_BAD_PARAMETER: At least one parameter is a NULL pointer
  * @retval     CA_AES_ERR_BAD_CONTEXT: Context not initialized with valid values
  */
int32_t CA_AES_CMAC_Encrypt_Init(CA_AESCMACctx_stt *P_pAESCMACctx)
{
  if (P_pAESCMACctx == NULL)
 8002360:	b170      	cbz	r0, 8002380 <CA_AES_CMAC_Encrypt_Init+0x20>
  {
    return CA_AES_ERR_BAD_PARAMETER;
  }
  if (P_pAESCMACctx->pmKey == NULL)
 8002362:	6883      	ldr	r3, [r0, #8]
 8002364:	b17b      	cbz	r3, 8002386 <CA_AES_CMAC_Encrypt_Init+0x26>
  {
    return CA_AES_ERR_BAD_CONTEXT;
  }
  if ((P_pAESCMACctx->mKeySize != (int32_t)CA_CRL_AES128_KEY)
 8002366:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002368:	2b10      	cmp	r3, #16
 800236a:	d001      	beq.n	8002370 <CA_AES_CMAC_Encrypt_Init+0x10>
      && (P_pAESCMACctx->mKeySize != (int32_t)CA_CRL_AES256_KEY))
 800236c:	2b20      	cmp	r3, #32
 800236e:	d10a      	bne.n	8002386 <CA_AES_CMAC_Encrypt_Init+0x26>
  {
    return CA_AES_ERR_BAD_CONTEXT;
  }
  if ((P_pAESCMACctx->mTagSize <= 0) || (P_pAESCMACctx->mTagSize > (int32_t)CA_CRL_AES_BLOCK))
 8002370:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002372:	3b01      	subs	r3, #1
    return CA_AES_ERR_BAD_CONTEXT;
 8002374:	2b10      	cmp	r3, #16
 8002376:	f640 401f 	movw	r0, #3103	@ 0xc1f
 800237a:	bf38      	it	cc
 800237c:	2000      	movcc	r0, #0
 800237e:	4770      	bx	lr
    return CA_AES_ERR_BAD_PARAMETER;
 8002380:	f44f 6042 	mov.w	r0, #3104	@ 0xc20
 8002384:	4770      	bx	lr
    return CA_AES_ERR_BAD_CONTEXT;
 8002386:	f640 401f 	movw	r0, #3103	@ 0xc1f
  {
    return CA_AES_ERR_BAD_CONTEXT;
  }
  return CA_AES_SUCCESS;
}
 800238a:	4770      	bx	lr

0800238c <CA_AES_CMAC_Encrypt_Append>:
  * @retval     CA_AES_ERR_BAD_OPERATION: Append not allowed
  */
int32_t CA_AES_CMAC_Encrypt_Append(CA_AESCMACctx_stt *P_pAESCMACctx,
                                   const uint8_t  *P_pInputBuffer,
                                   int32_t         P_inputSize)
{
 800238c:	b513      	push	{r0, r1, r4, lr}
 800238e:	4604      	mov	r4, r0
 8002390:	4608      	mov	r0, r1
 8002392:	4611      	mov	r1, r2
  mac_error_t error;
  if ((P_pAESCMACctx == NULL) || (P_pInputBuffer == NULL) || (P_inputSize == 0))
 8002394:	b18c      	cbz	r4, 80023ba <CA_AES_CMAC_Encrypt_Append+0x2e>
 8002396:	b180      	cbz	r0, 80023ba <CA_AES_CMAC_Encrypt_Append+0x2e>
 8002398:	b17a      	cbz	r2, 80023ba <CA_AES_CMAC_Encrypt_Append+0x2e>
  error = CMAC_compute(P_pInputBuffer,
                       (uint32_t)P_inputSize,
                       P_pAESCMACctx->pmKey,
                       (uint32_t)(P_pAESCMACctx->mKeySize),
                       (uint32_t)(P_pAESCMACctx->mTagSize),
                       P_pAESCMACctx->mac);
 800239a:	f104 0334 	add.w	r3, r4, #52	@ 0x34
  error = CMAC_compute(P_pInputBuffer,
 800239e:	9301      	str	r3, [sp, #4]
 80023a0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80023a6:	68a2      	ldr	r2, [r4, #8]
 80023a8:	f7ff fdb0 	bl	8001f0c <CMAC_compute>
  if (error == MAC_SUCCESS)
  {
    return CA_AES_SUCCESS;
 80023ac:	2800      	cmp	r0, #0
 80023ae:	f640 401e 	movw	r0, #3102	@ 0xc1e
 80023b2:	bf08      	it	eq
 80023b4:	2000      	moveq	r0, #0
  }
  else
  {
    return CA_AES_ERR_BAD_OPERATION;
  }
}
 80023b6:	b002      	add	sp, #8
 80023b8:	bd10      	pop	{r4, pc}
    return CA_AES_ERR_BAD_PARAMETER;
 80023ba:	f44f 6042 	mov.w	r0, #3104	@ 0xc20
 80023be:	e7fa      	b.n	80023b6 <CA_AES_CMAC_Encrypt_Append+0x2a>

080023c0 <CA_AES_CMAC_Encrypt_Finish>:
  *             see note
  */
int32_t CA_AES_CMAC_Encrypt_Finish(CA_AESCMACctx_stt *P_pAESCMACctx,
                                   uint8_t        *P_pOutputBuffer,
                                   int32_t        *P_pOutputSize)
{
 80023c0:	b538      	push	{r3, r4, r5, lr}
 80023c2:	4604      	mov	r4, r0
 80023c4:	4615      	mov	r5, r2
 80023c6:	4608      	mov	r0, r1
  if ((P_pAESCMACctx == NULL) || (P_pOutputBuffer == NULL) || (P_pOutputSize == NULL))
 80023c8:	b154      	cbz	r4, 80023e0 <CA_AES_CMAC_Encrypt_Finish+0x20>
 80023ca:	b149      	cbz	r1, 80023e0 <CA_AES_CMAC_Encrypt_Finish+0x20>
 80023cc:	b142      	cbz	r2, 80023e0 <CA_AES_CMAC_Encrypt_Finish+0x20>
  {
    return CA_AES_ERR_BAD_PARAMETER;
  }
  (void)memcpy(P_pOutputBuffer, P_pAESCMACctx->mac, (uint32_t)(P_pAESCMACctx->mTagSize));
 80023ce:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80023d0:	f104 0134 	add.w	r1, r4, #52	@ 0x34
 80023d4:	f004 fc1a 	bl	8006c0c <memcpy>
  *P_pOutputSize = P_pAESCMACctx->mTagSize;
 80023d8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80023da:	602b      	str	r3, [r5, #0]
  return CA_AES_SUCCESS;
 80023dc:	2000      	movs	r0, #0
}
 80023de:	bd38      	pop	{r3, r4, r5, pc}
    return CA_AES_ERR_BAD_PARAMETER;
 80023e0:	f44f 6042 	mov.w	r0, #3104	@ 0xc20
 80023e4:	e7fb      	b.n	80023de <CA_AES_CMAC_Encrypt_Finish+0x1e>

080023e6 <CA_AES_CMAC_Decrypt_Init>:
  * @retval     CA_AES_ERR_BAD_CONTEXT: Context not initialized with valid values,
  *                                   see the note below
  */
int32_t CA_AES_CMAC_Decrypt_Init(CA_AESCMACctx_stt *P_pAESCMACctx)
{
  if (P_pAESCMACctx == NULL)
 80023e6:	b180      	cbz	r0, 800240a <CA_AES_CMAC_Decrypt_Init+0x24>
  {
    return CA_AES_ERR_BAD_PARAMETER;
  }
  if (P_pAESCMACctx->pmKey == NULL)
 80023e8:	6883      	ldr	r3, [r0, #8]
 80023ea:	b18b      	cbz	r3, 8002410 <CA_AES_CMAC_Decrypt_Init+0x2a>
  {
    return CA_AES_ERR_BAD_CONTEXT;
  }
  if ((P_pAESCMACctx->mKeySize != (int32_t)CA_CRL_AES128_KEY)
 80023ec:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80023ee:	2b10      	cmp	r3, #16
 80023f0:	d001      	beq.n	80023f6 <CA_AES_CMAC_Decrypt_Init+0x10>
      && (P_pAESCMACctx->mKeySize != (int32_t)CA_CRL_AES256_KEY))
 80023f2:	2b20      	cmp	r3, #32
 80023f4:	d10c      	bne.n	8002410 <CA_AES_CMAC_Decrypt_Init+0x2a>
  {
    return CA_AES_ERR_BAD_CONTEXT;
  }
  if (P_pAESCMACctx->pmTag == NULL)
 80023f6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80023f8:	b153      	cbz	r3, 8002410 <CA_AES_CMAC_Decrypt_Init+0x2a>
  {
    return CA_AES_ERR_BAD_CONTEXT;
  }
  if ((P_pAESCMACctx->mTagSize <= 0) || (P_pAESCMACctx->mTagSize > (int32_t)CA_CRL_AES_BLOCK))
 80023fa:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80023fc:	3b01      	subs	r3, #1
    return CA_AES_ERR_BAD_CONTEXT;
 80023fe:	2b10      	cmp	r3, #16
 8002400:	f640 401f 	movw	r0, #3103	@ 0xc1f
 8002404:	bf38      	it	cc
 8002406:	2000      	movcc	r0, #0
 8002408:	4770      	bx	lr
    return CA_AES_ERR_BAD_PARAMETER;
 800240a:	f44f 6042 	mov.w	r0, #3104	@ 0xc20
 800240e:	4770      	bx	lr
    return CA_AES_ERR_BAD_CONTEXT;
 8002410:	f640 401f 	movw	r0, #3103	@ 0xc1f
  {
    return CA_AES_ERR_BAD_CONTEXT;
  }
  return CA_AES_SUCCESS;
}
 8002414:	4770      	bx	lr

08002416 <CA_AES_CMAC_Decrypt_Append>:
  * @retval     CA_AES_SUCCESS: Operation Successful
  * @retval     CA_AES_ERR_BAD_PARAMETER: At least one parameter is a NULL pointer
  * @retval     CA_AES_ERR_BAD_INPUT_SIZE: P_inputSize < 0
  * @retval     CA_AES_ERR_BAD_OPERATION: Append not allowed
  */
int32_t CA_AES_CMAC_Decrypt_Append(CA_AESCMACctx_stt *P_pAESCMACctx,
 8002416:	f7ff bfb9 	b.w	800238c <CA_AES_CMAC_Encrypt_Append>

0800241a <CA_AES_CMAC_Decrypt_Finish>:
  *             see note
  */
int32_t CA_AES_CMAC_Decrypt_Finish(CA_AESCMACctx_stt *P_pAESCMACctx,
                                   uint8_t        *P_pOutputBuffer,
                                   int32_t        *P_pOutputSize)
{
 800241a:	b508      	push	{r3, lr}
  (void)P_pOutputBuffer;
  if ((P_pAESCMACctx == NULL) || (P_pOutputSize == NULL))
 800241c:	b178      	cbz	r0, 800243e <CA_AES_CMAC_Decrypt_Finish+0x24>
 800241e:	b172      	cbz	r2, 800243e <CA_AES_CMAC_Decrypt_Finish+0x24>
  {
    return CA_AES_ERR_BAD_PARAMETER;
  }
  *P_pOutputSize = 0;
 8002420:	2300      	movs	r3, #0
 8002422:	6013      	str	r3, [r2, #0]
  if (memcmp(P_pAESCMACctx->pmTag, P_pAESCMACctx->mac, (uint32_t)(P_pAESCMACctx->mTagSize)) != 0)
 8002424:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8002426:	f100 0134 	add.w	r1, r0, #52	@ 0x34
 800242a:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 800242c:	f004 fbd6 	bl	8006bdc <memcmp>
  {
    return CA_AUTHENTICATION_FAILED;
 8002430:	2800      	cmp	r0, #0
 8002432:	f240 30eb 	movw	r0, #1003	@ 0x3eb
 8002436:	bf18      	it	ne
 8002438:	f44f 707b 	movne.w	r0, #1004	@ 0x3ec
  }
  else
  {
    return CA_AUTHENTICATION_SUCCESSFUL;
  }
}
 800243c:	bd08      	pop	{r3, pc}
    return CA_AES_ERR_BAD_PARAMETER;
 800243e:	f44f 6042 	mov.w	r0, #3104	@ 0xc20
 8002442:	e7fb      	b.n	800243c <CA_AES_CMAC_Decrypt_Finish+0x22>

08002444 <CA_AES_ECB_Encrypt_Init>:
  *                                  See note
  */
int32_t CA_AES_ECB_Encrypt_Init(CA_AESECBctx_stt *P_pAESECBctx,
                                const uint8_t *P_pKey,
                                const uint8_t *P_pIv)
{
 8002444:	b570      	push	{r4, r5, r6, lr}
 8002446:	460d      	mov	r5, r1
  int32_t aes_ret_status = CA_AES_SUCCESS;

  (void)P_pIv;

  if ((P_pAESECBctx == NULL) || (P_pKey == NULL))
 8002448:	4604      	mov	r4, r0
 800244a:	2800      	cmp	r0, #0
 800244c:	d049      	beq.n	80024e2 <CA_AES_ECB_Encrypt_Init+0x9e>
 800244e:	2900      	cmp	r1, #0
 8002450:	d047      	beq.n	80024e2 <CA_AES_ECB_Encrypt_Init+0x9e>
  {
    return CA_AES_ERR_BAD_PARAMETER;
  }

  if (P_pAESECBctx->mKeySize == 0)
 8002452:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002454:	b913      	cbnz	r3, 800245c <CA_AES_ECB_Encrypt_Init+0x18>
  {
    return CA_AES_ERR_BAD_CONTEXT;
 8002456:	f640 401f 	movw	r0, #3103	@ 0xc1f
  {
    /* Initialization Error */
    aes_ret_status = CA_AES_ERR_BAD_CONTEXT;
  }
  return aes_ret_status;
}
 800245a:	bd70      	pop	{r4, r5, r6, pc}
  cleanup_handle(&(P_pAESECBctx->CrypHandle));
 800245c:	f100 062c 	add.w	r6, r0, #44	@ 0x2c
 8002460:	4630      	mov	r0, r6
 8002462:	f7ff fcd3 	bl	8001e0c <cleanup_handle>
  P_pAESECBctx->CrypHandle.Instance = CA_AES_INSTANCE;
 8002466:	4b20      	ldr	r3, [pc, #128]	@ (80024e8 <CA_AES_ECB_Encrypt_Init+0xa4>)
 8002468:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (HAL_CRYP_DeInit(&P_pAESECBctx->CrypHandle) != HAL_OK)
 800246a:	4630      	mov	r0, r6
 800246c:	f7fe fd53 	bl	8000f16 <HAL_CRYP_DeInit>
 8002470:	2800      	cmp	r0, #0
 8002472:	d1f0      	bne.n	8002456 <CA_AES_ECB_Encrypt_Init+0x12>
  P_pAESECBctx->CrypHandle.Init.DataType      = CRYP_DATATYPE_8B;
 8002474:	2304      	movs	r3, #4
 8002476:	6323      	str	r3, [r4, #48]	@ 0x30
  if (P_pAESECBctx->mKeySize == (int32_t)CA_CRL_AES128_KEY)
 8002478:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  P_pAESECBctx->CrypHandle.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_WORD;
 800247a:	6520      	str	r0, [r4, #80]	@ 0x50
  if (P_pAESECBctx->mKeySize == (int32_t)CA_CRL_AES128_KEY)
 800247c:	2b10      	cmp	r3, #16
 800247e:	d116      	bne.n	80024ae <CA_AES_ECB_Encrypt_Init+0x6a>
  for (uint8_t i = 0; i < ((uint8_t)(P_pAESECBctx->mKeySize) / 4U); i++)
 8002480:	f013 0ffc 	tst.w	r3, #252	@ 0xfc
    P_pAESECBctx->CrypHandle.Init.KeySize     = CRYP_KEYSIZE_256B;
 8002484:	6360      	str	r0, [r4, #52]	@ 0x34
  for (uint8_t i = 0; i < ((uint8_t)(P_pAESECBctx->mKeySize) / 4U); i++)
 8002486:	f3c3 0285 	ubfx	r2, r3, #2, #6
 800248a:	d115      	bne.n	80024b8 <CA_AES_ECB_Encrypt_Init+0x74>
  P_pAESECBctx->CrypHandle.Init.Algorithm       = CRYP_AES_ECB;
 800248c:	2300      	movs	r3, #0
  P_pAESECBctx->CrypHandle.Init.HeaderSize = 0;
 800248e:	e9c4 3311 	strd	r3, r3, [r4, #68]	@ 0x44
  P_pAESECBctx->CrypHandle.Init.Algorithm       = CRYP_AES_ECB;
 8002492:	6423      	str	r3, [r4, #64]	@ 0x40
  P_pAESECBctx->CrypHandle.Init.pKey            = (uint32_t *)(uint32_t)(P_pAESECBctx->Key_endian);
 8002494:	f504 72a4 	add.w	r2, r4, #328	@ 0x148
  P_pAESECBctx->CrypHandle.Init.B0 = NULL;
 8002498:	64e3      	str	r3, [r4, #76]	@ 0x4c
  P_pAESECBctx->CrypHandle.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_BYTE;
 800249a:	2301      	movs	r3, #1
  P_pAESECBctx->CrypHandle.Init.pKey            = (uint32_t *)(uint32_t)(P_pAESECBctx->Key_endian);
 800249c:	63a2      	str	r2, [r4, #56]	@ 0x38
  P_pAESECBctx->CrypHandle.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_BYTE;
 800249e:	6523      	str	r3, [r4, #80]	@ 0x50
  P_pAESECBctx->CrypHandle.Init.KeyIVConfigSkip = CRYP_KEYIVCONFIG_ONCE;
 80024a0:	65a3      	str	r3, [r4, #88]	@ 0x58
  if (HAL_CRYP_Init(&P_pAESECBctx->CrypHandle) != HAL_OK)
 80024a2:	4630      	mov	r0, r6
 80024a4:	f7fe fd14 	bl	8000ed0 <HAL_CRYP_Init>
 80024a8:	2800      	cmp	r0, #0
 80024aa:	d0d6      	beq.n	800245a <CA_AES_ECB_Encrypt_Init+0x16>
 80024ac:	e7d3      	b.n	8002456 <CA_AES_ECB_Encrypt_Init+0x12>
  else if (P_pAESECBctx->mKeySize == (int32_t)CA_CRL_AES256_KEY)
 80024ae:	2b20      	cmp	r3, #32
 80024b0:	d1d1      	bne.n	8002456 <CA_AES_ECB_Encrypt_Init+0x12>
 80024b2:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80024b6:	e7e3      	b.n	8002480 <CA_AES_ECB_Encrypt_Init+0x3c>
 80024b8:	4629      	mov	r1, r5
 80024ba:	4623      	mov	r3, r4
 80024bc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    P_pAESECBctx->Key_endian[4U * i]        = P_pKey[3U + (4U * i)];
 80024c0:	78c8      	ldrb	r0, [r1, #3]
 80024c2:	f883 0148 	strb.w	r0, [r3, #328]	@ 0x148
    P_pAESECBctx->Key_endian[1U + (4U * i)] = P_pKey[2U + (4U * i)];
 80024c6:	7888      	ldrb	r0, [r1, #2]
 80024c8:	f883 0149 	strb.w	r0, [r3, #329]	@ 0x149
    P_pAESECBctx->Key_endian[2U + (4U * i)] = P_pKey[1U + (4U * i)];
 80024cc:	7848      	ldrb	r0, [r1, #1]
 80024ce:	f883 014a 	strb.w	r0, [r3, #330]	@ 0x14a
    P_pAESECBctx->Key_endian[3U + (4U * i)] = P_pKey[4U * i];
 80024d2:	f811 0b04 	ldrb.w	r0, [r1], #4
 80024d6:	f883 014b 	strb.w	r0, [r3, #331]	@ 0x14b
  for (uint8_t i = 0; i < ((uint8_t)(P_pAESECBctx->mKeySize) / 4U); i++)
 80024da:	3304      	adds	r3, #4
 80024dc:	4293      	cmp	r3, r2
 80024de:	d1ef      	bne.n	80024c0 <CA_AES_ECB_Encrypt_Init+0x7c>
 80024e0:	e7d4      	b.n	800248c <CA_AES_ECB_Encrypt_Init+0x48>
    return CA_AES_ERR_BAD_PARAMETER;
 80024e2:	f44f 6042 	mov.w	r0, #3104	@ 0xc20
 80024e6:	e7b8      	b.n	800245a <CA_AES_ECB_Encrypt_Init+0x16>
 80024e8:	58001800 	.word	0x58001800

080024ec <CA_AES_ECB_Encrypt_Append>:
int32_t CA_AES_ECB_Encrypt_Append(CA_AESECBctx_stt *P_pAESECBctx,
                                  const uint8_t *P_pInputBuffer,
                                  int32_t        P_inputSize,
                                  uint8_t       *P_pOutputBuffer,
                                  int32_t       *P_pOutputSize)
{
 80024ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80024ee:	9e06      	ldr	r6, [sp, #24]
 80024f0:	4615      	mov	r5, r2

  int32_t aes_ret_status = CA_AES_SUCCESS;

  if ((P_pAESECBctx == NULL)
 80024f2:	b180      	cbz	r0, 8002516 <CA_AES_ECB_Encrypt_Append+0x2a>
      || (P_pInputBuffer == NULL)
 80024f4:	b179      	cbz	r1, 8002516 <CA_AES_ECB_Encrypt_Append+0x2a>
      || (P_pOutputBuffer == NULL)
 80024f6:	b173      	cbz	r3, 8002516 <CA_AES_ECB_Encrypt_Append+0x2a>
      || (P_pOutputSize == NULL))
 80024f8:	b16e      	cbz	r6, 8002516 <CA_AES_ECB_Encrypt_Append+0x2a>
  {
    return CA_AES_ERR_BAD_PARAMETER;
  }
  if ((P_inputSize % (int32_t)CA_CRL_AES_BLOCK) != 0)
 80024fa:	f015 040f 	ands.w	r4, r5, #15
 80024fe:	d10d      	bne.n	800251c <CA_AES_ECB_Encrypt_Append+0x30>
  {
    return CA_AES_ERR_BAD_INPUT_SIZE;
  }

  if (HAL_CRYP_Encrypt(&P_pAESECBctx->CrypHandle, (uint32_t *)(uint32_t)P_pInputBuffer, (uint16_t)P_inputSize,
 8002500:	22ff      	movs	r2, #255	@ 0xff
 8002502:	9200      	str	r2, [sp, #0]
 8002504:	302c      	adds	r0, #44	@ 0x2c
 8002506:	b2aa      	uxth	r2, r5
 8002508:	f7fe ff5c 	bl	80013c4 <HAL_CRYP_Encrypt>
 800250c:	b948      	cbnz	r0, 8002522 <CA_AES_ECB_Encrypt_Append+0x36>
  {
    aes_ret_status = CA_AES_ERR_BAD_OPERATION;
  }
  else
  {
    *P_pOutputSize = P_inputSize;
 800250e:	6035      	str	r5, [r6, #0]
  }

  return aes_ret_status;
}
 8002510:	4620      	mov	r0, r4
 8002512:	b002      	add	sp, #8
 8002514:	bd70      	pop	{r4, r5, r6, pc}
    return CA_AES_ERR_BAD_PARAMETER;
 8002516:	f44f 6442 	mov.w	r4, #3104	@ 0xc20
 800251a:	e7f9      	b.n	8002510 <CA_AES_ECB_Encrypt_Append+0x24>
    return CA_AES_ERR_BAD_INPUT_SIZE;
 800251c:	f640 441d 	movw	r4, #3101	@ 0xc1d
 8002520:	e7f6      	b.n	8002510 <CA_AES_ECB_Encrypt_Append+0x24>
    aes_ret_status = CA_AES_ERR_BAD_OPERATION;
 8002522:	f640 441e 	movw	r4, #3102	@ 0xc1e
 8002526:	e7f3      	b.n	8002510 <CA_AES_ECB_Encrypt_Append+0x24>

08002528 <CA_AES_ECB_Encrypt_Finish>:
  * @param[out] *P_pOutputBuffer: Output buffer. Not used.
  * @param[out] *P_pOutputSize: Pointer to integer containing size of written
  *             output data, in bytes. Not used.
  * @retval     CA_AES_SUCCESS: Operation Successful
  */
int32_t CA_AES_ECB_Encrypt_Finish(CA_AESECBctx_stt *P_pAESECBctx,
 8002528:	f7ff be78 	b.w	800221c <CA_AES_CBC_Encrypt_Finish>

0800252c <CA_AES_ECB_Decrypt_Init>:
  * @retval     CA_AES_SUCCESS: Operation Successful
  * @retval     CA_AES_ERR_BAD_PARAMETER: At least one parameter is a NULL pointer
  * @retval     CA_AES_ERR_BAD_CONTEXT: Context not initialized with valid values.
  *                                  See note
  */
int32_t CA_AES_ECB_Decrypt_Init(CA_AESECBctx_stt *P_pAESECBctx,
 800252c:	f7ff bf8a 	b.w	8002444 <CA_AES_ECB_Encrypt_Init>

08002530 <CA_AES_ECB_Decrypt_Append>:
int32_t CA_AES_ECB_Decrypt_Append(CA_AESECBctx_stt *P_pAESECBctx,
                                  const uint8_t *P_pInputBuffer,
                                  int32_t        P_inputSize,
                                  uint8_t       *P_pOutputBuffer,
                                  int32_t       *P_pOutputSize)
{
 8002530:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002532:	9e06      	ldr	r6, [sp, #24]
 8002534:	4615      	mov	r5, r2
  int32_t aes_ret_status = CA_AES_SUCCESS;

  if ((P_pAESECBctx == NULL)
 8002536:	b180      	cbz	r0, 800255a <CA_AES_ECB_Decrypt_Append+0x2a>
      || (P_pInputBuffer == NULL)
 8002538:	b179      	cbz	r1, 800255a <CA_AES_ECB_Decrypt_Append+0x2a>
      || (P_pOutputBuffer == NULL)
 800253a:	b173      	cbz	r3, 800255a <CA_AES_ECB_Decrypt_Append+0x2a>
      || (P_pOutputSize == NULL))
 800253c:	b16e      	cbz	r6, 800255a <CA_AES_ECB_Decrypt_Append+0x2a>
  {
    return CA_AES_ERR_BAD_PARAMETER;
  }
  if ((P_inputSize % (int32_t)CA_CRL_AES_BLOCK) != 0)
 800253e:	f015 040f 	ands.w	r4, r5, #15
 8002542:	d10d      	bne.n	8002560 <CA_AES_ECB_Decrypt_Append+0x30>
  {
    return CA_AES_ERR_BAD_INPUT_SIZE;
  }

  if (HAL_CRYP_Decrypt(&P_pAESECBctx->CrypHandle, (uint32_t *)(uint32_t)P_pInputBuffer, (uint16_t)P_inputSize,
 8002544:	22ff      	movs	r2, #255	@ 0xff
 8002546:	9200      	str	r2, [sp, #0]
 8002548:	302c      	adds	r0, #44	@ 0x2c
 800254a:	b2aa      	uxth	r2, r5
 800254c:	f7fe ffce 	bl	80014ec <HAL_CRYP_Decrypt>
 8002550:	b948      	cbnz	r0, 8002566 <CA_AES_ECB_Decrypt_Append+0x36>
  {
    aes_ret_status = CA_AES_ERR_BAD_OPERATION;
  }
  else
  {
    *P_pOutputSize = P_inputSize;
 8002552:	6035      	str	r5, [r6, #0]
  }

  return aes_ret_status;
}
 8002554:	4620      	mov	r0, r4
 8002556:	b002      	add	sp, #8
 8002558:	bd70      	pop	{r4, r5, r6, pc}
    return CA_AES_ERR_BAD_PARAMETER;
 800255a:	f44f 6442 	mov.w	r4, #3104	@ 0xc20
 800255e:	e7f9      	b.n	8002554 <CA_AES_ECB_Decrypt_Append+0x24>
    return CA_AES_ERR_BAD_INPUT_SIZE;
 8002560:	f640 441d 	movw	r4, #3101	@ 0xc1d
 8002564:	e7f6      	b.n	8002554 <CA_AES_ECB_Decrypt_Append+0x24>
    aes_ret_status = CA_AES_ERR_BAD_OPERATION;
 8002566:	f640 441e 	movw	r4, #3102	@ 0xc1e
 800256a:	e7f3      	b.n	8002554 <CA_AES_ECB_Decrypt_Append+0x24>

0800256c <CA_AES_ECB_Decrypt_Finish>:
  * @param[out] *P_pOutputBuffer: Output buffer. Not used.
  * @param[out] *P_pOutputSize: Pointer to integer containing size of written
  *             output data, in bytes. Not used.
  * @retval     CA_AES_SUCCESS: Operation Successful
  */
int32_t CA_AES_ECB_Decrypt_Finish(CA_AESECBctx_stt *P_pAESECBctx,
 800256c:	f7ff be56 	b.w	800221c <CA_AES_CBC_Encrypt_Finish>

08002570 <CA_AES_GCM_Encrypt_Init>:
  *                                  see note
  */
int32_t CA_AES_GCM_Encrypt_Init(CA_AESGCMctx_stt *P_pAESGCMctx,
                                const uint8_t *P_pKey,
                                const uint8_t *P_pIv)
{
 8002570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002572:	460d      	mov	r5, r1
 8002574:	4616      	mov	r6, r2
  int32_t aes_ret_status = CA_AES_SUCCESS;

  if ((P_pAESGCMctx == NULL) || (P_pKey == NULL) || (P_pIv == NULL))
 8002576:	4604      	mov	r4, r0
 8002578:	2800      	cmp	r0, #0
 800257a:	d069      	beq.n	8002650 <CA_AES_GCM_Encrypt_Init+0xe0>
 800257c:	2900      	cmp	r1, #0
 800257e:	d067      	beq.n	8002650 <CA_AES_GCM_Encrypt_Init+0xe0>
 8002580:	2a00      	cmp	r2, #0
 8002582:	d065      	beq.n	8002650 <CA_AES_GCM_Encrypt_Init+0xe0>
  {
    return CA_AES_ERR_BAD_PARAMETER;
  }

  if ((P_pAESGCMctx->mKeySize == 0) || (P_pAESGCMctx->mIvSize != 12))
 8002584:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002586:	b913      	cbnz	r3, 800258e <CA_AES_GCM_Encrypt_Init+0x1e>
  {
    return CA_AES_ERR_BAD_CONTEXT;
 8002588:	f640 401f 	movw	r0, #3103	@ 0xc1f
  P_pAESGCMctx->CrypHandle.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_BYTE;
  P_pAESGCMctx->CrypHandle.Init.KeyIVConfigSkip = CRYP_KEYIVCONFIG_ONCE;

  P_pAESGCMctx->flags = GCM_ENCRYPTION_ONGOING | GCM_INIT_NOT_DONE;
  return aes_ret_status;
}
 800258c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((P_pAESGCMctx->mKeySize == 0) || (P_pAESGCMctx->mIvSize != 12))
 800258e:	6903      	ldr	r3, [r0, #16]
 8002590:	2b0c      	cmp	r3, #12
 8002592:	d1f9      	bne.n	8002588 <CA_AES_GCM_Encrypt_Init+0x18>
  cleanup_handle(&(P_pAESGCMctx->CrypHandle));
 8002594:	f100 0734 	add.w	r7, r0, #52	@ 0x34
 8002598:	4638      	mov	r0, r7
 800259a:	f7ff fc37 	bl	8001e0c <cleanup_handle>
  P_pAESGCMctx->CrypHandle.Instance = CA_AES_INSTANCE;
 800259e:	4b2e      	ldr	r3, [pc, #184]	@ (8002658 <CA_AES_GCM_Encrypt_Init+0xe8>)
 80025a0:	6363      	str	r3, [r4, #52]	@ 0x34
  if (HAL_CRYP_DeInit(&P_pAESGCMctx->CrypHandle) != HAL_OK)
 80025a2:	4638      	mov	r0, r7
 80025a4:	f7fe fcb7 	bl	8000f16 <HAL_CRYP_DeInit>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d1ed      	bne.n	8002588 <CA_AES_GCM_Encrypt_Init+0x18>
  if (P_pAESGCMctx->mKeySize == (int32_t)CA_CRL_AES128_KEY)
 80025ac:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  P_pAESGCMctx->CrypHandle.Init.DataType      = CRYP_DATATYPE_8B;
 80025ae:	2304      	movs	r3, #4
  if (P_pAESGCMctx->mKeySize == (int32_t)CA_CRL_AES128_KEY)
 80025b0:	2910      	cmp	r1, #16
  P_pAESGCMctx->CrypHandle.Init.DataType      = CRYP_DATATYPE_8B;
 80025b2:	63a3      	str	r3, [r4, #56]	@ 0x38
  if (P_pAESGCMctx->mKeySize == (int32_t)CA_CRL_AES128_KEY)
 80025b4:	d003      	beq.n	80025be <CA_AES_GCM_Encrypt_Init+0x4e>
  else if (P_pAESGCMctx->mKeySize == (int32_t)CA_CRL_AES256_KEY)
 80025b6:	2920      	cmp	r1, #32
 80025b8:	d1e6      	bne.n	8002588 <CA_AES_GCM_Encrypt_Init+0x18>
 80025ba:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
    P_pAESGCMctx->CrypHandle.Init.KeySize     = CRYP_KEYSIZE_128B;
 80025be:	63e0      	str	r0, [r4, #60]	@ 0x3c
 80025c0:	4632      	mov	r2, r6
 80025c2:	4623      	mov	r3, r4
 80025c4:	f104 000c 	add.w	r0, r4, #12
    P_pAESGCMctx->Iv_endian[4U * i]        = P_pIv[3U + (4U * i)];
 80025c8:	78d6      	ldrb	r6, [r2, #3]
 80025ca:	f883 6140 	strb.w	r6, [r3, #320]	@ 0x140
    P_pAESGCMctx->Iv_endian[1U + (4U * i)] = P_pIv[2U + (4U * i)];
 80025ce:	7896      	ldrb	r6, [r2, #2]
 80025d0:	f883 6141 	strb.w	r6, [r3, #321]	@ 0x141
    P_pAESGCMctx->Iv_endian[2U + (4U * i)] = P_pIv[1U + (4U * i)];
 80025d4:	7856      	ldrb	r6, [r2, #1]
 80025d6:	f883 6142 	strb.w	r6, [r3, #322]	@ 0x142
    P_pAESGCMctx->Iv_endian[3U + (4U * i)] = P_pIv[4U * i];
 80025da:	f812 6b04 	ldrb.w	r6, [r2], #4
 80025de:	f883 6143 	strb.w	r6, [r3, #323]	@ 0x143
  for (uint8_t i = 0; i < 3U; i++)
 80025e2:	3304      	adds	r3, #4
 80025e4:	4283      	cmp	r3, r0
 80025e6:	d1ef      	bne.n	80025c8 <CA_AES_GCM_Encrypt_Init+0x58>
  P_pAESGCMctx->Iv_endian[12] = 2;
 80025e8:	2302      	movs	r3, #2
 80025ea:	f8c4 314c 	str.w	r3, [r4, #332]	@ 0x14c
  for (uint8_t i = 0; i < ((uint8_t)(P_pAESGCMctx->mKeySize) / 4U); i++)
 80025ee:	f504 73a8 	add.w	r3, r4, #336	@ 0x150
 80025f2:	f3c1 0285 	ubfx	r2, r1, #2, #6
 80025f6:	2000      	movs	r0, #0
 80025f8:	4629      	mov	r1, r5
 80025fa:	461d      	mov	r5, r3
 80025fc:	b2c6      	uxtb	r6, r0
 80025fe:	42b2      	cmp	r2, r6
 8002600:	f101 0104 	add.w	r1, r1, #4
 8002604:	f103 0304 	add.w	r3, r3, #4
 8002608:	d810      	bhi.n	800262c <CA_AES_GCM_Encrypt_Init+0xbc>
  P_pAESGCMctx->CrypHandle.Init.Algorithm       = CRYP_AES_GCM_GMAC;
 800260a:	2360      	movs	r3, #96	@ 0x60
 800260c:	64a3      	str	r3, [r4, #72]	@ 0x48
  P_pAESGCMctx->CrypHandle.Init.pInitVect       = (uint32_t *)(uint32_t)(P_pAESGCMctx->Iv_endian);
 800260e:	f504 73a0 	add.w	r3, r4, #320	@ 0x140
 8002612:	6463      	str	r3, [r4, #68]	@ 0x44
  P_pAESGCMctx->CrypHandle.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_BYTE;
 8002614:	2301      	movs	r3, #1
  P_pAESGCMctx->CrypHandle.Init.Header = NULL;
 8002616:	2000      	movs	r0, #0
  P_pAESGCMctx->CrypHandle.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_BYTE;
 8002618:	65a3      	str	r3, [r4, #88]	@ 0x58
  P_pAESGCMctx->CrypHandle.Init.KeyIVConfigSkip = CRYP_KEYIVCONFIG_ONCE;
 800261a:	6623      	str	r3, [r4, #96]	@ 0x60
  P_pAESGCMctx->flags = GCM_ENCRYPTION_ONGOING | GCM_INIT_NOT_DONE;
 800261c:	2309      	movs	r3, #9
  P_pAESGCMctx->CrypHandle.Init.HeaderSize = 0;
 800261e:	e9c4 0013 	strd	r0, r0, [r4, #76]	@ 0x4c
  P_pAESGCMctx->CrypHandle.Init.pKey            = (uint32_t *)(uint32_t)(P_pAESGCMctx->Key_endian);
 8002622:	6425      	str	r5, [r4, #64]	@ 0x40
  P_pAESGCMctx->CrypHandle.Init.B0 = NULL;
 8002624:	6560      	str	r0, [r4, #84]	@ 0x54
  P_pAESGCMctx->flags = GCM_ENCRYPTION_ONGOING | GCM_INIT_NOT_DONE;
 8002626:	f8c4 3170 	str.w	r3, [r4, #368]	@ 0x170
  return aes_ret_status;
 800262a:	e7af      	b.n	800258c <CA_AES_GCM_Encrypt_Init+0x1c>
    P_pAESGCMctx->Key_endian[4U * i]        = P_pKey[3U + (4U * i)];
 800262c:	f811 6c01 	ldrb.w	r6, [r1, #-1]
 8002630:	f803 6c04 	strb.w	r6, [r3, #-4]
    P_pAESGCMctx->Key_endian[1U + (4U * i)] = P_pKey[2U + (4U * i)];
 8002634:	f811 6c02 	ldrb.w	r6, [r1, #-2]
 8002638:	f803 6c03 	strb.w	r6, [r3, #-3]
    P_pAESGCMctx->Key_endian[2U + (4U * i)] = P_pKey[1U + (4U * i)];
 800263c:	f811 6c03 	ldrb.w	r6, [r1, #-3]
 8002640:	f803 6c02 	strb.w	r6, [r3, #-2]
    P_pAESGCMctx->Key_endian[3U + (4U * i)] = P_pKey[4U * i];
 8002644:	f811 6c04 	ldrb.w	r6, [r1, #-4]
 8002648:	f803 6c01 	strb.w	r6, [r3, #-1]
  for (uint8_t i = 0; i < ((uint8_t)(P_pAESGCMctx->mKeySize) / 4U); i++)
 800264c:	3001      	adds	r0, #1
 800264e:	e7d5      	b.n	80025fc <CA_AES_GCM_Encrypt_Init+0x8c>
    return CA_AES_ERR_BAD_PARAMETER;
 8002650:	f44f 6042 	mov.w	r0, #3104	@ 0xc20
 8002654:	e79a      	b.n	800258c <CA_AES_GCM_Encrypt_Init+0x1c>
 8002656:	bf00      	nop
 8002658:	58001800 	.word	0x58001800

0800265c <CA_AES_GCM_Encrypt_Append>:
int32_t CA_AES_GCM_Encrypt_Append(CA_AESGCMctx_stt *P_pAESGCMctx,
                                  const uint8_t *P_pInputBuffer,
                                  int32_t        P_inputSize,
                                  uint8_t       *P_pOutputBuffer,
                                  int32_t       *P_pOutputSize)
{
 800265c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002660:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 8002664:	460e      	mov	r6, r1
 8002666:	4615      	mov	r5, r2
 8002668:	461f      	mov	r7, r3
  int32_t aes_ret_status = CA_AES_SUCCESS;

  if ((P_pAESGCMctx == NULL)
 800266a:	4604      	mov	r4, r0
 800266c:	b360      	cbz	r0, 80026c8 <CA_AES_GCM_Encrypt_Append+0x6c>
      || (P_pInputBuffer == NULL)
 800266e:	b359      	cbz	r1, 80026c8 <CA_AES_GCM_Encrypt_Append+0x6c>
      || (P_pOutputBuffer == NULL)
 8002670:	b353      	cbz	r3, 80026c8 <CA_AES_GCM_Encrypt_Append+0x6c>
      || (P_pOutputSize == NULL))
 8002672:	f1b8 0f00 	cmp.w	r8, #0
 8002676:	d027      	beq.n	80026c8 <CA_AES_GCM_Encrypt_Append+0x6c>
  {
    return CA_AES_ERR_BAD_PARAMETER;
  }

  if ((P_pAESGCMctx->flags & GCM_INIT_NOT_DONE) == GCM_INIT_NOT_DONE)
 8002678:	f8d0 3170 	ldr.w	r3, [r0, #368]	@ 0x170
 800267c:	071b      	lsls	r3, r3, #28
  {
    if (HAL_CRYP_Init(&P_pAESGCMctx->CrypHandle) != HAL_OK)
 800267e:	f100 0934 	add.w	r9, r0, #52	@ 0x34
  if ((P_pAESGCMctx->flags & GCM_INIT_NOT_DONE) == GCM_INIT_NOT_DONE)
 8002682:	d511      	bpl.n	80026a8 <CA_AES_GCM_Encrypt_Append+0x4c>
    if (HAL_CRYP_Init(&P_pAESGCMctx->CrypHandle) != HAL_OK)
 8002684:	4648      	mov	r0, r9
 8002686:	f7fe fc23 	bl	8000ed0 <HAL_CRYP_Init>
 800268a:	b138      	cbz	r0, 800269c <CA_AES_GCM_Encrypt_Append+0x40>
    {
      *P_pOutputSize = 0;
 800268c:	2300      	movs	r3, #0
 800268e:	f8c8 3000 	str.w	r3, [r8]
      return CA_AES_ERR_BAD_OPERATION;
 8002692:	f640 401e 	movw	r0, #3102	@ 0xc1e
    aes_ret_status = CA_AES_ERR_BAD_OPERATION;
  }

  *P_pOutputSize = P_inputSize;
  return aes_ret_status;
}
 8002696:	b003      	add	sp, #12
 8002698:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    P_pAESGCMctx->flags &= ~ GCM_INIT_NOT_DONE;
 800269c:	f8d4 3170 	ldr.w	r3, [r4, #368]	@ 0x170
 80026a0:	f023 0308 	bic.w	r3, r3, #8
 80026a4:	f8c4 3170 	str.w	r3, [r4, #368]	@ 0x170
  if (HAL_CRYP_Encrypt(&P_pAESGCMctx->CrypHandle, (uint32_t *)(uint32_t)P_pInputBuffer, (uint16_t)P_inputSize,
 80026a8:	23ff      	movs	r3, #255	@ 0xff
 80026aa:	9300      	str	r3, [sp, #0]
 80026ac:	b2aa      	uxth	r2, r5
 80026ae:	463b      	mov	r3, r7
 80026b0:	4631      	mov	r1, r6
 80026b2:	4648      	mov	r0, r9
 80026b4:	f7fe fe86 	bl	80013c4 <HAL_CRYP_Encrypt>
  int32_t aes_ret_status = CA_AES_SUCCESS;
 80026b8:	2800      	cmp	r0, #0
  *P_pOutputSize = P_inputSize;
 80026ba:	f8c8 5000 	str.w	r5, [r8]
  int32_t aes_ret_status = CA_AES_SUCCESS;
 80026be:	f640 401e 	movw	r0, #3102	@ 0xc1e
 80026c2:	bf08      	it	eq
 80026c4:	2000      	moveq	r0, #0
  return aes_ret_status;
 80026c6:	e7e6      	b.n	8002696 <CA_AES_GCM_Encrypt_Append+0x3a>
    return CA_AES_ERR_BAD_PARAMETER;
 80026c8:	f44f 6042 	mov.w	r0, #3104	@ 0xc20
 80026cc:	e7e3      	b.n	8002696 <CA_AES_GCM_Encrypt_Append+0x3a>

080026ce <CA_AES_GCM_Encrypt_Finish>:
  *                                  See note
  */
int32_t CA_AES_GCM_Encrypt_Finish(CA_AESGCMctx_stt *P_pAESGCMctx,
                                  uint8_t       *P_pOutputBuffer,
                                  int32_t       *P_pOutputSize)
{
 80026ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026d2:	4616      	mov	r6, r2
  int32_t aes_ret_status = CA_AES_SUCCESS;


  if ((P_pAESGCMctx == NULL) || (P_pOutputBuffer == NULL) || (P_pOutputSize == NULL))
 80026d4:	4605      	mov	r5, r0
 80026d6:	b1f0      	cbz	r0, 8002716 <CA_AES_GCM_Encrypt_Finish+0x48>
 80026d8:	b1e9      	cbz	r1, 8002716 <CA_AES_GCM_Encrypt_Finish+0x48>
 80026da:	b1e2      	cbz	r2, 8002716 <CA_AES_GCM_Encrypt_Finish+0x48>
  {
    return CA_AES_ERR_BAD_PARAMETER;
  }

  if ((P_pAESGCMctx->mTagSize < 0) || (P_pAESGCMctx->mTagSize > 16))
 80026dc:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80026de:	2b10      	cmp	r3, #16
 80026e0:	d81c      	bhi.n	800271c <CA_AES_GCM_Encrypt_Finish+0x4e>
  {
    return CA_AES_ERR_BAD_CONTEXT;
  }

  if (HAL_CRYPEx_AESGCM_GenerateAuthTAG(&P_pAESGCMctx->CrypHandle,
 80026e2:	f100 0734 	add.w	r7, r0, #52	@ 0x34
 80026e6:	22ff      	movs	r2, #255	@ 0xff
 80026e8:	4638      	mov	r0, r7
 80026ea:	f7ff f80f 	bl	800170c <HAL_CRYPEx_AESGCM_GenerateAuthTAG>
  int32_t aes_ret_status = CA_AES_SUCCESS;
 80026ee:	f640 481f 	movw	r8, #3103	@ 0xc1f
 80026f2:	2800      	cmp	r0, #0
                                        (uint32_t *)(uint32_t)P_pOutputBuffer, TIMEOUT_VALUE) != HAL_OK)
  {
    aes_ret_status = CA_AES_ERR_BAD_CONTEXT;
  }

  if (HAL_CRYP_DeInit(&P_pAESGCMctx->CrypHandle) != HAL_OK)
 80026f4:	4638      	mov	r0, r7
  int32_t aes_ret_status = CA_AES_SUCCESS;
 80026f6:	bf14      	ite	ne
 80026f8:	4644      	movne	r4, r8
 80026fa:	2400      	moveq	r4, #0
  if (HAL_CRYP_DeInit(&P_pAESGCMctx->CrypHandle) != HAL_OK)
 80026fc:	f7fe fc0b 	bl	8000f16 <HAL_CRYP_DeInit>
  {
    aes_ret_status = CA_AES_ERR_BAD_CONTEXT;
 8002700:	2800      	cmp	r0, #0
 8002702:	bf18      	it	ne
 8002704:	4644      	movne	r4, r8
  }
  cleanup_handle(&(P_pAESGCMctx->CrypHandle));
 8002706:	4638      	mov	r0, r7
 8002708:	f7ff fb80 	bl	8001e0c <cleanup_handle>

  *P_pOutputSize = P_pAESGCMctx->mTagSize;
 800270c:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800270e:	6033      	str	r3, [r6, #0]

  return aes_ret_status;
}
 8002710:	4620      	mov	r0, r4
 8002712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return CA_AES_ERR_BAD_PARAMETER;
 8002716:	f44f 6442 	mov.w	r4, #3104	@ 0xc20
 800271a:	e7f9      	b.n	8002710 <CA_AES_GCM_Encrypt_Finish+0x42>
    return CA_AES_ERR_BAD_CONTEXT;
 800271c:	f640 441f 	movw	r4, #3103	@ 0xc1f
 8002720:	e7f6      	b.n	8002710 <CA_AES_GCM_Encrypt_Finish+0x42>
	...

08002724 <CA_AES_GCM_Decrypt_Init>:
  *                                  see note
  */
int32_t CA_AES_GCM_Decrypt_Init(CA_AESGCMctx_stt *P_pAESGCMctx,
                                const uint8_t *P_pKey,
                                const uint8_t *P_pIv)
{
 8002724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002726:	460d      	mov	r5, r1
 8002728:	4616      	mov	r6, r2
  int32_t aes_ret_status = CA_AES_SUCCESS;

  if ((P_pAESGCMctx == NULL) || (P_pKey == NULL) || (P_pIv == NULL))
 800272a:	4604      	mov	r4, r0
 800272c:	2800      	cmp	r0, #0
 800272e:	d069      	beq.n	8002804 <CA_AES_GCM_Decrypt_Init+0xe0>
 8002730:	2900      	cmp	r1, #0
 8002732:	d067      	beq.n	8002804 <CA_AES_GCM_Decrypt_Init+0xe0>
 8002734:	2a00      	cmp	r2, #0
 8002736:	d065      	beq.n	8002804 <CA_AES_GCM_Decrypt_Init+0xe0>
  {
    return CA_AES_ERR_BAD_PARAMETER;
  }

  if ((P_pAESGCMctx->mKeySize == 0) || (P_pAESGCMctx->mIvSize != 12))
 8002738:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800273a:	b913      	cbnz	r3, 8002742 <CA_AES_GCM_Decrypt_Init+0x1e>
  {
    return CA_AES_ERR_BAD_CONTEXT;
 800273c:	f640 401f 	movw	r0, #3103	@ 0xc1f
  P_pAESGCMctx->CrypHandle.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_BYTE;
  P_pAESGCMctx->CrypHandle.Init.KeyIVConfigSkip = CRYP_KEYIVCONFIG_ONCE;

  P_pAESGCMctx->flags = GCM_DECRYPTION_ONGOING | GCM_INIT_NOT_DONE;
  return aes_ret_status;
}
 8002740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((P_pAESGCMctx->mKeySize == 0) || (P_pAESGCMctx->mIvSize != 12))
 8002742:	6903      	ldr	r3, [r0, #16]
 8002744:	2b0c      	cmp	r3, #12
 8002746:	d1f9      	bne.n	800273c <CA_AES_GCM_Decrypt_Init+0x18>
  cleanup_handle(&(P_pAESGCMctx->CrypHandle));
 8002748:	f100 0734 	add.w	r7, r0, #52	@ 0x34
 800274c:	4638      	mov	r0, r7
 800274e:	f7ff fb5d 	bl	8001e0c <cleanup_handle>
  P_pAESGCMctx->CrypHandle.Instance = CA_AES_INSTANCE;
 8002752:	4b2e      	ldr	r3, [pc, #184]	@ (800280c <CA_AES_GCM_Decrypt_Init+0xe8>)
 8002754:	6363      	str	r3, [r4, #52]	@ 0x34
  if (HAL_CRYP_DeInit(&P_pAESGCMctx->CrypHandle) != HAL_OK)
 8002756:	4638      	mov	r0, r7
 8002758:	f7fe fbdd 	bl	8000f16 <HAL_CRYP_DeInit>
 800275c:	2800      	cmp	r0, #0
 800275e:	d1ed      	bne.n	800273c <CA_AES_GCM_Decrypt_Init+0x18>
  if (P_pAESGCMctx->mKeySize == (int32_t)CA_CRL_AES128_KEY)
 8002760:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  P_pAESGCMctx->CrypHandle.Init.DataType      = CRYP_DATATYPE_8B;
 8002762:	2304      	movs	r3, #4
  if (P_pAESGCMctx->mKeySize == (int32_t)CA_CRL_AES128_KEY)
 8002764:	2910      	cmp	r1, #16
  P_pAESGCMctx->CrypHandle.Init.DataType      = CRYP_DATATYPE_8B;
 8002766:	63a3      	str	r3, [r4, #56]	@ 0x38
  if (P_pAESGCMctx->mKeySize == (int32_t)CA_CRL_AES128_KEY)
 8002768:	d003      	beq.n	8002772 <CA_AES_GCM_Decrypt_Init+0x4e>
  else if (P_pAESGCMctx->mKeySize == (int32_t)CA_CRL_AES256_KEY)
 800276a:	2920      	cmp	r1, #32
 800276c:	d1e6      	bne.n	800273c <CA_AES_GCM_Decrypt_Init+0x18>
 800276e:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
    P_pAESGCMctx->CrypHandle.Init.KeySize     = CRYP_KEYSIZE_128B;
 8002772:	63e0      	str	r0, [r4, #60]	@ 0x3c
 8002774:	4632      	mov	r2, r6
 8002776:	4623      	mov	r3, r4
 8002778:	f104 000c 	add.w	r0, r4, #12
    P_pAESGCMctx->Iv_endian[4U * i]        = P_pIv[3U + (4U * i)];
 800277c:	78d6      	ldrb	r6, [r2, #3]
 800277e:	f883 6140 	strb.w	r6, [r3, #320]	@ 0x140
    P_pAESGCMctx->Iv_endian[1U + (4U * i)] = P_pIv[2U + (4U * i)];
 8002782:	7896      	ldrb	r6, [r2, #2]
 8002784:	f883 6141 	strb.w	r6, [r3, #321]	@ 0x141
    P_pAESGCMctx->Iv_endian[2U + (4U * i)] = P_pIv[1U + (4U * i)];
 8002788:	7856      	ldrb	r6, [r2, #1]
 800278a:	f883 6142 	strb.w	r6, [r3, #322]	@ 0x142
    P_pAESGCMctx->Iv_endian[3U + (4U * i)] = P_pIv[4U * i];
 800278e:	f812 6b04 	ldrb.w	r6, [r2], #4
 8002792:	f883 6143 	strb.w	r6, [r3, #323]	@ 0x143
  for (uint8_t i = 0; i < 3U; i++)
 8002796:	3304      	adds	r3, #4
 8002798:	4283      	cmp	r3, r0
 800279a:	d1ef      	bne.n	800277c <CA_AES_GCM_Decrypt_Init+0x58>
  P_pAESGCMctx->Iv_endian[12] = 2;
 800279c:	2302      	movs	r3, #2
 800279e:	f8c4 314c 	str.w	r3, [r4, #332]	@ 0x14c
  for (uint8_t i = 0; i < ((uint8_t)(P_pAESGCMctx->mKeySize) / 4U); i++)
 80027a2:	f504 73a8 	add.w	r3, r4, #336	@ 0x150
 80027a6:	f3c1 0285 	ubfx	r2, r1, #2, #6
 80027aa:	2000      	movs	r0, #0
 80027ac:	4629      	mov	r1, r5
 80027ae:	461d      	mov	r5, r3
 80027b0:	b2c6      	uxtb	r6, r0
 80027b2:	42b2      	cmp	r2, r6
 80027b4:	f101 0104 	add.w	r1, r1, #4
 80027b8:	f103 0304 	add.w	r3, r3, #4
 80027bc:	d810      	bhi.n	80027e0 <CA_AES_GCM_Decrypt_Init+0xbc>
  P_pAESGCMctx->CrypHandle.Init.Algorithm       = CRYP_AES_GCM_GMAC;
 80027be:	2360      	movs	r3, #96	@ 0x60
 80027c0:	64a3      	str	r3, [r4, #72]	@ 0x48
  P_pAESGCMctx->CrypHandle.Init.pInitVect       = (uint32_t *)(uint32_t)(P_pAESGCMctx->Iv_endian);
 80027c2:	f504 73a0 	add.w	r3, r4, #320	@ 0x140
 80027c6:	6463      	str	r3, [r4, #68]	@ 0x44
  P_pAESGCMctx->CrypHandle.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_BYTE;
 80027c8:	2301      	movs	r3, #1
  P_pAESGCMctx->CrypHandle.Init.Header = NULL;
 80027ca:	2000      	movs	r0, #0
  P_pAESGCMctx->CrypHandle.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_BYTE;
 80027cc:	65a3      	str	r3, [r4, #88]	@ 0x58
  P_pAESGCMctx->CrypHandle.Init.KeyIVConfigSkip = CRYP_KEYIVCONFIG_ONCE;
 80027ce:	6623      	str	r3, [r4, #96]	@ 0x60
  P_pAESGCMctx->flags = GCM_DECRYPTION_ONGOING | GCM_INIT_NOT_DONE;
 80027d0:	230a      	movs	r3, #10
  P_pAESGCMctx->CrypHandle.Init.HeaderSize = 0;
 80027d2:	e9c4 0013 	strd	r0, r0, [r4, #76]	@ 0x4c
  P_pAESGCMctx->CrypHandle.Init.pKey            = (uint32_t *)(uint32_t)(P_pAESGCMctx->Key_endian);
 80027d6:	6425      	str	r5, [r4, #64]	@ 0x40
  P_pAESGCMctx->CrypHandle.Init.B0 = NULL;
 80027d8:	6560      	str	r0, [r4, #84]	@ 0x54
  P_pAESGCMctx->flags = GCM_DECRYPTION_ONGOING | GCM_INIT_NOT_DONE;
 80027da:	f8c4 3170 	str.w	r3, [r4, #368]	@ 0x170
  return aes_ret_status;
 80027de:	e7af      	b.n	8002740 <CA_AES_GCM_Decrypt_Init+0x1c>
    P_pAESGCMctx->Key_endian[4U * i]        = P_pKey[3U + (4U * i)];
 80027e0:	f811 6c01 	ldrb.w	r6, [r1, #-1]
 80027e4:	f803 6c04 	strb.w	r6, [r3, #-4]
    P_pAESGCMctx->Key_endian[1U + (4U * i)] = P_pKey[2U + (4U * i)];
 80027e8:	f811 6c02 	ldrb.w	r6, [r1, #-2]
 80027ec:	f803 6c03 	strb.w	r6, [r3, #-3]
    P_pAESGCMctx->Key_endian[2U + (4U * i)] = P_pKey[1U + (4U * i)];
 80027f0:	f811 6c03 	ldrb.w	r6, [r1, #-3]
 80027f4:	f803 6c02 	strb.w	r6, [r3, #-2]
    P_pAESGCMctx->Key_endian[3U + (4U * i)] = P_pKey[4U * i];
 80027f8:	f811 6c04 	ldrb.w	r6, [r1, #-4]
 80027fc:	f803 6c01 	strb.w	r6, [r3, #-1]
  for (uint8_t i = 0; i < ((uint8_t)(P_pAESGCMctx->mKeySize) / 4U); i++)
 8002800:	3001      	adds	r0, #1
 8002802:	e7d5      	b.n	80027b0 <CA_AES_GCM_Decrypt_Init+0x8c>
    return CA_AES_ERR_BAD_PARAMETER;
 8002804:	f44f 6042 	mov.w	r0, #3104	@ 0xc20
 8002808:	e79a      	b.n	8002740 <CA_AES_GCM_Decrypt_Init+0x1c>
 800280a:	bf00      	nop
 800280c:	58001800 	.word	0x58001800

08002810 <CA_AES_GCM_Decrypt_Append>:
int32_t CA_AES_GCM_Decrypt_Append(CA_AESGCMctx_stt *P_pAESGCMctx,
                                  const uint8_t *P_pInputBuffer,
                                  int32_t        P_inputSize,
                                  uint8_t       *P_pOutputBuffer,
                                  int32_t       *P_pOutputSize)
{
 8002810:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002814:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 8002818:	460e      	mov	r6, r1
 800281a:	4615      	mov	r5, r2
 800281c:	461f      	mov	r7, r3
  int32_t aes_ret_status = CA_AES_SUCCESS;

  if ((P_pAESGCMctx == NULL)
 800281e:	4604      	mov	r4, r0
 8002820:	b360      	cbz	r0, 800287c <CA_AES_GCM_Decrypt_Append+0x6c>
      || (P_pInputBuffer == NULL)
 8002822:	b359      	cbz	r1, 800287c <CA_AES_GCM_Decrypt_Append+0x6c>
      || (P_pOutputBuffer == NULL)
 8002824:	b353      	cbz	r3, 800287c <CA_AES_GCM_Decrypt_Append+0x6c>
      || (P_pOutputSize == NULL))
 8002826:	f1b8 0f00 	cmp.w	r8, #0
 800282a:	d027      	beq.n	800287c <CA_AES_GCM_Decrypt_Append+0x6c>
  {
    return CA_AES_ERR_BAD_PARAMETER;
  }

  if ((P_pAESGCMctx->flags & GCM_INIT_NOT_DONE) == GCM_INIT_NOT_DONE)
 800282c:	f8d0 3170 	ldr.w	r3, [r0, #368]	@ 0x170
 8002830:	071b      	lsls	r3, r3, #28
  {
    if (HAL_CRYP_Init(&P_pAESGCMctx->CrypHandle) != HAL_OK)
 8002832:	f100 0934 	add.w	r9, r0, #52	@ 0x34
  if ((P_pAESGCMctx->flags & GCM_INIT_NOT_DONE) == GCM_INIT_NOT_DONE)
 8002836:	d511      	bpl.n	800285c <CA_AES_GCM_Decrypt_Append+0x4c>
    if (HAL_CRYP_Init(&P_pAESGCMctx->CrypHandle) != HAL_OK)
 8002838:	4648      	mov	r0, r9
 800283a:	f7fe fb49 	bl	8000ed0 <HAL_CRYP_Init>
 800283e:	b138      	cbz	r0, 8002850 <CA_AES_GCM_Decrypt_Append+0x40>
    {
      *P_pOutputSize = 0;
 8002840:	2300      	movs	r3, #0
 8002842:	f8c8 3000 	str.w	r3, [r8]
      return CA_AES_ERR_BAD_OPERATION;
 8002846:	f640 401e 	movw	r0, #3102	@ 0xc1e
  }

  *P_pOutputSize = P_inputSize;

  return aes_ret_status;
}
 800284a:	b003      	add	sp, #12
 800284c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    P_pAESGCMctx->flags &= ~ GCM_INIT_NOT_DONE;
 8002850:	f8d4 3170 	ldr.w	r3, [r4, #368]	@ 0x170
 8002854:	f023 0308 	bic.w	r3, r3, #8
 8002858:	f8c4 3170 	str.w	r3, [r4, #368]	@ 0x170
  if (HAL_CRYP_Decrypt(&P_pAESGCMctx->CrypHandle, (uint32_t *)(uint32_t)P_pInputBuffer, (uint16_t)P_inputSize,
 800285c:	23ff      	movs	r3, #255	@ 0xff
 800285e:	9300      	str	r3, [sp, #0]
 8002860:	b2aa      	uxth	r2, r5
 8002862:	463b      	mov	r3, r7
 8002864:	4631      	mov	r1, r6
 8002866:	4648      	mov	r0, r9
 8002868:	f7fe fe40 	bl	80014ec <HAL_CRYP_Decrypt>
  int32_t aes_ret_status = CA_AES_SUCCESS;
 800286c:	2800      	cmp	r0, #0
  *P_pOutputSize = P_inputSize;
 800286e:	f8c8 5000 	str.w	r5, [r8]
  int32_t aes_ret_status = CA_AES_SUCCESS;
 8002872:	f640 401e 	movw	r0, #3102	@ 0xc1e
 8002876:	bf08      	it	eq
 8002878:	2000      	moveq	r0, #0
  return aes_ret_status;
 800287a:	e7e6      	b.n	800284a <CA_AES_GCM_Decrypt_Append+0x3a>
    return CA_AES_ERR_BAD_PARAMETER;
 800287c:	f44f 6042 	mov.w	r0, #3104	@ 0xc20
 8002880:	e7e3      	b.n	800284a <CA_AES_GCM_Decrypt_Append+0x3a>

08002882 <CA_AES_GCM_Decrypt_Finish>:
  *                                  See note
  */
int32_t CA_AES_GCM_Decrypt_Finish(CA_AESGCMctx_stt *P_pAESGCMctx,
                                  uint8_t       *P_pOutputBuffer,
                                  int32_t       *P_pOutputSize)
{
 8002882:	b5f0      	push	{r4, r5, r6, r7, lr}
  int32_t aes_ret_status = CA_AUTHENTICATION_SUCCESSFUL;
  uint8_t tag[16] = {0};
 8002884:	2300      	movs	r3, #0
{
 8002886:	b085      	sub	sp, #20
  uint8_t tag[16] = {0};
 8002888:	e9cd 3300 	strd	r3, r3, [sp]
 800288c:	e9cd 3302 	strd	r3, r3, [sp, #8]

  (void)P_pOutputBuffer;

  if ((P_pAESGCMctx == NULL) || (P_pOutputSize == NULL))
 8002890:	4605      	mov	r5, r0
 8002892:	b330      	cbz	r0, 80028e2 <CA_AES_GCM_Decrypt_Finish+0x60>
 8002894:	b32a      	cbz	r2, 80028e2 <CA_AES_GCM_Decrypt_Finish+0x60>
  {
    return CA_AES_ERR_BAD_PARAMETER;
  }

  if ((P_pAESGCMctx->mTagSize < 0) || (P_pAESGCMctx->mTagSize > 16))
 8002896:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8002898:	2b10      	cmp	r3, #16
 800289a:	d825      	bhi.n	80028e8 <CA_AES_GCM_Decrypt_Finish+0x66>
  {
    return CA_AES_ERR_BAD_CONTEXT;
  }

  if (HAL_CRYPEx_AESGCM_GenerateAuthTAG(&P_pAESGCMctx->CrypHandle, (uint32_t *)(uint32_t)&tag[0],
 800289c:	f100 0634 	add.w	r6, r0, #52	@ 0x34
 80028a0:	22ff      	movs	r2, #255	@ 0xff
 80028a2:	4669      	mov	r1, sp
 80028a4:	4630      	mov	r0, r6
 80028a6:	f7fe ff31 	bl	800170c <HAL_CRYPEx_AESGCM_GenerateAuthTAG>
  int32_t aes_ret_status = CA_AUTHENTICATION_SUCCESSFUL;
 80028aa:	f640 471f 	movw	r7, #3103	@ 0xc1f
 80028ae:	f240 34eb 	movw	r4, #1003	@ 0x3eb
 80028b2:	2800      	cmp	r0, #0
 80028b4:	bf18      	it	ne
 80028b6:	463c      	movne	r4, r7

  /* Check if tag is valid                                               */
#if defined(KMS_ENCRYPT_DECRYPT_BLOB)
  if (secure_memcmp(tag, P_pAESGCMctx->pmTag, 16) != 0)
#else /* KMS_ENCRYPT_DECRYPT_BLOB */
  if (memcmp(tag, P_pAESGCMctx->pmTag, 16) != 0)
 80028b8:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 80028ba:	2210      	movs	r2, #16
 80028bc:	4668      	mov	r0, sp
 80028be:	f004 f98d 	bl	8006bdc <memcmp>
#endif /* KMS_ENCRYPT_DECRYPT_BLOB */
  {
    aes_ret_status =  CA_AUTHENTICATION_FAILED;
 80028c2:	2800      	cmp	r0, #0
  }

  if (HAL_CRYP_DeInit(&P_pAESGCMctx->CrypHandle) != HAL_OK)
 80028c4:	4630      	mov	r0, r6
    aes_ret_status =  CA_AUTHENTICATION_FAILED;
 80028c6:	bf18      	it	ne
 80028c8:	f44f 747b 	movne.w	r4, #1004	@ 0x3ec
  if (HAL_CRYP_DeInit(&P_pAESGCMctx->CrypHandle) != HAL_OK)
 80028cc:	f7fe fb23 	bl	8000f16 <HAL_CRYP_DeInit>
  {
    aes_ret_status = CA_AES_ERR_BAD_CONTEXT;
 80028d0:	2800      	cmp	r0, #0
 80028d2:	bf18      	it	ne
 80028d4:	463c      	movne	r4, r7
  }
  cleanup_handle(&(P_pAESGCMctx->CrypHandle));
 80028d6:	4630      	mov	r0, r6
 80028d8:	f7ff fa98 	bl	8001e0c <cleanup_handle>
    aes_ret_status =  CA_AUTHENTICATION_FAILED;
  }
#endif /* KMS_ENCRYPT_DECRYPT_BLOB */

  return aes_ret_status;
}
 80028dc:	4620      	mov	r0, r4
 80028de:	b005      	add	sp, #20
 80028e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return CA_AES_ERR_BAD_PARAMETER;
 80028e2:	f44f 6442 	mov.w	r4, #3104	@ 0xc20
 80028e6:	e7f9      	b.n	80028dc <CA_AES_GCM_Decrypt_Finish+0x5a>
    return CA_AES_ERR_BAD_CONTEXT;
 80028e8:	f640 441f 	movw	r4, #3103	@ 0xc1f
 80028ec:	e7f6      	b.n	80028dc <CA_AES_GCM_Decrypt_Finish+0x5a>

080028ee <CA_AES_GCM_Header_Append>:
  * @retval     CA_AES_ERR_BAD_OPERATION Append not allowed
  */
int32_t CA_AES_GCM_Header_Append(CA_AESGCMctx_stt *P_pAESGCMctx,
                                 const uint8_t *P_pInputBuffer,
                                 int32_t        P_inputSize)
{
 80028ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
  int32_t aes_ret_status = CA_AES_SUCCESS;


  if ((P_pAESGCMctx == NULL) || (P_pInputBuffer == NULL))
 80028f0:	4604      	mov	r4, r0
 80028f2:	b350      	cbz	r0, 800294a <CA_AES_GCM_Header_Append+0x5c>
 80028f4:	b349      	cbz	r1, 800294a <CA_AES_GCM_Header_Append+0x5c>
  {
    return CA_AES_ERR_BAD_PARAMETER;
  }

  P_pAESGCMctx->mAADsize = P_inputSize;
 80028f6:	6302      	str	r2, [r0, #48]	@ 0x30
  P_pAESGCMctx->CrypHandle.Init.HeaderSize = (uint32_t)(P_inputSize) / 4U;
  P_pAESGCMctx->CrypHandle.Init.Header     = (uint32_t *)(uint32_t)P_pInputBuffer;

  if (HAL_CRYP_Init(&P_pAESGCMctx->CrypHandle) != HAL_OK)
 80028f8:	f100 0534 	add.w	r5, r0, #52	@ 0x34
  P_pAESGCMctx->CrypHandle.Init.HeaderSize = (uint32_t)(P_inputSize) / 4U;
 80028fc:	0892      	lsrs	r2, r2, #2
  P_pAESGCMctx->CrypHandle.Init.Header     = (uint32_t *)(uint32_t)P_pInputBuffer;
 80028fe:	e9c0 1213 	strd	r1, r2, [r0, #76]	@ 0x4c
  if (HAL_CRYP_Init(&P_pAESGCMctx->CrypHandle) != HAL_OK)
 8002902:	4628      	mov	r0, r5
 8002904:	f7fe fae4 	bl	8000ed0 <HAL_CRYP_Init>
 8002908:	4603      	mov	r3, r0
 800290a:	b118      	cbz	r0, 8002914 <CA_AES_GCM_Header_Append+0x26>
    if ((P_pAESGCMctx->flags & GCM_ENCRYPTION_ONGOING) == GCM_ENCRYPTION_ONGOING)
    {
      if (HAL_CRYP_Encrypt(&(P_pAESGCMctx->CrypHandle), (uint32_t *)NULL, 0, (uint32_t *)NULL,
                           TIMEOUT_VALUE) != HAL_OK)
      {
        aes_ret_status = CA_AES_ERR_BAD_OPERATION;
 800290c:	f640 401e 	movw	r0, #3102	@ 0xc1e
        aes_ret_status = CA_AES_ERR_BAD_OPERATION;
      }
    }
  }
  return aes_ret_status;
}
 8002910:	b003      	add	sp, #12
 8002912:	bd30      	pop	{r4, r5, pc}
    P_pAESGCMctx->flags &= ~ GCM_INIT_NOT_DONE;
 8002914:	f8d4 2170 	ldr.w	r2, [r4, #368]	@ 0x170
 8002918:	f022 0108 	bic.w	r1, r2, #8
 800291c:	f8c4 1170 	str.w	r1, [r4, #368]	@ 0x170
    if ((P_pAESGCMctx->flags & GCM_ENCRYPTION_ONGOING) == GCM_ENCRYPTION_ONGOING)
 8002920:	f012 0201 	ands.w	r2, r2, #1
 8002924:	f04f 01ff 	mov.w	r1, #255	@ 0xff
      if (HAL_CRYP_Encrypt(&(P_pAESGCMctx->CrypHandle), (uint32_t *)NULL, 0, (uint32_t *)NULL,
 8002928:	9100      	str	r1, [sp, #0]
    if ((P_pAESGCMctx->flags & GCM_ENCRYPTION_ONGOING) == GCM_ENCRYPTION_ONGOING)
 800292a:	d008      	beq.n	800293e <CA_AES_GCM_Header_Append+0x50>
      if (HAL_CRYP_Encrypt(&(P_pAESGCMctx->CrypHandle), (uint32_t *)NULL, 0, (uint32_t *)NULL,
 800292c:	4602      	mov	r2, r0
 800292e:	4601      	mov	r1, r0
 8002930:	4628      	mov	r0, r5
 8002932:	f7fe fd47 	bl	80013c4 <HAL_CRYP_Encrypt>
      if (HAL_CRYP_Decrypt(&(P_pAESGCMctx->CrypHandle), (uint32_t *)NULL, 0, (uint32_t *)NULL,
 8002936:	2800      	cmp	r0, #0
 8002938:	d1e8      	bne.n	800290c <CA_AES_GCM_Header_Append+0x1e>
  int32_t aes_ret_status = CA_AES_SUCCESS;
 800293a:	2000      	movs	r0, #0
 800293c:	e7e8      	b.n	8002910 <CA_AES_GCM_Header_Append+0x22>
      if (HAL_CRYP_Decrypt(&(P_pAESGCMctx->CrypHandle), (uint32_t *)NULL, 0, (uint32_t *)NULL,
 800293e:	4613      	mov	r3, r2
 8002940:	4611      	mov	r1, r2
 8002942:	4628      	mov	r0, r5
 8002944:	f7fe fdd2 	bl	80014ec <HAL_CRYP_Decrypt>
 8002948:	e7f5      	b.n	8002936 <CA_AES_GCM_Header_Append+0x48>
    return CA_AES_ERR_BAD_PARAMETER;
 800294a:	f44f 6042 	mov.w	r0, #3104	@ 0xc20
 800294e:	e7df      	b.n	8002910 <CA_AES_GCM_Header_Append+0x22>

08002950 <CA_SHA256_Init>:
  *             *P_pSHA256ctx: The context that will be initialized. Not used
  * @retval     CA_HASH_SUCCESS: Operation Successful
  * @retval     CA_HASH_ERR_BAD_PARAMETER
  */
int32_t CA_SHA256_Init(CA_SHA256ctx_stt *P_pSHA256ctx)
{
 8002950:	b510      	push	{r4, lr}
  int32_t hash_ret_status;

  mbedtls_sha256_init(&(P_pSHA256ctx->hash_ctx));
 8002952:	f100 040c 	add.w	r4, r0, #12
 8002956:	4620      	mov	r0, r4
 8002958:	f003 ff7e 	bl	8006858 <mbedtls_sha256_init>
  if (mbedtls_sha256_starts_ret(&(P_pSHA256ctx->hash_ctx), 0 /* is224 = 0 for SHA256 */) != 0)
 800295c:	2100      	movs	r1, #0
 800295e:	4620      	mov	r0, r4
 8002960:	f003 ff7e 	bl	8006860 <mbedtls_sha256_starts_ret>
  {
    hash_ret_status = CA_HASH_SUCCESS;
  }

  return hash_ret_status;
}
 8002964:	f640 73a3 	movw	r3, #4003	@ 0xfa3
    hash_ret_status = CA_HASH_ERR_BAD_PARAMETER;
 8002968:	2800      	cmp	r0, #0
}
 800296a:	bf18      	it	ne
 800296c:	4618      	movne	r0, r3
 800296e:	bd10      	pop	{r4, pc}

08002970 <CA_SHA256_Append>:
  * @retval     CA_HASH_ERR_BAD_OPERATION
  */
int32_t CA_SHA256_Append(CA_SHA256ctx_stt *P_pSHA256ctx,
                         const uint8_t *P_pInputBuffer,
                         int32_t P_inputSize)
{
 8002970:	b508      	push	{r3, lr}
  int32_t hash_ret_status;

  if (P_pInputBuffer == NULL)
 8002972:	b141      	cbz	r1, 8002986 <CA_SHA256_Append+0x16>
  {
    return CA_HASH_ERR_BAD_PARAMETER;
  }

  if (mbedtls_sha256_update_ret(&(P_pSHA256ctx->hash_ctx), P_pInputBuffer, (size_t)P_inputSize) != 0)
 8002974:	300c      	adds	r0, #12
 8002976:	f004 f875 	bl	8006a64 <mbedtls_sha256_update_ret>
  {
    hash_ret_status = CA_HASH_ERR_BAD_OPERATION;
 800297a:	f640 73a1 	movw	r3, #4001	@ 0xfa1
 800297e:	2800      	cmp	r0, #0
 8002980:	bf18      	it	ne
 8002982:	4618      	movne	r0, r3
  {
    hash_ret_status = CA_HASH_SUCCESS;
  }

  return hash_ret_status;
}
 8002984:	bd08      	pop	{r3, pc}
    return CA_HASH_ERR_BAD_PARAMETER;
 8002986:	f640 70a3 	movw	r0, #4003	@ 0xfa3
 800298a:	e7fb      	b.n	8002984 <CA_SHA256_Append+0x14>

0800298c <CA_SHA256_Finish>:
  * @retval     CA_HASH_ERR_BAD_CONTEXT
  */
int32_t CA_SHA256_Finish(CA_SHA256ctx_stt *P_pSHA256ctx,
                         uint8_t *P_pOutputBuffer,
                         int32_t *P_pOutputSize)
{
 800298c:	b510      	push	{r4, lr}
 800298e:	4614      	mov	r4, r2
  int32_t hash_ret_status;

  if ((P_pOutputBuffer == NULL) || (P_pOutputSize == NULL))
 8002990:	b139      	cbz	r1, 80029a2 <CA_SHA256_Finish+0x16>
 8002992:	b132      	cbz	r2, 80029a2 <CA_SHA256_Finish+0x16>
  {
    return CA_HASH_ERR_BAD_PARAMETER;
  }

  if (mbedtls_sha256_finish_ret(&(P_pSHA256ctx->hash_ctx), P_pOutputBuffer) != 0)
 8002994:	300c      	adds	r0, #12
 8002996:	f004 f89e 	bl	8006ad6 <mbedtls_sha256_finish_ret>
 800299a:	b928      	cbnz	r0, 80029a8 <CA_SHA256_Finish+0x1c>
  {
    hash_ret_status = CA_HASH_ERR_BAD_CONTEXT;
  }
  else
  {
    *P_pOutputSize = (int32_t)CA_CRL_SHA256_SIZE;
 800299c:	2320      	movs	r3, #32
 800299e:	6023      	str	r3, [r4, #0]
    hash_ret_status = CA_HASH_SUCCESS;
  }

  return hash_ret_status;
}
 80029a0:	bd10      	pop	{r4, pc}
    return CA_HASH_ERR_BAD_PARAMETER;
 80029a2:	f640 70a3 	movw	r0, #4003	@ 0xfa3
 80029a6:	e7fb      	b.n	80029a0 <CA_SHA256_Finish+0x14>
    hash_ret_status = CA_HASH_ERR_BAD_CONTEXT;
 80029a8:	f640 70a2 	movw	r0, #4002	@ 0xfa2
 80029ac:	e7f8      	b.n	80029a0 <CA_SHA256_Finish+0x14>

080029ae <CA_ECCinitEC>:
  (void)P_pECctx;
  (void)P_pMemBuf;

  /* Nothing special to do, simply return success */
  return CA_ECC_SUCCESS;
}
 80029ae:	2000      	movs	r0, #0
 80029b0:	4770      	bx	lr

080029b2 <CA_ECCfreeEC>:

/**
  * @brief      Do nothing
  * @retval     ECC_SUCCESS
  */
int32_t CA_ECCfreeEC(CA_EC_stt *P_pECctx, membuf_stt *P_pMemBuf)
 80029b2:	2000      	movs	r0, #0
 80029b4:	4770      	bx	lr

080029b6 <CA_ECCinitPoint>:
  * @retval     CA_ECC_SUCCESS: Operation Successful
  * @retval     CA_ECC_ERR_BAD_PARAMETER: P_ppECPnt == NULL
  * @retval     CA_ERR_MEMORY_FAIL:: Not enough memory
  */
int32_t CA_ECCinitPoint(CA_ECpoint_stt **P_ppECPnt, const CA_EC_stt *P_pECctx, CA_membuf_stt *P_pMemBuf)
{
 80029b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029b8:	460e      	mov	r6, r1
  int32_t ecc_ret_status;

  /* Check parameters */
  if ((P_ppECPnt == NULL) || (P_pECctx == NULL) || (P_pMemBuf == NULL))
 80029ba:	4605      	mov	r5, r0
{
 80029bc:	4611      	mov	r1, r2
  if ((P_ppECPnt == NULL) || (P_pECctx == NULL) || (P_pMemBuf == NULL))
 80029be:	2800      	cmp	r0, #0
 80029c0:	d03b      	beq.n	8002a3a <CA_ECCinitPoint+0x84>
 80029c2:	2e00      	cmp	r6, #0
 80029c4:	d039      	beq.n	8002a3a <CA_ECCinitPoint+0x84>
 80029c6:	2a00      	cmp	r2, #0
 80029c8:	d037      	beq.n	8002a3a <CA_ECCinitPoint+0x84>
    ecc_ret_status = CA_ECC_ERR_BAD_PARAMETER;
  }
  else
  {
    /* Allocate main structure */
    *P_ppECPnt = (CA_ECpoint_stt *)wrap_allocate_memory(sizeof(CA_ECpoint_stt), P_pMemBuf);
 80029ca:	2010      	movs	r0, #16
 80029cc:	f7ff fa23 	bl	8001e16 <wrap_allocate_memory>
 80029d0:	4604      	mov	r4, r0
 80029d2:	6028      	str	r0, [r5, #0]
    if (*P_ppECPnt  == NULL)
 80029d4:	b910      	cbnz	r0, 80029dc <CA_ECCinitPoint+0x26>
    {
      ecc_ret_status = CA_ERR_MEMORY_FAIL;
 80029d6:	f240 30ed 	movw	r0, #1005	@ 0x3ed
        }
      }
    }
  }
  return ecc_ret_status;
}
 80029da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (**P_ppECPnt).pmX = (BigNum_stt *)wrap_allocate_memory(sizeof(BigNum_stt), P_pMemBuf);
 80029dc:	2008      	movs	r0, #8
 80029de:	f7ff fa1a 	bl	8001e16 <wrap_allocate_memory>
 80029e2:	4605      	mov	r5, r0
 80029e4:	6020      	str	r0, [r4, #0]
      if ((**P_ppECPnt).pmX == NULL)
 80029e6:	2800      	cmp	r0, #0
 80029e8:	d0f5      	beq.n	80029d6 <CA_ECCinitPoint+0x20>
        (**P_ppECPnt).pmX->pmDigit = (uint32_t *)wrap_allocate_memory((uint32_t)(P_pECctx->mAsize), P_pMemBuf);
 80029ea:	6877      	ldr	r7, [r6, #4]
 80029ec:	4638      	mov	r0, r7
 80029ee:	f7ff fa12 	bl	8001e16 <wrap_allocate_memory>
 80029f2:	6028      	str	r0, [r5, #0]
        if ((**P_ppECPnt).pmX->pmDigit == NULL)
 80029f4:	2800      	cmp	r0, #0
 80029f6:	d0ee      	beq.n	80029d6 <CA_ECCinitPoint+0x20>
          (**P_ppECPnt).pmX->mSize = (uint8_t)((uint32_t)(P_pECctx->mAsize) / sizeof(uint32_t));
 80029f8:	f3c7 0687 	ubfx	r6, r7, #2, #8
 80029fc:	71ae      	strb	r6, [r5, #6]
          (**P_ppECPnt).pmY = (BigNum_stt *)wrap_allocate_memory(sizeof(BigNum_stt), P_pMemBuf);
 80029fe:	2008      	movs	r0, #8
 8002a00:	f7ff fa09 	bl	8001e16 <wrap_allocate_memory>
 8002a04:	4605      	mov	r5, r0
 8002a06:	6060      	str	r0, [r4, #4]
          if ((**P_ppECPnt).pmY == NULL)
 8002a08:	2800      	cmp	r0, #0
 8002a0a:	d0e4      	beq.n	80029d6 <CA_ECCinitPoint+0x20>
            (**P_ppECPnt).pmY->pmDigit = (uint32_t *)wrap_allocate_memory((uint32_t)(P_pECctx->mAsize), P_pMemBuf);
 8002a0c:	4638      	mov	r0, r7
 8002a0e:	f7ff fa02 	bl	8001e16 <wrap_allocate_memory>
 8002a12:	6028      	str	r0, [r5, #0]
            if ((**P_ppECPnt).pmY->pmDigit == NULL)
 8002a14:	2800      	cmp	r0, #0
 8002a16:	d0de      	beq.n	80029d6 <CA_ECCinitPoint+0x20>
              (**P_ppECPnt).pmY->mSize = (uint8_t)((uint32_t)(P_pECctx->mAsize) / sizeof(uint32_t));
 8002a18:	71ae      	strb	r6, [r5, #6]
              (**P_ppECPnt).pmZ = (BigNum_stt *)wrap_allocate_memory(sizeof(BigNum_stt), P_pMemBuf);
 8002a1a:	2008      	movs	r0, #8
 8002a1c:	f7ff f9fb 	bl	8001e16 <wrap_allocate_memory>
 8002a20:	4605      	mov	r5, r0
 8002a22:	60a0      	str	r0, [r4, #8]
              if ((**P_ppECPnt).pmZ == NULL)
 8002a24:	2800      	cmp	r0, #0
 8002a26:	d0d6      	beq.n	80029d6 <CA_ECCinitPoint+0x20>
                (**P_ppECPnt).pmZ->pmDigit = (uint32_t *)wrap_allocate_memory((uint32_t)(P_pECctx->mAsize), P_pMemBuf);
 8002a28:	4638      	mov	r0, r7
 8002a2a:	f7ff f9f4 	bl	8001e16 <wrap_allocate_memory>
 8002a2e:	6028      	str	r0, [r5, #0]
                if ((**P_ppECPnt).pmZ->pmDigit == NULL)
 8002a30:	2800      	cmp	r0, #0
 8002a32:	d0d0      	beq.n	80029d6 <CA_ECCinitPoint+0x20>
                  (**P_ppECPnt).pmZ->mSize = (uint8_t)((uint32_t)(P_pECctx->mAsize) / sizeof(uint32_t));
 8002a34:	71ae      	strb	r6, [r5, #6]
                  ecc_ret_status =  CA_ECC_SUCCESS;
 8002a36:	2000      	movs	r0, #0
 8002a38:	e7cf      	b.n	80029da <CA_ECCinitPoint+0x24>
    ecc_ret_status = CA_ECC_ERR_BAD_PARAMETER;
 8002a3a:	f241 4054 	movw	r0, #5204	@ 0x1454
  return ecc_ret_status;
 8002a3e:	e7cc      	b.n	80029da <CA_ECCinitPoint+0x24>

08002a40 <CA_ECCfreePoint>:
  *             Curve Point internal values. NOT USED
  * @retval     CA_ECC_SUCCESS: Operation Successful
  * @retval     CA_ECC_ERR_BAD_PARAMETER P_pECPnt == NULL
  * @retval     CA_ECC_ERR_BAD_CONTEXT  *P_pECPnt == NULL
  */
int32_t CA_ECCfreePoint(CA_ECpoint_stt **P_pECPnt, CA_membuf_stt *P_pMemBuf)
 8002a40:	2000      	movs	r0, #0
 8002a42:	4770      	bx	lr

08002a44 <CA_ECCsetPointCoordinate>:
  */
int32_t CA_ECCsetPointCoordinate(CA_ECpoint_stt *P_pECPnt,
                                 CA_ECcoordinate_et P_Coordinate,
                                 const uint8_t *P_pCoordinateValue,
                                 int32_t P_coordinateSize)
{
 8002a44:	b510      	push	{r4, lr}
 8002a46:	460c      	mov	r4, r1
 8002a48:	4611      	mov	r1, r2
 8002a4a:	461a      	mov	r2, r3
  uint32_t wrap_ret_status;
  int32_t ecc_ret_status;

  /* Check parameters */
  if ((P_pECPnt == NULL) || (P_pCoordinateValue == NULL))
 8002a4c:	b100      	cbz	r0, 8002a50 <CA_ECCsetPointCoordinate+0xc>
 8002a4e:	b911      	cbnz	r1, 8002a56 <CA_ECCsetPointCoordinate+0x12>
  {
    return CA_ECC_ERR_BAD_PARAMETER;
 8002a50:	f241 4054 	movw	r0, #5204	@ 0x1454
  {
    ecc_ret_status = CA_ECC_ERR_BAD_PARAMETER;
  }

  return ecc_ret_status;
}
 8002a54:	bd10      	pop	{r4, pc}
  if (P_Coordinate == CA_E_ECC_POINT_COORDINATE_X)
 8002a56:	b934      	cbnz	r4, 8002a66 <CA_ECCsetPointCoordinate+0x22>
    wrap_ret_status = wrap_uint8_to_BigNum(P_pECPnt->pmX,
 8002a58:	6800      	ldr	r0, [r0, #0]
 8002a5a:	f7ff f9ec 	bl	8001e36 <wrap_uint8_to_BigNum>
    if (wrap_ret_status == WRAP_SUCCESS)
 8002a5e:	2800      	cmp	r0, #0
 8002a60:	d1f6      	bne.n	8002a50 <CA_ECCsetPointCoordinate+0xc>
      ecc_ret_status = CA_ECC_SUCCESS;
 8002a62:	2000      	movs	r0, #0
 8002a64:	e7f6      	b.n	8002a54 <CA_ECCsetPointCoordinate+0x10>
  else if (P_Coordinate == CA_E_ECC_POINT_COORDINATE_Y)
 8002a66:	2c01      	cmp	r4, #1
 8002a68:	d1f2      	bne.n	8002a50 <CA_ECCsetPointCoordinate+0xc>
    wrap_ret_status = wrap_uint8_to_BigNum(P_pECPnt->pmY,
 8002a6a:	6840      	ldr	r0, [r0, #4]
 8002a6c:	e7f5      	b.n	8002a5a <CA_ECCsetPointCoordinate+0x16>
	...

08002a70 <CA_ECDSAinitSign>:
  * @param[in]  *P_pMemBuf: NOT USED
  * @retval CA_ECC_SUCCESS: on Success
  * @retval CA_ECC_ERR_BAD_PARAMETER: P_ppSignature == NULL
  */
int32_t CA_ECDSAinitSign(CA_ECDSAsignature_stt **P_ppSignature, const CA_EC_stt *P_pECctx, CA_membuf_stt *P_pMemBuf)
{
 8002a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a74:	460d      	mov	r5, r1
 8002a76:	4616      	mov	r6, r2
  int32_t ecc_ret_status;
  HAL_StatusTypeDef hal_ret_status;

  /* Check parameters */
  if (P_ppSignature == NULL)
 8002a78:	4607      	mov	r7, r0
 8002a7a:	2800      	cmp	r0, #0
 8002a7c:	d03a      	beq.n	8002af4 <CA_ECDSAinitSign+0x84>
  {
    ecc_ret_status = CA_ECC_ERR_BAD_PARAMETER;
  }
  else
  {
    ((CA_EC_stt *)(uint32_t)P_pECctx)->hpka.Instance = CA_PKA_INSTANCE;
 8002a7e:	4b20      	ldr	r3, [pc, #128]	@ (8002b00 <CA_ECDSAinitSign+0x90>)
 8002a80:	630b      	str	r3, [r1, #48]	@ 0x30
    ((CA_EC_stt *)(uint32_t)P_pECctx)->hpka.State = HAL_PKA_STATE_RESET;
 8002a82:	2300      	movs	r3, #0
 8002a84:	f881 3034 	strb.w	r3, [r1, #52]	@ 0x34
    ((CA_EC_stt *)(uint32_t)P_pECctx)->hpka.ErrorCode = HAL_PKA_ERROR_NONE;
    /* HAL initialisation */
    hal_ret_status = HAL_PKA_Init(&((CA_EC_stt *)(uint32_t)P_pECctx)->hpka);
 8002a88:	f101 0030 	add.w	r0, r1, #48	@ 0x30
    ((CA_EC_stt *)(uint32_t)P_pECctx)->hpka.ErrorCode = HAL_PKA_ERROR_NONE;
 8002a8c:	638b      	str	r3, [r1, #56]	@ 0x38
    hal_ret_status = HAL_PKA_Init(&((CA_EC_stt *)(uint32_t)P_pECctx)->hpka);
 8002a8e:	f7fe ffaf 	bl	80019f0 <HAL_PKA_Init>
    if (hal_ret_status == HAL_OK)
 8002a92:	4604      	mov	r4, r0
 8002a94:	bb88      	cbnz	r0, 8002afa <CA_ECDSAinitSign+0x8a>
    {
      /* Allocate main structure */
      *P_ppSignature = (CA_ECDSAsignature_stt *)wrap_allocate_memory(sizeof(CA_ECDSAsignature_stt), P_pMemBuf);
 8002a96:	4631      	mov	r1, r6
 8002a98:	2008      	movs	r0, #8
 8002a9a:	f7ff f9bc 	bl	8001e16 <wrap_allocate_memory>
 8002a9e:	4606      	mov	r6, r0
 8002aa0:	6038      	str	r0, [r7, #0]
      if (*P_ppSignature  == NULL)
 8002aa2:	b918      	cbnz	r0, 8002aac <CA_ECDSAinitSign+0x3c>
      {
        /* Allocate pmR */
        (**P_ppSignature).pmR = (BigNum_stt *)wrap_allocate_memory(sizeof(BigNum_stt), P_pMemBuf);
        if ((**P_ppSignature).pmR == NULL)
        {
          ecc_ret_status =  CA_ERR_MEMORY_FAIL;
 8002aa4:	f240 30ed 	movw	r0, #1005	@ 0x3ed
    {
      ecc_ret_status = CA_ECC_ERR_BAD_CONTEXT;
    }
  }
  return ecc_ret_status;
}
 8002aa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        (**P_ppSignature).pmR = (BigNum_stt *)wrap_allocate_memory(sizeof(BigNum_stt), P_pMemBuf);
 8002aac:	2008      	movs	r0, #8
 8002aae:	f7ff f9b2 	bl	8001e16 <wrap_allocate_memory>
 8002ab2:	4607      	mov	r7, r0
 8002ab4:	6030      	str	r0, [r6, #0]
        if ((**P_ppSignature).pmR == NULL)
 8002ab6:	2800      	cmp	r0, #0
 8002ab8:	d0f4      	beq.n	8002aa4 <CA_ECDSAinitSign+0x34>
          (**P_ppSignature).pmR->pmDigit = (uint32_t *)wrap_allocate_memory((uint32_t)(P_pECctx->mAsize), P_pMemBuf);
 8002aba:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8002abe:	4648      	mov	r0, r9
 8002ac0:	f7ff f9a9 	bl	8001e16 <wrap_allocate_memory>
 8002ac4:	6038      	str	r0, [r7, #0]
          if ((**P_ppSignature).pmR->pmDigit == NULL)
 8002ac6:	2800      	cmp	r0, #0
 8002ac8:	d0ec      	beq.n	8002aa4 <CA_ECDSAinitSign+0x34>
            (**P_ppSignature).pmR->mSize = (uint8_t)((uint32_t)(P_pECctx->mAsize) / sizeof(uint32_t));
 8002aca:	f3c9 0887 	ubfx	r8, r9, #2, #8
 8002ace:	f887 8006 	strb.w	r8, [r7, #6]
            (**P_ppSignature).pmS = (BigNum_stt *)wrap_allocate_memory(sizeof(BigNum_stt), P_pMemBuf);
 8002ad2:	2008      	movs	r0, #8
 8002ad4:	f7ff f99f 	bl	8001e16 <wrap_allocate_memory>
 8002ad8:	4605      	mov	r5, r0
 8002ada:	6070      	str	r0, [r6, #4]
            if ((**P_ppSignature).pmS == NULL)
 8002adc:	2800      	cmp	r0, #0
 8002ade:	d0e1      	beq.n	8002aa4 <CA_ECDSAinitSign+0x34>
              (**P_ppSignature).pmS->pmDigit = (uint32_t *)wrap_allocate_memory((uint32_t)(P_pECctx->mAsize),
 8002ae0:	4648      	mov	r0, r9
 8002ae2:	f7ff f998 	bl	8001e16 <wrap_allocate_memory>
 8002ae6:	6028      	str	r0, [r5, #0]
              if ((**P_ppSignature).pmS->pmDigit == NULL)
 8002ae8:	2800      	cmp	r0, #0
 8002aea:	d0db      	beq.n	8002aa4 <CA_ECDSAinitSign+0x34>
                (**P_ppSignature).pmS->mSize = (uint8_t)((uint32_t)(P_pECctx->mAsize) / sizeof(uint32_t));
 8002aec:	f885 8006 	strb.w	r8, [r5, #6]
                ecc_ret_status =  CA_ECC_SUCCESS;
 8002af0:	4620      	mov	r0, r4
 8002af2:	e7d9      	b.n	8002aa8 <CA_ECDSAinitSign+0x38>
    ecc_ret_status = CA_ECC_ERR_BAD_PARAMETER;
 8002af4:	f241 4054 	movw	r0, #5204	@ 0x1454
 8002af8:	e7d6      	b.n	8002aa8 <CA_ECDSAinitSign+0x38>
      ecc_ret_status = CA_ECC_ERR_BAD_CONTEXT;
 8002afa:	f241 4053 	movw	r0, #5203	@ 0x1453
  return ecc_ret_status;
 8002afe:	e7d3      	b.n	8002aa8 <CA_ECDSAinitSign+0x38>
 8002b00:	58002000 	.word	0x58002000

08002b04 <CA_ECDSAfreeSign>:
  *             *P_pMemBuf: Pointer to the membuf_stt structure that currently
  *             stores the ECDSA signature internal values NOT USED
  * @retval     CA_ECC_SUCCESS Operation Successful
  * @retval     CA_ECC_ERR_BAD_PARAMETER: P_pSignature == NULL
  */
int32_t CA_ECDSAfreeSign(CA_ECDSAsignature_stt **P_pSignature, CA_membuf_stt *P_pMemBuf)
 8002b04:	2000      	movs	r0, #0
 8002b06:	4770      	bx	lr

08002b08 <CA_ECDSAsetSignature>:
  */
int32_t CA_ECDSAsetSignature(CA_ECDSAsignature_stt *P_pSignature,
                             CA_ECDSAsignValues_et P_RorS,
                             const uint8_t *P_pValue,
                             int32_t P_valueSize)
{
 8002b08:	b510      	push	{r4, lr}
 8002b0a:	460c      	mov	r4, r1
 8002b0c:	4611      	mov	r1, r2
 8002b0e:	461a      	mov	r2, r3
  uint8_t wrap_ret_status = WRAP_SUCCESS;
  int32_t ecc_ret_status = CA_ECC_SUCCESS;

  /* Check parameters */
  if ((P_pValue == NULL) || (P_pSignature == NULL))
 8002b10:	b101      	cbz	r1, 8002b14 <CA_ECDSAsetSignature+0xc>
 8002b12:	b910      	cbnz	r0, 8002b1a <CA_ECDSAsetSignature+0x12>
  {
    return CA_ECC_ERR_BAD_PARAMETER;
 8002b14:	f241 4054 	movw	r0, #5204	@ 0x1454
  if (wrap_ret_status == WRAP_FAILURE)
  {
    ecc_ret_status = CA_ECC_ERR_BAD_PARAMETER;
  }
  return ecc_ret_status;
}
 8002b18:	bd10      	pop	{r4, pc}
  if (P_RorS == CA_E_ECDSA_SIGNATURE_R_VALUE)
 8002b1a:	b934      	cbnz	r4, 8002b2a <CA_ECDSAsetSignature+0x22>
    wrap_ret_status = wrap_uint8_to_BigNum(P_pSignature->pmR, P_pValue, P_valueSize);
 8002b1c:	6800      	ldr	r0, [r0, #0]
    wrap_ret_status = wrap_uint8_to_BigNum(P_pSignature->pmS, P_pValue, P_valueSize);
 8002b1e:	f7ff f98a 	bl	8001e36 <wrap_uint8_to_BigNum>
  if (wrap_ret_status == WRAP_FAILURE)
 8002b22:	2801      	cmp	r0, #1
 8002b24:	d0f6      	beq.n	8002b14 <CA_ECDSAsetSignature+0xc>
 8002b26:	2000      	movs	r0, #0
 8002b28:	e7f6      	b.n	8002b18 <CA_ECDSAsetSignature+0x10>
  else if (P_RorS == CA_E_ECDSA_SIGNATURE_S_VALUE)
 8002b2a:	2c01      	cmp	r4, #1
 8002b2c:	d1f2      	bne.n	8002b14 <CA_ECDSAsetSignature+0xc>
    wrap_ret_status = wrap_uint8_to_BigNum(P_pSignature->pmS, P_pValue, P_valueSize);
 8002b2e:	6840      	ldr	r0, [r0, #4]
 8002b30:	e7f5      	b.n	8002b1e <CA_ECDSAsetSignature+0x16>

08002b32 <CA_ECDSAverify>:
int32_t CA_ECDSAverify(const uint8_t      *P_pDigest,
                       int32_t             P_digestSize,
                       const CA_ECDSAsignature_stt   *P_pSignature,
                       const CA_ECDSAverifyCtx_stt *P_pVerifyCtx,
                       CA_membuf_stt *P_pMemBuf)
{
 8002b32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b36:	f2ad 7dc4 	subw	sp, sp, #1988	@ 0x7c4
  int32_t ecdsa_ret_status = CA_SIGNATURE_INVALID;
  uint8_t wrap_ret_status;
  HAL_StatusTypeDef hal_ret_status;
  PKA_ECDSAVerifInTypeDef PkaVerify = {0};
  uint8_t wrap_R[384] = {0};
 8002b3a:	2400      	movs	r4, #0
  PKA_ECDSAVerifInTypeDef PkaVerify = {0};
 8002b3c:	2100      	movs	r1, #0
{
 8002b3e:	4683      	mov	fp, r0
 8002b40:	4691      	mov	r9, r2
  PKA_ECDSAVerifInTypeDef PkaVerify = {0};
 8002b42:	a803      	add	r0, sp, #12
 8002b44:	2234      	movs	r2, #52	@ 0x34
{
 8002b46:	461f      	mov	r7, r3
  PKA_ECDSAVerifInTypeDef PkaVerify = {0};
 8002b48:	f004 f858 	bl	8006bfc <memset>
  uint8_t wrap_R[384] = {0};
 8002b4c:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 8002b50:	4621      	mov	r1, r4
 8002b52:	a811      	add	r0, sp, #68	@ 0x44
 8002b54:	9410      	str	r4, [sp, #64]	@ 0x40
 8002b56:	f004 f851 	bl	8006bfc <memset>
  uint8_t wrap_S[384] = {0};
 8002b5a:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 8002b5e:	4621      	mov	r1, r4
 8002b60:	a871      	add	r0, sp, #452	@ 0x1c4
 8002b62:	9470      	str	r4, [sp, #448]	@ 0x1c0
 8002b64:	f004 f84a 	bl	8006bfc <memset>
  uint8_t wrap_X[384] = {0};
 8002b68:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 8002b6c:	4621      	mov	r1, r4
 8002b6e:	a8d1      	add	r0, sp, #836	@ 0x344
 8002b70:	94d0      	str	r4, [sp, #832]	@ 0x340
  uint8_t wrap_Y[384] = {0};
  uint8_t wrap_absA[384] = {0};
 8002b72:	f50d 6ac8 	add.w	sl, sp, #1600	@ 0x640
  uint8_t wrap_X[384] = {0};
 8002b76:	f004 f841 	bl	8006bfc <memset>
  uint8_t wrap_Y[384] = {0};
 8002b7a:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 8002b7e:	4621      	mov	r1, r4
 8002b80:	f20d 40c4 	addw	r0, sp, #1220	@ 0x4c4
 8002b84:	f8cd 44c0 	str.w	r4, [sp, #1216]	@ 0x4c0
 8002b88:	f004 f838 	bl	8006bfc <memset>
  uint8_t wrap_absA[384] = {0};
 8002b8c:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 8002b90:	4621      	mov	r1, r4
 8002b92:	f20d 6044 	addw	r0, sp, #1604	@ 0x644
 8002b96:	f8ca 4000 	str.w	r4, [sl]
 8002b9a:	f004 f82f 	bl	8006bfc <memset>
  uint8_t wrap_sign;
  __IO uint8_t sign_check_status = 0x00U;
 8002b9e:	f88d 400b 	strb.w	r4, [sp, #11]

  (void)P_digestSize;
  (void)P_pMemBuf;

  /* Check parameters */
  if ((P_pDigest == NULL)
 8002ba2:	f1bb 0f00 	cmp.w	fp, #0
 8002ba6:	f000 80d4 	beq.w	8002d52 <CA_ECDSAverify+0x220>
      || (P_pSignature == NULL)
 8002baa:	f1b9 0f00 	cmp.w	r9, #0
 8002bae:	f000 80d0 	beq.w	8002d52 <CA_ECDSAverify+0x220>
      || (P_pVerifyCtx == NULL))
 8002bb2:	2f00      	cmp	r7, #0
 8002bb4:	f000 80cd 	beq.w	8002d52 <CA_ECDSAverify+0x220>
  {
    return CA_ECC_ERR_BAD_PARAMETER;
  }

  if (P_pVerifyCtx->pmPubKey == NULL)
 8002bb8:	f8d7 8000 	ldr.w	r8, [r7]
 8002bbc:	f1b8 0f00 	cmp.w	r8, #0
 8002bc0:	f000 80c7 	beq.w	8002d52 <CA_ECDSAverify+0x220>
  {
    return CA_ECC_ERR_BAD_PARAMETER;
  }
  if (((uint32_t)(P_pVerifyCtx->pmPubKey->pmX->mNumDigits) + (uint32_t)(P_pVerifyCtx->pmPubKey->pmY->mNumDigits))
 8002bc4:	f8d8 3000 	ldr.w	r3, [r8]
 8002bc8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8002bcc:	889b      	ldrh	r3, [r3, #4]
 8002bce:	8892      	ldrh	r2, [r2, #4]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	2b61      	cmp	r3, #97	@ 0x61
 8002bd4:	f200 80bd 	bhi.w	8002d52 <CA_ECDSAverify+0x220>
    return CA_ECC_ERR_BAD_PARAMETER;
  }

  /* Compute |a| to transmit it to PKA */
  wrap_ret_status = wrap_AbsA(wrap_absA,
                              P_pVerifyCtx->pmEC->pmA,
 8002bd8:	687e      	ldr	r6, [r7, #4]
  wrap_ret_status = wrap_AbsA(wrap_absA,
 8002bda:	6833      	ldr	r3, [r6, #0]
      || (P_pA == NULL)
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 80bb 	beq.w	8002d58 <CA_ECDSAverify+0x226>
  wrap_ret_status = wrap_AbsA(wrap_absA,
 8002be2:	6931      	ldr	r1, [r6, #16]
      || (P_pB == NULL))
 8002be4:	2900      	cmp	r1, #0
 8002be6:	f000 80b7 	beq.w	8002d58 <CA_ECDSAverify+0x226>
  if (P_sizeA > P_sizeB)
 8002bea:	6875      	ldr	r5, [r6, #4]
 8002bec:	68f2      	ldr	r2, [r6, #12]
 8002bee:	4295      	cmp	r5, r2
 8002bf0:	bf38      	it	cc
 8002bf2:	4615      	movcc	r5, r2
  if (wrap_maxsize > P_pSizeR)
 8002bf4:	f5b5 7fc0 	cmp.w	r5, #384	@ 0x180
 8002bf8:	f200 80ae 	bhi.w	8002d58 <CA_ECDSAverify+0x226>
  wrap_upper = memcmp(P_pA, P_pB, wrap_maxsize);
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	462a      	mov	r2, r5
 8002c00:	9101      	str	r1, [sp, #4]
 8002c02:	9300      	str	r3, [sp, #0]
 8002c04:	f003 ffea 	bl	8006bdc <memcmp>
  if (wrap_upper > 0)
 8002c08:	42a0      	cmp	r0, r4
 8002c0a:	e9dd 3100 	ldrd	r3, r1, [sp]
 8002c0e:	dd63      	ble.n	8002cd8 <CA_ECDSAverify+0x1a6>
 8002c10:	eb0a 0c05 	add.w	ip, sl, r5
 8002c14:	195a      	adds	r2, r3, r5
 8002c16:	4429      	add	r1, r5
    for (i = wrap_maxsize; i > 0U; i--)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d14f      	bne.n	8002cbc <CA_ECDSAverify+0x18a>
    *P_pSign = 0U; /* Positive */
 8002c1c:	2300      	movs	r3, #0
                              &wrap_sign);
  if (wrap_ret_status == WRAP_SUCCESS)
  {

    /* Fill PkaVerify structure */
    PkaVerify.primeOrderSize = (uint32_t)(P_pVerifyCtx->pmEC->mNsize);
 8002c1e:	69f2      	ldr	r2, [r6, #28]
 8002c20:	9203      	str	r2, [sp, #12]
    PkaVerify.modulusSize = (uint32_t)(P_pVerifyCtx->pmEC->mPsize);
 8002c22:	6972      	ldr	r2, [r6, #20]
    PkaVerify.basePointY =      P_pVerifyCtx->pmEC->pmGy;
    PkaVerify.primeOrder =      P_pVerifyCtx->pmEC->pmN;
    PkaVerify.hash =            P_pDigest;

    /* Convert R to PKA format */
    wrap_ret_status = wrap_BigNum_to_uint8(wrap_R, P_pSignature->pmR, NULL);
 8002c24:	f8d9 1000 	ldr.w	r1, [r9]
    PkaVerify.coef =            wrap_absA;
 8002c28:	f8cd a018 	str.w	sl, [sp, #24]
    PkaVerify.coefSign =        wrap_sign;
 8002c2c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    PkaVerify.modulus =         P_pVerifyCtx->pmEC->pmP;
 8002c30:	6933      	ldr	r3, [r6, #16]
 8002c32:	9307      	str	r3, [sp, #28]
    PkaVerify.basePointX =      P_pVerifyCtx->pmEC->pmGx;
 8002c34:	6a33      	ldr	r3, [r6, #32]
 8002c36:	9308      	str	r3, [sp, #32]
    PkaVerify.basePointY =      P_pVerifyCtx->pmEC->pmGy;
 8002c38:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8002c3a:	9309      	str	r3, [sp, #36]	@ 0x24
    wrap_ret_status = wrap_BigNum_to_uint8(wrap_R, P_pSignature->pmR, NULL);
 8002c3c:	ac10      	add	r4, sp, #64	@ 0x40
    PkaVerify.primeOrder =      P_pVerifyCtx->pmEC->pmN;
 8002c3e:	69b3      	ldr	r3, [r6, #24]
    wrap_ret_status = wrap_BigNum_to_uint8(wrap_R, P_pSignature->pmR, NULL);
 8002c40:	2200      	movs	r2, #0
 8002c42:	4620      	mov	r0, r4
    PkaVerify.hash =            P_pDigest;
 8002c44:	e9cd b30e 	strd	fp, r3, [sp, #56]	@ 0x38
    wrap_ret_status = wrap_BigNum_to_uint8(wrap_R, P_pSignature->pmR, NULL);
 8002c48:	f7ff f93b 	bl	8001ec2 <wrap_BigNum_to_uint8>
    if (wrap_ret_status == WRAP_SUCCESS)
 8002c4c:	b900      	cbnz	r0, 8002c50 <CA_ECDSAverify+0x11e>
    {
      PkaVerify.RSign = (const uint8_t *)wrap_R;
 8002c4e:	940c      	str	r4, [sp, #48]	@ 0x30
    }
    /* Convert S to PKA format */
    wrap_ret_status = wrap_BigNum_to_uint8(wrap_S, P_pSignature->pmS, NULL);
 8002c50:	ad70      	add	r5, sp, #448	@ 0x1c0
 8002c52:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	4628      	mov	r0, r5
 8002c5a:	f7ff f932 	bl	8001ec2 <wrap_BigNum_to_uint8>
    if (wrap_ret_status == WRAP_SUCCESS)
 8002c5e:	b900      	cbnz	r0, 8002c62 <CA_ECDSAverify+0x130>
    {
      PkaVerify.SSign = (const uint8_t *)wrap_S;
 8002c60:	950d      	str	r5, [sp, #52]	@ 0x34
    }
    /* Convert X to PKA format */
    wrap_ret_status = wrap_BigNum_to_uint8(wrap_X, P_pVerifyCtx->pmPubKey->pmX, NULL);
 8002c62:	add0      	add	r5, sp, #832	@ 0x340
 8002c64:	f8d8 1000 	ldr.w	r1, [r8]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	4628      	mov	r0, r5
 8002c6c:	f7ff f929 	bl	8001ec2 <wrap_BigNum_to_uint8>
    if (wrap_ret_status == WRAP_SUCCESS)
 8002c70:	b900      	cbnz	r0, 8002c74 <CA_ECDSAverify+0x142>
    {
      PkaVerify.pPubKeyCurvePtX = (const uint8_t *)wrap_X;
 8002c72:	950a      	str	r5, [sp, #40]	@ 0x28
    }
    /* Convert Y to PKA format */
    wrap_ret_status = wrap_BigNum_to_uint8(wrap_Y, P_pVerifyCtx->pmPubKey->pmY, NULL);
 8002c74:	f50d 6598 	add.w	r5, sp, #1216	@ 0x4c0
 8002c78:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	4628      	mov	r0, r5
 8002c80:	f7ff f91f 	bl	8001ec2 <wrap_BigNum_to_uint8>
    if (wrap_ret_status == WRAP_SUCCESS)
 8002c84:	b900      	cbnz	r0, 8002c88 <CA_ECDSAverify+0x156>
    {
      PkaVerify.pPubKeyCurvePtY = (const uint8_t *)wrap_Y;
 8002c86:	950b      	str	r5, [sp, #44]	@ 0x2c
    }

    /* Launch the verification */
    hal_ret_status = HAL_PKA_ECDSAVerif(&P_pVerifyCtx->pmEC->hpka, &PkaVerify, 5000);
 8002c88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c8c:	a903      	add	r1, sp, #12
 8002c8e:	f106 0030 	add.w	r0, r6, #48	@ 0x30
 8002c92:	f7ff f83a 	bl	8001d0a <HAL_PKA_ECDSAVerif>
    if (hal_ret_status == HAL_OK)
 8002c96:	2800      	cmp	r0, #0
 8002c98:	d158      	bne.n	8002d4c <CA_ECDSAverify+0x21a>
    {
      /* Check the signature */
      if (HAL_PKA_ECDSAVerif_IsValidSignature(&P_pVerifyCtx->pmEC->hpka) == 1UL)
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	3030      	adds	r0, #48	@ 0x30
 8002c9e:	f7fe fee3 	bl	8001a68 <HAL_PKA_ECDSAVerif_IsValidSignature>
 8002ca2:	2801      	cmp	r0, #1
 8002ca4:	d037      	beq.n	8002d16 <CA_ECDSAverify+0x1e4>
  int32_t ecdsa_ret_status = CA_SIGNATURE_INVALID;
 8002ca6:	f44f 747b 	mov.w	r4, #1004	@ 0x3ec
      /* PKA operation returns error */
      ecdsa_ret_status = CA_ECC_ERR_BAD_CONTEXT;
    }

    /* Deinitialize the CA_PKA_INSTANCE */
    hal_ret_status = HAL_PKA_DeInit(&P_pVerifyCtx->pmEC->hpka);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	3030      	adds	r0, #48	@ 0x30
 8002cae:	f7fe fec7 	bl	8001a40 <HAL_PKA_DeInit>
  {
    ecdsa_ret_status =  CA_ECC_ERR_BAD_CONTEXT;
  }

  return ecdsa_ret_status;
}
 8002cb2:	4620      	mov	r0, r4
 8002cb4:	f20d 7dc4 	addw	sp, sp, #1988	@ 0x7c4
 8002cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (P_pA[i - 1U] >= P_pB[i - 1U])
 8002cbc:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
 8002cc0:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
        P_pR[i - 1U] = P_pA[i - 1U] - P_pB[i - 1U] - wrap_hold;
 8002cc4:	ebae 0005 	sub.w	r0, lr, r5
 8002cc8:	1b00      	subs	r0, r0, r4
      if (P_pA[i - 1U] >= P_pB[i - 1U])
 8002cca:	45ae      	cmp	lr, r5
        P_pR[i - 1U] = (uint8_t)((uint32_t)P_pA[i - 1U] - (uint32_t)P_pB[i - 1U] + 256U - (uint32_t)wrap_hold);
 8002ccc:	f80c 0d01 	strb.w	r0, [ip, #-1]!
      if (P_pA[i - 1U] >= P_pB[i - 1U])
 8002cd0:	bf2c      	ite	cs
 8002cd2:	2400      	movcs	r4, #0
 8002cd4:	2401      	movcc	r4, #1
 8002cd6:	e79f      	b.n	8002c18 <CA_ECDSAverify+0xe6>
  else if (wrap_upper < 0)
 8002cd8:	d016      	beq.n	8002d08 <CA_ECDSAverify+0x1d6>
 8002cda:	eb0a 0005 	add.w	r0, sl, r5
 8002cde:	194a      	adds	r2, r1, r5
  uint8_t wrap_hold = 0U;
 8002ce0:	2400      	movs	r4, #0
 8002ce2:	441d      	add	r5, r3
    for (i = wrap_maxsize; i > 0U; i--)
 8002ce4:	4291      	cmp	r1, r2
 8002ce6:	d101      	bne.n	8002cec <CA_ECDSAverify+0x1ba>
    *P_pSign = 1U; /* Negative */
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e798      	b.n	8002c1e <CA_ECDSAverify+0xec>
      if (P_pB[i - 1U] >= P_pA[i - 1U])
 8002cec:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
 8002cf0:	f815 cd01 	ldrb.w	ip, [r5, #-1]!
        P_pR[i - 1U] = P_pB[i - 1U] - P_pA[i - 1U] - wrap_hold;
 8002cf4:	ebae 030c 	sub.w	r3, lr, ip
 8002cf8:	1b1b      	subs	r3, r3, r4
      if (P_pB[i - 1U] >= P_pA[i - 1U])
 8002cfa:	45e6      	cmp	lr, ip
        P_pR[i - 1U] = (uint8_t)((uint32_t)P_pB[i - 1U] - (uint32_t)P_pA[i - 1U] + 256U - (uint32_t)wrap_hold);
 8002cfc:	f800 3d01 	strb.w	r3, [r0, #-1]!
      if (P_pB[i - 1U] >= P_pA[i - 1U])
 8002d00:	bf2c      	ite	cs
 8002d02:	2400      	movcs	r4, #0
 8002d04:	2401      	movcc	r4, #1
 8002d06:	e7ed      	b.n	8002ce4 <CA_ECDSAverify+0x1b2>
    (void)memset(P_pR, 0, P_pSizeR);
 8002d08:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	4650      	mov	r0, sl
 8002d10:	f003 ff74 	bl	8006bfc <memset>
  if (wrap_ret_status == WRAP_SUCCESS)
 8002d14:	e782      	b.n	8002c1c <CA_ECDSAverify+0xea>
        p_sign_PKA = (uint8_t *) & (P_pVerifyCtx->pmEC->hpka).Instance->RAM[PKA_ECDSA_VERIF_OUT_SIGNATURE_R];
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6b18      	ldr	r0, [r3, #48]	@ 0x30
        for (i = 0U; i < PkaVerify.primeOrderSize; i++)
 8002d1a:	9b03      	ldr	r3, [sp, #12]
 8002d1c:	4403      	add	r3, r0
 8002d1e:	4298      	cmp	r0, r3
 8002d20:	d106      	bne.n	8002d30 <CA_ECDSAverify+0x1fe>
        if ((sign_check_status == IMAGE_VALID) && (i == PkaVerify.primeOrderSize))
 8002d22:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8002d26:	2b55      	cmp	r3, #85	@ 0x55
 8002d28:	d1bd      	bne.n	8002ca6 <CA_ECDSAverify+0x174>
          ecdsa_ret_status = CA_SIGNATURE_VALID;
 8002d2a:	f240 34eb 	movw	r4, #1003	@ 0x3eb
 8002d2e:	e7bc      	b.n	8002caa <CA_ECDSAverify+0x178>
          sign_check_status |= wrap_R[i] ^ IMAGE_VALID ^ p_sign_PKA[j];
 8002d30:	f893 555b 	ldrb.w	r5, [r3, #1371]	@ 0x55b
 8002d34:	f814 2b01 	ldrb.w	r2, [r4], #1
 8002d38:	f89d 100b 	ldrb.w	r1, [sp, #11]
 8002d3c:	406a      	eors	r2, r5
 8002d3e:	f082 0255 	eor.w	r2, r2, #85	@ 0x55
 8002d42:	430a      	orrs	r2, r1
 8002d44:	f88d 200b 	strb.w	r2, [sp, #11]
        for (i = 0U; i < PkaVerify.primeOrderSize; i++)
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	e7e8      	b.n	8002d1e <CA_ECDSAverify+0x1ec>
      ecdsa_ret_status = CA_ECC_ERR_BAD_CONTEXT;
 8002d4c:	f241 4453 	movw	r4, #5203	@ 0x1453
 8002d50:	e7ab      	b.n	8002caa <CA_ECDSAverify+0x178>
    return CA_ECC_ERR_BAD_PARAMETER;
 8002d52:	f241 4454 	movw	r4, #5204	@ 0x1454
 8002d56:	e7ac      	b.n	8002cb2 <CA_ECDSAverify+0x180>
    ecdsa_ret_status =  CA_ECC_ERR_BAD_CONTEXT;
 8002d58:	f241 4453 	movw	r4, #5203	@ 0x1453
 8002d5c:	e7a9      	b.n	8002cb2 <CA_ECDSAverify+0x180>

08002d5e <CA_ECCvalidatePubKey>:
  (void)P_pECctx;
  (void)P_pMemBuf;

  /* Nothing special to do, simply return success */
  return CA_ECC_SUCCESS;
}
 8002d5e:	2000      	movs	r0, #0
 8002d60:	4770      	bx	lr

08002d62 <CA_Init>:
  {
    ecc_ret_status = CA_SUCCESS;
  }
#endif /* CA_MBED_CRYPTOLIB_SUPP && CA_USES_PSA_CRYPTO */
  return ecc_ret_status;
}
 8002d62:	2000      	movs	r0, #0
 8002d64:	4770      	bx	lr

08002d66 <CA_DeInit>:

/**
  * @brief  DeInitialize the Crypto API core
  * @retval CA_SUCCESS, CA_ERROR
  */
int32_t CA_DeInit(void)
 8002d66:	2000      	movs	r0, #0
 8002d68:	4770      	bx	lr
	...

08002d6c <KMS_CounterIncrement>:
  *         CKR_GENERAL_ERROR
  *         CKR_OBJECT_HANDLE_INVALID
  *         CKR_DEVICE_MEMORY
  */
CK_RV KMS_CounterIncrement(CK_SESSION_HANDLE hSession, CK_OBJECT_HANDLE hObject, CK_ULONG_PTR pCounterValue)
{
 8002d6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CK_ULONG reset_value;
  CK_ULONG increment_value;
  CK_ULONG current_counter;
  kms_obj_keyhead_t *pBlob = NULL_PTR;

  if (!KMS_IS_INITIALIZED())
 8002d70:	4c5d      	ldr	r4, [pc, #372]	@ (8002ee8 <KMS_CounterIncrement+0x17c>)
 8002d72:	7823      	ldrb	r3, [r4, #0]
{
 8002d74:	4606      	mov	r6, r0
 8002d76:	4688      	mov	r8, r1
 8002d78:	4617      	mov	r7, r2
  if (!KMS_IS_INITIALIZED())
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f000 80a9 	beq.w	8002ed2 <KMS_CounterIncrement+0x166>
  {
    return CKR_CRYPTOKI_NOT_INITIALIZED;
  }
  if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8002d80:	f001 fd32 	bl	80047e8 <KMS_CheckSessionHdle>
 8002d84:	2800      	cmp	r0, #0
 8002d86:	f040 80a7 	bne.w	8002ed8 <KMS_CounterIncrement+0x16c>
  {
    return CKR_SESSION_HANDLE_INVALID;
  }
  /* No processing already on going  */
  if (KMS_GETSESSION(hSession).state != KMS_SESSION_IDLE)
 8002d8a:	1e73      	subs	r3, r6, #1
 8002d8c:	2224      	movs	r2, #36	@ 0x24
 8002d8e:	fb02 4403 	mla	r4, r2, r3, r4
 8002d92:	68e5      	ldr	r5, [r4, #12]
 8002d94:	2d00      	cmp	r5, #0
 8002d96:	f040 809f 	bne.w	8002ed8 <KMS_CounterIncrement+0x16c>
  {
    return CKR_SESSION_HANDLE_INVALID;
  }

  /* Read the KMS object using the object handle */
  pkms_object = KMS_Objects_GetPointer(hObject);
 8002d9a:	4640      	mov	r0, r8
 8002d9c:	f002 fbea 	bl	8005574 <KMS_Objects_GetPointer>

  /* Check that the KMS object is valid:
   * - NULL_PTR value means that the counter handle was not found
   * - KMS_ABI_VERSION_CK_2_40 & KMS_ABI_CONFIG_KEYHEAD are magic in header of the KMS object
   */
  if ((pkms_object != NULL) &&
 8002da0:	4682      	mov	sl, r0
 8002da2:	2800      	cmp	r0, #0
 8002da4:	f000 809e 	beq.w	8002ee4 <KMS_CounterIncrement+0x178>
 8002da8:	6802      	ldr	r2, [r0, #0]
 8002daa:	4b50      	ldr	r3, [pc, #320]	@ (8002eec <KMS_CounterIncrement+0x180>)
 8002dac:	429a      	cmp	r2, r3
 8002dae:	f040 8099 	bne.w	8002ee4 <KMS_CounterIncrement+0x178>
      (pkms_object->version == KMS_ABI_VERSION_CK_2_40) &&
 8002db2:	6842      	ldr	r2, [r0, #4]
 8002db4:	f46f 710f 	mvn.w	r1, #572	@ 0x23c
 8002db8:	440b      	add	r3, r1
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	f040 8092 	bne.w	8002ee4 <KMS_CounterIncrement+0x178>
      (pkms_object->configuration == KMS_ABI_CONFIG_KEYHEAD))
  {
    /* Read the saturation configuration */
    e_ret_status = KMS_Objects_SearchAttributes(CKA_STM_COUNTER_SATURATED, pkms_object, &pkms_counter_attribute);
 8002dc0:	4601      	mov	r1, r0
 8002dc2:	aa01      	add	r2, sp, #4
 8002dc4:	484a      	ldr	r0, [pc, #296]	@ (8002ef0 <KMS_CounterIncrement+0x184>)
 8002dc6:	f002 fc5b 	bl	8005680 <KMS_Objects_SearchAttributes>
    if (e_ret_status == CKR_OK)
 8002dca:	4604      	mov	r4, r0
 8002dcc:	2800      	cmp	r0, #0
 8002dce:	d167      	bne.n	8002ea0 <KMS_CounterIncrement+0x134>
    {
      saturated_counter = *(pkms_counter_attribute->data);
 8002dd0:	9b01      	ldr	r3, [sp, #4]
 8002dd2:	f893 9008 	ldrb.w	r9, [r3, #8]
    }

    if (e_ret_status == CKR_OK)
    {
      /* Read the max counter value */
      e_ret_status = KMS_Objects_SearchAttributes(CKA_STM_COUNTER_MAX_VALUE, pkms_object, &pkms_counter_attribute);
 8002dd6:	4847      	ldr	r0, [pc, #284]	@ (8002ef4 <KMS_CounterIncrement+0x188>)
 8002dd8:	aa01      	add	r2, sp, #4
 8002dda:	4651      	mov	r1, sl
 8002ddc:	f002 fc50 	bl	8005680 <KMS_Objects_SearchAttributes>
      if (e_ret_status == CKR_OK)
 8002de0:	4604      	mov	r4, r0
 8002de2:	2800      	cmp	r0, #0
 8002de4:	d160      	bne.n	8002ea8 <KMS_CounterIncrement+0x13c>
      {
        max_value = *(pkms_counter_attribute->data);
 8002de6:	9b01      	ldr	r3, [sp, #4]
 8002de8:	f8d3 8008 	ldr.w	r8, [r3, #8]
    }

    if (e_ret_status == CKR_OK)
    {
      /* Read the reset counter value */
      e_ret_status = KMS_Objects_SearchAttributes(CKA_STM_COUNTER_RESET_VALUE, pkms_object, &pkms_counter_attribute);
 8002dec:	4842      	ldr	r0, [pc, #264]	@ (8002ef8 <KMS_CounterIncrement+0x18c>)
 8002dee:	aa01      	add	r2, sp, #4
 8002df0:	4651      	mov	r1, sl
 8002df2:	f002 fc45 	bl	8005680 <KMS_Objects_SearchAttributes>
      if (e_ret_status == CKR_OK)
 8002df6:	4604      	mov	r4, r0
 8002df8:	2800      	cmp	r0, #0
 8002dfa:	d15a      	bne.n	8002eb2 <KMS_CounterIncrement+0x146>
      {
        reset_value = *(pkms_counter_attribute->data);
 8002dfc:	9b01      	ldr	r3, [sp, #4]
 8002dfe:	689d      	ldr	r5, [r3, #8]
    }

    if (e_ret_status == CKR_OK)
    {
      /* Read the increment value */
      e_ret_status = KMS_Objects_SearchAttributes(CKA_STM_COUNTER_INCREMENT, pkms_object, &pkms_counter_attribute);
 8002e00:	483e      	ldr	r0, [pc, #248]	@ (8002efc <KMS_CounterIncrement+0x190>)
 8002e02:	aa01      	add	r2, sp, #4
 8002e04:	4651      	mov	r1, sl
 8002e06:	f002 fc3b 	bl	8005680 <KMS_Objects_SearchAttributes>
      if (e_ret_status == CKR_OK)
 8002e0a:	4604      	mov	r4, r0
 8002e0c:	2800      	cmp	r0, #0
 8002e0e:	d156      	bne.n	8002ebe <KMS_CounterIncrement+0x152>
      {
        increment_value = *(pkms_counter_attribute->data);
 8002e10:	9b01      	ldr	r3, [sp, #4]
 8002e12:	f8d3 b008 	ldr.w	fp, [r3, #8]
    }

    if (e_ret_status == CKR_OK)
    {
      /* Read the current counter value */
      e_ret_status = KMS_Objects_SearchAttributes(CKA_STM_COUNTER_VALUE, pkms_object, &pkms_counter_attribute);
 8002e16:	483a      	ldr	r0, [pc, #232]	@ (8002f00 <KMS_CounterIncrement+0x194>)
 8002e18:	aa01      	add	r2, sp, #4
 8002e1a:	4651      	mov	r1, sl
 8002e1c:	f002 fc30 	bl	8005680 <KMS_Objects_SearchAttributes>
      current_counter = *(pkms_counter_attribute->data);
 8002e20:	9b01      	ldr	r3, [sp, #4]
    /* Can not retrieve proper counter handle */
    e_ret_status = CKR_OBJECT_HANDLE_INVALID;
  }

  /* Check the current value of the counter */
  if ((e_ret_status == CKR_OK) && (current_counter > max_value))
 8002e22:	4604      	mov	r4, r0
      current_counter = *(pkms_counter_attribute->data);
 8002e24:	689b      	ldr	r3, [r3, #8]
  if ((e_ret_status == CKR_OK) && (current_counter > max_value))
 8002e26:	2800      	cmp	r0, #0
 8002e28:	d145      	bne.n	8002eb6 <KMS_CounterIncrement+0x14a>
 8002e2a:	4543      	cmp	r3, r8
 8002e2c:	d856      	bhi.n	8002edc <KMS_CounterIncrement+0x170>
  }

  /* Increment the counter */
  if (e_ret_status == CKR_OK)
  {
    if(current_counter <= max_value - increment_value)
 8002e2e:	eba8 020b 	sub.w	r2, r8, fp
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d348      	bcc.n	8002ec8 <KMS_CounterIncrement+0x15c>
    {
      current_counter = current_counter + increment_value;
 8002e36:	eb03 050b 	add.w	r5, r3, fp
    /* pkms_object and pkms_counter_attribute are in flash:
     * An intermediate RAM buffer is needed */

    if (e_ret_status == CKR_OK)
    {
      pBlob = KMS_Alloc(hSession, sizeof(kms_obj_keyhead_no_blob_t) + pkms_object->blobs_size);
 8002e3a:	f8da 1008 	ldr.w	r1, [sl, #8]
 8002e3e:	4630      	mov	r0, r6
 8002e40:	3114      	adds	r1, #20
 8002e42:	f001 fe57 	bl	8004af4 <KMS_Alloc>
      if (pBlob == NULL_PTR)
 8002e46:	4680      	mov	r8, r0
 8002e48:	2800      	cmp	r0, #0
 8002e4a:	d049      	beq.n	8002ee0 <KMS_CounterIncrement+0x174>
        e_ret_status = CKR_DEVICE_MEMORY;
      }
      if (e_ret_status == CKR_OK)
      {
        /* Copy header */
        (void)memcpy(pBlob, pkms_object, sizeof(kms_obj_keyhead_no_blob_t));
 8002e4c:	4651      	mov	r1, sl
 8002e4e:	4603      	mov	r3, r0
 8002e50:	f10a 0214 	add.w	r2, sl, #20
 8002e54:	f851 0b04 	ldr.w	r0, [r1], #4
 8002e58:	f843 0b04 	str.w	r0, [r3], #4
 8002e5c:	4291      	cmp	r1, r2
 8002e5e:	d1f9      	bne.n	8002e54 <KMS_CounterIncrement+0xe8>
        /* Copy blob */
        (void)memcpy(&(pBlob->blobs[0]), &(pkms_object->blobs[0]), pkms_object->blobs_size);
 8002e60:	f8da 2008 	ldr.w	r2, [sl, #8]
 8002e64:	f108 0014 	add.w	r0, r8, #20
 8002e68:	f003 fed0 	bl	8006c0c <memcpy>
        /* Search for the counter value to use */
        e_ret_status = KMS_Objects_SearchAttributes(CKA_STM_COUNTER_VALUE, pBlob, &pkms_counter_attribute);
 8002e6c:	4824      	ldr	r0, [pc, #144]	@ (8002f00 <KMS_CounterIncrement+0x194>)
 8002e6e:	aa01      	add	r2, sp, #4
 8002e70:	4641      	mov	r1, r8
 8002e72:	f002 fc05 	bl	8005680 <KMS_Objects_SearchAttributes>
        if (e_ret_status == CKR_OK)
 8002e76:	4604      	mov	r4, r0
 8002e78:	b9e8      	cbnz	r0, 8002eb6 <KMS_CounterIncrement+0x14a>
        {
          /* Update the value in the KMS object */
          pkms_counter_attribute->data[0] = current_counter;
 8002e7a:	9b01      	ldr	r3, [sp, #4]
#ifdef KMS_NVM_DYNAMIC_ENABLED
          /* Write the KMS object into the NVM datastorage */
          e_ret_status = KMS_PlatfObjects_NvmStoreObject(pBlob->object_id,
 8002e7c:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8002e80:	f8d8 0010 	ldr.w	r0, [r8, #16]
          pkms_counter_attribute->data[0] = current_counter;
 8002e84:	609d      	str	r5, [r3, #8]
          e_ret_status = KMS_PlatfObjects_NvmStoreObject(pBlob->object_id,
 8002e86:	3214      	adds	r2, #20
 8002e88:	4641      	mov	r1, r8
 8002e8a:	f003 f865 	bl	8005f58 <KMS_PlatfObjects_NvmStoreObject>
          /* Write the KMS object into the VM datastorage */
          e_ret_status = KMS_PlatfObjects_VmStoreObject(pBlob->object_id,
                                                        (uint8_t *)pBlob,
                                                        pBlob->blobs_size + sizeof(kms_obj_keyhead_no_blob_t));
#endif /* KMS_VM_DYNAMIC_ENABLED */
          if ((e_ret_status == CKR_OK) && (pCounterValue != NULL))
 8002e8e:	4604      	mov	r4, r0
 8002e90:	b908      	cbnz	r0, 8002e96 <KMS_CounterIncrement+0x12a>
 8002e92:	b107      	cbz	r7, 8002e96 <KMS_CounterIncrement+0x12a>
          {
            *pCounterValue = current_counter;
 8002e94:	603d      	str	r5, [r7, #0]
          }
          KMS_Free(hSession, pBlob);
 8002e96:	4641      	mov	r1, r8
 8002e98:	4630      	mov	r0, r6
 8002e9a:	f001 fe4f 	bl	8004b3c <KMS_Free>
 8002e9e:	e00a      	b.n	8002eb6 <KMS_CounterIncrement+0x14a>
    else if (e_ret_status == CKR_ATTRIBUTE_TYPE_INVALID)
 8002ea0:	2812      	cmp	r0, #18
 8002ea2:	d108      	bne.n	8002eb6 <KMS_CounterIncrement+0x14a>
      saturated_counter = CK_FALSE;
 8002ea4:	46a9      	mov	r9, r5
 8002ea6:	e796      	b.n	8002dd6 <KMS_CounterIncrement+0x6a>
      else if (e_ret_status == CKR_ATTRIBUTE_TYPE_INVALID)
 8002ea8:	2812      	cmp	r0, #18
 8002eaa:	d104      	bne.n	8002eb6 <KMS_CounterIncrement+0x14a>
        max_value = 0xFFFFFFFF;
 8002eac:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8002eb0:	e79c      	b.n	8002dec <KMS_CounterIncrement+0x80>
      else if (e_ret_status == CKR_ATTRIBUTE_TYPE_INVALID)
 8002eb2:	2812      	cmp	r0, #18
 8002eb4:	d0a4      	beq.n	8002e00 <KMS_CounterIncrement+0x94>

  return e_ret_status;
#else /* KMS_SECURE_COUNTERS */
  return CKR_FUNCTION_NOT_SUPPORTED;
#endif /* KMS_SECURE_COUNTERS */
}
 8002eb6:	4620      	mov	r0, r4
 8002eb8:	b003      	add	sp, #12
 8002eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if (e_ret_status == CKR_ATTRIBUTE_TYPE_INVALID)
 8002ebe:	2812      	cmp	r0, #18
 8002ec0:	d1f9      	bne.n	8002eb6 <KMS_CounterIncrement+0x14a>
        increment_value = 0x00000001;
 8002ec2:	f04f 0b01 	mov.w	fp, #1
 8002ec6:	e7a6      	b.n	8002e16 <KMS_CounterIncrement+0xaa>
      if(saturated_counter == CK_TRUE)
 8002ec8:	f1b9 0f01 	cmp.w	r9, #1
 8002ecc:	bf08      	it	eq
 8002ece:	4645      	moveq	r5, r8
 8002ed0:	e7b3      	b.n	8002e3a <KMS_CounterIncrement+0xce>
    return CKR_CRYPTOKI_NOT_INITIALIZED;
 8002ed2:	f44f 74c8 	mov.w	r4, #400	@ 0x190
 8002ed6:	e7ee      	b.n	8002eb6 <KMS_CounterIncrement+0x14a>
    return CKR_SESSION_HANDLE_INVALID;
 8002ed8:	24b3      	movs	r4, #179	@ 0xb3
 8002eda:	e7ec      	b.n	8002eb6 <KMS_CounterIncrement+0x14a>
    e_ret_status = CKR_ATTRIBUTE_VALUE_INVALID;
 8002edc:	2413      	movs	r4, #19
 8002ede:	e7ea      	b.n	8002eb6 <KMS_CounterIncrement+0x14a>
        e_ret_status = CKR_DEVICE_MEMORY;
 8002ee0:	2431      	movs	r4, #49	@ 0x31
 8002ee2:	e7e8      	b.n	8002eb6 <KMS_CounterIncrement+0x14a>
    e_ret_status = CKR_OBJECT_HANDLE_INVALID;
 8002ee4:	2482      	movs	r4, #130	@ 0x82
  if ((e_ret_status == CKR_OK) && (current_counter > max_value))
 8002ee6:	e7e6      	b.n	8002eb6 <KMS_CounterIncrement+0x14a>
 8002ee8:	20000c48 	.word	0x20000c48
 8002eec:	b10b0240 	.word	0xb10b0240
 8002ef0:	80000003 	.word	0x80000003
 8002ef4:	80000001 	.word	0x80000001
 8002ef8:	80000002 	.word	0x80000002
 8002efc:	80000005 	.word	0x80000005
 8002f00:	80000004 	.word	0x80000004

08002f04 <KMS_CounterGetValue>:
  *         CKR_FUNCTION_FAILED
  *         CKR_FUNCTION_NOT_SUPPORTED
  *         CKR_OBJECT_HANDLE_INVALID
  */
CK_RV KMS_CounterGetValue(CK_SESSION_HANDLE hSession, CK_OBJECT_HANDLE hObject, CK_ULONG_PTR pCounterValue)
{
 8002f04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if defined(KMS_SECURE_COUNTERS)
  CK_RV e_ret_status = CKR_FUNCTION_FAILED;
  kms_obj_keyhead_t *pkms_object;
  kms_attr_t *pkms_counter_attribute;

  if (!KMS_IS_INITIALIZED())
 8002f06:	4e1b      	ldr	r6, [pc, #108]	@ (8002f74 <KMS_CounterGetValue+0x70>)
 8002f08:	7833      	ldrb	r3, [r6, #0]
{
 8002f0a:	4604      	mov	r4, r0
 8002f0c:	460f      	mov	r7, r1
 8002f0e:	4615      	mov	r5, r2
  if (!KMS_IS_INITIALIZED())
 8002f10:	b343      	cbz	r3, 8002f64 <KMS_CounterGetValue+0x60>
  {
    return CKR_CRYPTOKI_NOT_INITIALIZED;
  }
  if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8002f12:	f001 fc69 	bl	80047e8 <KMS_CheckSessionHdle>
 8002f16:	bb40      	cbnz	r0, 8002f6a <KMS_CounterGetValue+0x66>
  {
    return CKR_SESSION_HANDLE_INVALID;
  }
  /* No processing already on going  */
  if (KMS_GETSESSION(hSession).state != KMS_SESSION_IDLE)
 8002f18:	2324      	movs	r3, #36	@ 0x24
 8002f1a:	3c01      	subs	r4, #1
 8002f1c:	fb03 6604 	mla	r6, r3, r4, r6
 8002f20:	68f3      	ldr	r3, [r6, #12]
 8002f22:	bb13      	cbnz	r3, 8002f6a <KMS_CounterGetValue+0x66>
  {
    return CKR_SESSION_HANDLE_INVALID;
  }
  /* Check parameter */
  if (pCounterValue == NULL_PTR)
 8002f24:	b915      	cbnz	r5, 8002f2c <KMS_CounterGetValue+0x28>
  {
    return CKR_ARGUMENTS_BAD;
 8002f26:	2007      	movs	r0, #7

  return e_ret_status;
#else /* KMS_SECURE_COUNTERS */
  return CKR_FUNCTION_NOT_SUPPORTED;
#endif /* KMS_SECURE_COUNTERS */
}
 8002f28:	b003      	add	sp, #12
 8002f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  pkms_object = KMS_Objects_GetPointer(hObject);
 8002f2c:	4638      	mov	r0, r7
 8002f2e:	f002 fb21 	bl	8005574 <KMS_Objects_GetPointer>
  if ((pkms_object != NULL) &&
 8002f32:	4601      	mov	r1, r0
 8002f34:	b1d8      	cbz	r0, 8002f6e <KMS_CounterGetValue+0x6a>
 8002f36:	6802      	ldr	r2, [r0, #0]
 8002f38:	4b0f      	ldr	r3, [pc, #60]	@ (8002f78 <KMS_CounterGetValue+0x74>)
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d117      	bne.n	8002f6e <KMS_CounterGetValue+0x6a>
      (pkms_object->version == KMS_ABI_VERSION_CK_2_40) &&
 8002f3e:	6842      	ldr	r2, [r0, #4]
 8002f40:	f46f 700f 	mvn.w	r0, #572	@ 0x23c
 8002f44:	4403      	add	r3, r0
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d111      	bne.n	8002f6e <KMS_CounterGetValue+0x6a>
    e_ret_status = KMS_Objects_SearchAttributes(CKA_STM_COUNTER_VALUE, pkms_object, &pkms_counter_attribute);
 8002f4a:	480c      	ldr	r0, [pc, #48]	@ (8002f7c <KMS_CounterGetValue+0x78>)
 8002f4c:	aa01      	add	r2, sp, #4
 8002f4e:	f002 fb97 	bl	8005680 <KMS_Objects_SearchAttributes>
    if (e_ret_status == CKR_OK)
 8002f52:	2800      	cmp	r0, #0
 8002f54:	d1e8      	bne.n	8002f28 <KMS_CounterGetValue+0x24>
      if (pkms_counter_attribute->size == sizeof(CK_ULONG))
 8002f56:	9b01      	ldr	r3, [sp, #4]
 8002f58:	685a      	ldr	r2, [r3, #4]
 8002f5a:	2a04      	cmp	r2, #4
 8002f5c:	d1e3      	bne.n	8002f26 <KMS_CounterGetValue+0x22>
        *pCounterValue = *(pkms_counter_attribute->data);
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	602b      	str	r3, [r5, #0]
 8002f62:	e7e1      	b.n	8002f28 <KMS_CounterGetValue+0x24>
    return CKR_CRYPTOKI_NOT_INITIALIZED;
 8002f64:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8002f68:	e7de      	b.n	8002f28 <KMS_CounterGetValue+0x24>
    return CKR_SESSION_HANDLE_INVALID;
 8002f6a:	20b3      	movs	r0, #179	@ 0xb3
 8002f6c:	e7dc      	b.n	8002f28 <KMS_CounterGetValue+0x24>
    e_ret_status = CKR_OBJECT_HANDLE_INVALID;
 8002f6e:	2082      	movs	r0, #130	@ 0x82
 8002f70:	e7da      	b.n	8002f28 <KMS_CounterGetValue+0x24>
 8002f72:	bf00      	nop
 8002f74:	20000c48 	.word	0x20000c48
 8002f78:	b10b0240 	.word	0xb10b0240
 8002f7c:	80000004 	.word	0x80000004

08002f80 <KMS_DerX962_OctetStringDataOffset>:
CK_RV KMS_DerX962_OctetStringDataOffset(uint8_t *pDER, uint32_t *pOff)
{
  CK_RV e_ret_status = CKR_FUNCTION_FAILED;
  uint8_t *ptr = pDER;

  if (ptr[0] == KMS_DER_OCTET_STRING)
 8002f80:	7803      	ldrb	r3, [r0, #0]
 8002f82:	2b04      	cmp	r3, #4
 8002f84:	d10b      	bne.n	8002f9e <KMS_DerX962_OctetStringDataOffset+0x1e>
     * more bytes length otherwise: first byte is 0x80 + number of bytes that will encode length
     * ex: Length = 0x23 => 1 byte length: 0x23
     *        Length = 0x89 => 2 bytes length: 0x81 0x89
     *        Length = 0x123 => 3 bytes length: 0x82 0x01 0x23
     */
    if ((ptr[0] & 0x80U) == 0x80U)
 8002f86:	f990 2001 	ldrsb.w	r2, [r0, #1]
 8002f8a:	7843      	ldrb	r3, [r0, #1]
 8002f8c:	2a00      	cmp	r2, #0
    {
      *pOff = 2UL + ((uint32_t)(ptr[0]) & 0x7FUL);
 8002f8e:	bfba      	itte	lt
 8002f90:	f003 037f 	andlt.w	r3, r3, #127	@ 0x7f
 8002f94:	3302      	addlt	r3, #2
 8002f96:	2302      	movge	r3, #2
    }
    else
    {
      *pOff = 2;
 8002f98:	600b      	str	r3, [r1, #0]
 8002f9a:	2000      	movs	r0, #0
 8002f9c:	4770      	bx	lr
  CK_RV e_ret_status = CKR_FUNCTION_FAILED;
 8002f9e:	2006      	movs	r0, #6
    }
    e_ret_status = CKR_OK;
  }
  return e_ret_status;
}
 8002fa0:	4770      	bx	lr

08002fa2 <KMS_DerX962_ExtractPublicKeyCoord>:
  * @param  ksize Size of each coordinate of the public key
  * @retval CKR_OK
  *         CKR_FUNCTION_FAILED
  */
CK_RV KMS_DerX962_ExtractPublicKeyCoord(uint8_t *pDER, uint8_t *pX, uint8_t *pY, uint32_t ksize)
{
 8002fa2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002fa6:	4689      	mov	r9, r1
  CK_RV e_ret_status = CKR_FUNCTION_FAILED;
  uint32_t offset_for_data;

  /* We expect an EC Point in DER format uncompressed */
  if (KMS_DerX962_OctetStringDataOffset(pDER, &offset_for_data) == CKR_OK)
 8002fa8:	a901      	add	r1, sp, #4
{
 8002faa:	4606      	mov	r6, r0
 8002fac:	4690      	mov	r8, r2
 8002fae:	461f      	mov	r7, r3
  if (KMS_DerX962_OctetStringDataOffset(pDER, &offset_for_data) == CKR_OK)
 8002fb0:	f7ff ffe6 	bl	8002f80 <KMS_DerX962_OctetStringDataOffset>
 8002fb4:	4605      	mov	r5, r0
 8002fb6:	b998      	cbnz	r0, 8002fe0 <KMS_DerX962_ExtractPublicKeyCoord+0x3e>
  {
    if (KMS_IS_X962_UNCOMPRESSED_FORM(pDER[offset_for_data]))
 8002fb8:	9c01      	ldr	r4, [sp, #4]
 8002fba:	5d33      	ldrb	r3, [r6, r4]
 8002fbc:	2b04      	cmp	r3, #4
 8002fbe:	d10f      	bne.n	8002fe0 <KMS_DerX962_ExtractPublicKeyCoord+0x3e>
    {
      /* Copy the Pub_x */
      (void)memcpy(pX, &pDER[offset_for_data + 1UL], (size_t)ksize);
 8002fc0:	3401      	adds	r4, #1
 8002fc2:	463a      	mov	r2, r7
 8002fc4:	1931      	adds	r1, r6, r4
 8002fc6:	4648      	mov	r0, r9
 8002fc8:	f003 fe20 	bl	8006c0c <memcpy>

      /* Copy the Pub_y */
      (void)memcpy(pY, &pDER[offset_for_data + 1UL + ksize], (size_t)ksize);
 8002fcc:	19e1      	adds	r1, r4, r7
 8002fce:	463a      	mov	r2, r7
 8002fd0:	4431      	add	r1, r6
 8002fd2:	4640      	mov	r0, r8
 8002fd4:	f003 fe1a 	bl	8006c0c <memcpy>

      e_ret_status = CKR_OK;
    }
  }
  return e_ret_status;
}
 8002fd8:	4628      	mov	r0, r5
 8002fda:	b003      	add	sp, #12
 8002fdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  CK_RV e_ret_status = CKR_FUNCTION_FAILED;
 8002fe0:	2506      	movs	r5, #6
  return e_ret_status;
 8002fe2:	e7f9      	b.n	8002fd8 <KMS_DerX962_ExtractPublicKeyCoord+0x36>

08002fe4 <KMS_DigestInit>:
  *         CKR_FUNCTION_NOT_SUPPORTED
  *         CKR_MECHANISM_INVALID
  *         CKR_SESSION_HANDLE_INVALID
  */
CK_RV     KMS_DigestInit(CK_SESSION_HANDLE hSession,  CK_MECHANISM_PTR pMechanism)
{
 8002fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if defined(KMS_DIGEST)
  CK_RV e_ret_status = CKR_FUNCTION_FAILED;

  if (!KMS_IS_INITIALIZED())
 8002fe8:	4d1e      	ldr	r5, [pc, #120]	@ (8003064 <KMS_DigestInit+0x80>)
 8002fea:	782b      	ldrb	r3, [r5, #0]
{
 8002fec:	4607      	mov	r7, r0
 8002fee:	4688      	mov	r8, r1
  if (!KMS_IS_INITIALIZED())
 8002ff0:	b363      	cbz	r3, 800304c <KMS_DigestInit+0x68>
  {
    e_ret_status = CKR_CRYPTOKI_NOT_INITIALIZED;
  }
  else if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8002ff2:	f001 fbf9 	bl	80047e8 <KMS_CheckSessionHdle>
 8002ff6:	bb60      	cbnz	r0, 8003052 <KMS_DigestInit+0x6e>
  {
    e_ret_status = CKR_SESSION_HANDLE_INVALID;
  }
  /* No processing already on going  */
  else if (KMS_GETSESSION(hSession).state != KMS_SESSION_IDLE)
 8002ff8:	1e7b      	subs	r3, r7, #1
 8002ffa:	2224      	movs	r2, #36	@ 0x24
 8002ffc:	fb02 5503 	mla	r5, r2, r3, r5
 8003000:	68ec      	ldr	r4, [r5, #12]
 8003002:	bb34      	cbnz	r4, 8003052 <KMS_DigestInit+0x6e>
  {
    e_ret_status = CKR_SESSION_HANDLE_INVALID;
  }
  /* Check parameter */
  else if (pMechanism == NULL_PTR)
 8003004:	f1b8 0f00 	cmp.w	r8, #0
 8003008:	d025      	beq.n	8003056 <KMS_DigestInit+0x72>
  {
    e_ret_status = CKR_ARGUMENTS_BAD;
  }
  else
  {
    switch (pMechanism->mechanism)
 800300a:	f8d8 3000 	ldr.w	r3, [r8]
 800300e:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8003012:	d122      	bne.n	800305a <KMS_DigestInit+0x76>
      case CKM_SHA256:
      {
        kms_sha256_ctx_t *phash_ctx;

        /* Allocate context for SHA256 */
        phash_ctx = KMS_Alloc(hSession, sizeof(kms_sha256_ctx_t));
 8003014:	2178      	movs	r1, #120	@ 0x78
 8003016:	4638      	mov	r0, r7
 8003018:	f001 fd6c 	bl	8004af4 <KMS_Alloc>
        if (phash_ctx != NULL_PTR)
 800301c:	4606      	mov	r6, r0
 800301e:	b1f0      	cbz	r0, 800305e <KMS_DigestInit+0x7a>
        {
          KMS_GETSESSION(hSession).pCtx = phash_ctx;
          KMS_GETSESSION(hSession).Mechanism = pMechanism->mechanism;
 8003020:	f8d8 3000 	ldr.w	r3, [r8]
 8003024:	622b      	str	r3, [r5, #32]

          phash_ctx->ca_ctx.mFlags = CA_E_HASH_DEFAULT;
          phash_ctx->ca_ctx.mTagSize = (int32_t)CA_CRL_SHA256_SIZE;
 8003026:	2320      	movs	r3, #32
          KMS_GETSESSION(hSession).pCtx = phash_ctx;
 8003028:	62a8      	str	r0, [r5, #40]	@ 0x28
          phash_ctx->ca_ctx.mFlags = CA_E_HASH_DEFAULT;
 800302a:	7104      	strb	r4, [r0, #4]
          phash_ctx->ca_ctx.mTagSize = (int32_t)CA_CRL_SHA256_SIZE;
 800302c:	6083      	str	r3, [r0, #8]

          /* Initialize SHA256 processing */
          if (CA_SHA256_Init(&(phash_ctx->ca_ctx)) == CA_HASH_SUCCESS)
 800302e:	f7ff fc8f 	bl	8002950 <CA_SHA256_Init>
 8003032:	b920      	cbnz	r0, 800303e <KMS_DigestInit+0x5a>
    }
  }

  if (e_ret_status == CKR_OK)
  {
    KMS_GETSESSION(hSession).state = KMS_SESSION_DIGEST;
 8003034:	2301      	movs	r3, #1
 8003036:	60eb      	str	r3, [r5, #12]

  return e_ret_status;
#else /* KMS_DIGEST */
  return CKR_FUNCTION_NOT_SUPPORTED;
#endif /* KMS_DIGEST */
}
 8003038:	4620      	mov	r0, r4
 800303a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            KMS_Free(hSession, phash_ctx);
 800303e:	4631      	mov	r1, r6
 8003040:	4638      	mov	r0, r7
 8003042:	f001 fd7b 	bl	8004b3c <KMS_Free>
            KMS_GETSESSION(hSession).pCtx = NULL_PTR;
 8003046:	62ac      	str	r4, [r5, #40]	@ 0x28
  CK_RV e_ret_status = CKR_FUNCTION_FAILED;
 8003048:	2406      	movs	r4, #6
 800304a:	e7f5      	b.n	8003038 <KMS_DigestInit+0x54>
    e_ret_status = CKR_CRYPTOKI_NOT_INITIALIZED;
 800304c:	f44f 74c8 	mov.w	r4, #400	@ 0x190
 8003050:	e7f2      	b.n	8003038 <KMS_DigestInit+0x54>
    e_ret_status = CKR_SESSION_HANDLE_INVALID;
 8003052:	24b3      	movs	r4, #179	@ 0xb3
 8003054:	e7f0      	b.n	8003038 <KMS_DigestInit+0x54>
    e_ret_status = CKR_ARGUMENTS_BAD;
 8003056:	2407      	movs	r4, #7
 8003058:	e7ee      	b.n	8003038 <KMS_DigestInit+0x54>
        e_ret_status = CKR_MECHANISM_INVALID;
 800305a:	2470      	movs	r4, #112	@ 0x70
 800305c:	e7ec      	b.n	8003038 <KMS_DigestInit+0x54>
          e_ret_status = CKR_DEVICE_MEMORY;
 800305e:	2431      	movs	r4, #49	@ 0x31
  return e_ret_status;
 8003060:	e7ea      	b.n	8003038 <KMS_DigestInit+0x54>
 8003062:	bf00      	nop
 8003064:	20000c48 	.word	0x20000c48

08003068 <KMS_Digest>:
  *         CKR_OPERATION_NOT_INITIALIZED
  *         CKR_SESSION_HANDLE_INVALID
  */
CK_RV   KMS_Digest(CK_SESSION_HANDLE hSession, CK_BYTE_PTR pData,
                   CK_ULONG ulDataLen, CK_BYTE_PTR pDigest, CK_ULONG_PTR pulDigestLen)
{
 8003068:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if defined(KMS_DIGEST)
  CK_RV e_ret_status = CKR_FUNCTION_FAILED;
  int32_t cryptolib_status;    /* CryptoLib error etatus */

  if (!KMS_IS_INITIALIZED())
 800306c:	4d2a      	ldr	r5, [pc, #168]	@ (8003118 <KMS_Digest+0xb0>)
{
 800306e:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 8003072:	461f      	mov	r7, r3
  if (!KMS_IS_INITIALIZED())
 8003074:	782b      	ldrb	r3, [r5, #0]
{
 8003076:	4606      	mov	r6, r0
 8003078:	4689      	mov	r9, r1
 800307a:	4692      	mov	sl, r2
  else if (KMS_CheckSessionHdle(hSession) != CKR_OK)
  {
    e_ret_status = CKR_SESSION_HANDLE_INVALID;
  }
  /* Check if DigestInit has been called previously */
  else if (KMS_GETSESSION(hSession).state != KMS_SESSION_DIGEST)
 800307c:	f100 3bff 	add.w	fp, r0, #4294967295	@ 0xffffffff
  if (!KMS_IS_INITIALIZED())
 8003080:	2b00      	cmp	r3, #0
 8003082:	d040      	beq.n	8003106 <KMS_Digest+0x9e>
  else if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8003084:	f001 fbb0 	bl	80047e8 <KMS_CheckSessionHdle>
 8003088:	4604      	mov	r4, r0
 800308a:	2800      	cmp	r0, #0
 800308c:	d13e      	bne.n	800310c <KMS_Digest+0xa4>
  else if (KMS_GETSESSION(hSession).state != KMS_SESSION_DIGEST)
 800308e:	2224      	movs	r2, #36	@ 0x24
 8003090:	fb02 520b 	mla	r2, r2, fp, r5
 8003094:	68d3      	ldr	r3, [r2, #12]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d13a      	bne.n	8003110 <KMS_Digest+0xa8>
  {
    e_ret_status = CKR_OPERATION_NOT_INITIALIZED;
  }
  else
  {
    switch (KMS_GETSESSION(hSession).Mechanism)
 800309a:	6a13      	ldr	r3, [r2, #32]
 800309c:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 80030a0:	d138      	bne.n	8003114 <KMS_Digest+0xac>
#if defined(KMS_SHA256) && (KMS_SHA256 & KMS_FCT_DIGEST)
      case CKM_SHA256:
      {
        kms_sha256_ctx_t *phash_ctx;

        KMS_CHECK_BUFFER_SECTION5_2(pDigest, pulDigestLen, CA_CRL_SHA256_SIZE);
 80030a2:	b937      	cbnz	r7, 80030b2 <KMS_Digest+0x4a>
 80030a4:	2320      	movs	r3, #32
 80030a6:	f8c8 3000 	str.w	r3, [r8]

  return e_ret_status;
#else /* KMS_DIGEST */
  return CKR_FUNCTION_NOT_SUPPORTED;
#endif /* KMS_DIGEST */
}
 80030aa:	4620      	mov	r0, r4
 80030ac:	b003      	add	sp, #12
 80030ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        KMS_CHECK_BUFFER_SECTION5_2(pDigest, pulDigestLen, CA_CRL_SHA256_SIZE);
 80030b2:	f8d8 3000 	ldr.w	r3, [r8]
 80030b6:	2b1f      	cmp	r3, #31
 80030b8:	d805      	bhi.n	80030c6 <KMS_Digest+0x5e>
 80030ba:	2320      	movs	r3, #32
 80030bc:	f8c8 3000 	str.w	r3, [r8]
 80030c0:	f44f 74a8 	mov.w	r4, #336	@ 0x150
 80030c4:	e7f1      	b.n	80030aa <KMS_Digest+0x42>
        cryptolib_status = CA_SHA256_Append(&(phash_ctx->ca_ctx), pData, (int32_t)ulDataLen);
 80030c6:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 80030c8:	9301      	str	r3, [sp, #4]
 80030ca:	4618      	mov	r0, r3
 80030cc:	4652      	mov	r2, sl
 80030ce:	4649      	mov	r1, r9
 80030d0:	f7ff fc4e 	bl	8002970 <CA_SHA256_Append>
        if (cryptolib_status == CA_HASH_SUCCESS)
 80030d4:	9b01      	ldr	r3, [sp, #4]
 80030d6:	b170      	cbz	r0, 80030f6 <KMS_Digest+0x8e>
  CK_RV e_ret_status = CKR_FUNCTION_FAILED;
 80030d8:	2406      	movs	r4, #6
  if (KMS_GETSESSION(hSession).pCtx != NULL_PTR)
 80030da:	2324      	movs	r3, #36	@ 0x24
 80030dc:	fb03 550b 	mla	r5, r3, fp, r5
 80030e0:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 80030e2:	b121      	cbz	r1, 80030ee <KMS_Digest+0x86>
    KMS_Free(hSession, KMS_GETSESSION(hSession).pCtx);
 80030e4:	4630      	mov	r0, r6
 80030e6:	f001 fd29 	bl	8004b3c <KMS_Free>
    KMS_GETSESSION(hSession).pCtx = NULL_PTR;
 80030ea:	2300      	movs	r3, #0
 80030ec:	62ab      	str	r3, [r5, #40]	@ 0x28
  KMS_SetStateIdle(hSession);
 80030ee:	4630      	mov	r0, r6
 80030f0:	f001 fbb0 	bl	8004854 <KMS_SetStateIdle>
  return e_ret_status;
 80030f4:	e7d9      	b.n	80030aa <KMS_Digest+0x42>
          cryptolib_status = CA_SHA256_Finish(&(phash_ctx->ca_ctx), pDigest, (int32_t *)(uint32_t)pulDigestLen);
 80030f6:	4642      	mov	r2, r8
 80030f8:	4639      	mov	r1, r7
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7ff fc46 	bl	800298c <CA_SHA256_Finish>
          if (cryptolib_status == CA_HASH_SUCCESS)
 8003100:	2800      	cmp	r0, #0
 8003102:	d1e9      	bne.n	80030d8 <KMS_Digest+0x70>
 8003104:	e7e9      	b.n	80030da <KMS_Digest+0x72>
    e_ret_status = CKR_CRYPTOKI_NOT_INITIALIZED;
 8003106:	f44f 74c8 	mov.w	r4, #400	@ 0x190
 800310a:	e7e6      	b.n	80030da <KMS_Digest+0x72>
    e_ret_status = CKR_SESSION_HANDLE_INVALID;
 800310c:	24b3      	movs	r4, #179	@ 0xb3
 800310e:	e7e4      	b.n	80030da <KMS_Digest+0x72>
    e_ret_status = CKR_OPERATION_NOT_INITIALIZED;
 8003110:	2491      	movs	r4, #145	@ 0x91
 8003112:	e7e2      	b.n	80030da <KMS_Digest+0x72>
        e_ret_status = CKR_MECHANISM_INVALID;
 8003114:	2470      	movs	r4, #112	@ 0x70
 8003116:	e7e0      	b.n	80030da <KMS_Digest+0x72>
 8003118:	20000c48 	.word	0x20000c48

0800311c <KMS_DigestUpdate>:
  *         CKR_MECHANISM_INVALID
  *         CKR_OPERATION_NOT_INITIALIZED
  *         CKR_SESSION_HANDLE_INVALID
  */
CK_RV   KMS_DigestUpdate(CK_SESSION_HANDLE hSession, CK_BYTE_PTR pPart, CK_ULONG ulPartLen)
{
 800311c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if defined(KMS_DIGEST)
  CK_RV e_ret_status = CKR_FUNCTION_FAILED;
  int32_t cryptolib_status;    /* CryptoLib error status */

  if (!KMS_IS_INITIALIZED())
 8003120:	4d14      	ldr	r5, [pc, #80]	@ (8003174 <KMS_DigestUpdate+0x58>)
 8003122:	782b      	ldrb	r3, [r5, #0]
{
 8003124:	4606      	mov	r6, r0
 8003126:	460f      	mov	r7, r1
 8003128:	4690      	mov	r8, r2
  if (!KMS_IS_INITIALIZED())
 800312a:	b1cb      	cbz	r3, 8003160 <KMS_DigestUpdate+0x44>
  {
    e_ret_status = CKR_CRYPTOKI_NOT_INITIALIZED;
  }
  else if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 800312c:	f001 fb5c 	bl	80047e8 <KMS_CheckSessionHdle>
 8003130:	4604      	mov	r4, r0
 8003132:	b9c0      	cbnz	r0, 8003166 <KMS_DigestUpdate+0x4a>
  {
    e_ret_status = CKR_SESSION_HANDLE_INVALID;
  }
  /* Check if DigestInit has been called previously */
  else if (KMS_GETSESSION(hSession).state != KMS_SESSION_DIGEST)
 8003134:	3e01      	subs	r6, #1
 8003136:	2324      	movs	r3, #36	@ 0x24
 8003138:	fb03 5306 	mla	r3, r3, r6, r5
 800313c:	68da      	ldr	r2, [r3, #12]
 800313e:	2a01      	cmp	r2, #1
 8003140:	d113      	bne.n	800316a <KMS_DigestUpdate+0x4e>
  {
    e_ret_status = CKR_OPERATION_NOT_INITIALIZED;
  }
  else
  {
    switch (KMS_GETSESSION(hSession).Mechanism)
 8003142:	6a1a      	ldr	r2, [r3, #32]
 8003144:	f5b2 7f14 	cmp.w	r2, #592	@ 0x250
 8003148:	d111      	bne.n	800316e <KMS_DigestUpdate+0x52>
        kms_sha256_ctx_t *phash_ctx;

        /* Retrieve allocated context */
        phash_ctx = KMS_GETSESSION(hSession).pCtx;
        /* Add data to be hashed */
        cryptolib_status = CA_SHA256_Append(&(phash_ctx->ca_ctx), pPart, (int32_t)ulPartLen);
 800314a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800314c:	4642      	mov	r2, r8
 800314e:	4639      	mov	r1, r7
 8003150:	f7ff fc0e 	bl	8002970 <CA_SHA256_Append>
  CK_RV e_ret_status = CKR_FUNCTION_FAILED;
 8003154:	2800      	cmp	r0, #0
 8003156:	bf18      	it	ne
 8003158:	2406      	movne	r4, #6

  return e_ret_status;
#else /* KMS_DIGEST */
  return CKR_FUNCTION_NOT_SUPPORTED;
#endif /* KMS_DIGEST */
}
 800315a:	4620      	mov	r0, r4
 800315c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e_ret_status = CKR_CRYPTOKI_NOT_INITIALIZED;
 8003160:	f44f 74c8 	mov.w	r4, #400	@ 0x190
 8003164:	e7f9      	b.n	800315a <KMS_DigestUpdate+0x3e>
    e_ret_status = CKR_SESSION_HANDLE_INVALID;
 8003166:	24b3      	movs	r4, #179	@ 0xb3
 8003168:	e7f7      	b.n	800315a <KMS_DigestUpdate+0x3e>
    e_ret_status = CKR_OPERATION_NOT_INITIALIZED;
 800316a:	2491      	movs	r4, #145	@ 0x91
 800316c:	e7f5      	b.n	800315a <KMS_DigestUpdate+0x3e>
        e_ret_status = CKR_MECHANISM_INVALID;
 800316e:	2470      	movs	r4, #112	@ 0x70
  return e_ret_status;
 8003170:	e7f3      	b.n	800315a <KMS_DigestUpdate+0x3e>
 8003172:	bf00      	nop
 8003174:	20000c48 	.word	0x20000c48

08003178 <KMS_DigestFinal>:
  *         CKR_OPERATION_NOT_INITIALIZED
  *         CKR_SESSION_HANDLE_INVALID
  */
CK_RV   KMS_DigestFinal(CK_SESSION_HANDLE hSession, CK_BYTE_PTR pDigest,
                        CK_ULONG_PTR pulDigestLen)
{
 8003178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if defined(KMS_DIGEST)
  CK_RV e_ret_status = CKR_FUNCTION_FAILED;
  int32_t cryptolib_status;    /* CryptoLib error status */

  if (!KMS_IS_INITIALIZED())
 800317c:	4d22      	ldr	r5, [pc, #136]	@ (8003208 <KMS_DigestFinal+0x90>)
 800317e:	782b      	ldrb	r3, [r5, #0]
{
 8003180:	4607      	mov	r7, r0
 8003182:	4688      	mov	r8, r1
 8003184:	4616      	mov	r6, r2
  else if (KMS_CheckSessionHdle(hSession) != CKR_OK)
  {
    e_ret_status = CKR_SESSION_HANDLE_INVALID;
  }
  /* Check if DigestInit has been called previously */
  else if (KMS_GETSESSION(hSession).state != KMS_SESSION_DIGEST)
 8003186:	f100 39ff 	add.w	r9, r0, #4294967295	@ 0xffffffff
  if (!KMS_IS_INITIALIZED())
 800318a:	b39b      	cbz	r3, 80031f4 <KMS_DigestFinal+0x7c>
  else if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 800318c:	f001 fb2c 	bl	80047e8 <KMS_CheckSessionHdle>
 8003190:	4604      	mov	r4, r0
 8003192:	bb90      	cbnz	r0, 80031fa <KMS_DigestFinal+0x82>
  else if (KMS_GETSESSION(hSession).state != KMS_SESSION_DIGEST)
 8003194:	2324      	movs	r3, #36	@ 0x24
 8003196:	fb03 5309 	mla	r3, r3, r9, r5
 800319a:	68da      	ldr	r2, [r3, #12]
 800319c:	2a01      	cmp	r2, #1
 800319e:	d12e      	bne.n	80031fe <KMS_DigestFinal+0x86>
  {
    e_ret_status = CKR_OPERATION_NOT_INITIALIZED;
  }
  else
  {
    switch (KMS_GETSESSION(hSession).Mechanism)
 80031a0:	6a1a      	ldr	r2, [r3, #32]
 80031a2:	f5b2 7f14 	cmp.w	r2, #592	@ 0x250
 80031a6:	d12c      	bne.n	8003202 <KMS_DigestFinal+0x8a>
#if defined(KMS_SHA256) && (KMS_SHA256 & KMS_FCT_DIGEST)
      case CKM_SHA256:
      {
        kms_sha256_ctx_t *phash_ctx;

        KMS_CHECK_BUFFER_SECTION5_2(pDigest, pulDigestLen, CA_CRL_SHA256_SIZE);
 80031a8:	f1b8 0f00 	cmp.w	r8, #0
 80031ac:	d104      	bne.n	80031b8 <KMS_DigestFinal+0x40>
 80031ae:	2320      	movs	r3, #32
 80031b0:	6033      	str	r3, [r6, #0]

  return e_ret_status;
#else /* KMS_DIGEST */
  return CKR_FUNCTION_NOT_SUPPORTED;
#endif /* KMS_DIGEST */
}
 80031b2:	4620      	mov	r0, r4
 80031b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        KMS_CHECK_BUFFER_SECTION5_2(pDigest, pulDigestLen, CA_CRL_SHA256_SIZE);
 80031b8:	6832      	ldr	r2, [r6, #0]
 80031ba:	2a1f      	cmp	r2, #31
 80031bc:	d804      	bhi.n	80031c8 <KMS_DigestFinal+0x50>
 80031be:	2320      	movs	r3, #32
 80031c0:	6033      	str	r3, [r6, #0]
 80031c2:	f44f 74a8 	mov.w	r4, #336	@ 0x150
 80031c6:	e7f4      	b.n	80031b2 <KMS_DigestFinal+0x3a>
        cryptolib_status = CA_SHA256_Finish(&(phash_ctx->ca_ctx), pDigest, (int32_t *)(uint32_t)pulDigestLen);
 80031c8:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80031ca:	4632      	mov	r2, r6
 80031cc:	4641      	mov	r1, r8
 80031ce:	f7ff fbdd 	bl	800298c <CA_SHA256_Finish>
  CK_RV e_ret_status = CKR_FUNCTION_FAILED;
 80031d2:	2800      	cmp	r0, #0
 80031d4:	bf18      	it	ne
 80031d6:	2406      	movne	r4, #6
  if (KMS_GETSESSION(hSession).pCtx != NULL_PTR)
 80031d8:	2324      	movs	r3, #36	@ 0x24
 80031da:	fb03 5509 	mla	r5, r3, r9, r5
 80031de:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 80031e0:	b121      	cbz	r1, 80031ec <KMS_DigestFinal+0x74>
    KMS_Free(hSession, KMS_GETSESSION(hSession).pCtx);
 80031e2:	4638      	mov	r0, r7
 80031e4:	f001 fcaa 	bl	8004b3c <KMS_Free>
    KMS_GETSESSION(hSession).pCtx = NULL_PTR;
 80031e8:	2300      	movs	r3, #0
 80031ea:	62ab      	str	r3, [r5, #40]	@ 0x28
  KMS_SetStateIdle(hSession);
 80031ec:	4638      	mov	r0, r7
 80031ee:	f001 fb31 	bl	8004854 <KMS_SetStateIdle>
  return e_ret_status;
 80031f2:	e7de      	b.n	80031b2 <KMS_DigestFinal+0x3a>
    e_ret_status = CKR_CRYPTOKI_NOT_INITIALIZED;
 80031f4:	f44f 74c8 	mov.w	r4, #400	@ 0x190
 80031f8:	e7ee      	b.n	80031d8 <KMS_DigestFinal+0x60>
    e_ret_status = CKR_SESSION_HANDLE_INVALID;
 80031fa:	24b3      	movs	r4, #179	@ 0xb3
 80031fc:	e7ec      	b.n	80031d8 <KMS_DigestFinal+0x60>
    e_ret_status = CKR_OPERATION_NOT_INITIALIZED;
 80031fe:	2491      	movs	r4, #145	@ 0x91
 8003200:	e7ea      	b.n	80031d8 <KMS_DigestFinal+0x60>
        e_ret_status = CKR_MECHANISM_INVALID;
 8003202:	2470      	movs	r4, #112	@ 0x70
 8003204:	e7e8      	b.n	80031d8 <KMS_DigestFinal+0x60>
 8003206:	bf00      	nop
 8003208:	20000c48 	.word	0x20000c48

0800320c <KMS_CreateObject>:
  */
CK_RV  KMS_CreateObject(CK_SESSION_HANDLE hSession,
                        CK_ATTRIBUTE_PTR pTemplate,
                        CK_ULONG ulCount,
                        CK_OBJECT_HANDLE_PTR phObject)
{
 800320c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
#if defined(KMS_OBJECTS)
  CK_ATTRIBUTE_PTR  p_attribut_value = NULL_PTR;
  CK_RV e_ret_status;

  if (!KMS_IS_INITIALIZED())
 8003210:	4f27      	ldr	r7, [pc, #156]	@ (80032b0 <KMS_CreateObject+0xa4>)
{
 8003212:	4698      	mov	r8, r3
  CK_ATTRIBUTE_PTR  p_attribut_value = NULL_PTR;
 8003214:	2300      	movs	r3, #0
 8003216:	9303      	str	r3, [sp, #12]
  if (!KMS_IS_INITIALIZED())
 8003218:	783b      	ldrb	r3, [r7, #0]
{
 800321a:	4606      	mov	r6, r0
 800321c:	460c      	mov	r4, r1
 800321e:	4615      	mov	r5, r2
  if (!KMS_IS_INITIALIZED())
 8003220:	2b00      	cmp	r3, #0
 8003222:	d040      	beq.n	80032a6 <KMS_CreateObject+0x9a>
  {
    return CKR_CRYPTOKI_NOT_INITIALIZED;
  }
  if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8003224:	f001 fae0 	bl	80047e8 <KMS_CheckSessionHdle>
 8003228:	2800      	cmp	r0, #0
 800322a:	d13f      	bne.n	80032ac <KMS_CreateObject+0xa0>
  {
    return CKR_SESSION_HANDLE_INVALID;
  }
  /* No processing already on going  */
  if (KMS_GETSESSION(hSession).state != KMS_SESSION_IDLE)
 800322c:	2224      	movs	r2, #36	@ 0x24
 800322e:	1e73      	subs	r3, r6, #1
 8003230:	fb02 7703 	mla	r7, r2, r3, r7
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	2a00      	cmp	r2, #0
 8003238:	d138      	bne.n	80032ac <KMS_CreateObject+0xa0>
  {
    return CKR_SESSION_HANDLE_INVALID;
  }

  /* Control CLASS ATTRIBUTE */
  if (CKR_OK != KMS_FindAttributeInTemplate(pTemplate, ulCount, CKA_CLASS, &p_attribut_value))
 800323a:	ab03      	add	r3, sp, #12
 800323c:	4629      	mov	r1, r5
 800323e:	4620      	mov	r0, r4
 8003240:	f002 fa0a 	bl	8005658 <KMS_FindAttributeInTemplate>
 8003244:	b118      	cbz	r0, 800324e <KMS_CreateObject+0x42>
  {
    /* Class attribute not found, object not valid */
    return CKR_TEMPLATE_INCOMPLETE;
 8003246:	20d0      	movs	r0, #208	@ 0xd0

  return e_ret_status;
#else /* KMS_OBJECTS */
  return CKR_FUNCTION_NOT_SUPPORTED;
#endif /* KMS_OBJECTS */
}
 8003248:	b004      	add	sp, #16
 800324a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (KMS_FindAttributeInTemplate(pTemplate, ulCount, CKA_CERTIFICATE_TYPE, &p_attribut_value) != CKR_OK)
 800324e:	ab03      	add	r3, sp, #12
 8003250:	2280      	movs	r2, #128	@ 0x80
 8003252:	4629      	mov	r1, r5
 8003254:	4620      	mov	r0, r4
 8003256:	f002 f9ff 	bl	8005658 <KMS_FindAttributeInTemplate>
 800325a:	b948      	cbnz	r0, 8003270 <KMS_CreateObject+0x64>
  e_ret_status = KMS_Objects_CreateNStoreBlobFromTemplates(hSession, pTemplate, ulCount, NULL_PTR, 0, phObject);
 800325c:	2300      	movs	r3, #0
 800325e:	f8cd 8004 	str.w	r8, [sp, #4]
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	462a      	mov	r2, r5
 8003266:	4621      	mov	r1, r4
 8003268:	4630      	mov	r0, r6
 800326a:	f002 fd15 	bl	8005c98 <KMS_Objects_CreateNStoreBlobFromTemplates>
  return e_ret_status;
 800326e:	e7eb      	b.n	8003248 <KMS_CreateObject+0x3c>
    if (KMS_FindAttributeInTemplate(pTemplate, ulCount, CKA_HW_FEATURE_TYPE, &p_attribut_value) != CKR_OK)
 8003270:	ab03      	add	r3, sp, #12
 8003272:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8003276:	4629      	mov	r1, r5
 8003278:	4620      	mov	r0, r4
 800327a:	f002 f9ed 	bl	8005658 <KMS_FindAttributeInTemplate>
 800327e:	2800      	cmp	r0, #0
 8003280:	d0ec      	beq.n	800325c <KMS_CreateObject+0x50>
      if (KMS_FindAttributeInTemplate(pTemplate, ulCount, CKA_KEY_TYPE, &p_attribut_value) != CKR_OK)
 8003282:	ab03      	add	r3, sp, #12
 8003284:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003288:	4629      	mov	r1, r5
 800328a:	4620      	mov	r0, r4
 800328c:	f002 f9e4 	bl	8005658 <KMS_FindAttributeInTemplate>
 8003290:	2800      	cmp	r0, #0
 8003292:	d0e3      	beq.n	800325c <KMS_CreateObject+0x50>
        if (KMS_FindAttributeInTemplate(pTemplate, ulCount, CKA_STM_COUNTER_VALUE, &p_attribut_value) != CKR_OK)
 8003294:	4a07      	ldr	r2, [pc, #28]	@ (80032b4 <KMS_CreateObject+0xa8>)
 8003296:	ab03      	add	r3, sp, #12
 8003298:	4629      	mov	r1, r5
 800329a:	4620      	mov	r0, r4
 800329c:	f002 f9dc 	bl	8005658 <KMS_FindAttributeInTemplate>
 80032a0:	2800      	cmp	r0, #0
 80032a2:	d0db      	beq.n	800325c <KMS_CreateObject+0x50>
 80032a4:	e7cf      	b.n	8003246 <KMS_CreateObject+0x3a>
    return CKR_CRYPTOKI_NOT_INITIALIZED;
 80032a6:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80032aa:	e7cd      	b.n	8003248 <KMS_CreateObject+0x3c>
    return CKR_SESSION_HANDLE_INVALID;
 80032ac:	20b3      	movs	r0, #179	@ 0xb3
 80032ae:	e7cb      	b.n	8003248 <KMS_CreateObject+0x3c>
 80032b0:	20000c48 	.word	0x20000c48
 80032b4:	80000004 	.word	0x80000004

080032b8 <KMS_DestroyObject>:
  *         @ref KMS_PlatfObjects_NvmRemoveObject returned values
  *         @ref KMS_PlatfObjects_VmRemoveObject returned values
  */
CK_RV  KMS_DestroyObject(CK_SESSION_HANDLE hSession,
                         CK_OBJECT_HANDLE hObject)
{
 80032b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  CK_RV e_ret_status = CKR_FUNCTION_FAILED;
  kms_obj_keyhead_t *pkms_object;
  kms_attr_t  *pAttribute;
  kms_obj_range_t  ObjectRange;

  if (!KMS_IS_INITIALIZED())
 80032ba:	4e17      	ldr	r6, [pc, #92]	@ (8003318 <KMS_DestroyObject+0x60>)
 80032bc:	7833      	ldrb	r3, [r6, #0]
{
 80032be:	4605      	mov	r5, r0
 80032c0:	460c      	mov	r4, r1
  if (!KMS_IS_INITIALIZED())
 80032c2:	b313      	cbz	r3, 800330a <KMS_DestroyObject+0x52>
  {
    return CKR_CRYPTOKI_NOT_INITIALIZED;
  }
  if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 80032c4:	f001 fa90 	bl	80047e8 <KMS_CheckSessionHdle>
 80032c8:	bb10      	cbnz	r0, 8003310 <KMS_DestroyObject+0x58>
  {
    return CKR_SESSION_HANDLE_INVALID;
  }
  /* No processing already on going  */
  if (KMS_GETSESSION(hSession).state != KMS_SESSION_IDLE)
 80032ca:	2324      	movs	r3, #36	@ 0x24
 80032cc:	3d01      	subs	r5, #1
 80032ce:	fb03 6605 	mla	r6, r3, r5, r6
 80032d2:	68f3      	ldr	r3, [r6, #12]
 80032d4:	b9e3      	cbnz	r3, 8003310 <KMS_DestroyObject+0x58>
  {
    return CKR_SESSION_HANDLE_INVALID;
  }

  /* Verify that the object is removable, embedded objects are not */
  ObjectRange = KMS_Objects_GetRange(hObject);
 80032d6:	4620      	mov	r0, r4
 80032d8:	f002 f8ee 	bl	80054b8 <KMS_Objects_GetRange>
  if (ObjectRange == KMS_OBJECT_RANGE_EMBEDDED)
 80032dc:	b910      	cbnz	r0, 80032e4 <KMS_DestroyObject+0x2c>
  {
    return (CKR_ACTION_PROHIBITED);
 80032de:	201b      	movs	r0, #27

  return e_ret_status;
#else /* KMS_OBJECTS */
  return CKR_FUNCTION_NOT_SUPPORTED;
#endif /* KMS_OBJECTS */
}
 80032e0:	b002      	add	sp, #8
 80032e2:	bd70      	pop	{r4, r5, r6, pc}
  pkms_object = KMS_Objects_GetPointer(hObject);
 80032e4:	4620      	mov	r0, r4
 80032e6:	f002 f945 	bl	8005574 <KMS_Objects_GetPointer>
  if (pkms_object != NULL_PTR)
 80032ea:	4601      	mov	r1, r0
 80032ec:	b190      	cbz	r0, 8003314 <KMS_DestroyObject+0x5c>
    e_ret_status = KMS_Objects_SearchAttributes(CKA_DESTROYABLE, pkms_object, &pAttribute);
 80032ee:	aa01      	add	r2, sp, #4
 80032f0:	f44f 70b9 	mov.w	r0, #370	@ 0x172
 80032f4:	f002 f9c4 	bl	8005680 <KMS_Objects_SearchAttributes>
    if (e_ret_status == CKR_OK)
 80032f8:	b918      	cbnz	r0, 8003302 <KMS_DestroyObject+0x4a>
      if (*pAttribute->data != CK_TRUE)
 80032fa:	9b01      	ldr	r3, [sp, #4]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d1ed      	bne.n	80032de <KMS_DestroyObject+0x26>
    e_ret_status = KMS_PlatfObjects_NvmRemoveObject(hObject);
 8003302:	4620      	mov	r0, r4
 8003304:	f002 fe66 	bl	8005fd4 <KMS_PlatfObjects_NvmRemoveObject>
 8003308:	e7ea      	b.n	80032e0 <KMS_DestroyObject+0x28>
    return CKR_CRYPTOKI_NOT_INITIALIZED;
 800330a:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800330e:	e7e7      	b.n	80032e0 <KMS_DestroyObject+0x28>
    return CKR_SESSION_HANDLE_INVALID;
 8003310:	20b3      	movs	r0, #179	@ 0xb3
 8003312:	e7e5      	b.n	80032e0 <KMS_DestroyObject+0x28>
    e_ret_status = CKR_OBJECT_HANDLE_INVALID;
 8003314:	2082      	movs	r0, #130	@ 0x82
 8003316:	e7e3      	b.n	80032e0 <KMS_DestroyObject+0x28>
 8003318:	20000c48 	.word	0x20000c48

0800331c <KMS_GetAttributeValue>:
  *         CKR_SESSION_HANDLE_INVALID
  *         @ref KMS_Objects_SearchAttributes returned values
  */
CK_RV KMS_GetAttributeValue(CK_SESSION_HANDLE hSession,  CK_OBJECT_HANDLE  hObject,
                            CK_ATTRIBUTE_PTR  pTemplate, CK_ULONG          ulCount)
{
 800331c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
#if defined(KMS_ATTRIBUTES)
  CK_RV e_ret_status = CKR_FUNCTION_FAILED;
  kms_obj_keyhead_t *pkms_object;

  if (!KMS_IS_INITIALIZED())
 8003320:	4f41      	ldr	r7, [pc, #260]	@ (8003428 <KMS_GetAttributeValue+0x10c>)
{
 8003322:	461e      	mov	r6, r3
  if (!KMS_IS_INITIALIZED())
 8003324:	783b      	ldrb	r3, [r7, #0]
{
 8003326:	4605      	mov	r5, r0
 8003328:	4689      	mov	r9, r1
 800332a:	4614      	mov	r4, r2
  if (!KMS_IS_INITIALIZED())
 800332c:	2b00      	cmp	r3, #0
 800332e:	d072      	beq.n	8003416 <KMS_GetAttributeValue+0xfa>
  {
    return CKR_CRYPTOKI_NOT_INITIALIZED;
  }
  if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8003330:	f001 fa5a 	bl	80047e8 <KMS_CheckSessionHdle>
 8003334:	2800      	cmp	r0, #0
 8003336:	d171      	bne.n	800341c <KMS_GetAttributeValue+0x100>
  {
    return CKR_SESSION_HANDLE_INVALID;
  }
  /* No processing already on going  */
  if (KMS_GETSESSION(hSession).state != KMS_SESSION_IDLE)
 8003338:	3d01      	subs	r5, #1
 800333a:	2324      	movs	r3, #36	@ 0x24
 800333c:	fb03 7705 	mla	r7, r3, r5, r7
 8003340:	f8d7 800c 	ldr.w	r8, [r7, #12]
 8003344:	f1b8 0f00 	cmp.w	r8, #0
 8003348:	d168      	bne.n	800341c <KMS_GetAttributeValue+0x100>
  /* GetAttribute() is only authorised for objects with attribute EXTRACTABLE = TRUE or without EXTRACTABLE attribute */
  /* Verify that the object is extractable, reading the attributes */

  /* Read the key value from the Key Handle                 */
  /* Key Handle is the index to one of static or nvm        */
  pkms_object = KMS_Objects_GetPointer(hObject);
 800334a:	4648      	mov	r0, r9
 800334c:	f002 f912 	bl	8005574 <KMS_Objects_GetPointer>

  /* Check that hObject is valid */
  if (pkms_object != NULL_PTR)
 8003350:	4607      	mov	r7, r0
 8003352:	2800      	cmp	r0, #0
 8003354:	d065      	beq.n	8003422 <KMS_GetAttributeValue+0x106>
  {
    kms_attr_t  *pAttribute;

    /* Check the CKA_EXTRACTABLE attribute = CK_TRUE      */
    e_ret_status = KMS_Objects_SearchAttributes(CKA_EXTRACTABLE, pkms_object, &pAttribute);
 8003356:	4601      	mov	r1, r0
 8003358:	466a      	mov	r2, sp
 800335a:	f44f 70b1 	mov.w	r0, #354	@ 0x162
 800335e:	f002 f98f 	bl	8005680 <KMS_Objects_SearchAttributes>

    /* If attribute not found or object not extractable */
    if ((e_ret_status == CKR_OK) && (*pAttribute->data != CK_TRUE))
 8003362:	b980      	cbnz	r0, 8003386 <KMS_GetAttributeValue+0x6a>
 8003364:	9b00      	ldr	r3, [sp, #0]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	2b01      	cmp	r3, #1
 800336a:	d00c      	beq.n	8003386 <KMS_GetAttributeValue+0x6a>
 800336c:	230c      	movs	r3, #12
 800336e:	fb03 4306 	mla	r3, r3, r6, r4
    {
      for (uint32_t i = 0; i < ulCount; i++)
      {
        pTemplate[i].ulValueLen = CK_UNAVAILABLE_INFORMATION;
 8003372:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
      for (uint32_t i = 0; i < ulCount; i++)
 8003376:	42a3      	cmp	r3, r4
 8003378:	d102      	bne.n	8003380 <KMS_GetAttributeValue+0x64>
      }
      /* Object cannot be extracted  */
      return (CKR_ATTRIBUTE_SENSITIVE);
 800337a:	f04f 0911 	mov.w	r9, #17
 800337e:	e03b      	b.n	80033f8 <KMS_GetAttributeValue+0xdc>
        pTemplate[i].ulValueLen = CK_UNAVAILABLE_INFORMATION;
 8003380:	60a2      	str	r2, [r4, #8]
      for (uint32_t i = 0; i < ulCount; i++)
 8003382:	340c      	adds	r4, #12
 8003384:	e7f7      	b.n	8003376 <KMS_GetAttributeValue+0x5a>
    }

    /* Double check to avoid fault attack: Check the CKA_EXTRACTABLE attribute = CK_TRUE */
    e_ret_status = KMS_Objects_SearchAttributes(CKA_EXTRACTABLE, pkms_object, &pAttribute);
 8003386:	466a      	mov	r2, sp
 8003388:	4639      	mov	r1, r7
 800338a:	f44f 70b1 	mov.w	r0, #354	@ 0x162
 800338e:	f002 f977 	bl	8005680 <KMS_Objects_SearchAttributes>

    /* If attribute not found or object not extractable */
    if ((e_ret_status == CKR_OK) && (*pAttribute->data != CK_TRUE))
 8003392:	4681      	mov	r9, r0
 8003394:	bb70      	cbnz	r0, 80033f4 <KMS_GetAttributeValue+0xd8>
 8003396:	9b00      	ldr	r3, [sp, #0]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d02a      	beq.n	80033f4 <KMS_GetAttributeValue+0xd8>
 800339e:	230c      	movs	r3, #12
 80033a0:	fb03 4306 	mla	r3, r3, r6, r4
    {
      for (uint32_t i = 0; i < ulCount; i++)
      {
        pTemplate[i].ulValueLen = CK_UNAVAILABLE_INFORMATION;
 80033a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
      for (uint32_t i = 0; i < ulCount; i++)
 80033a8:	429c      	cmp	r4, r3
 80033aa:	d0e6      	beq.n	800337a <KMS_GetAttributeValue+0x5e>
        pTemplate[i].ulValueLen = CK_UNAVAILABLE_INFORMATION;
 80033ac:	60a2      	str	r2, [r4, #8]
      for (uint32_t i = 0; i < ulCount; i++)
 80033ae:	340c      	adds	r4, #12
 80033b0:	e7fa      	b.n	80033a8 <KMS_GetAttributeValue+0x8c>

      for (index = 0; index < ulCount; index++)
      {
        ptemp = &(pTemplate[index]);
        /* Search for the type of attribute from the Template */
        e_ret_status = KMS_Objects_SearchAttributes(ptemp->type, pkms_object, &pfound_attribute);
 80033b2:	6820      	ldr	r0, [r4, #0]
 80033b4:	aa01      	add	r2, sp, #4
 80033b6:	4639      	mov	r1, r7
 80033b8:	f002 f962 	bl	8005680 <KMS_Objects_SearchAttributes>

        if (e_ret_status == CKR_OK)
 80033bc:	4681      	mov	r9, r0
 80033be:	bb20      	cbnz	r0, 800340a <KMS_GetAttributeValue+0xee>
        {
          if (ptemp->pValue == NULL_PTR)
          {
            /* case 3 */
            ptemp->ulValueLen = pfound_attribute->size;
 80033c0:	9d01      	ldr	r5, [sp, #4]
          if (ptemp->pValue == NULL_PTR)
 80033c2:	6860      	ldr	r0, [r4, #4]
            ptemp->ulValueLen = pfound_attribute->size;
 80033c4:	6869      	ldr	r1, [r5, #4]
          if (ptemp->pValue == NULL_PTR)
 80033c6:	b188      	cbz	r0, 80033ec <KMS_GetAttributeValue+0xd0>
          }
          else if (ptemp->ulValueLen >= pfound_attribute->size)
 80033c8:	68a3      	ldr	r3, [r4, #8]
 80033ca:	428b      	cmp	r3, r1
 80033cc:	d320      	bcc.n	8003410 <KMS_GetAttributeValue+0xf4>
          {
            /* case 4 */
            if ((ptemp->type == CKA_VALUE) || (ptemp->type == CKA_EC_POINT))
 80033ce:	6823      	ldr	r3, [r4, #0]
 80033d0:	2b11      	cmp	r3, #17
                                          pfound_attribute->size,
                                          (uint8_t *)(ptemp->pValue));
            }
            else
            {
              (void)memcpy((uint8_t *)ptemp->pValue, (uint8_t *)(pfound_attribute->data), pfound_attribute->size);
 80033d2:	f105 0508 	add.w	r5, r5, #8
            if ((ptemp->type == CKA_VALUE) || (ptemp->type == CKA_EC_POINT))
 80033d6:	d003      	beq.n	80033e0 <KMS_GetAttributeValue+0xc4>
 80033d8:	f240 1281 	movw	r2, #385	@ 0x181
 80033dc:	4293      	cmp	r3, r2
 80033de:	d10f      	bne.n	8003400 <KMS_GetAttributeValue+0xe4>
              KMS_Objects_BlobU32_2_u8ptr(&(pfound_attribute->data[0]),
 80033e0:	4602      	mov	r2, r0
 80033e2:	4628      	mov	r0, r5
 80033e4:	f002 fa09 	bl	80057fa <KMS_Objects_BlobU32_2_u8ptr>
            }
            ptemp->ulValueLen = pfound_attribute->size;
 80033e8:	9b01      	ldr	r3, [sp, #4]
 80033ea:	6859      	ldr	r1, [r3, #4]
 80033ec:	60a1      	str	r1, [r4, #8]
      for (index = 0; index < ulCount; index++)
 80033ee:	f108 0801 	add.w	r8, r8, #1
 80033f2:	340c      	adds	r4, #12
 80033f4:	45b0      	cmp	r8, r6
 80033f6:	d1dc      	bne.n	80033b2 <KMS_GetAttributeValue+0x96>

  return e_ret_status;
#else /* KMS_ATTRIBUTES */
  return CKR_FUNCTION_NOT_SUPPORTED;
#endif /* KMS_ATTRIBUTES */
}
 80033f8:	4648      	mov	r0, r9
 80033fa:	b003      	add	sp, #12
 80033fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
              (void)memcpy((uint8_t *)ptemp->pValue, (uint8_t *)(pfound_attribute->data), pfound_attribute->size);
 8003400:	460a      	mov	r2, r1
 8003402:	4629      	mov	r1, r5
 8003404:	f003 fc02 	bl	8006c0c <memcpy>
 8003408:	e7ee      	b.n	80033e8 <KMS_GetAttributeValue+0xcc>
 800340a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800340e:	e7ed      	b.n	80033ec <KMS_GetAttributeValue+0xd0>
 8003410:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 8003414:	e7ea      	b.n	80033ec <KMS_GetAttributeValue+0xd0>
    return CKR_CRYPTOKI_NOT_INITIALIZED;
 8003416:	f44f 79c8 	mov.w	r9, #400	@ 0x190
 800341a:	e7ed      	b.n	80033f8 <KMS_GetAttributeValue+0xdc>
    return CKR_SESSION_HANDLE_INVALID;
 800341c:	f04f 09b3 	mov.w	r9, #179	@ 0xb3
 8003420:	e7ea      	b.n	80033f8 <KMS_GetAttributeValue+0xdc>
    e_ret_status = CKR_OBJECT_HANDLE_INVALID;
 8003422:	f04f 0982 	mov.w	r9, #130	@ 0x82
 8003426:	e7e7      	b.n	80033f8 <KMS_GetAttributeValue+0xdc>
 8003428:	20000c48 	.word	0x20000c48

0800342c <KMS_FindObjectsInit>:
  *         CKR_SESSION_HANDLE_INVALID
  *         @ref KMS_FindObjectsFromTemplate returned values
  */
CK_RV KMS_FindObjectsInit(CK_SESSION_HANDLE hSession, CK_ATTRIBUTE_PTR pTemplate,
                          CK_ULONG ulCount)
{
 800342c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  CK_RV e_ret_status;
  kms_find_ctx_t *p_ctx;

  /* ========== Check active operation status ========== */

  if (!KMS_IS_INITIALIZED())
 8003430:	4f22      	ldr	r7, [pc, #136]	@ (80034bc <KMS_FindObjectsInit+0x90>)
 8003432:	783b      	ldrb	r3, [r7, #0]
{
 8003434:	b085      	sub	sp, #20
 8003436:	4606      	mov	r6, r0
 8003438:	4688      	mov	r8, r1
 800343a:	4614      	mov	r4, r2
  if (!KMS_IS_INITIALIZED())
 800343c:	b3b3      	cbz	r3, 80034ac <KMS_FindObjectsInit+0x80>
  {
    return CKR_CRYPTOKI_NOT_INITIALIZED;
  }
  if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 800343e:	f001 f9d3 	bl	80047e8 <KMS_CheckSessionHdle>
 8003442:	bbb0      	cbnz	r0, 80034b2 <KMS_FindObjectsInit+0x86>
  {
    return CKR_SESSION_HANDLE_INVALID;
  }
  /* No processing already on going  */
  if (KMS_GETSESSION(hSession).state != KMS_SESSION_IDLE)
 8003444:	f106 39ff 	add.w	r9, r6, #4294967295	@ 0xffffffff
 8003448:	2324      	movs	r3, #36	@ 0x24
 800344a:	fb03 7309 	mla	r3, r3, r9, r7
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	bb7b      	cbnz	r3, 80034b2 <KMS_FindObjectsInit+0x86>
    return CKR_SESSION_HANDLE_INVALID;
  }

  /* Check input parameters */
  /* Note: pTemplate = NULL_PTR is ok only if ulCount = 0 */
  if (((pTemplate == NULL_PTR) && (ulCount > 0U)) || ((pTemplate != NULL_PTR) && (ulCount == 0U)))
 8003452:	f1b8 0f00 	cmp.w	r8, #0
 8003456:	d102      	bne.n	800345e <KMS_FindObjectsInit+0x32>
 8003458:	b11c      	cbz	r4, 8003462 <KMS_FindObjectsInit+0x36>
  {
    return CKR_ARGUMENTS_BAD;
 800345a:	2407      	movs	r4, #7
 800345c:	e01d      	b.n	800349a <KMS_FindObjectsInit+0x6e>
  if (((pTemplate == NULL_PTR) && (ulCount > 0U)) || ((pTemplate != NULL_PTR) && (ulCount == 0U)))
 800345e:	2c00      	cmp	r4, #0
 8003460:	d0fb      	beq.n	800345a <KMS_FindObjectsInit+0x2e>
  }

  p_ctx = KMS_Alloc(hSession, sizeof(kms_find_ctx_t));
 8003462:	21f4      	movs	r1, #244	@ 0xf4
 8003464:	4630      	mov	r0, r6
 8003466:	f001 fb45 	bl	8004af4 <KMS_Alloc>
  if (p_ctx == NULL_PTR)
 800346a:	4605      	mov	r5, r0
 800346c:	b318      	cbz	r0, 80034b6 <KMS_FindObjectsInit+0x8a>
  }

  /* ========== Look for the objects  ========== */
  for (uint32_t i = 0; i < (sizeof(p_ctx->searchHandles) / sizeof(CK_OBJECT_HANDLE)); i++)
  {
    p_ctx->searchHandles[i] = KMS_HANDLE_KEY_NOT_KNOWN;
 800346e:	22f0      	movs	r2, #240	@ 0xf0
 8003470:	2100      	movs	r1, #0
 8003472:	f003 fbc3 	bl	8006bfc <memset>
  }

  /* Note: if ulCount was 0, searchHandles will be filled with a list of all objects handles */
  e_ret_status = KMS_FindObjectsFromTemplate(hSession,
 8003476:	e9cd 8400 	strd	r8, r4, [sp]
 800347a:	ab03      	add	r3, sp, #12
 800347c:	223c      	movs	r2, #60	@ 0x3c
 800347e:	4629      	mov	r1, r5
 8003480:	4630      	mov	r0, r6
 8003482:	f002 f917 	bl	80056b4 <KMS_FindObjectsFromTemplate>
                                             sizeof(p_ctx->searchHandles) / sizeof(CK_OBJECT_HANDLE),
                                             &tmp,
                                             pTemplate,
                                             ulCount);

  if (e_ret_status == CKR_OK)
 8003486:	4604      	mov	r4, r0
 8003488:	b958      	cbnz	r0, 80034a2 <KMS_FindObjectsInit+0x76>
  {
    p_ctx->searchIndex = 0;
    KMS_GETSESSION(hSession).state = KMS_SESSION_SEARCH;
 800348a:	2324      	movs	r3, #36	@ 0x24
 800348c:	fb03 7709 	mla	r7, r3, r9, r7
 8003490:	2306      	movs	r3, #6
    p_ctx->searchIndex = 0;
 8003492:	f8c5 00f0 	str.w	r0, [r5, #240]	@ 0xf0
    KMS_GETSESSION(hSession).state = KMS_SESSION_SEARCH;
 8003496:	60fb      	str	r3, [r7, #12]
    KMS_GETSESSION(hSession).pCtx = p_ctx;
 8003498:	62bd      	str	r5, [r7, #40]	@ 0x28

  return e_ret_status;
#else /* KMS_SEARCH */
  return CKR_FUNCTION_NOT_SUPPORTED;
#endif /* KMS_SEARCH */
}
 800349a:	4620      	mov	r0, r4
 800349c:	b005      	add	sp, #20
 800349e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    KMS_Free(hSession, p_ctx);
 80034a2:	4629      	mov	r1, r5
 80034a4:	4630      	mov	r0, r6
 80034a6:	f001 fb49 	bl	8004b3c <KMS_Free>
 80034aa:	e7f6      	b.n	800349a <KMS_FindObjectsInit+0x6e>
    return CKR_CRYPTOKI_NOT_INITIALIZED;
 80034ac:	f44f 74c8 	mov.w	r4, #400	@ 0x190
 80034b0:	e7f3      	b.n	800349a <KMS_FindObjectsInit+0x6e>
    return CKR_SESSION_HANDLE_INVALID;
 80034b2:	24b3      	movs	r4, #179	@ 0xb3
 80034b4:	e7f1      	b.n	800349a <KMS_FindObjectsInit+0x6e>
    return CKR_DEVICE_MEMORY;
 80034b6:	2431      	movs	r4, #49	@ 0x31
 80034b8:	e7ef      	b.n	800349a <KMS_FindObjectsInit+0x6e>
 80034ba:	bf00      	nop
 80034bc:	20000c48 	.word	0x20000c48

080034c0 <KMS_FindObjects>:
  *         CKR_FUNCTION_NOT_SUPPORTED
  *         CKR_SESSION_HANDLE_INVALID
  */
CK_RV KMS_FindObjects(CK_SESSION_HANDLE hSession, CK_OBJECT_HANDLE_PTR phObject,
                      CK_ULONG ulMaxObjectCount,  CK_ULONG_PTR pulObjectCount)
{
 80034c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if defined(KMS_SEARCH)
  kms_find_ctx_t *p_ctx;
  uint32_t i;

  if (!KMS_IS_INITIALIZED())
 80034c4:	4d19      	ldr	r5, [pc, #100]	@ (800352c <KMS_FindObjects+0x6c>)
{
 80034c6:	461c      	mov	r4, r3
  if (!KMS_IS_INITIALIZED())
 80034c8:	782b      	ldrb	r3, [r5, #0]
{
 80034ca:	4606      	mov	r6, r0
 80034cc:	4688      	mov	r8, r1
 80034ce:	4617      	mov	r7, r2
  if (!KMS_IS_INITIALIZED())
 80034d0:	b91b      	cbnz	r3, 80034da <KMS_FindObjects+0x1a>
  {
    return CKR_CRYPTOKI_NOT_INITIALIZED;
 80034d2:	f44f 70c8 	mov.w	r0, #400	@ 0x190

  return CKR_OK;
#else /* KMS_SEARCH */
  return CKR_FUNCTION_NOT_SUPPORTED;
#endif /* KMS_SEARCH */
}
 80034d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 80034da:	f001 f985 	bl	80047e8 <KMS_CheckSessionHdle>
 80034de:	bb08      	cbnz	r0, 8003524 <KMS_FindObjects+0x64>
  if (KMS_GETSESSION(hSession).state != KMS_SESSION_SEARCH)
 80034e0:	2324      	movs	r3, #36	@ 0x24
 80034e2:	3e01      	subs	r6, #1
 80034e4:	fb03 5506 	mla	r5, r3, r6, r5
 80034e8:	68eb      	ldr	r3, [r5, #12]
 80034ea:	2b06      	cmp	r3, #6
 80034ec:	d1f1      	bne.n	80034d2 <KMS_FindObjects+0x12>
  if ((phObject == NULL_PTR) || (pulObjectCount == NULL_PTR) || (ulMaxObjectCount <= 0UL))
 80034ee:	f1b8 0f00 	cmp.w	r8, #0
 80034f2:	d019      	beq.n	8003528 <KMS_FindObjects+0x68>
 80034f4:	b1c4      	cbz	r4, 8003528 <KMS_FindObjects+0x68>
 80034f6:	b1bf      	cbz	r7, 8003528 <KMS_FindObjects+0x68>
  p_ctx = KMS_GETSESSION(hSession).pCtx;
 80034f8:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
  *pulObjectCount = 0;
 80034fa:	6020      	str	r0, [r4, #0]
  for (i = p_ctx->searchIndex; (i < (sizeof(p_ctx->searchHandles) / sizeof(CK_OBJECT_HANDLE)))
 80034fc:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
       && (*pulObjectCount < ulMaxObjectCount); i++)
 8003500:	2b3b      	cmp	r3, #59	@ 0x3b
 8003502:	d902      	bls.n	800350a <KMS_FindObjects+0x4a>
  p_ctx->searchIndex = i;
 8003504:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
  return CKR_OK;
 8003508:	e7e5      	b.n	80034d6 <KMS_FindObjects+0x16>
       && (*pulObjectCount < ulMaxObjectCount); i++)
 800350a:	6821      	ldr	r1, [r4, #0]
 800350c:	42b9      	cmp	r1, r7
 800350e:	d2f9      	bcs.n	8003504 <KMS_FindObjects+0x44>
    if (p_ctx->searchHandles[i] != KMS_HANDLE_KEY_NOT_KNOWN)
 8003510:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8003514:	b125      	cbz	r5, 8003520 <KMS_FindObjects+0x60>
      phObject[*pulObjectCount] = p_ctx->searchHandles[i];
 8003516:	f848 5021 	str.w	r5, [r8, r1, lsl #2]
      *pulObjectCount += 1UL;
 800351a:	6821      	ldr	r1, [r4, #0]
 800351c:	3101      	adds	r1, #1
 800351e:	6021      	str	r1, [r4, #0]
       && (*pulObjectCount < ulMaxObjectCount); i++)
 8003520:	3301      	adds	r3, #1
 8003522:	e7ed      	b.n	8003500 <KMS_FindObjects+0x40>
    return CKR_SESSION_HANDLE_INVALID;
 8003524:	20b3      	movs	r0, #179	@ 0xb3
 8003526:	e7d6      	b.n	80034d6 <KMS_FindObjects+0x16>
    return CKR_ARGUMENTS_BAD;
 8003528:	2007      	movs	r0, #7
 800352a:	e7d4      	b.n	80034d6 <KMS_FindObjects+0x16>
 800352c:	20000c48 	.word	0x20000c48

08003530 <KMS_FindObjectsFinal>:
  *         CKR_CRYPTOKI_NOT_INITIALIZED
  *         CKR_FUNCTION_NOT_SUPPORTED
  *         CKR_SESSION_HANDLE_INVALID
  */
CK_RV KMS_FindObjectsFinal(CK_SESSION_HANDLE hSession)
{
 8003530:	b570      	push	{r4, r5, r6, lr}
#if defined(KMS_SEARCH)
  /* ========== Check active operation status ========== */

  if (!KMS_IS_INITIALIZED())
 8003532:	4d0f      	ldr	r5, [pc, #60]	@ (8003570 <KMS_FindObjectsFinal+0x40>)
 8003534:	782b      	ldrb	r3, [r5, #0]
{
 8003536:	4606      	mov	r6, r0
  if (!KMS_IS_INITIALIZED())
 8003538:	b91b      	cbnz	r3, 8003542 <KMS_FindObjectsFinal+0x12>
  {
    return CKR_CRYPTOKI_NOT_INITIALIZED;
 800353a:	f44f 74c8 	mov.w	r4, #400	@ 0x190

  return CKR_OK;
#else /* KMS_SEARCH */
  return CKR_FUNCTION_NOT_SUPPORTED;
#endif /* KMS_SEARCH */
}
 800353e:	4620      	mov	r0, r4
 8003540:	bd70      	pop	{r4, r5, r6, pc}
  if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8003542:	f001 f951 	bl	80047e8 <KMS_CheckSessionHdle>
 8003546:	4604      	mov	r4, r0
 8003548:	b980      	cbnz	r0, 800356c <KMS_FindObjectsFinal+0x3c>
  if (KMS_GETSESSION(hSession).state != KMS_SESSION_SEARCH)
 800354a:	1e73      	subs	r3, r6, #1
 800354c:	2224      	movs	r2, #36	@ 0x24
 800354e:	fb02 5503 	mla	r5, r2, r3, r5
 8003552:	68eb      	ldr	r3, [r5, #12]
 8003554:	2b06      	cmp	r3, #6
 8003556:	d1f0      	bne.n	800353a <KMS_FindObjectsFinal+0xa>
  if (KMS_GETSESSION(hSession).pCtx != NULL_PTR)
 8003558:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 800355a:	b119      	cbz	r1, 8003564 <KMS_FindObjectsFinal+0x34>
    KMS_Free(hSession, KMS_GETSESSION(hSession).pCtx);
 800355c:	4630      	mov	r0, r6
 800355e:	f001 faed 	bl	8004b3c <KMS_Free>
    KMS_GETSESSION(hSession).pCtx = NULL_PTR;
 8003562:	62ac      	str	r4, [r5, #40]	@ 0x28
  KMS_SetStateIdle(hSession);
 8003564:	4630      	mov	r0, r6
 8003566:	f001 f975 	bl	8004854 <KMS_SetStateIdle>
  return CKR_OK;
 800356a:	e7e8      	b.n	800353e <KMS_FindObjectsFinal+0xe>
    return CKR_SESSION_HANDLE_INVALID;
 800356c:	24b3      	movs	r4, #179	@ 0xb3
 800356e:	e7e6      	b.n	800353e <KMS_FindObjectsFinal+0xe>
 8003570:	20000c48 	.word	0x20000c48

08003574 <KMS_ECC_LoadCurve>:
  * @param  p_EC_st Elliptic curve
  * @retval CKR_OK if found
  *         CKR_GENERAL_ERROR otherwise
  */
CK_RV KMS_ECC_LoadCurve(kms_attr_t *p_EC_Param, CA_EC_stt *p_EC_st)
{
 8003574:	b530      	push	{r4, r5, lr}
 8003576:	460c      	mov	r4, r1
 8003578:	b089      	sub	sp, #36	@ 0x24
#if defined(KMS_EC_SECP384)
  /* SECP384R1 curve OID */
  static const uint8_t ref_secp384r1[] = {0x06, 0x05, 0x2b, 0x81, 0x04, 0x00, 0x22};
#endif /* KMS_EC_SECP384 */

  if ((p_EC_Param != NULL) && (p_EC_Param->size > 0UL) && (p_EC_st != NULL))
 800357a:	4605      	mov	r5, r0
 800357c:	b308      	cbz	r0, 80035c2 <KMS_ECC_LoadCurve+0x4e>
 800357e:	6841      	ldr	r1, [r0, #4]
 8003580:	b1f9      	cbz	r1, 80035c2 <KMS_ECC_LoadCurve+0x4e>
 8003582:	b1f4      	cbz	r4, 80035c2 <KMS_ECC_LoadCurve+0x4e>
  {
    uint8_t   u8ParamAttrib[32];

    /* Read value from the structure. Need to be translated from
    (uint32_t*) to (uint8_t *) */
    KMS_Objects_BlobU32_2_u8ptr(&(p_EC_Param->data[0]), p_EC_Param->size, u8ParamAttrib);
 8003584:	466a      	mov	r2, sp
 8003586:	3008      	adds	r0, #8
 8003588:	f002 f937 	bl	80057fa <KMS_Objects_BlobU32_2_u8ptr>
      e_ret_status = CKR_OK;
    }
#endif /* KMS_EC_SECP192 */
#if defined(KMS_EC_SECP256)
    /* secp256r1 */
    if (memcmp(u8ParamAttrib, ref_secp256r1, p_EC_Param->size) == 0)
 800358c:	686a      	ldr	r2, [r5, #4]
 800358e:	490e      	ldr	r1, [pc, #56]	@ (80035c8 <KMS_ECC_LoadCurve+0x54>)
 8003590:	4668      	mov	r0, sp
 8003592:	f003 fb23 	bl	8006bdc <memcmp>
 8003596:	b9a0      	cbnz	r0, 80035c2 <KMS_ECC_LoadCurve+0x4e>
    {
      p_EC_st->pmA = P_256_a;
 8003598:	4b0c      	ldr	r3, [pc, #48]	@ (80035cc <KMS_ECC_LoadCurve+0x58>)
 800359a:	6023      	str	r3, [r4, #0]
      p_EC_st->pmB = P_256_b;
 800359c:	4b0c      	ldr	r3, [pc, #48]	@ (80035d0 <KMS_ECC_LoadCurve+0x5c>)
 800359e:	60a3      	str	r3, [r4, #8]
      p_EC_st->pmP = P_256_p;
 80035a0:	4b0c      	ldr	r3, [pc, #48]	@ (80035d4 <KMS_ECC_LoadCurve+0x60>)
 80035a2:	6123      	str	r3, [r4, #16]
      p_EC_st->pmN = P_256_n;
 80035a4:	4b0c      	ldr	r3, [pc, #48]	@ (80035d8 <KMS_ECC_LoadCurve+0x64>)
 80035a6:	61a3      	str	r3, [r4, #24]
      p_EC_st->pmGx = P_256_Gx;
 80035a8:	4b0c      	ldr	r3, [pc, #48]	@ (80035dc <KMS_ECC_LoadCurve+0x68>)
 80035aa:	6223      	str	r3, [r4, #32]
      p_EC_st->pmGy = P_256_Gy;
 80035ac:	4b0c      	ldr	r3, [pc, #48]	@ (80035e0 <KMS_ECC_LoadCurve+0x6c>)
 80035ae:	62a3      	str	r3, [r4, #40]	@ 0x28
      p_EC_st->mAsize = (int32_t)sizeof(P_256_a);
 80035b0:	2320      	movs	r3, #32
 80035b2:	6063      	str	r3, [r4, #4]
      p_EC_st->mBsize = (int32_t)sizeof(P_256_b);
 80035b4:	60e3      	str	r3, [r4, #12]
      p_EC_st->mNsize = (int32_t)sizeof(P_256_n);
 80035b6:	61e3      	str	r3, [r4, #28]
      p_EC_st->mPsize = (int32_t)sizeof(P_256_p);
 80035b8:	6163      	str	r3, [r4, #20]
      p_EC_st->mGxsize = (int32_t)sizeof(P_256_Gx);
 80035ba:	6263      	str	r3, [r4, #36]	@ 0x24
      p_EC_st->mGysize = (int32_t)sizeof(P_256_Gy);
 80035bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
      e_ret_status = CKR_OK;
    }
#endif /* KMS_EC_SECP384 */
  }
  return e_ret_status;
}
 80035be:	b009      	add	sp, #36	@ 0x24
 80035c0:	bd30      	pop	{r4, r5, pc}
  CK_RV e_ret_status = CKR_GENERAL_ERROR;
 80035c2:	2005      	movs	r0, #5
  return e_ret_status;
 80035c4:	e7fb      	b.n	80035be <KMS_ECC_LoadCurve+0x4a>
 80035c6:	bf00      	nop
 80035c8:	08006d40 	.word	0x08006d40
 80035cc:	08006d20 	.word	0x08006d20
 80035d0:	08006d00 	.word	0x08006d00
 80035d4:	08006ce0 	.word	0x08006ce0
 80035d8:	08006cc0 	.word	0x08006cc0
 80035dc:	08006ca0 	.word	0x08006ca0
 80035e0:	08006c80 	.word	0x08006c80

080035e4 <encrypt_decrypt_init>:
  */
static CK_RV encrypt_decrypt_init(CK_SESSION_HANDLE hSession,
                                  CK_MECHANISM_PTR pMechanism,
                                  CK_OBJECT_HANDLE hKey,
                                  int32_t encdec_flag)
{
 80035e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CK_RV e_ret_status = CKR_FUNCTION_FAILED;

  if (!KMS_IS_INITIALIZED())
 80035e8:	4eaf      	ldr	r6, [pc, #700]	@ (80038a8 <encrypt_decrypt_init+0x2c4>)
{
 80035ea:	461f      	mov	r7, r3
  if (!KMS_IS_INITIALIZED())
 80035ec:	7833      	ldrb	r3, [r6, #0]
{
 80035ee:	4605      	mov	r5, r0
 80035f0:	460c      	mov	r4, r1
 80035f2:	4691      	mov	r9, r2
  if (!KMS_IS_INITIALIZED())
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 816d 	beq.w	80038d4 <encrypt_decrypt_init+0x2f0>
  {
    return CKR_CRYPTOKI_NOT_INITIALIZED;
  }
  if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 80035fa:	f001 f8f5 	bl	80047e8 <KMS_CheckSessionHdle>
 80035fe:	2800      	cmp	r0, #0
 8003600:	f040 816b 	bne.w	80038da <encrypt_decrypt_init+0x2f6>
  {
    return CKR_SESSION_HANDLE_INVALID;
  }
  /* No processing already on going  */
  if (KMS_GETSESSION(hSession).state != KMS_SESSION_IDLE)
 8003604:	f105 38ff 	add.w	r8, r5, #4294967295	@ 0xffffffff
 8003608:	2324      	movs	r3, #36	@ 0x24
 800360a:	fb03 6308 	mla	r3, r3, r8, r6
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	2b00      	cmp	r3, #0
 8003612:	f040 8162 	bne.w	80038da <encrypt_decrypt_init+0x2f6>
  {
    return CKR_SESSION_HANDLE_INVALID;
  }
  /* Check parameter */
  if (pMechanism == NULL_PTR)
 8003616:	b324      	cbz	r4, 8003662 <encrypt_decrypt_init+0x7e>
  {
    return CKR_ARGUMENTS_BAD;
  }
  switch (pMechanism->mechanism)
 8003618:	6823      	ldr	r3, [r4, #0]
 800361a:	f241 0282 	movw	r2, #4226	@ 0x1082
 800361e:	4293      	cmp	r3, r2
 8003620:	d00c      	beq.n	800363c <encrypt_decrypt_init+0x58>
 8003622:	f241 0287 	movw	r2, #4231	@ 0x1087
 8003626:	4293      	cmp	r3, r2
 8003628:	f000 80cb 	beq.w	80037c2 <encrypt_decrypt_init+0x1de>
 800362c:	f241 0281 	movw	r2, #4225	@ 0x1081
 8003630:	4293      	cmp	r3, r2
 8003632:	d06c      	beq.n	800370e <encrypt_decrypt_init+0x12a>
 8003634:	2070      	movs	r0, #112	@ 0x70
      KMS_GETSESSION(hSession).state = KMS_SESSION_DECRYPT;
    }
  }

  return e_ret_status;
}
 8003636:	b003      	add	sp, #12
 8003638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pkms_object = KMS_Objects_GetPointer(hKey);
 800363c:	4648      	mov	r0, r9
 800363e:	f001 ff99 	bl	8005574 <KMS_Objects_GetPointer>
      if ((pkms_object != NULL_PTR) &&
 8003642:	4601      	mov	r1, r0
 8003644:	b908      	cbnz	r0, 800364a <encrypt_decrypt_init+0x66>
        e_ret_status = CKR_OBJECT_HANDLE_INVALID;
 8003646:	2082      	movs	r0, #130	@ 0x82
 8003648:	e7f5      	b.n	8003636 <encrypt_decrypt_init+0x52>
      if ((pkms_object != NULL_PTR) &&
 800364a:	6802      	ldr	r2, [r0, #0]
 800364c:	4b97      	ldr	r3, [pc, #604]	@ (80038ac <encrypt_decrypt_init+0x2c8>)
 800364e:	429a      	cmp	r2, r3
 8003650:	d1f9      	bne.n	8003646 <encrypt_decrypt_init+0x62>
          (pkms_object->version == KMS_ABI_VERSION_CK_2_40) &&
 8003652:	6842      	ldr	r2, [r0, #4]
 8003654:	f46f 7a0f 	mvn.w	sl, #572	@ 0x23c
 8003658:	4453      	add	r3, sl
 800365a:	429a      	cmp	r2, r3
 800365c:	d1f3      	bne.n	8003646 <encrypt_decrypt_init+0x62>
        if ((pMechanism->pParameter != NULL_PTR) &&
 800365e:	6863      	ldr	r3, [r4, #4]
 8003660:	b90b      	cbnz	r3, 8003666 <encrypt_decrypt_init+0x82>
    return CKR_ARGUMENTS_BAD;
 8003662:	2007      	movs	r0, #7
 8003664:	e7e7      	b.n	8003636 <encrypt_decrypt_init+0x52>
        if ((pMechanism->pParameter != NULL_PTR) &&
 8003666:	68a3      	ldr	r3, [r4, #8]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d0fa      	beq.n	8003662 <encrypt_decrypt_init+0x7e>
          e_ret_status = KMS_Objects_SearchAttributes(CKA_VALUE, pkms_object, &P_pKeyAttribute);
 800366c:	aa01      	add	r2, sp, #4
 800366e:	2011      	movs	r0, #17
 8003670:	f002 f806 	bl	8005680 <KMS_Objects_SearchAttributes>
          if (e_ret_status == CKR_OK)
 8003674:	2800      	cmp	r0, #0
 8003676:	d1de      	bne.n	8003636 <encrypt_decrypt_init+0x52>
            if ((P_pKeyAttribute->size == CA_CRL_AES128_KEY) ||     /* 128 bits */
 8003678:	9b01      	ldr	r3, [sp, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f023 0208 	bic.w	r2, r3, #8
 8003680:	2a10      	cmp	r2, #16
 8003682:	d001      	beq.n	8003688 <encrypt_decrypt_init+0xa4>
                (P_pKeyAttribute->size == CA_CRL_AES192_KEY) ||     /* 192 bits */
 8003684:	2b20      	cmp	r3, #32
 8003686:	d1ec      	bne.n	8003662 <encrypt_decrypt_init+0x7e>
              p_ctx = KMS_Alloc(hSession, sizeof(kms_aes_cbc_ec_ctx_t));
 8003688:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 800368c:	4628      	mov	r0, r5
 800368e:	f001 fa31 	bl	8004af4 <KMS_Alloc>
              if (p_ctx == NULL_PTR)
 8003692:	4682      	mov	sl, r0
 8003694:	2800      	cmp	r0, #0
 8003696:	f000 8092 	beq.w	80037be <encrypt_decrypt_init+0x1da>
              KMS_GETSESSION(hSession).hKey = hKey;
 800369a:	f04f 0b24 	mov.w	fp, #36	@ 0x24
 800369e:	fb0b 6b08 	mla	fp, fp, r8, r6
              KMS_GETSESSION(hSession).Mechanism = pMechanism->mechanism;
 80036a2:	6823      	ldr	r3, [r4, #0]
              KMS_GETSESSION(hSession).hKey = hKey;
 80036a4:	f8cb 9024 	str.w	r9, [fp, #36]	@ 0x24
              p_ctx->ca_ctx.mFlags = CA_E_SK_DEFAULT;
 80036a8:	f04f 0900 	mov.w	r9, #0
              KMS_GETSESSION(hSession).Mechanism = pMechanism->mechanism;
 80036ac:	f8cb 3020 	str.w	r3, [fp, #32]
              KMS_GETSESSION(hSession).pCtx = p_ctx;
 80036b0:	f8cb 0028 	str.w	r0, [fp, #40]	@ 0x28
              p_ctx->ca_ctx.mFlags = CA_E_SK_DEFAULT;
 80036b4:	f880 9024 	strb.w	r9, [r0, #36]	@ 0x24
              p_ctx->ca_ctx.mKeySize = (int32_t)P_pKeyAttribute->size ;
 80036b8:	9801      	ldr	r0, [sp, #4]
 80036ba:	6841      	ldr	r1, [r0, #4]
 80036bc:	f8ca 1044 	str.w	r1, [sl, #68]	@ 0x44
              KMS_Objects_BlobU32_2_u8ptr(&(P_pKeyAttribute->data[0]), P_pKeyAttribute->size, p_ctx->key);
 80036c0:	4652      	mov	r2, sl
 80036c2:	3008      	adds	r0, #8
              p_ctx->ca_ctx.pmKey = p_ctx->key;
 80036c4:	f8ca a028 	str.w	sl, [sl, #40]	@ 0x28
              KMS_Objects_BlobU32_2_u8ptr(&(P_pKeyAttribute->data[0]), P_pKeyAttribute->size, p_ctx->key);
 80036c8:	f002 f897 	bl	80057fa <KMS_Objects_BlobU32_2_u8ptr>
              p_ctx->ca_ctx.mIvSize = (int32_t)pMechanism->ulParameterLen;
 80036cc:	68a3      	ldr	r3, [r4, #8]
                if (CA_AES_CBC_Encrypt_Init(&(p_ctx->ca_ctx),
 80036ce:	6862      	ldr	r2, [r4, #4]
              p_ctx->ca_ctx.mIvSize = (int32_t)pMechanism->ulParameterLen;
 80036d0:	f8ca 3030 	str.w	r3, [sl, #48]	@ 0x30
                if (CA_AES_CBC_Encrypt_Init(&(p_ctx->ca_ctx),
 80036d4:	f10a 0020 	add.w	r0, sl, #32
 80036d8:	4651      	mov	r1, sl
              if (encdec_flag == KMS_FLAG_ENCRYPT)
 80036da:	b95f      	cbnz	r7, 80036f4 <encrypt_decrypt_init+0x110>
                if (CA_AES_CBC_Encrypt_Init(&(p_ctx->ca_ctx),
 80036dc:	f7fe fd08 	bl	80020f0 <CA_AES_CBC_Encrypt_Init>
                if (CA_AES_ECB_Encrypt_Init(&(p_ctx->ca_ctx),
 80036e0:	2800      	cmp	r0, #0
 80036e2:	f000 80ee 	beq.w	80038c2 <encrypt_decrypt_init+0x2de>
                  KMS_Free(hSession, p_ctx);
 80036e6:	4651      	mov	r1, sl
 80036e8:	4628      	mov	r0, r5
 80036ea:	f001 fa27 	bl	8004b3c <KMS_Free>
                  KMS_GETSESSION(hSession).pCtx = NULL_PTR;
 80036ee:	f8cb 7028 	str.w	r7, [fp, #40]	@ 0x28
  if (e_ret_status == CKR_OK)
 80036f2:	e00a      	b.n	800370a <encrypt_decrypt_init+0x126>
                if (CA_AES_CBC_Decrypt_Init(&(p_ctx->ca_ctx),
 80036f4:	f7fe fda2 	bl	800223c <CA_AES_CBC_Decrypt_Init>
 80036f8:	2800      	cmp	r0, #0
 80036fa:	f000 80e9 	beq.w	80038d0 <encrypt_decrypt_init+0x2ec>
                  KMS_Free(hSession, p_ctx);
 80036fe:	4651      	mov	r1, sl
 8003700:	4628      	mov	r0, r5
 8003702:	f001 fa1b 	bl	8004b3c <KMS_Free>
                  KMS_GETSESSION(hSession).pCtx = NULL_PTR;
 8003706:	f8cb 9028 	str.w	r9, [fp, #40]	@ 0x28
      KMS_GETSESSION(hSession).state = KMS_SESSION_DECRYPT;
 800370a:	2006      	movs	r0, #6
 800370c:	e793      	b.n	8003636 <encrypt_decrypt_init+0x52>
      pkms_object = KMS_Objects_GetPointer(hKey);
 800370e:	4648      	mov	r0, r9
 8003710:	f001 ff30 	bl	8005574 <KMS_Objects_GetPointer>
      if ((pkms_object != NULL_PTR) &&
 8003714:	4601      	mov	r1, r0
 8003716:	2800      	cmp	r0, #0
 8003718:	d095      	beq.n	8003646 <encrypt_decrypt_init+0x62>
 800371a:	6802      	ldr	r2, [r0, #0]
 800371c:	4b63      	ldr	r3, [pc, #396]	@ (80038ac <encrypt_decrypt_init+0x2c8>)
 800371e:	429a      	cmp	r2, r3
 8003720:	d191      	bne.n	8003646 <encrypt_decrypt_init+0x62>
          (pkms_object->version == KMS_ABI_VERSION_CK_2_40) &&
 8003722:	6842      	ldr	r2, [r0, #4]
 8003724:	f46f 7c0f 	mvn.w	ip, #572	@ 0x23c
 8003728:	4463      	add	r3, ip
 800372a:	429a      	cmp	r2, r3
 800372c:	d18b      	bne.n	8003646 <encrypt_decrypt_init+0x62>
        if ((pMechanism->pParameter == NULL_PTR) &&
 800372e:	6863      	ldr	r3, [r4, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d196      	bne.n	8003662 <encrypt_decrypt_init+0x7e>
 8003734:	68a3      	ldr	r3, [r4, #8]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d193      	bne.n	8003662 <encrypt_decrypt_init+0x7e>
          e_ret_status = KMS_Objects_SearchAttributes(CKA_VALUE, pkms_object, &P_pKeyAttribute);
 800373a:	aa01      	add	r2, sp, #4
 800373c:	2011      	movs	r0, #17
 800373e:	f001 ff9f 	bl	8005680 <KMS_Objects_SearchAttributes>
          if (e_ret_status == CKR_OK)
 8003742:	2800      	cmp	r0, #0
 8003744:	f47f af77 	bne.w	8003636 <encrypt_decrypt_init+0x52>
            if ((P_pKeyAttribute->size == CA_CRL_AES128_KEY) ||     /* 128 bits */
 8003748:	9b01      	ldr	r3, [sp, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f023 0208 	bic.w	r2, r3, #8
 8003750:	2a10      	cmp	r2, #16
 8003752:	d001      	beq.n	8003758 <encrypt_decrypt_init+0x174>
                (P_pKeyAttribute->size == CA_CRL_AES192_KEY) ||     /* 192 bits */
 8003754:	2b20      	cmp	r3, #32
 8003756:	d184      	bne.n	8003662 <encrypt_decrypt_init+0x7e>
              p_ctx = KMS_Alloc(hSession, sizeof(kms_aes_ecb_ec_ctx_t));
 8003758:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 800375c:	4628      	mov	r0, r5
 800375e:	f001 f9c9 	bl	8004af4 <KMS_Alloc>
              if (p_ctx == NULL_PTR)
 8003762:	4682      	mov	sl, r0
 8003764:	b358      	cbz	r0, 80037be <encrypt_decrypt_init+0x1da>
              KMS_GETSESSION(hSession).hKey = hKey;
 8003766:	f04f 0b24 	mov.w	fp, #36	@ 0x24
 800376a:	fb0b 6b08 	mla	fp, fp, r8, r6
              KMS_GETSESSION(hSession).Mechanism = pMechanism->mechanism;
 800376e:	6823      	ldr	r3, [r4, #0]
              KMS_GETSESSION(hSession).hKey = hKey;
 8003770:	f8cb 9024 	str.w	r9, [fp, #36]	@ 0x24
              p_ctx->ca_ctx.mFlags = CA_E_SK_DEFAULT;
 8003774:	2400      	movs	r4, #0
              KMS_GETSESSION(hSession).pCtx = p_ctx;
 8003776:	f8cb 0028 	str.w	r0, [fp, #40]	@ 0x28
              KMS_GETSESSION(hSession).Mechanism = pMechanism->mechanism;
 800377a:	f8cb 3020 	str.w	r3, [fp, #32]
              p_ctx->ca_ctx.mFlags = CA_E_SK_DEFAULT;
 800377e:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
              p_ctx->ca_ctx.mKeySize = (int32_t)P_pKeyAttribute->size ;
 8003782:	9801      	ldr	r0, [sp, #4]
 8003784:	6841      	ldr	r1, [r0, #4]
 8003786:	f8ca 1044 	str.w	r1, [sl, #68]	@ 0x44
              KMS_Objects_BlobU32_2_u8ptr(&(P_pKeyAttribute->data[0]), P_pKeyAttribute->size, p_ctx->key);
 800378a:	3008      	adds	r0, #8
 800378c:	4652      	mov	r2, sl
 800378e:	f002 f834 	bl	80057fa <KMS_Objects_BlobU32_2_u8ptr>
                if (CA_AES_ECB_Encrypt_Init(&(p_ctx->ca_ctx),
 8003792:	f10a 0020 	add.w	r0, sl, #32
              if (encdec_flag == KMS_FLAG_ENCRYPT)
 8003796:	b927      	cbnz	r7, 80037a2 <encrypt_decrypt_init+0x1be>
                if (CA_AES_ECB_Encrypt_Init(&(p_ctx->ca_ctx),
 8003798:	463a      	mov	r2, r7
 800379a:	4651      	mov	r1, sl
 800379c:	f7fe fe52 	bl	8002444 <CA_AES_ECB_Encrypt_Init>
 80037a0:	e79e      	b.n	80036e0 <encrypt_decrypt_init+0xfc>
                if (CA_AES_ECB_Decrypt_Init(&(p_ctx->ca_ctx),
 80037a2:	4622      	mov	r2, r4
 80037a4:	4651      	mov	r1, sl
 80037a6:	f7fe fec1 	bl	800252c <CA_AES_ECB_Decrypt_Init>
 80037aa:	2800      	cmp	r0, #0
 80037ac:	f000 8090 	beq.w	80038d0 <encrypt_decrypt_init+0x2ec>
                  KMS_Free(hSession, p_ctx);
 80037b0:	4651      	mov	r1, sl
 80037b2:	4628      	mov	r0, r5
 80037b4:	f001 f9c2 	bl	8004b3c <KMS_Free>
                  KMS_GETSESSION(hSession).pCtx = NULL_PTR;
 80037b8:	f8cb 4028 	str.w	r4, [fp, #40]	@ 0x28
  if (e_ret_status == CKR_OK)
 80037bc:	e7a5      	b.n	800370a <encrypt_decrypt_init+0x126>
                e_ret_status = CKR_DEVICE_MEMORY;
 80037be:	2031      	movs	r0, #49	@ 0x31
 80037c0:	e739      	b.n	8003636 <encrypt_decrypt_init+0x52>
      pkms_object = KMS_Objects_GetPointer(hKey);
 80037c2:	4648      	mov	r0, r9
 80037c4:	f001 fed6 	bl	8005574 <KMS_Objects_GetPointer>
      if ((pkms_object != NULL_PTR) &&
 80037c8:	4601      	mov	r1, r0
 80037ca:	2800      	cmp	r0, #0
 80037cc:	f43f af3b 	beq.w	8003646 <encrypt_decrypt_init+0x62>
 80037d0:	6802      	ldr	r2, [r0, #0]
 80037d2:	4b36      	ldr	r3, [pc, #216]	@ (80038ac <encrypt_decrypt_init+0x2c8>)
 80037d4:	429a      	cmp	r2, r3
 80037d6:	f47f af36 	bne.w	8003646 <encrypt_decrypt_init+0x62>
          (pkms_object->version == KMS_ABI_VERSION_CK_2_40) &&
 80037da:	6842      	ldr	r2, [r0, #4]
 80037dc:	f46f 700f 	mvn.w	r0, #572	@ 0x23c
 80037e0:	4403      	add	r3, r0
 80037e2:	429a      	cmp	r2, r3
 80037e4:	f47f af2f 	bne.w	8003646 <encrypt_decrypt_init+0x62>
        if ((pMechanism->pParameter != NULL_PTR) &&
 80037e8:	6863      	ldr	r3, [r4, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f43f af39 	beq.w	8003662 <encrypt_decrypt_init+0x7e>
 80037f0:	68a3      	ldr	r3, [r4, #8]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f43f af35 	beq.w	8003662 <encrypt_decrypt_init+0x7e>
          e_ret_status = KMS_Objects_SearchAttributes(CKA_VALUE, pkms_object, &P_pKeyAttribute);
 80037f8:	aa01      	add	r2, sp, #4
 80037fa:	2011      	movs	r0, #17
 80037fc:	f001 ff40 	bl	8005680 <KMS_Objects_SearchAttributes>
          if (e_ret_status == CKR_OK)
 8003800:	2800      	cmp	r0, #0
 8003802:	f47f af18 	bne.w	8003636 <encrypt_decrypt_init+0x52>
            if ((P_pKeyAttribute->size == CA_CRL_AES128_KEY) ||     /* 128 bits */
 8003806:	9b01      	ldr	r3, [sp, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f023 0208 	bic.w	r2, r3, #8
 800380e:	2a10      	cmp	r2, #16
 8003810:	d002      	beq.n	8003818 <encrypt_decrypt_init+0x234>
                (P_pKeyAttribute->size == CA_CRL_AES192_KEY) ||     /* 192 bits */
 8003812:	2b20      	cmp	r3, #32
 8003814:	f47f af25 	bne.w	8003662 <encrypt_decrypt_init+0x7e>
              p_ctx = KMS_Alloc(hSession, sizeof(kms_aes_gcm_ec_ctx_t));
 8003818:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 800381c:	4628      	mov	r0, r5
 800381e:	f001 f969 	bl	8004af4 <KMS_Alloc>
              if (p_ctx == NULL_PTR)
 8003822:	4682      	mov	sl, r0
 8003824:	2800      	cmp	r0, #0
 8003826:	d0ca      	beq.n	80037be <encrypt_decrypt_init+0x1da>
              KMS_GETSESSION(hSession).hKey = hKey;
 8003828:	2324      	movs	r3, #36	@ 0x24
 800382a:	fb03 6308 	mla	r3, r3, r8, r6
              KMS_GETSESSION(hSession).Mechanism = pMechanism->mechanism;
 800382e:	6822      	ldr	r2, [r4, #0]
              KMS_GETSESSION(hSession).hKey = hKey;
 8003830:	f8c3 9024 	str.w	r9, [r3, #36]	@ 0x24
              KMS_GETSESSION(hSession).Mechanism = pMechanism->mechanism;
 8003834:	621a      	str	r2, [r3, #32]
              KMS_GETSESSION(hSession).pCtx = p_ctx;
 8003836:	6298      	str	r0, [r3, #40]	@ 0x28
              p_ctx->ca_ctx.mFlags = CA_E_SK_DEFAULT;
 8003838:	2300      	movs	r3, #0
              pGCMParams = (CK_GCM_PARAMS *)pMechanism->pParameter;
 800383a:	6864      	ldr	r4, [r4, #4]
              p_ctx->ca_ctx.mFlags = CA_E_SK_DEFAULT;
 800383c:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
              p_ctx->ca_ctx.mKeySize = (int32_t)P_pKeyAttribute->size ;
 8003840:	9801      	ldr	r0, [sp, #4]
 8003842:	6841      	ldr	r1, [r0, #4]
 8003844:	f8ca 1044 	str.w	r1, [sl, #68]	@ 0x44
              KMS_Objects_BlobU32_2_u8ptr(&(P_pKeyAttribute->data[0]), P_pKeyAttribute->size, p_ctx->key);
 8003848:	4652      	mov	r2, sl
 800384a:	3008      	adds	r0, #8
 800384c:	f001 ffd5 	bl	80057fa <KMS_Objects_BlobU32_2_u8ptr>
              p_ctx->ca_ctx.mIvSize = (int32_t)pGCMParams->ulIvLen;
 8003850:	6863      	ldr	r3, [r4, #4]
 8003852:	f8ca 3030 	str.w	r3, [sl, #48]	@ 0x30
              p_ctx->ca_ctx.mTagSize = ((int32_t)(pGCMParams->ulTagBits) / 8L);
 8003856:	6923      	ldr	r3, [r4, #16]
                if (CA_AES_GCM_Encrypt_Init(&(p_ctx->ca_ctx),
 8003858:	6822      	ldr	r2, [r4, #0]
              p_ctx->ca_ctx.pmKey = p_ctx->key;
 800385a:	f8ca a028 	str.w	sl, [sl, #40]	@ 0x28
              p_ctx->ca_ctx.mTagSize = ((int32_t)(pGCMParams->ulTagBits) / 8L);
 800385e:	2b00      	cmp	r3, #0
 8003860:	bfb8      	it	lt
 8003862:	3307      	addlt	r3, #7
 8003864:	10db      	asrs	r3, r3, #3
                if (CA_AES_GCM_Encrypt_Init(&(p_ctx->ca_ctx),
 8003866:	f10a 0920 	add.w	r9, sl, #32
              p_ctx->ca_ctx.mTagSize = ((int32_t)(pGCMParams->ulTagBits) / 8L);
 800386a:	f8ca 304c 	str.w	r3, [sl, #76]	@ 0x4c
                if (CA_AES_GCM_Encrypt_Init(&(p_ctx->ca_ctx),
 800386e:	4651      	mov	r1, sl
 8003870:	4648      	mov	r0, r9
              if (encdec_flag == KMS_FLAG_ENCRYPT)
 8003872:	b95f      	cbnz	r7, 800388c <encrypt_decrypt_init+0x2a8>
                if (CA_AES_GCM_Encrypt_Init(&(p_ctx->ca_ctx),
 8003874:	f7fe fe7c 	bl	8002570 <CA_AES_GCM_Encrypt_Init>
 8003878:	b1d0      	cbz	r0, 80038b0 <encrypt_decrypt_init+0x2cc>
                  KMS_Free(hSession, p_ctx);
 800387a:	4651      	mov	r1, sl
 800387c:	4628      	mov	r0, r5
 800387e:	f001 f95d 	bl	8004b3c <KMS_Free>
                  KMS_GETSESSION(hSession).pCtx = NULL_PTR;
 8003882:	2324      	movs	r3, #36	@ 0x24
 8003884:	fb03 6308 	mla	r3, r3, r8, r6
 8003888:	629f      	str	r7, [r3, #40]	@ 0x28
  if (e_ret_status == CKR_OK)
 800388a:	e73e      	b.n	800370a <encrypt_decrypt_init+0x126>
                if (CA_AES_GCM_Decrypt_Init(&(p_ctx->ca_ctx),
 800388c:	f7fe ff4a 	bl	8002724 <CA_AES_GCM_Decrypt_Init>
 8003890:	b170      	cbz	r0, 80038b0 <encrypt_decrypt_init+0x2cc>
                  KMS_Free(hSession, p_ctx);
 8003892:	4651      	mov	r1, sl
 8003894:	4628      	mov	r0, r5
 8003896:	f001 f951 	bl	8004b3c <KMS_Free>
                  KMS_GETSESSION(hSession).pCtx = NULL_PTR;
 800389a:	2324      	movs	r3, #36	@ 0x24
 800389c:	fb03 6308 	mla	r3, r3, r8, r6
 80038a0:	2200      	movs	r2, #0
 80038a2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (e_ret_status == CKR_OK)
 80038a4:	e731      	b.n	800370a <encrypt_decrypt_init+0x126>
 80038a6:	bf00      	nop
 80038a8:	20000c48 	.word	0x20000c48
 80038ac:	b10b0240 	.word	0xb10b0240
              if ((e_ret_status == CKR_OK) && (pGCMParams->ulAADLen != 0UL))
 80038b0:	68e2      	ldr	r2, [r4, #12]
 80038b2:	b12a      	cbz	r2, 80038c0 <encrypt_decrypt_init+0x2dc>
                if (CA_AES_GCM_Header_Append(&(p_ctx->ca_ctx),
 80038b4:	68a1      	ldr	r1, [r4, #8]
 80038b6:	4648      	mov	r0, r9
 80038b8:	f7ff f819 	bl	80028ee <CA_AES_GCM_Header_Append>
 80038bc:	2800      	cmp	r0, #0
 80038be:	d1e8      	bne.n	8003892 <encrypt_decrypt_init+0x2ae>
    if (encdec_flag == KMS_FLAG_ENCRYPT)
 80038c0:	b937      	cbnz	r7, 80038d0 <encrypt_decrypt_init+0x2ec>
      KMS_GETSESSION(hSession).state = KMS_SESSION_ENCRYPT;
 80038c2:	2302      	movs	r3, #2
      KMS_GETSESSION(hSession).state = KMS_SESSION_DECRYPT;
 80038c4:	2224      	movs	r2, #36	@ 0x24
 80038c6:	fb02 6608 	mla	r6, r2, r8, r6
 80038ca:	2000      	movs	r0, #0
 80038cc:	60f3      	str	r3, [r6, #12]
 80038ce:	e6b2      	b.n	8003636 <encrypt_decrypt_init+0x52>
{
 80038d0:	2303      	movs	r3, #3
 80038d2:	e7f7      	b.n	80038c4 <encrypt_decrypt_init+0x2e0>
    return CKR_CRYPTOKI_NOT_INITIALIZED;
 80038d4:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80038d8:	e6ad      	b.n	8003636 <encrypt_decrypt_init+0x52>
    return CKR_SESSION_HANDLE_INVALID;
 80038da:	20b3      	movs	r0, #179	@ 0xb3
 80038dc:	e6ab      	b.n	8003636 <encrypt_decrypt_init+0x52>
 80038de:	bf00      	nop

080038e0 <KMS_EncryptInit>:
{
#if defined(KMS_ENCRYPT)
  CK_RV e_ret_status;

  /* We reuse similar code between Encrypt & Decrypt Init */
  e_ret_status = encrypt_decrypt_init(hSession, pMechanism, hKey, KMS_FLAG_ENCRYPT);
 80038e0:	2300      	movs	r3, #0
 80038e2:	f7ff be7f 	b.w	80035e4 <encrypt_decrypt_init>
	...

080038e8 <KMS_EncryptUpdate>:
  */
CK_RV          KMS_EncryptUpdate(CK_SESSION_HANDLE hSession,
                                 CK_BYTE_PTR pPart, CK_ULONG ulPartLen,
                                 CK_BYTE_PTR pEncryptedPart,
                                 CK_ULONG_PTR pulEncryptedPartLen)
{
 80038e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if defined(KMS_ENCRYPT)
  CK_RV e_ret_status = CKR_FUNCTION_FAILED;
  int32_t lEncryptPartLen = 0;

  if (!KMS_IS_INITIALIZED())
 80038ec:	4e37      	ldr	r6, [pc, #220]	@ (80039cc <KMS_EncryptUpdate+0xe4>)
{
 80038ee:	b085      	sub	sp, #20
 80038f0:	461f      	mov	r7, r3
  int32_t lEncryptPartLen = 0;
 80038f2:	2300      	movs	r3, #0
 80038f4:	9303      	str	r3, [sp, #12]
  if (!KMS_IS_INITIALIZED())
 80038f6:	7833      	ldrb	r3, [r6, #0]
{
 80038f8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80038fc:	4680      	mov	r8, r0
 80038fe:	4689      	mov	r9, r1
 8003900:	4615      	mov	r5, r2
  if (!KMS_IS_INITIALIZED())
 8003902:	2b00      	cmp	r3, #0
 8003904:	d05b      	beq.n	80039be <KMS_EncryptUpdate+0xd6>
  {
    return CKR_CRYPTOKI_NOT_INITIALIZED;
  }
  if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8003906:	f000 ff6f 	bl	80047e8 <KMS_CheckSessionHdle>
 800390a:	4604      	mov	r4, r0
 800390c:	2800      	cmp	r0, #0
 800390e:	d159      	bne.n	80039c4 <KMS_EncryptUpdate+0xdc>
  {
    return CKR_SESSION_HANDLE_INVALID;
  }
  /* Check if DigestInit has been called previously */
  if (KMS_GETSESSION(hSession).state != KMS_SESSION_ENCRYPT)
 8003910:	f108 3bff 	add.w	fp, r8, #4294967295	@ 0xffffffff
 8003914:	2224      	movs	r2, #36	@ 0x24
 8003916:	fb02 620b 	mla	r2, r2, fp, r6
 800391a:	68d3      	ldr	r3, [r2, #12]
 800391c:	2b02      	cmp	r3, #2
 800391e:	d153      	bne.n	80039c8 <KMS_EncryptUpdate+0xe0>
  {
    return CKR_OPERATION_NOT_INITIALIZED;
  }

  KMS_CHECK_BUFFER_SECTION5_2(pEncryptedPart, pulEncryptedPartLen, ulPartLen);
 8003920:	2f00      	cmp	r7, #0
 8003922:	d037      	beq.n	8003994 <KMS_EncryptUpdate+0xac>
 8003924:	f8da 3000 	ldr.w	r3, [sl]
 8003928:	42ab      	cmp	r3, r5
 800392a:	d207      	bcs.n	800393c <KMS_EncryptUpdate+0x54>
 800392c:	f8ca 5000 	str.w	r5, [sl]
 8003930:	f44f 74a8 	mov.w	r4, #336	@ 0x150

  return e_ret_status;
#else /* KMS_ENCRYPT */
  return CKR_FUNCTION_NOT_SUPPORTED;
#endif /* KMS_ENCRYPT */
}
 8003934:	4620      	mov	r0, r4
 8003936:	b005      	add	sp, #20
 8003938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch (KMS_GETSESSION(hSession).Mechanism)
 800393c:	6a13      	ldr	r3, [r2, #32]
      kms_aes_cbc_ec_ctx_t *p_ctx = KMS_GETSESSION(hSession).pCtx;
 800393e:	6a90      	ldr	r0, [r2, #40]	@ 0x28
  switch (KMS_GETSESSION(hSession).Mechanism)
 8003940:	f241 0282 	movw	r2, #4226	@ 0x1082
 8003944:	4293      	cmp	r3, r2
 8003946:	d019      	beq.n	800397c <KMS_EncryptUpdate+0x94>
 8003948:	f241 0287 	movw	r2, #4231	@ 0x1087
 800394c:	4293      	cmp	r3, r2
 800394e:	d02d      	beq.n	80039ac <KMS_EncryptUpdate+0xc4>
 8003950:	f241 0281 	movw	r2, #4225	@ 0x1081
 8003954:	4293      	cmp	r3, r2
 8003956:	d020      	beq.n	800399a <KMS_EncryptUpdate+0xb2>
 8003958:	2470      	movs	r4, #112	@ 0x70
    KMS_GETSESSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 800395a:	2324      	movs	r3, #36	@ 0x24
 800395c:	fb03 660b 	mla	r6, r3, fp, r6
    *pulEncryptedPartLen = 0UL;
 8003960:	2500      	movs	r5, #0
    if (KMS_GETSESSION(hSession).pCtx != NULL_PTR)
 8003962:	6ab1      	ldr	r1, [r6, #40]	@ 0x28
    *pulEncryptedPartLen = 0UL;
 8003964:	f8ca 5000 	str.w	r5, [sl]
    KMS_GETSESSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 8003968:	6275      	str	r5, [r6, #36]	@ 0x24
    if (KMS_GETSESSION(hSession).pCtx != NULL_PTR)
 800396a:	b119      	cbz	r1, 8003974 <KMS_EncryptUpdate+0x8c>
      KMS_Free(hSession, KMS_GETSESSION(hSession).pCtx);
 800396c:	4640      	mov	r0, r8
 800396e:	f001 f8e5 	bl	8004b3c <KMS_Free>
      KMS_GETSESSION(hSession).pCtx = NULL_PTR;
 8003972:	62b5      	str	r5, [r6, #40]	@ 0x28
    KMS_SetStateIdle(hSession);
 8003974:	4640      	mov	r0, r8
 8003976:	f000 ff6d 	bl	8004854 <KMS_SetStateIdle>
 800397a:	e7db      	b.n	8003934 <KMS_EncryptUpdate+0x4c>
      if (CA_AES_CBC_Encrypt_Append(&(p_ctx->ca_ctx),
 800397c:	ab03      	add	r3, sp, #12
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	462a      	mov	r2, r5
 8003982:	463b      	mov	r3, r7
 8003984:	4649      	mov	r1, r9
 8003986:	3020      	adds	r0, #32
 8003988:	f7fe fc2c 	bl	80021e4 <CA_AES_CBC_Encrypt_Append>
 800398c:	b108      	cbz	r0, 8003992 <KMS_EncryptUpdate+0xaa>
        e_ret_status = CKR_FUNCTION_FAILED;
 800398e:	2406      	movs	r4, #6
 8003990:	e7e3      	b.n	800395a <KMS_EncryptUpdate+0x72>
    *pulEncryptedPartLen = (uint32_t)lEncryptPartLen;
 8003992:	9d03      	ldr	r5, [sp, #12]
 8003994:	f8ca 5000 	str.w	r5, [sl]
 8003998:	e7cc      	b.n	8003934 <KMS_EncryptUpdate+0x4c>
      if (CA_AES_ECB_Encrypt_Append(&(p_ctx->ca_ctx),
 800399a:	ab03      	add	r3, sp, #12
 800399c:	9300      	str	r3, [sp, #0]
 800399e:	462a      	mov	r2, r5
 80039a0:	463b      	mov	r3, r7
 80039a2:	4649      	mov	r1, r9
 80039a4:	3020      	adds	r0, #32
 80039a6:	f7fe fda1 	bl	80024ec <CA_AES_ECB_Encrypt_Append>
 80039aa:	e7ef      	b.n	800398c <KMS_EncryptUpdate+0xa4>
      if (CA_AES_GCM_Encrypt_Append(&(p_ctx->ca_ctx),
 80039ac:	ab03      	add	r3, sp, #12
 80039ae:	9300      	str	r3, [sp, #0]
 80039b0:	462a      	mov	r2, r5
 80039b2:	463b      	mov	r3, r7
 80039b4:	4649      	mov	r1, r9
 80039b6:	3020      	adds	r0, #32
 80039b8:	f7fe fe50 	bl	800265c <CA_AES_GCM_Encrypt_Append>
 80039bc:	e7e6      	b.n	800398c <KMS_EncryptUpdate+0xa4>
    return CKR_CRYPTOKI_NOT_INITIALIZED;
 80039be:	f44f 74c8 	mov.w	r4, #400	@ 0x190
 80039c2:	e7b7      	b.n	8003934 <KMS_EncryptUpdate+0x4c>
    return CKR_SESSION_HANDLE_INVALID;
 80039c4:	24b3      	movs	r4, #179	@ 0xb3
 80039c6:	e7b5      	b.n	8003934 <KMS_EncryptUpdate+0x4c>
    return CKR_OPERATION_NOT_INITIALIZED;
 80039c8:	2491      	movs	r4, #145	@ 0x91
 80039ca:	e7b3      	b.n	8003934 <KMS_EncryptUpdate+0x4c>
 80039cc:	20000c48 	.word	0x20000c48

080039d0 <KMS_Encrypt>:
{
 80039d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  e_ret_status = KMS_EncryptUpdate(hSession, pData, ulDataLen, pEncryptedData,
 80039d2:	9d08      	ldr	r5, [sp, #32]
 80039d4:	9500      	str	r5, [sp, #0]
{
 80039d6:	4604      	mov	r4, r0
  KMS_GETSESSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 80039d8:	4d0a      	ldr	r5, [pc, #40]	@ (8003a04 <KMS_Encrypt+0x34>)
  e_ret_status = KMS_EncryptUpdate(hSession, pData, ulDataLen, pEncryptedData,
 80039da:	f7ff ff85 	bl	80038e8 <KMS_EncryptUpdate>
  KMS_GETSESSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 80039de:	1e63      	subs	r3, r4, #1
 80039e0:	2224      	movs	r2, #36	@ 0x24
 80039e2:	fb02 5503 	mla	r5, r2, r3, r5
 80039e6:	2700      	movs	r7, #0
  if (KMS_GETSESSION(hSession).pCtx != NULL_PTR)
 80039e8:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
  KMS_GETSESSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 80039ea:	626f      	str	r7, [r5, #36]	@ 0x24
  e_ret_status = KMS_EncryptUpdate(hSession, pData, ulDataLen, pEncryptedData,
 80039ec:	4606      	mov	r6, r0
  if (KMS_GETSESSION(hSession).pCtx != NULL_PTR)
 80039ee:	b119      	cbz	r1, 80039f8 <KMS_Encrypt+0x28>
    KMS_Free(hSession, KMS_GETSESSION(hSession).pCtx);
 80039f0:	4620      	mov	r0, r4
 80039f2:	f001 f8a3 	bl	8004b3c <KMS_Free>
    KMS_GETSESSION(hSession).pCtx = NULL_PTR;
 80039f6:	62af      	str	r7, [r5, #40]	@ 0x28
  KMS_SetStateIdle(hSession);
 80039f8:	4620      	mov	r0, r4
 80039fa:	f000 ff2b 	bl	8004854 <KMS_SetStateIdle>
}
 80039fe:	4630      	mov	r0, r6
 8003a00:	b003      	add	sp, #12
 8003a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a04:	20000c48 	.word	0x20000c48

08003a08 <KMS_EncryptFinal>:
  *         CKR_OPERATION_NOT_INITIALIZED
  *         CKR_SESSION_HANDLE_INVALID
  */
CK_RV          KMS_EncryptFinal(CK_SESSION_HANDLE hSession, CK_BYTE_PTR pLastEncryptedPart,
                                CK_ULONG_PTR pulLastEncryptedPartLen)
{
 8003a08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
#if defined(KMS_ENCRYPT)
  CK_RV e_ret_status = CKR_FUNCTION_FAILED;
  int32_t lEncryptPartLen = 0;

  if (!KMS_IS_INITIALIZED())
 8003a0c:	4d30      	ldr	r5, [pc, #192]	@ (8003ad0 <KMS_EncryptFinal+0xc8>)
  int32_t lEncryptPartLen = 0;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	9301      	str	r3, [sp, #4]
  if (!KMS_IS_INITIALIZED())
 8003a12:	782b      	ldrb	r3, [r5, #0]
{
 8003a14:	4680      	mov	r8, r0
 8003a16:	460f      	mov	r7, r1
 8003a18:	4616      	mov	r6, r2
  if (!KMS_IS_INITIALIZED())
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d051      	beq.n	8003ac2 <KMS_EncryptFinal+0xba>
  {
    return CKR_CRYPTOKI_NOT_INITIALIZED;
  }
  if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8003a1e:	f000 fee3 	bl	80047e8 <KMS_CheckSessionHdle>
 8003a22:	4604      	mov	r4, r0
 8003a24:	2800      	cmp	r0, #0
 8003a26:	d14f      	bne.n	8003ac8 <KMS_EncryptFinal+0xc0>
  {
    return CKR_SESSION_HANDLE_INVALID;
  }
  /* Check if DigestInit has been called previously */
  if (KMS_GETSESSION(hSession).state != KMS_SESSION_ENCRYPT)
 8003a28:	f108 39ff 	add.w	r9, r8, #4294967295	@ 0xffffffff
 8003a2c:	2324      	movs	r3, #36	@ 0x24
 8003a2e:	fb03 5309 	mla	r3, r3, r9, r5
 8003a32:	68da      	ldr	r2, [r3, #12]
 8003a34:	2a02      	cmp	r2, #2
 8003a36:	d149      	bne.n	8003acc <KMS_EncryptFinal+0xc4>
  {
    return CKR_OPERATION_NOT_INITIALIZED;
  }

  switch (KMS_GETSESSION(hSession).Mechanism)
 8003a38:	6a1a      	ldr	r2, [r3, #32]
  {
#if defined(KMS_AES_CBC) && (KMS_AES_CBC & KMS_FCT_ENCRYPT)
    case CKM_AES_CBC:
    {
      /* Retrieve the allocated context */
      kms_aes_cbc_ec_ctx_t *p_ctx = KMS_GETSESSION(hSession).pCtx;
 8003a3a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
  switch (KMS_GETSESSION(hSession).Mechanism)
 8003a3c:	f241 0382 	movw	r3, #4226	@ 0x1082
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d017      	beq.n	8003a74 <KMS_EncryptFinal+0x6c>
 8003a44:	f241 0387 	movw	r3, #4231	@ 0x1087
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d022      	beq.n	8003a92 <KMS_EncryptFinal+0x8a>
 8003a4c:	f241 0381 	movw	r3, #4225	@ 0x1081
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d018      	beq.n	8003a86 <KMS_EncryptFinal+0x7e>
 8003a54:	2470      	movs	r4, #112	@ 0x70

  /* Upon completion:
   * - free the allocated context
   * - release the session
   */
  KMS_GETSESSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 8003a56:	2324      	movs	r3, #36	@ 0x24
 8003a58:	fb03 5509 	mla	r5, r3, r9, r5
 8003a5c:	2600      	movs	r6, #0
  if (KMS_GETSESSION(hSession).pCtx != NULL_PTR)
 8003a5e:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
  KMS_GETSESSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 8003a60:	626e      	str	r6, [r5, #36]	@ 0x24
  if (KMS_GETSESSION(hSession).pCtx != NULL_PTR)
 8003a62:	b119      	cbz	r1, 8003a6c <KMS_EncryptFinal+0x64>
  {
    KMS_Free(hSession, KMS_GETSESSION(hSession).pCtx);
 8003a64:	4640      	mov	r0, r8
 8003a66:	f001 f869 	bl	8004b3c <KMS_Free>
    KMS_GETSESSION(hSession).pCtx = NULL_PTR;
 8003a6a:	62ae      	str	r6, [r5, #40]	@ 0x28
  }

  KMS_SetStateIdle(hSession);
 8003a6c:	4640      	mov	r0, r8
 8003a6e:	f000 fef1 	bl	8004854 <KMS_SetStateIdle>

  return e_ret_status;
 8003a72:	e011      	b.n	8003a98 <KMS_EncryptFinal+0x90>
      if (CA_AES_CBC_Encrypt_Finish(&(p_ctx->ca_ctx),
 8003a74:	aa01      	add	r2, sp, #4
 8003a76:	4639      	mov	r1, r7
 8003a78:	3020      	adds	r0, #32
 8003a7a:	f7fe fbcf 	bl	800221c <CA_AES_CBC_Encrypt_Finish>
 8003a7e:	2800      	cmp	r0, #0
 8003a80:	d0e9      	beq.n	8003a56 <KMS_EncryptFinal+0x4e>
        e_ret_status = CKR_FUNCTION_FAILED;
 8003a82:	2406      	movs	r4, #6
 8003a84:	e7e7      	b.n	8003a56 <KMS_EncryptFinal+0x4e>
      if (CA_AES_ECB_Encrypt_Finish(&(p_ctx->ca_ctx),
 8003a86:	aa01      	add	r2, sp, #4
 8003a88:	4639      	mov	r1, r7
 8003a8a:	3020      	adds	r0, #32
 8003a8c:	f7fe fd4c 	bl	8002528 <CA_AES_ECB_Encrypt_Finish>
 8003a90:	e7f5      	b.n	8003a7e <KMS_EncryptFinal+0x76>
      KMS_CHECK_BUFFER_SECTION5_2(pLastEncryptedPart, pulLastEncryptedPartLen, (uint32_t)(p_ctx->ca_ctx.mTagSize));
 8003a92:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8003a94:	b927      	cbnz	r7, 8003aa0 <KMS_EncryptFinal+0x98>
 8003a96:	6032      	str	r2, [r6, #0]
#else /* KMS_ENCRYPT */
  return CKR_FUNCTION_NOT_SUPPORTED;
#endif /* KMS_ENCRYPT */
}
 8003a98:	4620      	mov	r0, r4
 8003a9a:	b003      	add	sp, #12
 8003a9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      KMS_CHECK_BUFFER_SECTION5_2(pLastEncryptedPart, pulLastEncryptedPartLen, (uint32_t)(p_ctx->ca_ctx.mTagSize));
 8003aa0:	6833      	ldr	r3, [r6, #0]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d903      	bls.n	8003aae <KMS_EncryptFinal+0xa6>
 8003aa6:	6032      	str	r2, [r6, #0]
 8003aa8:	f44f 74a8 	mov.w	r4, #336	@ 0x150
 8003aac:	e7f4      	b.n	8003a98 <KMS_EncryptFinal+0x90>
      if (CA_AES_GCM_Encrypt_Finish(&(p_ctx->ca_ctx),
 8003aae:	aa01      	add	r2, sp, #4
 8003ab0:	4639      	mov	r1, r7
 8003ab2:	3020      	adds	r0, #32
 8003ab4:	f7fe fe0b 	bl	80026ce <CA_AES_GCM_Encrypt_Finish>
 8003ab8:	2800      	cmp	r0, #0
 8003aba:	d1e2      	bne.n	8003a82 <KMS_EncryptFinal+0x7a>
        *pulLastEncryptedPartLen = (uint32_t)lEncryptPartLen;
 8003abc:	9b01      	ldr	r3, [sp, #4]
 8003abe:	6033      	str	r3, [r6, #0]
        e_ret_status = CKR_OK;
 8003ac0:	e7c9      	b.n	8003a56 <KMS_EncryptFinal+0x4e>
    return CKR_CRYPTOKI_NOT_INITIALIZED;
 8003ac2:	f44f 74c8 	mov.w	r4, #400	@ 0x190
 8003ac6:	e7e7      	b.n	8003a98 <KMS_EncryptFinal+0x90>
    return CKR_SESSION_HANDLE_INVALID;
 8003ac8:	24b3      	movs	r4, #179	@ 0xb3
 8003aca:	e7e5      	b.n	8003a98 <KMS_EncryptFinal+0x90>
    return CKR_OPERATION_NOT_INITIALIZED;
 8003acc:	2491      	movs	r4, #145	@ 0x91
 8003ace:	e7e3      	b.n	8003a98 <KMS_EncryptFinal+0x90>
 8003ad0:	20000c48 	.word	0x20000c48

08003ad4 <KMS_DecryptInit>:
CK_RV          KMS_DecryptInit(CK_SESSION_HANDLE hSession, CK_MECHANISM_PTR pMechanism,
                               CK_OBJECT_HANDLE hKey)
{
#if defined(KMS_DECRYPT)
  /* We reuse similar code between Encrypt & Decrypt Init */
  return    encrypt_decrypt_init(hSession, pMechanism, hKey, KMS_FLAG_DECRYPT);
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	f7ff bd85 	b.w	80035e4 <encrypt_decrypt_init>
	...

08003adc <KMS_DecryptUpdate>:
  */
CK_RV          KMS_DecryptUpdate(CK_SESSION_HANDLE hSession,
                                 CK_BYTE_PTR pEncryptedPart,
                                 CK_ULONG ulEncryptedPartLen,
                                 CK_BYTE_PTR pPart, CK_ULONG_PTR pulPartLen)
{
 8003adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if defined(KMS_DECRYPT)
  CK_RV e_ret_status = CKR_FUNCTION_FAILED;
  int32_t lPartLen = 0;

  if (!KMS_IS_INITIALIZED())
 8003ae0:	4f3d      	ldr	r7, [pc, #244]	@ (8003bd8 <KMS_DecryptUpdate+0xfc>)
{
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	461e      	mov	r6, r3
  int32_t lPartLen = 0;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	9303      	str	r3, [sp, #12]
  if (!KMS_IS_INITIALIZED())
 8003aea:	783b      	ldrb	r3, [r7, #0]
{
 8003aec:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
 8003af0:	4681      	mov	r9, r0
 8003af2:	468a      	mov	sl, r1
 8003af4:	4614      	mov	r4, r2
  if (!KMS_IS_INITIALIZED())
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d066      	beq.n	8003bc8 <KMS_DecryptUpdate+0xec>
  {
    return CKR_CRYPTOKI_NOT_INITIALIZED;
  }
  if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8003afa:	f000 fe75 	bl	80047e8 <KMS_CheckSessionHdle>
 8003afe:	4605      	mov	r5, r0
 8003b00:	2800      	cmp	r0, #0
 8003b02:	d164      	bne.n	8003bce <KMS_DecryptUpdate+0xf2>
  {
    return CKR_SESSION_HANDLE_INVALID;
  }
  /* Check if DigestInit has been called previously */
  if (KMS_GETSESSION(hSession).state != KMS_SESSION_DECRYPT)
 8003b04:	f109 3bff 	add.w	fp, r9, #4294967295	@ 0xffffffff
 8003b08:	2224      	movs	r2, #36	@ 0x24
 8003b0a:	fb02 720b 	mla	r2, r2, fp, r7
 8003b0e:	68d3      	ldr	r3, [r2, #12]
 8003b10:	2b03      	cmp	r3, #3
 8003b12:	d15e      	bne.n	8003bd2 <KMS_DecryptUpdate+0xf6>
  {
    return CKR_OPERATION_NOT_INITIALIZED;
  }

  switch (KMS_GETSESSION(hSession).Mechanism)
 8003b14:	6a13      	ldr	r3, [r2, #32]
  {
#if defined(KMS_AES_CBC) && (KMS_AES_CBC & KMS_FCT_DECRYPT)
    case CKM_AES_CBC:
    {
      /* Retrieve the allocated context */
      kms_aes_cbc_ec_ctx_t *p_ctx = KMS_GETSESSION(hSession).pCtx;
 8003b16:	6a90      	ldr	r0, [r2, #40]	@ 0x28
  switch (KMS_GETSESSION(hSession).Mechanism)
 8003b18:	f241 0282 	movw	r2, #4226	@ 0x1082
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d019      	beq.n	8003b54 <KMS_DecryptUpdate+0x78>
 8003b20:	f241 0287 	movw	r2, #4231	@ 0x1087
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d040      	beq.n	8003baa <KMS_DecryptUpdate+0xce>
 8003b28:	f241 0281 	movw	r2, #4225	@ 0x1081
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d02d      	beq.n	8003b8c <KMS_DecryptUpdate+0xb0>
 8003b30:	2570      	movs	r5, #112	@ 0x70
    *pulPartLen = 0UL;
    /* In case of error:
     * - free the allocated context
     * - release the session
     */
    KMS_GETSESSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 8003b32:	2324      	movs	r3, #36	@ 0x24
 8003b34:	fb03 770b 	mla	r7, r3, fp, r7
    *pulPartLen = 0UL;
 8003b38:	2400      	movs	r4, #0
    if (KMS_GETSESSION(hSession).pCtx != NULL_PTR)
 8003b3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
    *pulPartLen = 0UL;
 8003b3c:	f8c8 4000 	str.w	r4, [r8]
    KMS_GETSESSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 8003b40:	627c      	str	r4, [r7, #36]	@ 0x24
    if (KMS_GETSESSION(hSession).pCtx != NULL_PTR)
 8003b42:	b119      	cbz	r1, 8003b4c <KMS_DecryptUpdate+0x70>
    {
      KMS_Free(hSession, KMS_GETSESSION(hSession).pCtx);
 8003b44:	4648      	mov	r0, r9
 8003b46:	f000 fff9 	bl	8004b3c <KMS_Free>
      KMS_GETSESSION(hSession).pCtx = NULL_PTR;
 8003b4a:	62bc      	str	r4, [r7, #40]	@ 0x28
    }
    KMS_SetStateIdle(hSession);
 8003b4c:	4648      	mov	r0, r9
 8003b4e:	f000 fe81 	bl	8004854 <KMS_SetStateIdle>
 8003b52:	e008      	b.n	8003b66 <KMS_DecryptUpdate+0x8a>
      KMS_CHECK_BUFFER_SECTION5_2(pPart, pulPartLen, ulEncryptedPartLen);
 8003b54:	b1be      	cbz	r6, 8003b86 <KMS_DecryptUpdate+0xaa>
 8003b56:	f8d8 3000 	ldr.w	r3, [r8]
 8003b5a:	42a3      	cmp	r3, r4
 8003b5c:	d207      	bcs.n	8003b6e <KMS_DecryptUpdate+0x92>
 8003b5e:	f8c8 4000 	str.w	r4, [r8]
 8003b62:	f44f 75a8 	mov.w	r5, #336	@ 0x150

  return e_ret_status;
#else /* KMS_DECRYPT */
  return CKR_FUNCTION_NOT_SUPPORTED;
#endif /* KMS_DECRYPT */
}
 8003b66:	4628      	mov	r0, r5
 8003b68:	b005      	add	sp, #20
 8003b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (CA_AES_CBC_Decrypt_Append(&(p_ctx->ca_ctx),
 8003b6e:	ab03      	add	r3, sp, #12
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	4622      	mov	r2, r4
 8003b74:	4633      	mov	r3, r6
 8003b76:	4651      	mov	r1, sl
 8003b78:	3020      	adds	r0, #32
 8003b7a:	f7fe fbd3 	bl	8002324 <CA_AES_CBC_Decrypt_Append>
 8003b7e:	b108      	cbz	r0, 8003b84 <KMS_DecryptUpdate+0xa8>
        e_ret_status = CKR_FUNCTION_FAILED;
 8003b80:	2506      	movs	r5, #6
 8003b82:	e7d6      	b.n	8003b32 <KMS_DecryptUpdate+0x56>
    *pulPartLen = (uint32_t)lPartLen;
 8003b84:	9c03      	ldr	r4, [sp, #12]
 8003b86:	f8c8 4000 	str.w	r4, [r8]
 8003b8a:	e7ec      	b.n	8003b66 <KMS_DecryptUpdate+0x8a>
      KMS_CHECK_BUFFER_SECTION5_2(pPart, pulPartLen, ulEncryptedPartLen);
 8003b8c:	2e00      	cmp	r6, #0
 8003b8e:	d0fa      	beq.n	8003b86 <KMS_DecryptUpdate+0xaa>
 8003b90:	f8d8 3000 	ldr.w	r3, [r8]
 8003b94:	42a3      	cmp	r3, r4
 8003b96:	d3e2      	bcc.n	8003b5e <KMS_DecryptUpdate+0x82>
      if (CA_AES_ECB_Decrypt_Append(&(p_ctx->ca_ctx),
 8003b98:	ab03      	add	r3, sp, #12
 8003b9a:	9300      	str	r3, [sp, #0]
 8003b9c:	4622      	mov	r2, r4
 8003b9e:	4633      	mov	r3, r6
 8003ba0:	4651      	mov	r1, sl
 8003ba2:	3020      	adds	r0, #32
 8003ba4:	f7fe fcc4 	bl	8002530 <CA_AES_ECB_Decrypt_Append>
 8003ba8:	e7e9      	b.n	8003b7e <KMS_DecryptUpdate+0xa2>
      KMS_CHECK_BUFFER_SECTION5_2(pPart, pulPartLen, ulEncryptedPartLen);
 8003baa:	2e00      	cmp	r6, #0
 8003bac:	d0eb      	beq.n	8003b86 <KMS_DecryptUpdate+0xaa>
 8003bae:	f8d8 3000 	ldr.w	r3, [r8]
 8003bb2:	42a3      	cmp	r3, r4
 8003bb4:	d3d3      	bcc.n	8003b5e <KMS_DecryptUpdate+0x82>
      if (CA_AES_GCM_Decrypt_Append(&(p_ctx->ca_ctx),
 8003bb6:	ab03      	add	r3, sp, #12
 8003bb8:	9300      	str	r3, [sp, #0]
 8003bba:	4622      	mov	r2, r4
 8003bbc:	4633      	mov	r3, r6
 8003bbe:	4651      	mov	r1, sl
 8003bc0:	3020      	adds	r0, #32
 8003bc2:	f7fe fe25 	bl	8002810 <CA_AES_GCM_Decrypt_Append>
 8003bc6:	e7da      	b.n	8003b7e <KMS_DecryptUpdate+0xa2>
    return CKR_CRYPTOKI_NOT_INITIALIZED;
 8003bc8:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 8003bcc:	e7cb      	b.n	8003b66 <KMS_DecryptUpdate+0x8a>
    return CKR_SESSION_HANDLE_INVALID;
 8003bce:	25b3      	movs	r5, #179	@ 0xb3
 8003bd0:	e7c9      	b.n	8003b66 <KMS_DecryptUpdate+0x8a>
    return CKR_OPERATION_NOT_INITIALIZED;
 8003bd2:	2591      	movs	r5, #145	@ 0x91
 8003bd4:	e7c7      	b.n	8003b66 <KMS_DecryptUpdate+0x8a>
 8003bd6:	bf00      	nop
 8003bd8:	20000c48 	.word	0x20000c48

08003bdc <KMS_Decrypt>:
{
 8003bdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  e_ret_status = KMS_DecryptUpdate(hSession, pEncryptedData, ulEncryptedDataLen,
 8003bde:	9d08      	ldr	r5, [sp, #32]
 8003be0:	9500      	str	r5, [sp, #0]
{
 8003be2:	4604      	mov	r4, r0
  KMS_GETSESSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 8003be4:	4d0a      	ldr	r5, [pc, #40]	@ (8003c10 <KMS_Decrypt+0x34>)
  e_ret_status = KMS_DecryptUpdate(hSession, pEncryptedData, ulEncryptedDataLen,
 8003be6:	f7ff ff79 	bl	8003adc <KMS_DecryptUpdate>
  KMS_GETSESSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 8003bea:	1e63      	subs	r3, r4, #1
 8003bec:	2224      	movs	r2, #36	@ 0x24
 8003bee:	fb02 5503 	mla	r5, r2, r3, r5
 8003bf2:	2700      	movs	r7, #0
  if (KMS_GETSESSION(hSession).pCtx != NULL_PTR)
 8003bf4:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
  KMS_GETSESSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 8003bf6:	626f      	str	r7, [r5, #36]	@ 0x24
  e_ret_status = KMS_DecryptUpdate(hSession, pEncryptedData, ulEncryptedDataLen,
 8003bf8:	4606      	mov	r6, r0
  if (KMS_GETSESSION(hSession).pCtx != NULL_PTR)
 8003bfa:	b119      	cbz	r1, 8003c04 <KMS_Decrypt+0x28>
    KMS_Free(hSession, KMS_GETSESSION(hSession).pCtx);
 8003bfc:	4620      	mov	r0, r4
 8003bfe:	f000 ff9d 	bl	8004b3c <KMS_Free>
    KMS_GETSESSION(hSession).pCtx = NULL_PTR;
 8003c02:	62af      	str	r7, [r5, #40]	@ 0x28
  KMS_SetStateIdle(hSession);
 8003c04:	4620      	mov	r0, r4
 8003c06:	f000 fe25 	bl	8004854 <KMS_SetStateIdle>
}
 8003c0a:	4630      	mov	r0, r6
 8003c0c:	b003      	add	sp, #12
 8003c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c10:	20000c48 	.word	0x20000c48

08003c14 <KMS_DecryptFinal>:
  *         CKR_MECHANISM_INVALID
  *         CKR_OPERATION_NOT_INITIALIZED
  *         CKR_SESSION_HANDLE_INVALID
  */
CK_RV          KMS_DecryptFinal(CK_SESSION_HANDLE hSession, CK_BYTE_PTR pLastPart, CK_ULONG_PTR pulLastPartLen)
{
 8003c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if defined(KMS_DECRYPT)
  CK_RV e_ret_status = CKR_FUNCTION_FAILED;

  if (!KMS_IS_INITIALIZED())
 8003c18:	4e2f      	ldr	r6, [pc, #188]	@ (8003cd8 <KMS_DecryptFinal+0xc4>)
 8003c1a:	7833      	ldrb	r3, [r6, #0]
{
 8003c1c:	4680      	mov	r8, r0
 8003c1e:	460f      	mov	r7, r1
 8003c20:	4615      	mov	r5, r2
  if (!KMS_IS_INITIALIZED())
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d051      	beq.n	8003cca <KMS_DecryptFinal+0xb6>
  {
    return CKR_CRYPTOKI_NOT_INITIALIZED;
  }
  if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8003c26:	f000 fddf 	bl	80047e8 <KMS_CheckSessionHdle>
 8003c2a:	4604      	mov	r4, r0
 8003c2c:	2800      	cmp	r0, #0
 8003c2e:	d14f      	bne.n	8003cd0 <KMS_DecryptFinal+0xbc>
  {
    return CKR_SESSION_HANDLE_INVALID;
  }
  /* Check if DigestInit has been called previously */
  if (KMS_GETSESSION(hSession).state != KMS_SESSION_DECRYPT)
 8003c30:	f108 39ff 	add.w	r9, r8, #4294967295	@ 0xffffffff
 8003c34:	2324      	movs	r3, #36	@ 0x24
 8003c36:	fb03 6309 	mla	r3, r3, r9, r6
 8003c3a:	68da      	ldr	r2, [r3, #12]
 8003c3c:	2a03      	cmp	r2, #3
 8003c3e:	d149      	bne.n	8003cd4 <KMS_DecryptFinal+0xc0>
  {
    return CKR_OPERATION_NOT_INITIALIZED;
  }

  switch (KMS_GETSESSION(hSession).Mechanism)
 8003c40:	6a1a      	ldr	r2, [r3, #32]
  {
#if defined(KMS_AES_CBC) && (KMS_AES_CBC & KMS_FCT_DECRYPT)
    case CKM_AES_CBC:
    {
      /* Retrieve the allocated context */
      kms_aes_cbc_ec_ctx_t *p_ctx = KMS_GETSESSION(hSession).pCtx;
 8003c42:	6a98      	ldr	r0, [r3, #40]	@ 0x28
  switch (KMS_GETSESSION(hSession).Mechanism)
 8003c44:	f241 0382 	movw	r3, #4226	@ 0x1082
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d017      	beq.n	8003c7c <KMS_DecryptFinal+0x68>
 8003c4c:	f241 0387 	movw	r3, #4231	@ 0x1087
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d022      	beq.n	8003c9a <KMS_DecryptFinal+0x86>
 8003c54:	f241 0381 	movw	r3, #4225	@ 0x1081
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d018      	beq.n	8003c8e <KMS_DecryptFinal+0x7a>
 8003c5c:	2470      	movs	r4, #112	@ 0x70

  /* Upon completion:
   * - free the allocated context
   * - release the session
   */
  KMS_GETSESSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 8003c5e:	2324      	movs	r3, #36	@ 0x24
 8003c60:	fb03 6609 	mla	r6, r3, r9, r6
 8003c64:	2500      	movs	r5, #0
  if (KMS_GETSESSION(hSession).pCtx != NULL_PTR)
 8003c66:	6ab1      	ldr	r1, [r6, #40]	@ 0x28
  KMS_GETSESSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 8003c68:	6275      	str	r5, [r6, #36]	@ 0x24
  if (KMS_GETSESSION(hSession).pCtx != NULL_PTR)
 8003c6a:	b119      	cbz	r1, 8003c74 <KMS_DecryptFinal+0x60>
  {
    KMS_Free(hSession, KMS_GETSESSION(hSession).pCtx);
 8003c6c:	4640      	mov	r0, r8
 8003c6e:	f000 ff65 	bl	8004b3c <KMS_Free>
    KMS_GETSESSION(hSession).pCtx = NULL_PTR;
 8003c72:	62b5      	str	r5, [r6, #40]	@ 0x28
  }

  KMS_SetStateIdle(hSession);
 8003c74:	4640      	mov	r0, r8
 8003c76:	f000 fded 	bl	8004854 <KMS_SetStateIdle>

  return e_ret_status;
 8003c7a:	e011      	b.n	8003ca0 <KMS_DecryptFinal+0x8c>
      if (CA_AES_CBC_Decrypt_Finish(&(p_ctx->ca_ctx),
 8003c7c:	462a      	mov	r2, r5
 8003c7e:	4639      	mov	r1, r7
 8003c80:	3020      	adds	r0, #32
 8003c82:	f7fe fb6b 	bl	800235c <CA_AES_CBC_Decrypt_Finish>
 8003c86:	2800      	cmp	r0, #0
 8003c88:	d0e9      	beq.n	8003c5e <KMS_DecryptFinal+0x4a>
        e_ret_status = CKR_FUNCTION_FAILED;
 8003c8a:	2406      	movs	r4, #6
 8003c8c:	e7e7      	b.n	8003c5e <KMS_DecryptFinal+0x4a>
      if (CA_AES_ECB_Decrypt_Finish(&(p_ctx->ca_ctx),
 8003c8e:	462a      	mov	r2, r5
 8003c90:	4639      	mov	r1, r7
 8003c92:	3020      	adds	r0, #32
 8003c94:	f7fe fc6a 	bl	800256c <CA_AES_ECB_Decrypt_Finish>
 8003c98:	e7f5      	b.n	8003c86 <KMS_DecryptFinal+0x72>
      KMS_CHECK_BUFFER_SECTION5_2(pLastPart, pulLastPartLen, (uint32_t)p_ctx->ca_ctx.mTagSize);
 8003c9a:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8003c9c:	b91f      	cbnz	r7, 8003ca6 <KMS_DecryptFinal+0x92>
 8003c9e:	602a      	str	r2, [r5, #0]
#else /* KMS_DECRYPT */
  return CKR_FUNCTION_NOT_SUPPORTED;
#endif /* KMS_DECRYPT */
}
 8003ca0:	4620      	mov	r0, r4
 8003ca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      KMS_CHECK_BUFFER_SECTION5_2(pLastPart, pulLastPartLen, (uint32_t)p_ctx->ca_ctx.mTagSize);
 8003ca6:	682b      	ldr	r3, [r5, #0]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d903      	bls.n	8003cb4 <KMS_DecryptFinal+0xa0>
 8003cac:	602a      	str	r2, [r5, #0]
 8003cae:	f44f 74a8 	mov.w	r4, #336	@ 0x150
 8003cb2:	e7f5      	b.n	8003ca0 <KMS_DecryptFinal+0x8c>
      p_ctx->ca_ctx.pmTag = pLastPart;
 8003cb4:	6487      	str	r7, [r0, #72]	@ 0x48
      if (CA_AES_GCM_Decrypt_Finish(&(p_ctx->ca_ctx),
 8003cb6:	462a      	mov	r2, r5
 8003cb8:	4639      	mov	r1, r7
 8003cba:	3020      	adds	r0, #32
 8003cbc:	f7fe fde1 	bl	8002882 <CA_AES_GCM_Decrypt_Finish>
 8003cc0:	f240 33eb 	movw	r3, #1003	@ 0x3eb
 8003cc4:	4298      	cmp	r0, r3
 8003cc6:	d1e0      	bne.n	8003c8a <KMS_DecryptFinal+0x76>
 8003cc8:	e7c9      	b.n	8003c5e <KMS_DecryptFinal+0x4a>
    return CKR_CRYPTOKI_NOT_INITIALIZED;
 8003cca:	f44f 74c8 	mov.w	r4, #400	@ 0x190
 8003cce:	e7e7      	b.n	8003ca0 <KMS_DecryptFinal+0x8c>
    return CKR_SESSION_HANDLE_INVALID;
 8003cd0:	24b3      	movs	r4, #179	@ 0xb3
 8003cd2:	e7e5      	b.n	8003ca0 <KMS_DecryptFinal+0x8c>
    return CKR_OPERATION_NOT_INITIALIZED;
 8003cd4:	2491      	movs	r4, #145	@ 0x91
 8003cd6:	e7e3      	b.n	8003ca0 <KMS_DecryptFinal+0x8c>
 8003cd8:	20000c48 	.word	0x20000c48

08003cdc <KMS_Entry_CheckMechanismContent>:
  * @retval CKR_OK
  *         CKR_MECHANISM_INVALID
  */
#ifdef KMS_SE_CHECK_PARAMS
static CK_RV KMS_Entry_CheckMechanismContent(CK_MECHANISM_PTR  pMechanism)
{
 8003cdc:	b510      	push	{r4, lr}
  CK_RV status = CKR_MECHANISM_INVALID;
  if (pMechanism != NULL_PTR)
 8003cde:	b1b0      	cbz	r0, 8003d0e <KMS_Entry_CheckMechanismContent+0x32>
  {
    switch (pMechanism->mechanism)
 8003ce0:	6803      	ldr	r3, [r0, #0]
 8003ce2:	f241 028b 	movw	r2, #4235	@ 0x108b
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d840      	bhi.n	8003d6c <KMS_Entry_CheckMechanismContent+0x90>
 8003cea:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 8003cee:	d810      	bhi.n	8003d12 <KMS_Entry_CheckMechanismContent+0x36>
 8003cf0:	f241 0250 	movw	r2, #4176	@ 0x1050
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d052      	beq.n	8003d9e <KMS_Entry_CheckMechanismContent+0xc2>
 8003cf8:	d809      	bhi.n	8003d0e <KMS_Entry_CheckMechanismContent+0x32>
 8003cfa:	f5b3 7f08 	cmp.w	r3, #544	@ 0x220
 8003cfe:	d042      	beq.n	8003d86 <KMS_Entry_CheckMechanismContent+0xaa>
 8003d00:	d826      	bhi.n	8003d50 <KMS_Entry_CheckMechanismContent+0x74>
 8003d02:	2b06      	cmp	r3, #6
 8003d04:	d03f      	beq.n	8003d86 <KMS_Entry_CheckMechanismContent+0xaa>
 8003d06:	2b40      	cmp	r3, #64	@ 0x40
 8003d08:	d03d      	beq.n	8003d86 <KMS_Entry_CheckMechanismContent+0xaa>
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d03b      	beq.n	8003d86 <KMS_Entry_CheckMechanismContent+0xaa>
  CK_RV status = CKR_MECHANISM_INVALID;
 8003d0e:	2070      	movs	r0, #112	@ 0x70
      default:
        status = CKR_MECHANISM_INVALID;
        break;
    }
  }
  return status;
 8003d10:	e03a      	b.n	8003d88 <KMS_Entry_CheckMechanismContent+0xac>
    switch (pMechanism->mechanism)
 8003d12:	f5a3 5384 	sub.w	r3, r3, #4224	@ 0x1080
 8003d16:	3b01      	subs	r3, #1
 8003d18:	2b0a      	cmp	r3, #10
 8003d1a:	d8f8      	bhi.n	8003d0e <KMS_Entry_CheckMechanismContent+0x32>
 8003d1c:	a201      	add	r2, pc, #4	@ (adr r2, 8003d24 <KMS_Entry_CheckMechanismContent+0x48>)
 8003d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d22:	bf00      	nop
 8003d24:	08003d87 	.word	0x08003d87
 8003d28:	08003d87 	.word	0x08003d87
 8003d2c:	08003d0f 	.word	0x08003d0f
 8003d30:	08003d0f 	.word	0x08003d0f
 8003d34:	08003d0f 	.word	0x08003d0f
 8003d38:	08003d0f 	.word	0x08003d0f
 8003d3c:	08003d8b 	.word	0x08003d8b
 8003d40:	08003d73 	.word	0x08003d73
 8003d44:	08003d0f 	.word	0x08003d0f
 8003d48:	08003d87 	.word	0x08003d87
 8003d4c:	08003d87 	.word	0x08003d87
 8003d50:	f241 0242 	movw	r2, #4162	@ 0x1042
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d805      	bhi.n	8003d64 <KMS_Entry_CheckMechanismContent+0x88>
 8003d58:	f5b3 5f82 	cmp.w	r3, #4160	@ 0x1040
 8003d5c:	d213      	bcs.n	8003d86 <KMS_Entry_CheckMechanismContent+0xaa>
 8003d5e:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8003d62:	e7d3      	b.n	8003d0c <KMS_Entry_CheckMechanismContent+0x30>
 8003d64:	f241 0244 	movw	r2, #4164	@ 0x1044
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	e7cf      	b.n	8003d0c <KMS_Entry_CheckMechanismContent+0x30>
 8003d6c:	f241 1204 	movw	r2, #4356	@ 0x1104
 8003d70:	e7fa      	b.n	8003d68 <KMS_Entry_CheckMechanismContent+0x8c>
        CK_CCM_PARAMS *pParam = (CK_CCM_PARAMS *)(pMechanism->pParameter);
 8003d72:	6844      	ldr	r4, [r0, #4]
        if (pParam != NULL_PTR)
 8003d74:	b13c      	cbz	r4, 8003d86 <KMS_Entry_CheckMechanismContent+0xaa>
          KMS_LL_IsBufferInSecureEnclave((void *)(pParam->pNonce), pParam->ulNonceLen * sizeof(CK_BYTE));
 8003d76:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 8003d7a:	f7fc fd7b 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
          KMS_LL_IsBufferInSecureEnclave((void *)(pParam->pAAD), pParam->ulAADLen * sizeof(CK_BYTE));
 8003d7e:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
          KMS_LL_IsBufferInSecureEnclave((void *)(pParam->pAAD), pParam->ulAADLen * sizeof(CK_BYTE));
 8003d82:	f7fc fd77 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
        status = CKR_OK;
 8003d86:	2000      	movs	r0, #0
}
 8003d88:	bd10      	pop	{r4, pc}
        CK_GCM_PARAMS *pParam = (CK_GCM_PARAMS *)(pMechanism->pParameter);
 8003d8a:	6844      	ldr	r4, [r0, #4]
        if (pParam != NULL_PTR)
 8003d8c:	2c00      	cmp	r4, #0
 8003d8e:	d0fa      	beq.n	8003d86 <KMS_Entry_CheckMechanismContent+0xaa>
          KMS_LL_IsBufferInSecureEnclave((void *)(pParam->pIv), pParam->ulIvLen * sizeof(CK_BYTE));
 8003d90:	e9d4 0100 	ldrd	r0, r1, [r4]
 8003d94:	f7fc fd6e 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
          KMS_LL_IsBufferInSecureEnclave((void *)(pParam->pAAD), pParam->ulAADLen * sizeof(CK_BYTE));
 8003d98:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8003d9c:	e7f1      	b.n	8003d82 <KMS_Entry_CheckMechanismContent+0xa6>
        CK_ECDH1_DERIVE_PARAMS *pParam = (CK_ECDH1_DERIVE_PARAMS *)(pMechanism->pParameter);
 8003d9e:	6844      	ldr	r4, [r0, #4]
        if (pParam != NULL_PTR)
 8003da0:	2c00      	cmp	r4, #0
 8003da2:	d0f0      	beq.n	8003d86 <KMS_Entry_CheckMechanismContent+0xaa>
          KMS_LL_IsBufferInSecureEnclave((void *)(pParam->pSharedData), pParam->ulSharedDataLen * sizeof(CK_BYTE));
 8003da4:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8003da8:	f7fc fd64 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
          KMS_LL_IsBufferInSecureEnclave((void *)(pParam->pPublicData), pParam->ulPublicDataLen * sizeof(CK_BYTE));
 8003dac:	e9d4 1003 	ldrd	r1, r0, [r4, #12]
 8003db0:	e7e7      	b.n	8003d82 <KMS_Entry_CheckMechanismContent+0xa6>
 8003db2:	bf00      	nop

08003db4 <KMS_Entry>:
  * @param  arguments function ID dependent arguments
  * @return Operation status
  * @retval Any PKCS11 CK_RV values
  */
CK_RV KMS_Entry(KMS_FunctionID_t eID, va_list arguments)
{
 8003db4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
    return CKR_FUNCTION_FAILED;
  }

  /* Check that the Function ID is not locked */
  if (KMS_CheckServiceFctIdIsNotLocked(eID & (~KMS_CLUST_MASK)) != CKR_OK)
 8003db8:	f420 067f 	bic.w	r6, r0, #16711680	@ 0xff0000
 8003dbc:	4630      	mov	r0, r6
{
 8003dbe:	460c      	mov	r4, r1
  if (KMS_CheckServiceFctIdIsNotLocked(eID & (~KMS_CLUST_MASK)) != CKR_OK)
 8003dc0:	f001 fc34 	bl	800562c <KMS_CheckServiceFctIdIsNotLocked>
 8003dc4:	b118      	cbz	r0, 8003dce <KMS_Entry+0x1a>
  {
    return CKR_FUNCTION_FAILED;
 8003dc6:	2006      	movs	r0, #6

  /* Clean up */
  va_end(arguments);

  return e_ret_status;
}
 8003dc8:	b003      	add	sp, #12
 8003dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (KMS_CheckServiceFctIdIsNotLocked(eID & (~KMS_CLUST_MASK)) != CKR_OK)
 8003dce:	4630      	mov	r0, r6
 8003dd0:	f001 fc2c 	bl	800562c <KMS_CheckServiceFctIdIsNotLocked>
 8003dd4:	4605      	mov	r5, r0
 8003dd6:	2800      	cmp	r0, #0
 8003dd8:	d1f5      	bne.n	8003dc6 <KMS_Entry+0x12>
  switch (eID & (~KMS_CLUST_MASK))
 8003dda:	3e01      	subs	r6, #1
 8003ddc:	2e47      	cmp	r6, #71	@ 0x47
 8003dde:	d849      	bhi.n	8003e74 <KMS_Entry+0xc0>
 8003de0:	e8df f016 	tbh	[pc, r6, lsl #1]
 8003de4:	0050004a 	.word	0x0050004a
 8003de8:	00480048 	.word	0x00480048
 8003dec:	00480048 	.word	0x00480048
 8003df0:	00560048 	.word	0x00560048
 8003df4:	00480048 	.word	0x00480048
 8003df8:	00650048 	.word	0x00650048
 8003dfc:	00480084 	.word	0x00480084
 8003e00:	00480048 	.word	0x00480048
 8003e04:	00480048 	.word	0x00480048
 8003e08:	00950048 	.word	0x00950048
 8003e0c:	00bd0048 	.word	0x00bd0048
 8003e10:	00d60048 	.word	0x00d60048
 8003e14:	012500ff 	.word	0x012500ff
 8003e18:	016a014a 	.word	0x016a014a
 8003e1c:	01a7017c 	.word	0x01a7017c
 8003e20:	01f201cb 	.word	0x01f201cb
 8003e24:	023d0211 	.word	0x023d0211
 8003e28:	02850261 	.word	0x02850261
 8003e2c:	02c802a4 	.word	0x02c802a4
 8003e30:	004802ed 	.word	0x004802ed
 8003e34:	03260307 	.word	0x03260307
 8003e38:	00480352 	.word	0x00480352
 8003e3c:	00480048 	.word	0x00480048
 8003e40:	03840048 	.word	0x03840048
 8003e44:	004803b0 	.word	0x004803b0
 8003e48:	00480048 	.word	0x00480048
 8003e4c:	00480048 	.word	0x00480048
 8003e50:	00480048 	.word	0x00480048
 8003e54:	00480048 	.word	0x00480048
 8003e58:	00480048 	.word	0x00480048
 8003e5c:	03dc0048 	.word	0x03dc0048
 8003e60:	00480048 	.word	0x00480048
 8003e64:	00480048 	.word	0x00480048
 8003e68:	041f0048 	.word	0x041f0048
 8003e6c:	04420436 	.word	0x04420436
 8003e70:	0463044e 	.word	0x0463044e
      e_ret_status = CKR_FUNCTION_NOT_SUPPORTED;
 8003e74:	2054      	movs	r0, #84	@ 0x54
 8003e76:	e7a7      	b.n	8003dc8 <KMS_Entry+0x14>
      e_ret_status = KMS_Initialize(pInitArgs);
 8003e78:	6820      	ldr	r0, [r4, #0]
}
 8003e7a:	b003      	add	sp, #12
 8003e7c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      e_ret_status = KMS_Initialize(pInitArgs);
 8003e80:	f000 bc2a 	b.w	80046d8 <KMS_Initialize>
      e_ret_status = KMS_Finalize(pReserved);
 8003e84:	6820      	ldr	r0, [r4, #0]
}
 8003e86:	b003      	add	sp, #12
 8003e88:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      e_ret_status = KMS_Finalize(pReserved);
 8003e8c:	f000 bc5e 	b.w	800474c <KMS_Finalize>
      type        = va_arg(arguments, CK_MECHANISM_TYPE);
 8003e90:	e9d4 5600 	ldrd	r5, r6, [r4]
      pInfo       = va_arg(arguments, CK_MECHANISM_INFO_PTR);
 8003e94:	68a4      	ldr	r4, [r4, #8]
      KMS_LL_IsBufferInSecureEnclave((void *)pInfo, sizeof(CK_MECHANISM_INFO));
 8003e96:	210c      	movs	r1, #12
 8003e98:	4620      	mov	r0, r4
 8003e9a:	f7fc fceb 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
        e_ret_status = KMS_GetMechanismInfo(slotID, type, pInfo);
 8003e9e:	4622      	mov	r2, r4
 8003ea0:	4631      	mov	r1, r6
 8003ea2:	4628      	mov	r0, r5
}
 8003ea4:	b003      	add	sp, #12
 8003ea6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        e_ret_status = KMS_GetMechanismInfo(slotID, type, pInfo);
 8003eaa:	f000 bcdd 	b.w	8004868 <KMS_GetMechanismInfo>
      Notify = va_arg(arguments, CK_NOTIFY);
 8003eae:	e9d4 5602 	ldrd	r5, r6, [r4, #8]
      flags = va_arg(arguments, uint32_t);
 8003eb2:	e9d4 7800 	ldrd	r7, r8, [r4]
      KMS_LL_IsBufferInSecureEnclave((void *)pApplication, sizeof(CK_VOID_PTR));
 8003eb6:	2104      	movs	r1, #4
      phSession = va_arg(arguments, CK_SESSION_HANDLE_PTR);
 8003eb8:	6924      	ldr	r4, [r4, #16]
      KMS_LL_IsBufferInSecureEnclave((void *)pApplication, sizeof(CK_VOID_PTR));
 8003eba:	4628      	mov	r0, r5
 8003ebc:	f7fc fcda 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      KMS_LL_IsBufferInSecureEnclave((void *)Notify, sizeof(CK_NOTIFY));
 8003ec0:	2104      	movs	r1, #4
 8003ec2:	4630      	mov	r0, r6
 8003ec4:	f7fc fcd6 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      KMS_LL_IsBufferInSecureEnclave((void *)phSession, sizeof(CK_SESSION_HANDLE));
 8003ec8:	2104      	movs	r1, #4
 8003eca:	4620      	mov	r0, r4
 8003ecc:	f7fc fcd2 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      if (!KMS_IS_INITIALIZED())
 8003ed0:	4bbc      	ldr	r3, [pc, #752]	@ (80041c4 <KMS_Entry+0x410>)
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	b913      	cbnz	r3, 8003edc <KMS_Entry+0x128>
        e_ret_status = CKR_CRYPTOKI_NOT_INITIALIZED;
 8003ed6:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8003eda:	e775      	b.n	8003dc8 <KMS_Entry+0x14>
      e_ret_status = KMS_OpenSession(slotID,  flags, pApplication, Notify, phSession);
 8003edc:	9400      	str	r4, [sp, #0]
 8003ede:	4633      	mov	r3, r6
 8003ee0:	462a      	mov	r2, r5
 8003ee2:	4641      	mov	r1, r8
 8003ee4:	4638      	mov	r0, r7
 8003ee6:	f000 fc4d 	bl	8004784 <KMS_OpenSession>
      break;
 8003eea:	e76d      	b.n	8003dc8 <KMS_Entry+0x14>
      if (!KMS_IS_INITIALIZED())
 8003eec:	4bb5      	ldr	r3, [pc, #724]	@ (80041c4 <KMS_Entry+0x410>)
      hSession = va_arg(arguments, CK_SESSION_HANDLE);
 8003eee:	6824      	ldr	r4, [r4, #0]
      if (!KMS_IS_INITIALIZED())
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d0ef      	beq.n	8003ed6 <KMS_Entry+0x122>
      if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8003ef6:	4620      	mov	r0, r4
 8003ef8:	f000 fc76 	bl	80047e8 <KMS_CheckSessionHdle>
 8003efc:	b108      	cbz	r0, 8003f02 <KMS_Entry+0x14e>
        e_ret_status = CKR_SESSION_HANDLE_INVALID;
 8003efe:	20b3      	movs	r0, #179	@ 0xb3
 8003f00:	e762      	b.n	8003dc8 <KMS_Entry+0x14>
      e_ret_status = KMS_CloseSession(hSession);
 8003f02:	4620      	mov	r0, r4
}
 8003f04:	b003      	add	sp, #12
 8003f06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      e_ret_status = KMS_CloseSession(hSession);
 8003f0a:	f000 bc7f 	b.w	800480c <KMS_CloseSession>
      pTemplate = va_arg(arguments, CK_ATTRIBUTE_PTR);
 8003f0e:	e9d4 6700 	ldrd	r6, r7, [r4]
      phObject = va_arg(arguments, CK_OBJECT_HANDLE_PTR);
 8003f12:	e9d4 9802 	ldrd	r9, r8, [r4, #8]
 8003f16:	463c      	mov	r4, r7
      for (CK_ULONG i = 0; i < ulCount; i++)
 8003f18:	454d      	cmp	r5, r9
 8003f1a:	d115      	bne.n	8003f48 <KMS_Entry+0x194>
      KMS_LL_IsBufferInSecureEnclave((void *)phObject, sizeof(CK_OBJECT_HANDLE));
 8003f1c:	2104      	movs	r1, #4
 8003f1e:	4640      	mov	r0, r8
 8003f20:	f7fc fca8 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      if (!KMS_IS_INITIALIZED())
 8003f24:	4ba7      	ldr	r3, [pc, #668]	@ (80041c4 <KMS_Entry+0x410>)
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d0d4      	beq.n	8003ed6 <KMS_Entry+0x122>
      if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8003f2c:	4630      	mov	r0, r6
 8003f2e:	f000 fc5b 	bl	80047e8 <KMS_CheckSessionHdle>
 8003f32:	2800      	cmp	r0, #0
 8003f34:	d1e3      	bne.n	8003efe <KMS_Entry+0x14a>
      e_ret_status = KMS_CreateObject(hSession, pTemplate, ulCount, phObject);
 8003f36:	4643      	mov	r3, r8
 8003f38:	462a      	mov	r2, r5
 8003f3a:	4639      	mov	r1, r7
 8003f3c:	4630      	mov	r0, r6
}
 8003f3e:	b003      	add	sp, #12
 8003f40:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      e_ret_status = KMS_CreateObject(hSession, pTemplate, ulCount, phObject);
 8003f44:	f7ff b962 	b.w	800320c <KMS_CreateObject>
        KMS_LL_IsBufferInSecureEnclave((void *) & (pTemplate[i]), sizeof(CK_ATTRIBUTE));
 8003f48:	4620      	mov	r0, r4
 8003f4a:	210c      	movs	r1, #12
 8003f4c:	f7fc fc92 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
        KMS_LL_IsBufferInSecureEnclave((void *)(pTemplate[i].pValue), pTemplate[i].ulValueLen);
 8003f50:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 8003f54:	f7fc fc8e 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      for (CK_ULONG i = 0; i < ulCount; i++)
 8003f58:	3501      	adds	r5, #1
 8003f5a:	340c      	adds	r4, #12
 8003f5c:	e7dc      	b.n	8003f18 <KMS_Entry+0x164>
      if (!KMS_IS_INITIALIZED())
 8003f5e:	4b99      	ldr	r3, [pc, #612]	@ (80041c4 <KMS_Entry+0x410>)
 8003f60:	781b      	ldrb	r3, [r3, #0]
      hObject = va_arg(arguments, CK_OBJECT_HANDLE);
 8003f62:	e9d4 5400 	ldrd	r5, r4, [r4]
      if (!KMS_IS_INITIALIZED())
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d0b5      	beq.n	8003ed6 <KMS_Entry+0x122>
      if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8003f6a:	4628      	mov	r0, r5
 8003f6c:	f000 fc3c 	bl	80047e8 <KMS_CheckSessionHdle>
 8003f70:	2800      	cmp	r0, #0
 8003f72:	d1c4      	bne.n	8003efe <KMS_Entry+0x14a>
      object_range = KMS_Objects_GetRange(hObject);
 8003f74:	4620      	mov	r0, r4
 8003f76:	f001 fa9f 	bl	80054b8 <KMS_Objects_GetRange>
      if ((object_range == KMS_OBJECT_RANGE_NVM_DYNAMIC_ID) ||
 8003f7a:	3802      	subs	r0, #2
 8003f7c:	b2c0      	uxtb	r0, r0
 8003f7e:	2801      	cmp	r0, #1
 8003f80:	d848      	bhi.n	8004014 <KMS_Entry+0x260>
        e_ret_status = KMS_DestroyObject(hSession, hObject);
 8003f82:	4621      	mov	r1, r4
 8003f84:	4628      	mov	r0, r5
}
 8003f86:	b003      	add	sp, #12
 8003f88:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        e_ret_status = KMS_DestroyObject(hSession, hObject);
 8003f8c:	f7ff b994 	b.w	80032b8 <KMS_DestroyObject>
      ulCount        = va_arg(arguments, CK_ULONG);
 8003f90:	e9d4 8902 	ldrd	r8, r9, [r4, #8]
      hObject        = va_arg(arguments, CK_OBJECT_HANDLE);
 8003f94:	e9d4 6700 	ldrd	r6, r7, [r4]
      pTemplate      = va_arg(arguments, CK_ATTRIBUTE_PTR);
 8003f98:	4644      	mov	r4, r8
      for (CK_ULONG i = 0; i < ulCount; i++)
 8003f9a:	454d      	cmp	r5, r9
 8003f9c:	d116      	bne.n	8003fcc <KMS_Entry+0x218>
      if (!KMS_IS_INITIALIZED())
 8003f9e:	4b89      	ldr	r3, [pc, #548]	@ (80041c4 <KMS_Entry+0x410>)
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d097      	beq.n	8003ed6 <KMS_Entry+0x122>
      if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8003fa6:	4630      	mov	r0, r6
 8003fa8:	f000 fc1e 	bl	80047e8 <KMS_CheckSessionHdle>
 8003fac:	2800      	cmp	r0, #0
 8003fae:	d1a6      	bne.n	8003efe <KMS_Entry+0x14a>
      object_range = KMS_Objects_GetRange(hObject);
 8003fb0:	4638      	mov	r0, r7
 8003fb2:	f001 fa81 	bl	80054b8 <KMS_Objects_GetRange>
      if ((object_range == KMS_OBJECT_RANGE_EMBEDDED) ||
 8003fb6:	2803      	cmp	r0, #3
 8003fb8:	d82c      	bhi.n	8004014 <KMS_Entry+0x260>
        e_ret_status = KMS_GetAttributeValue(hSession, hObject, pTemplate, ulCount);
 8003fba:	462b      	mov	r3, r5
 8003fbc:	4642      	mov	r2, r8
 8003fbe:	4639      	mov	r1, r7
 8003fc0:	4630      	mov	r0, r6
}
 8003fc2:	b003      	add	sp, #12
 8003fc4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        e_ret_status = KMS_GetAttributeValue(hSession, hObject, pTemplate, ulCount);
 8003fc8:	f7ff b9a8 	b.w	800331c <KMS_GetAttributeValue>
        KMS_LL_IsBufferInSecureEnclave((void *) & (pTemplate[i]), sizeof(CK_ATTRIBUTE));
 8003fcc:	4620      	mov	r0, r4
 8003fce:	210c      	movs	r1, #12
 8003fd0:	f7fc fc50 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
        KMS_LL_IsBufferInSecureEnclave((void *)(pTemplate[i].pValue), pTemplate[i].ulValueLen);
 8003fd4:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 8003fd8:	f7fc fc4c 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      for (CK_ULONG i = 0; i < ulCount; i++)
 8003fdc:	3501      	adds	r5, #1
 8003fde:	340c      	adds	r4, #12
 8003fe0:	e7db      	b.n	8003f9a <KMS_Entry+0x1e6>
      hObject        = va_arg(arguments, CK_OBJECT_HANDLE);
 8003fe2:	e9d4 7600 	ldrd	r7, r6, [r4]
      ulCount        = va_arg(arguments, CK_ULONG);
 8003fe6:	e9d4 4802 	ldrd	r4, r8, [r4, #8]
      for (CK_ULONG i = 0; i < ulCount; i++)
 8003fea:	4545      	cmp	r5, r8
 8003fec:	d114      	bne.n	8004018 <KMS_Entry+0x264>
      if (!KMS_IS_INITIALIZED())
 8003fee:	4b75      	ldr	r3, [pc, #468]	@ (80041c4 <KMS_Entry+0x410>)
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f43f af6f 	beq.w	8003ed6 <KMS_Entry+0x122>
      if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8003ff8:	4638      	mov	r0, r7
 8003ffa:	f000 fbf5 	bl	80047e8 <KMS_CheckSessionHdle>
 8003ffe:	2800      	cmp	r0, #0
 8004000:	f47f af7d 	bne.w	8003efe <KMS_Entry+0x14a>
      object_range = KMS_Objects_GetRange(hObject);
 8004004:	4630      	mov	r0, r6
 8004006:	f001 fa57 	bl	80054b8 <KMS_Objects_GetRange>
          (object_range == KMS_OBJECT_RANGE_NVM_DYNAMIC_ID) ||
 800400a:	3801      	subs	r0, #1
      if ((object_range == KMS_OBJECT_RANGE_NVM_STATIC_ID) ||
 800400c:	b2c0      	uxtb	r0, r0
 800400e:	2802      	cmp	r0, #2
 8004010:	f67f af30 	bls.w	8003e74 <KMS_Entry+0xc0>
        e_ret_status = CKR_OBJECT_HANDLE_INVALID;
 8004014:	2082      	movs	r0, #130	@ 0x82
 8004016:	e6d7      	b.n	8003dc8 <KMS_Entry+0x14>
        KMS_LL_IsBufferInSecureEnclave((void *) & (pTemplate[i]), sizeof(CK_ATTRIBUTE));
 8004018:	4620      	mov	r0, r4
 800401a:	210c      	movs	r1, #12
 800401c:	f7fc fc2a 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
        KMS_LL_IsBufferInSecureEnclave((void *)(pTemplate[i].pValue), pTemplate[i].ulValueLen);
 8004020:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 8004024:	f7fc fc26 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      for (CK_ULONG i = 0; i < ulCount; i++)
 8004028:	3501      	adds	r5, #1
 800402a:	340c      	adds	r4, #12
 800402c:	e7dd      	b.n	8003fea <KMS_Entry+0x236>
      pTemplate      = va_arg(arguments, CK_ATTRIBUTE_PTR);
 800402e:	e9d4 6700 	ldrd	r6, r7, [r4]
      ulCount         = va_arg(arguments, CK_ULONG);
 8004032:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8004036:	463c      	mov	r4, r7
      for (CK_ULONG i = 0; i < ulCount; i++)
 8004038:	4545      	cmp	r5, r8
 800403a:	d112      	bne.n	8004062 <KMS_Entry+0x2ae>
      if (!KMS_IS_INITIALIZED())
 800403c:	4b61      	ldr	r3, [pc, #388]	@ (80041c4 <KMS_Entry+0x410>)
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	f43f af48 	beq.w	8003ed6 <KMS_Entry+0x122>
      if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8004046:	4630      	mov	r0, r6
 8004048:	f000 fbce 	bl	80047e8 <KMS_CheckSessionHdle>
 800404c:	2800      	cmp	r0, #0
 800404e:	f47f af56 	bne.w	8003efe <KMS_Entry+0x14a>
      e_ret_status = KMS_FindObjectsInit(hSession, pTemplate, ulCount);
 8004052:	462a      	mov	r2, r5
 8004054:	4639      	mov	r1, r7
 8004056:	4630      	mov	r0, r6
}
 8004058:	b003      	add	sp, #12
 800405a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      e_ret_status = KMS_FindObjectsInit(hSession, pTemplate, ulCount);
 800405e:	f7ff b9e5 	b.w	800342c <KMS_FindObjectsInit>
        KMS_LL_IsBufferInSecureEnclave((void *) & (pTemplate[i]), sizeof(CK_ATTRIBUTE));
 8004062:	4620      	mov	r0, r4
 8004064:	210c      	movs	r1, #12
 8004066:	f7fc fc05 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
        KMS_LL_IsBufferInSecureEnclave((void *)(pTemplate[i].pValue), pTemplate[i].ulValueLen);
 800406a:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 800406e:	f7fc fc01 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      for (CK_ULONG i = 0; i < ulCount; i++)
 8004072:	3501      	adds	r5, #1
 8004074:	340c      	adds	r4, #12
 8004076:	e7df      	b.n	8004038 <KMS_Entry+0x284>
      phObject          = va_arg(arguments, CK_OBJECT_HANDLE_PTR);
 8004078:	e9d4 5600 	ldrd	r5, r6, [r4]
      pulObjectCount    = va_arg(arguments, CK_ULONG_PTR);
 800407c:	e9d4 7402 	ldrd	r7, r4, [r4, #8]
      KMS_LL_IsBufferInSecureEnclave((void *)phObject, sizeof(CK_OBJECT_HANDLE)*ulMaxObjectCount);
 8004080:	4630      	mov	r0, r6
 8004082:	00b9      	lsls	r1, r7, #2
 8004084:	f7fc fbf6 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      KMS_LL_IsBufferInSecureEnclave((void *)pulObjectCount, sizeof(CK_ULONG));
 8004088:	2104      	movs	r1, #4
 800408a:	4620      	mov	r0, r4
 800408c:	f7fc fbf2 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      if (!KMS_IS_INITIALIZED())
 8004090:	4b4c      	ldr	r3, [pc, #304]	@ (80041c4 <KMS_Entry+0x410>)
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	2b00      	cmp	r3, #0
 8004096:	f43f af1e 	beq.w	8003ed6 <KMS_Entry+0x122>
      if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 800409a:	4628      	mov	r0, r5
 800409c:	f000 fba4 	bl	80047e8 <KMS_CheckSessionHdle>
 80040a0:	2800      	cmp	r0, #0
 80040a2:	f47f af2c 	bne.w	8003efe <KMS_Entry+0x14a>
      e_ret_status = KMS_FindObjects(hSession, phObject, ulMaxObjectCount, pulObjectCount);
 80040a6:	4623      	mov	r3, r4
 80040a8:	463a      	mov	r2, r7
 80040aa:	4631      	mov	r1, r6
 80040ac:	4628      	mov	r0, r5
}
 80040ae:	b003      	add	sp, #12
 80040b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      e_ret_status = KMS_FindObjects(hSession, phObject, ulMaxObjectCount, pulObjectCount);
 80040b4:	f7ff ba04 	b.w	80034c0 <KMS_FindObjects>
      if (!KMS_IS_INITIALIZED())
 80040b8:	4b42      	ldr	r3, [pc, #264]	@ (80041c4 <KMS_Entry+0x410>)
      hSession          = va_arg(arguments, CK_SESSION_HANDLE);
 80040ba:	6824      	ldr	r4, [r4, #0]
      if (!KMS_IS_INITIALIZED())
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f43f af09 	beq.w	8003ed6 <KMS_Entry+0x122>
      if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 80040c4:	4620      	mov	r0, r4
 80040c6:	f000 fb8f 	bl	80047e8 <KMS_CheckSessionHdle>
 80040ca:	2800      	cmp	r0, #0
 80040cc:	f47f af17 	bne.w	8003efe <KMS_Entry+0x14a>
      e_ret_status = KMS_FindObjectsFinal(hSession);
 80040d0:	4620      	mov	r0, r4
}
 80040d2:	b003      	add	sp, #12
 80040d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      e_ret_status = KMS_FindObjectsFinal(hSession);
 80040d8:	f7ff ba2a 	b.w	8003530 <KMS_FindObjectsFinal>
      pMechanism      = va_arg(arguments, CK_MECHANISM_PTR);
 80040dc:	e9d4 6500 	ldrd	r6, r5, [r4]
      KMS_LL_IsBufferInSecureEnclave((void *)pMechanism, sizeof(CK_MECHANISM));
 80040e0:	210c      	movs	r1, #12
 80040e2:	4628      	mov	r0, r5
      hKey            = va_arg(arguments, CK_OBJECT_HANDLE);
 80040e4:	68a4      	ldr	r4, [r4, #8]
      KMS_LL_IsBufferInSecureEnclave((void *)pMechanism, sizeof(CK_MECHANISM));
 80040e6:	f7fc fbc5 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      if (pMechanism != NULL)
 80040ea:	b9bd      	cbnz	r5, 800411c <KMS_Entry+0x368>
      if (!KMS_IS_INITIALIZED())
 80040ec:	4b35      	ldr	r3, [pc, #212]	@ (80041c4 <KMS_Entry+0x410>)
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f43f aef0 	beq.w	8003ed6 <KMS_Entry+0x122>
      if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 80040f6:	4630      	mov	r0, r6
 80040f8:	f000 fb76 	bl	80047e8 <KMS_CheckSessionHdle>
 80040fc:	2800      	cmp	r0, #0
 80040fe:	f47f aefe 	bne.w	8003efe <KMS_Entry+0x14a>
      if (KMS_Objects_GetRange(hKey) == KMS_OBJECT_RANGE_UNKNOWN)
 8004102:	4620      	mov	r0, r4
 8004104:	f001 f9d8 	bl	80054b8 <KMS_Objects_GetRange>
 8004108:	2806      	cmp	r0, #6
 800410a:	d083      	beq.n	8004014 <KMS_Entry+0x260>
      e_ret_status = KMS_EncryptInit(hSession, pMechanism, hKey);
 800410c:	4622      	mov	r2, r4
 800410e:	4629      	mov	r1, r5
 8004110:	4630      	mov	r0, r6
}
 8004112:	b003      	add	sp, #12
 8004114:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      e_ret_status = KMS_EncryptInit(hSession, pMechanism, hKey);
 8004118:	f7ff bbe2 	b.w	80038e0 <KMS_EncryptInit>
        KMS_LL_IsBufferInSecureEnclave((void *)(pMechanism->pParameter), pMechanism->ulParameterLen * sizeof(CK_BYTE));
 800411c:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
 8004120:	f7fc fba8 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
        if (KMS_Entry_CheckMechanismContent(pMechanism) != CKR_OK)
 8004124:	4628      	mov	r0, r5
 8004126:	f7ff fdd9 	bl	8003cdc <KMS_Entry_CheckMechanismContent>
 800412a:	2800      	cmp	r0, #0
 800412c:	d0de      	beq.n	80040ec <KMS_Entry+0x338>
          e_ret_status = CKR_MECHANISM_INVALID;
 800412e:	2070      	movs	r0, #112	@ 0x70
 8004130:	e64a      	b.n	8003dc8 <KMS_Entry+0x14>
      pEncryptedData        = va_arg(arguments, CK_BYTE_PTR);
 8004132:	e9d4 5802 	ldrd	r5, r8, [r4, #8]
      pData                 = va_arg(arguments, CK_BYTE_PTR);
 8004136:	e9d4 6700 	ldrd	r6, r7, [r4]
      KMS_LL_IsBufferInSecureEnclave((void *)pData, ulDataLen * sizeof(CK_BYTE));
 800413a:	4629      	mov	r1, r5
      pulEncryptedDataLen   = va_arg(arguments, CK_ULONG_PTR);
 800413c:	6924      	ldr	r4, [r4, #16]
      KMS_LL_IsBufferInSecureEnclave((void *)pData, ulDataLen * sizeof(CK_BYTE));
 800413e:	4638      	mov	r0, r7
 8004140:	f7fc fb98 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      KMS_LL_IsBufferInSecureEnclave((void *)pEncryptedData, ulDataLen * sizeof(CK_BYTE));
 8004144:	4629      	mov	r1, r5
 8004146:	4640      	mov	r0, r8
 8004148:	f7fc fb94 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      KMS_LL_IsBufferInSecureEnclave((void *)pulEncryptedDataLen, sizeof(CK_ULONG));
 800414c:	2104      	movs	r1, #4
 800414e:	4620      	mov	r0, r4
 8004150:	f7fc fb90 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      if (!KMS_IS_INITIALIZED())
 8004154:	4b1b      	ldr	r3, [pc, #108]	@ (80041c4 <KMS_Entry+0x410>)
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	f43f aebc 	beq.w	8003ed6 <KMS_Entry+0x122>
      if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 800415e:	4630      	mov	r0, r6
 8004160:	f000 fb42 	bl	80047e8 <KMS_CheckSessionHdle>
 8004164:	2800      	cmp	r0, #0
 8004166:	f47f aeca 	bne.w	8003efe <KMS_Entry+0x14a>
      e_ret_status = KMS_Encrypt(hSession, pData, ulDataLen, pEncryptedData, pulEncryptedDataLen);
 800416a:	9400      	str	r4, [sp, #0]
 800416c:	4643      	mov	r3, r8
 800416e:	462a      	mov	r2, r5
 8004170:	4639      	mov	r1, r7
 8004172:	4630      	mov	r0, r6
 8004174:	f7ff fc2c 	bl	80039d0 <KMS_Encrypt>
      break;
 8004178:	e626      	b.n	8003dc8 <KMS_Entry+0x14>
      pEncryptedPart        = va_arg(arguments, CK_BYTE_PTR);
 800417a:	e9d4 5802 	ldrd	r5, r8, [r4, #8]
      pPart                 = va_arg(arguments, CK_BYTE_PTR);
 800417e:	e9d4 6700 	ldrd	r6, r7, [r4]
      KMS_LL_IsBufferInSecureEnclave((void *)pPart, ulPartLen * sizeof(CK_BYTE));
 8004182:	4629      	mov	r1, r5
      pulEncryptedPartLen   = va_arg(arguments, CK_ULONG_PTR);
 8004184:	6924      	ldr	r4, [r4, #16]
      KMS_LL_IsBufferInSecureEnclave((void *)pPart, ulPartLen * sizeof(CK_BYTE));
 8004186:	4638      	mov	r0, r7
 8004188:	f7fc fb74 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      KMS_LL_IsBufferInSecureEnclave((void *)pEncryptedPart, ulPartLen * sizeof(CK_BYTE));
 800418c:	4629      	mov	r1, r5
 800418e:	4640      	mov	r0, r8
 8004190:	f7fc fb70 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      KMS_LL_IsBufferInSecureEnclave((void *)pulEncryptedPartLen, sizeof(CK_ULONG));
 8004194:	2104      	movs	r1, #4
 8004196:	4620      	mov	r0, r4
 8004198:	f7fc fb6c 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      if (!KMS_IS_INITIALIZED())
 800419c:	4b09      	ldr	r3, [pc, #36]	@ (80041c4 <KMS_Entry+0x410>)
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	f43f ae98 	beq.w	8003ed6 <KMS_Entry+0x122>
      if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 80041a6:	4630      	mov	r0, r6
 80041a8:	f000 fb1e 	bl	80047e8 <KMS_CheckSessionHdle>
 80041ac:	2800      	cmp	r0, #0
 80041ae:	f47f aea6 	bne.w	8003efe <KMS_Entry+0x14a>
      e_ret_status = KMS_EncryptUpdate(hSession, pPart, ulPartLen, pEncryptedPart, pulEncryptedPartLen);
 80041b2:	9400      	str	r4, [sp, #0]
 80041b4:	4643      	mov	r3, r8
 80041b6:	462a      	mov	r2, r5
 80041b8:	4639      	mov	r1, r7
 80041ba:	4630      	mov	r0, r6
 80041bc:	f7ff fb94 	bl	80038e8 <KMS_EncryptUpdate>
      break;
 80041c0:	e602      	b.n	8003dc8 <KMS_Entry+0x14>
 80041c2:	bf00      	nop
 80041c4:	20000c48 	.word	0x20000c48
      pLastEncryptedPart            = va_arg(arguments, CK_BYTE_PTR);
 80041c8:	e9d4 5600 	ldrd	r5, r6, [r4]
      pulLastEncryptedPartLen       = va_arg(arguments, CK_ULONG_PTR);
 80041cc:	68a4      	ldr	r4, [r4, #8]
      if (pulLastEncryptedPartLen != NULL)
 80041ce:	b13c      	cbz	r4, 80041e0 <KMS_Entry+0x42c>
        KMS_LL_IsBufferInSecureEnclave((void *)pulLastEncryptedPartLen, sizeof(CK_ULONG));
 80041d0:	2104      	movs	r1, #4
 80041d2:	4620      	mov	r0, r4
 80041d4:	f7fc fb4e 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
        KMS_LL_IsBufferInSecureEnclave((void *)pLastEncryptedPart, (*pulLastEncryptedPartLen)*sizeof(CK_BYTE));
 80041d8:	6821      	ldr	r1, [r4, #0]
 80041da:	4630      	mov	r0, r6
 80041dc:	f7fc fb4a 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      if (!KMS_IS_INITIALIZED())
 80041e0:	4bc1      	ldr	r3, [pc, #772]	@ (80044e8 <KMS_Entry+0x734>)
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f43f ae76 	beq.w	8003ed6 <KMS_Entry+0x122>
      if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 80041ea:	4628      	mov	r0, r5
 80041ec:	f000 fafc 	bl	80047e8 <KMS_CheckSessionHdle>
 80041f0:	2800      	cmp	r0, #0
 80041f2:	f47f ae84 	bne.w	8003efe <KMS_Entry+0x14a>
      e_ret_status = KMS_EncryptFinal(hSession, pLastEncryptedPart, pulLastEncryptedPartLen);
 80041f6:	4622      	mov	r2, r4
 80041f8:	4631      	mov	r1, r6
 80041fa:	4628      	mov	r0, r5
}
 80041fc:	b003      	add	sp, #12
 80041fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      e_ret_status = KMS_EncryptFinal(hSession, pLastEncryptedPart, pulLastEncryptedPartLen);
 8004202:	f7ff bc01 	b.w	8003a08 <KMS_EncryptFinal>
      pMechanism    = va_arg(arguments, CK_MECHANISM_PTR);
 8004206:	e9d4 6500 	ldrd	r6, r5, [r4]
      KMS_LL_IsBufferInSecureEnclave((void *)pMechanism, sizeof(CK_MECHANISM));
 800420a:	210c      	movs	r1, #12
 800420c:	4628      	mov	r0, r5
      hKey          = va_arg(arguments, CK_OBJECT_HANDLE);
 800420e:	68a4      	ldr	r4, [r4, #8]
      KMS_LL_IsBufferInSecureEnclave((void *)pMechanism, sizeof(CK_MECHANISM));
 8004210:	f7fc fb30 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      if (pMechanism != NULL)
 8004214:	b9c5      	cbnz	r5, 8004248 <KMS_Entry+0x494>
      if (!KMS_IS_INITIALIZED())
 8004216:	4bb4      	ldr	r3, [pc, #720]	@ (80044e8 <KMS_Entry+0x734>)
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	2b00      	cmp	r3, #0
 800421c:	f43f ae5b 	beq.w	8003ed6 <KMS_Entry+0x122>
      if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8004220:	4630      	mov	r0, r6
 8004222:	f000 fae1 	bl	80047e8 <KMS_CheckSessionHdle>
 8004226:	2800      	cmp	r0, #0
 8004228:	f47f ae69 	bne.w	8003efe <KMS_Entry+0x14a>
      if (KMS_Objects_GetRange(hKey) == KMS_OBJECT_RANGE_UNKNOWN)
 800422c:	4620      	mov	r0, r4
 800422e:	f001 f943 	bl	80054b8 <KMS_Objects_GetRange>
 8004232:	2806      	cmp	r0, #6
 8004234:	f43f aeee 	beq.w	8004014 <KMS_Entry+0x260>
      e_ret_status = KMS_DecryptInit(hSession, pMechanism, hKey);
 8004238:	4622      	mov	r2, r4
 800423a:	4629      	mov	r1, r5
 800423c:	4630      	mov	r0, r6
}
 800423e:	b003      	add	sp, #12
 8004240:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      e_ret_status = KMS_DecryptInit(hSession, pMechanism, hKey);
 8004244:	f7ff bc46 	b.w	8003ad4 <KMS_DecryptInit>
        KMS_LL_IsBufferInSecureEnclave((void *)(pMechanism->pParameter), pMechanism->ulParameterLen * sizeof(CK_BYTE));
 8004248:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
 800424c:	f7fc fb12 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
        if (KMS_Entry_CheckMechanismContent(pMechanism) != CKR_OK)
 8004250:	4628      	mov	r0, r5
 8004252:	f7ff fd43 	bl	8003cdc <KMS_Entry_CheckMechanismContent>
 8004256:	2800      	cmp	r0, #0
 8004258:	f47f af69 	bne.w	800412e <KMS_Entry+0x37a>
 800425c:	e7db      	b.n	8004216 <KMS_Entry+0x462>
      pData                 = va_arg(arguments, CK_BYTE_PTR);
 800425e:	e9d4 5802 	ldrd	r5, r8, [r4, #8]
      pEncryptedData        = va_arg(arguments, CK_BYTE_PTR);
 8004262:	e9d4 6700 	ldrd	r6, r7, [r4]
      KMS_LL_IsBufferInSecureEnclave((void *)pEncryptedData, ulEncryptedDataLen * sizeof(CK_BYTE));
 8004266:	4629      	mov	r1, r5
      pulDataLen            = va_arg(arguments, CK_ULONG_PTR);
 8004268:	6924      	ldr	r4, [r4, #16]
      KMS_LL_IsBufferInSecureEnclave((void *)pEncryptedData, ulEncryptedDataLen * sizeof(CK_BYTE));
 800426a:	4638      	mov	r0, r7
 800426c:	f7fc fb02 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      KMS_LL_IsBufferInSecureEnclave((void *)pData, ulEncryptedDataLen * sizeof(CK_BYTE));
 8004270:	4629      	mov	r1, r5
 8004272:	4640      	mov	r0, r8
 8004274:	f7fc fafe 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      KMS_LL_IsBufferInSecureEnclave((void *)pulDataLen, sizeof(CK_ULONG));
 8004278:	2104      	movs	r1, #4
 800427a:	4620      	mov	r0, r4
 800427c:	f7fc fafa 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      if (!KMS_IS_INITIALIZED())
 8004280:	4b99      	ldr	r3, [pc, #612]	@ (80044e8 <KMS_Entry+0x734>)
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	f43f ae26 	beq.w	8003ed6 <KMS_Entry+0x122>
      if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 800428a:	4630      	mov	r0, r6
 800428c:	f000 faac 	bl	80047e8 <KMS_CheckSessionHdle>
 8004290:	2800      	cmp	r0, #0
 8004292:	f47f ae34 	bne.w	8003efe <KMS_Entry+0x14a>
      e_ret_status = KMS_Decrypt(hSession, pEncryptedData, ulEncryptedDataLen,
 8004296:	9400      	str	r4, [sp, #0]
 8004298:	4643      	mov	r3, r8
 800429a:	462a      	mov	r2, r5
 800429c:	4639      	mov	r1, r7
 800429e:	4630      	mov	r0, r6
 80042a0:	f7ff fc9c 	bl	8003bdc <KMS_Decrypt>
      break;
 80042a4:	e590      	b.n	8003dc8 <KMS_Entry+0x14>
      pPart                 = va_arg(arguments, CK_BYTE_PTR);
 80042a6:	e9d4 5802 	ldrd	r5, r8, [r4, #8]
      pEncryptedPart        = va_arg(arguments, CK_BYTE_PTR);
 80042aa:	e9d4 6700 	ldrd	r6, r7, [r4]
      KMS_LL_IsBufferInSecureEnclave((void *)pEncryptedPart, ulEncryptedPartLen * sizeof(CK_BYTE));
 80042ae:	4629      	mov	r1, r5
      pulPartLen            = va_arg(arguments, CK_ULONG_PTR);
 80042b0:	6924      	ldr	r4, [r4, #16]
      KMS_LL_IsBufferInSecureEnclave((void *)pEncryptedPart, ulEncryptedPartLen * sizeof(CK_BYTE));
 80042b2:	4638      	mov	r0, r7
 80042b4:	f7fc fade 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      KMS_LL_IsBufferInSecureEnclave((void *)pPart, ulEncryptedPartLen * sizeof(CK_BYTE));
 80042b8:	4629      	mov	r1, r5
 80042ba:	4640      	mov	r0, r8
 80042bc:	f7fc fada 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      KMS_LL_IsBufferInSecureEnclave((void *)pulPartLen, sizeof(CK_ULONG));
 80042c0:	2104      	movs	r1, #4
 80042c2:	4620      	mov	r0, r4
 80042c4:	f7fc fad6 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      if (!KMS_IS_INITIALIZED())
 80042c8:	4b87      	ldr	r3, [pc, #540]	@ (80044e8 <KMS_Entry+0x734>)
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f43f ae02 	beq.w	8003ed6 <KMS_Entry+0x122>
      if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 80042d2:	4630      	mov	r0, r6
 80042d4:	f000 fa88 	bl	80047e8 <KMS_CheckSessionHdle>
 80042d8:	2800      	cmp	r0, #0
 80042da:	f47f ae10 	bne.w	8003efe <KMS_Entry+0x14a>
      e_ret_status = KMS_DecryptUpdate(hSession, pEncryptedPart, ulEncryptedPartLen, pPart, pulPartLen);
 80042de:	9400      	str	r4, [sp, #0]
 80042e0:	4643      	mov	r3, r8
 80042e2:	462a      	mov	r2, r5
 80042e4:	4639      	mov	r1, r7
 80042e6:	4630      	mov	r0, r6
 80042e8:	f7ff fbf8 	bl	8003adc <KMS_DecryptUpdate>
      break;
 80042ec:	e56c      	b.n	8003dc8 <KMS_Entry+0x14>
      pLastPart       = va_arg(arguments, CK_BYTE_PTR);
 80042ee:	e9d4 5600 	ldrd	r5, r6, [r4]
      pulLastPartLen  = va_arg(arguments, CK_ULONG_PTR);
 80042f2:	68a4      	ldr	r4, [r4, #8]
      if (pulLastPartLen != NULL)
 80042f4:	b13c      	cbz	r4, 8004306 <KMS_Entry+0x552>
        KMS_LL_IsBufferInSecureEnclave((void *)pulLastPartLen, sizeof(CK_ULONG));
 80042f6:	2104      	movs	r1, #4
 80042f8:	4620      	mov	r0, r4
 80042fa:	f7fc fabb 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
        KMS_LL_IsBufferInSecureEnclave((void *)pLastPart, (*pulLastPartLen)*sizeof(CK_BYTE));
 80042fe:	6821      	ldr	r1, [r4, #0]
 8004300:	4630      	mov	r0, r6
 8004302:	f7fc fab7 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      if (!KMS_IS_INITIALIZED())
 8004306:	4b78      	ldr	r3, [pc, #480]	@ (80044e8 <KMS_Entry+0x734>)
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	2b00      	cmp	r3, #0
 800430c:	f43f ade3 	beq.w	8003ed6 <KMS_Entry+0x122>
      if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8004310:	4628      	mov	r0, r5
 8004312:	f000 fa69 	bl	80047e8 <KMS_CheckSessionHdle>
 8004316:	2800      	cmp	r0, #0
 8004318:	f47f adf1 	bne.w	8003efe <KMS_Entry+0x14a>
      e_ret_status = KMS_DecryptFinal(hSession, pLastPart, pulLastPartLen);
 800431c:	4622      	mov	r2, r4
 800431e:	4631      	mov	r1, r6
 8004320:	4628      	mov	r0, r5
}
 8004322:	b003      	add	sp, #12
 8004324:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      e_ret_status = KMS_DecryptFinal(hSession, pLastPart, pulLastPartLen);
 8004328:	f7ff bc74 	b.w	8003c14 <KMS_DecryptFinal>
      pMechanism       = va_arg(arguments, CK_MECHANISM_PTR);
 800432c:	e9d4 5400 	ldrd	r5, r4, [r4]
      KMS_LL_IsBufferInSecureEnclave((void *)pMechanism, sizeof(CK_MECHANISM));
 8004330:	210c      	movs	r1, #12
 8004332:	4620      	mov	r0, r4
 8004334:	f7fc fa9e 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      if (pMechanism != NULL)
 8004338:	b98c      	cbnz	r4, 800435e <KMS_Entry+0x5aa>
      if (!KMS_IS_INITIALIZED())
 800433a:	4b6b      	ldr	r3, [pc, #428]	@ (80044e8 <KMS_Entry+0x734>)
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	2b00      	cmp	r3, #0
 8004340:	f43f adc9 	beq.w	8003ed6 <KMS_Entry+0x122>
      if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8004344:	4628      	mov	r0, r5
 8004346:	f000 fa4f 	bl	80047e8 <KMS_CheckSessionHdle>
 800434a:	2800      	cmp	r0, #0
 800434c:	f47f add7 	bne.w	8003efe <KMS_Entry+0x14a>
      e_ret_status = KMS_DigestInit(hSession, pMechanism);
 8004350:	4621      	mov	r1, r4
 8004352:	4628      	mov	r0, r5
}
 8004354:	b003      	add	sp, #12
 8004356:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      e_ret_status = KMS_DigestInit(hSession, pMechanism);
 800435a:	f7fe be43 	b.w	8002fe4 <KMS_DigestInit>
        KMS_LL_IsBufferInSecureEnclave((void *)(pMechanism->pParameter), pMechanism->ulParameterLen * sizeof(CK_BYTE));
 800435e:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 8004362:	f7fc fa87 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
        if (KMS_Entry_CheckMechanismContent(pMechanism) != CKR_OK)
 8004366:	4620      	mov	r0, r4
 8004368:	f7ff fcb8 	bl	8003cdc <KMS_Entry_CheckMechanismContent>
 800436c:	2800      	cmp	r0, #0
 800436e:	f47f aede 	bne.w	800412e <KMS_Entry+0x37a>
 8004372:	e7e2      	b.n	800433a <KMS_Entry+0x586>
      pData         = va_arg(arguments, CK_BYTE_PTR);
 8004374:	e9d4 5600 	ldrd	r5, r6, [r4]
      pDigest       = va_arg(arguments, CK_BYTE_PTR);
 8004378:	e9d4 7802 	ldrd	r7, r8, [r4, #8]
      pulDigestLen  = va_arg(arguments, CK_ULONG_PTR);
 800437c:	6924      	ldr	r4, [r4, #16]
      if (pulDigestLen != NULL_PTR)
 800437e:	b13c      	cbz	r4, 8004390 <KMS_Entry+0x5dc>
        KMS_LL_IsBufferInSecureEnclave((void *)pulDigestLen, sizeof(CK_ULONG));
 8004380:	2104      	movs	r1, #4
 8004382:	4620      	mov	r0, r4
 8004384:	f7fc fa76 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
        KMS_LL_IsBufferInSecureEnclave((void *)pDigest, (*pulDigestLen)*sizeof(CK_BYTE));
 8004388:	6821      	ldr	r1, [r4, #0]
 800438a:	4640      	mov	r0, r8
 800438c:	f7fc fa72 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      KMS_LL_IsBufferInSecureEnclave((void *)pData, ulDataLen * sizeof(CK_BYTE));
 8004390:	4639      	mov	r1, r7
 8004392:	4630      	mov	r0, r6
 8004394:	f7fc fa6e 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      if (!KMS_IS_INITIALIZED())
 8004398:	4b53      	ldr	r3, [pc, #332]	@ (80044e8 <KMS_Entry+0x734>)
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	f43f ad9a 	beq.w	8003ed6 <KMS_Entry+0x122>
      if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 80043a2:	4628      	mov	r0, r5
 80043a4:	f000 fa20 	bl	80047e8 <KMS_CheckSessionHdle>
 80043a8:	2800      	cmp	r0, #0
 80043aa:	f47f ada8 	bne.w	8003efe <KMS_Entry+0x14a>
      e_ret_status = KMS_Digest(hSession, pData, ulDataLen, pDigest, pulDigestLen);
 80043ae:	9400      	str	r4, [sp, #0]
 80043b0:	4643      	mov	r3, r8
 80043b2:	463a      	mov	r2, r7
 80043b4:	4631      	mov	r1, r6
 80043b6:	4628      	mov	r0, r5
 80043b8:	f7fe fe56 	bl	8003068 <KMS_Digest>
      break;
 80043bc:	e504      	b.n	8003dc8 <KMS_Entry+0x14>
      pPart         = va_arg(arguments, CK_BYTE_PTR);
 80043be:	e9d4 5600 	ldrd	r5, r6, [r4]
      ulPartLen     = va_arg(arguments, CK_ULONG);
 80043c2:	68a4      	ldr	r4, [r4, #8]
      KMS_LL_IsBufferInSecureEnclave((void *)pPart, ulPartLen * sizeof(CK_BYTE));
 80043c4:	4630      	mov	r0, r6
 80043c6:	4621      	mov	r1, r4
 80043c8:	f7fc fa54 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      if (!KMS_IS_INITIALIZED())
 80043cc:	4b46      	ldr	r3, [pc, #280]	@ (80044e8 <KMS_Entry+0x734>)
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f43f ad80 	beq.w	8003ed6 <KMS_Entry+0x122>
      if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 80043d6:	4628      	mov	r0, r5
 80043d8:	f000 fa06 	bl	80047e8 <KMS_CheckSessionHdle>
 80043dc:	2800      	cmp	r0, #0
 80043de:	f47f ad8e 	bne.w	8003efe <KMS_Entry+0x14a>
      e_ret_status = KMS_DigestUpdate(hSession, pPart, ulPartLen);
 80043e2:	4622      	mov	r2, r4
 80043e4:	4631      	mov	r1, r6
 80043e6:	4628      	mov	r0, r5
}
 80043e8:	b003      	add	sp, #12
 80043ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      e_ret_status = KMS_DigestUpdate(hSession, pPart, ulPartLen);
 80043ee:	f7fe be95 	b.w	800311c <KMS_DigestUpdate>
      pDigest       = va_arg(arguments, CK_BYTE_PTR);
 80043f2:	e9d4 5600 	ldrd	r5, r6, [r4]
      pulDigestLen  = va_arg(arguments, CK_ULONG_PTR);
 80043f6:	68a4      	ldr	r4, [r4, #8]
      if (pulDigestLen != NULL_PTR)
 80043f8:	b13c      	cbz	r4, 800440a <KMS_Entry+0x656>
        KMS_LL_IsBufferInSecureEnclave((void *)pulDigestLen, sizeof(CK_ULONG));
 80043fa:	2104      	movs	r1, #4
 80043fc:	4620      	mov	r0, r4
 80043fe:	f7fc fa39 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
        KMS_LL_IsBufferInSecureEnclave((void *)pDigest, (*pulDigestLen)*sizeof(CK_BYTE));
 8004402:	6821      	ldr	r1, [r4, #0]
 8004404:	4630      	mov	r0, r6
 8004406:	f7fc fa35 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      if (!KMS_IS_INITIALIZED())
 800440a:	4b37      	ldr	r3, [pc, #220]	@ (80044e8 <KMS_Entry+0x734>)
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	f43f ad61 	beq.w	8003ed6 <KMS_Entry+0x122>
      if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8004414:	4628      	mov	r0, r5
 8004416:	f000 f9e7 	bl	80047e8 <KMS_CheckSessionHdle>
 800441a:	2800      	cmp	r0, #0
 800441c:	f47f ad6f 	bne.w	8003efe <KMS_Entry+0x14a>
      e_ret_status = KMS_DigestFinal(hSession, pDigest, pulDigestLen);
 8004420:	4622      	mov	r2, r4
 8004422:	4631      	mov	r1, r6
 8004424:	4628      	mov	r0, r5
}
 8004426:	b003      	add	sp, #12
 8004428:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      e_ret_status = KMS_DigestFinal(hSession, pDigest, pulDigestLen);
 800442c:	f7fe bea4 	b.w	8003178 <KMS_DigestFinal>
      pMechanism      = va_arg(arguments, CK_MECHANISM_PTR);
 8004430:	e9d4 6500 	ldrd	r6, r5, [r4]
      KMS_LL_IsBufferInSecureEnclave((void *)pMechanism, sizeof(CK_MECHANISM));
 8004434:	210c      	movs	r1, #12
 8004436:	4628      	mov	r0, r5
      hKey            = va_arg(arguments, CK_OBJECT_HANDLE);
 8004438:	68a4      	ldr	r4, [r4, #8]
      KMS_LL_IsBufferInSecureEnclave((void *)pMechanism, sizeof(CK_MECHANISM));
 800443a:	f7fc fa1b 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      if (pMechanism != NULL)
 800443e:	b9c5      	cbnz	r5, 8004472 <KMS_Entry+0x6be>
      if (!KMS_IS_INITIALIZED())
 8004440:	4b29      	ldr	r3, [pc, #164]	@ (80044e8 <KMS_Entry+0x734>)
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	f43f ad46 	beq.w	8003ed6 <KMS_Entry+0x122>
      if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 800444a:	4630      	mov	r0, r6
 800444c:	f000 f9cc 	bl	80047e8 <KMS_CheckSessionHdle>
 8004450:	2800      	cmp	r0, #0
 8004452:	f47f ad54 	bne.w	8003efe <KMS_Entry+0x14a>
      object_range = KMS_Objects_GetRange(hKey);
 8004456:	4620      	mov	r0, r4
 8004458:	f001 f82e 	bl	80054b8 <KMS_Objects_GetRange>
      if ((object_range == KMS_OBJECT_RANGE_EMBEDDED) ||
 800445c:	2803      	cmp	r0, #3
 800445e:	f63f add9 	bhi.w	8004014 <KMS_Entry+0x260>
        e_ret_status = KMS_SignInit(hSession, pMechanism, hKey);
 8004462:	4622      	mov	r2, r4
 8004464:	4629      	mov	r1, r5
 8004466:	4630      	mov	r0, r6
}
 8004468:	b003      	add	sp, #12
 800446a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        e_ret_status = KMS_SignInit(hSession, pMechanism, hKey);
 800446e:	f001 be91 	b.w	8006194 <KMS_SignInit>
        KMS_LL_IsBufferInSecureEnclave((void *)(pMechanism->pParameter), pMechanism->ulParameterLen * sizeof(CK_BYTE));
 8004472:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
 8004476:	f7fc f9fd 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
        if (KMS_Entry_CheckMechanismContent(pMechanism) != CKR_OK)
 800447a:	4628      	mov	r0, r5
 800447c:	f7ff fc2e 	bl	8003cdc <KMS_Entry_CheckMechanismContent>
 8004480:	2800      	cmp	r0, #0
 8004482:	f47f ae54 	bne.w	800412e <KMS_Entry+0x37a>
 8004486:	e7db      	b.n	8004440 <KMS_Entry+0x68c>
      pData           = va_arg(arguments, CK_BYTE_PTR);
 8004488:	e9d4 6700 	ldrd	r6, r7, [r4]
      pSignature      = va_arg(arguments, CK_BYTE_PTR);
 800448c:	e9d4 8902 	ldrd	r8, r9, [r4, #8]
      pulSignatureLen = va_arg(arguments, CK_ULONG_PTR);
 8004490:	6924      	ldr	r4, [r4, #16]
      KMS_LL_IsBufferInSecureEnclave((void *)pData, ulDataLen * sizeof(CK_BYTE));
 8004492:	4641      	mov	r1, r8
 8004494:	4638      	mov	r0, r7
 8004496:	f7fc f9ed 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      if (pulSignatureLen != NULL_PTR)
 800449a:	b11c      	cbz	r4, 80044a4 <KMS_Entry+0x6f0>
        KMS_LL_IsBufferInSecureEnclave((void *)pSignature, (*pulSignatureLen)*sizeof(CK_BYTE));
 800449c:	6821      	ldr	r1, [r4, #0]
 800449e:	4648      	mov	r0, r9
 80044a0:	f7fc f9e8 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      if (!KMS_IS_INITIALIZED())
 80044a4:	4d10      	ldr	r5, [pc, #64]	@ (80044e8 <KMS_Entry+0x734>)
      KMS_LL_IsBufferInSecureEnclave((void *)pulSignatureLen, sizeof(CK_ULONG));
 80044a6:	2104      	movs	r1, #4
 80044a8:	4620      	mov	r0, r4
 80044aa:	f7fc f9e3 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      if (!KMS_IS_INITIALIZED())
 80044ae:	782b      	ldrb	r3, [r5, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f43f ad10 	beq.w	8003ed6 <KMS_Entry+0x122>
      if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 80044b6:	4630      	mov	r0, r6
 80044b8:	f000 f996 	bl	80047e8 <KMS_CheckSessionHdle>
 80044bc:	2800      	cmp	r0, #0
 80044be:	f47f ad1e 	bne.w	8003efe <KMS_Entry+0x14a>
      object_range = KMS_Objects_GetRange(KMS_GETSESSION(hSession).hKey);
 80044c2:	1e73      	subs	r3, r6, #1
 80044c4:	2224      	movs	r2, #36	@ 0x24
 80044c6:	fb02 5503 	mla	r5, r2, r3, r5
 80044ca:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 80044cc:	f000 fff4 	bl	80054b8 <KMS_Objects_GetRange>
      if ((object_range == KMS_OBJECT_RANGE_EMBEDDED) ||
 80044d0:	2803      	cmp	r0, #3
 80044d2:	f63f ad9f 	bhi.w	8004014 <KMS_Entry+0x260>
        e_ret_status = KMS_Sign(hSession, pData, ulDataLen, pSignature, pulSignatureLen);
 80044d6:	9400      	str	r4, [sp, #0]
 80044d8:	464b      	mov	r3, r9
 80044da:	4642      	mov	r2, r8
 80044dc:	4639      	mov	r1, r7
 80044de:	4630      	mov	r0, r6
 80044e0:	f001 fe68 	bl	80061b4 <KMS_Sign>
 80044e4:	e470      	b.n	8003dc8 <KMS_Entry+0x14>
 80044e6:	bf00      	nop
 80044e8:	20000c48 	.word	0x20000c48
      pMechanism      = va_arg(arguments, CK_MECHANISM_PTR);
 80044ec:	e9d4 6500 	ldrd	r6, r5, [r4]
      KMS_LL_IsBufferInSecureEnclave((void *)pMechanism, sizeof(CK_MECHANISM));
 80044f0:	210c      	movs	r1, #12
 80044f2:	4628      	mov	r0, r5
      hKey            = va_arg(arguments, CK_OBJECT_HANDLE);
 80044f4:	68a4      	ldr	r4, [r4, #8]
      KMS_LL_IsBufferInSecureEnclave((void *)pMechanism, sizeof(CK_MECHANISM));
 80044f6:	f7fc f9bd 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      if (pMechanism != NULL)
 80044fa:	b9c5      	cbnz	r5, 800452e <KMS_Entry+0x77a>
      if (!KMS_IS_INITIALIZED())
 80044fc:	4b75      	ldr	r3, [pc, #468]	@ (80046d4 <KMS_Entry+0x920>)
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	f43f ace8 	beq.w	8003ed6 <KMS_Entry+0x122>
      if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8004506:	4630      	mov	r0, r6
 8004508:	f000 f96e 	bl	80047e8 <KMS_CheckSessionHdle>
 800450c:	2800      	cmp	r0, #0
 800450e:	f47f acf6 	bne.w	8003efe <KMS_Entry+0x14a>
      object_range = KMS_Objects_GetRange(hKey);
 8004512:	4620      	mov	r0, r4
 8004514:	f000 ffd0 	bl	80054b8 <KMS_Objects_GetRange>
      if ((object_range == KMS_OBJECT_RANGE_EMBEDDED) ||
 8004518:	2803      	cmp	r0, #3
 800451a:	f63f ad7b 	bhi.w	8004014 <KMS_Entry+0x260>
        e_ret_status = KMS_VerifyInit(hSession, pMechanism, hKey);
 800451e:	4622      	mov	r2, r4
 8004520:	4629      	mov	r1, r5
 8004522:	4630      	mov	r0, r6
}
 8004524:	b003      	add	sp, #12
 8004526:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        e_ret_status = KMS_VerifyInit(hSession, pMechanism, hKey);
 800452a:	f001 bead 	b.w	8006288 <KMS_VerifyInit>
        KMS_LL_IsBufferInSecureEnclave((void *)(pMechanism->pParameter), pMechanism->ulParameterLen * sizeof(CK_BYTE));
 800452e:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
 8004532:	f7fc f99f 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
        if (KMS_Entry_CheckMechanismContent(pMechanism) != CKR_OK)
 8004536:	4628      	mov	r0, r5
 8004538:	f7ff fbd0 	bl	8003cdc <KMS_Entry_CheckMechanismContent>
 800453c:	2800      	cmp	r0, #0
 800453e:	f47f adf6 	bne.w	800412e <KMS_Entry+0x37a>
 8004542:	e7db      	b.n	80044fc <KMS_Entry+0x748>
      pSignature     = va_arg(arguments, CK_BYTE_PTR);
 8004544:	e9d4 7802 	ldrd	r7, r8, [r4, #8]
      pData          = va_arg(arguments, CK_BYTE_PTR);
 8004548:	e9d4 5600 	ldrd	r5, r6, [r4]
      ulSignatureLen = va_arg(arguments, CK_ULONG);
 800454c:	f8d4 9010 	ldr.w	r9, [r4, #16]
      if (!KMS_IS_INITIALIZED())
 8004550:	4c60      	ldr	r4, [pc, #384]	@ (80046d4 <KMS_Entry+0x920>)
      KMS_LL_IsBufferInSecureEnclave((void *)pData, ulDataLen * sizeof(CK_BYTE));
 8004552:	4639      	mov	r1, r7
 8004554:	4630      	mov	r0, r6
 8004556:	f7fc f98d 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      KMS_LL_IsBufferInSecureEnclave((void *)pSignature, ulSignatureLen * sizeof(CK_BYTE));
 800455a:	4649      	mov	r1, r9
 800455c:	4640      	mov	r0, r8
 800455e:	f7fc f989 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      if (!KMS_IS_INITIALIZED())
 8004562:	7823      	ldrb	r3, [r4, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	f43f acb6 	beq.w	8003ed6 <KMS_Entry+0x122>
      if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 800456a:	4628      	mov	r0, r5
 800456c:	f000 f93c 	bl	80047e8 <KMS_CheckSessionHdle>
 8004570:	2800      	cmp	r0, #0
 8004572:	f47f acc4 	bne.w	8003efe <KMS_Entry+0x14a>
      object_range = KMS_Objects_GetRange(KMS_GETSESSION(hSession).hKey);
 8004576:	1e6b      	subs	r3, r5, #1
 8004578:	2224      	movs	r2, #36	@ 0x24
 800457a:	fb02 4403 	mla	r4, r2, r3, r4
 800457e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8004580:	f000 ff9a 	bl	80054b8 <KMS_Objects_GetRange>
      if ((object_range == KMS_OBJECT_RANGE_EMBEDDED) ||
 8004584:	2803      	cmp	r0, #3
 8004586:	f63f ad45 	bhi.w	8004014 <KMS_Entry+0x260>
        e_ret_status = KMS_Verify(hSession, pData, ulDataLen, pSignature, ulSignatureLen);
 800458a:	f8cd 9000 	str.w	r9, [sp]
 800458e:	4643      	mov	r3, r8
 8004590:	463a      	mov	r2, r7
 8004592:	4631      	mov	r1, r6
 8004594:	4628      	mov	r0, r5
 8004596:	f001 fe87 	bl	80062a8 <KMS_Verify>
 800459a:	e415      	b.n	8003dc8 <KMS_Entry+0x14>
      pMechanism        = va_arg(arguments, CK_MECHANISM_PTR);
 800459c:	e9d4 7600 	ldrd	r7, r6, [r4]
      KMS_LL_IsBufferInSecureEnclave((void *)pMechanism, sizeof(CK_MECHANISM));
 80045a0:	210c      	movs	r1, #12
 80045a2:	4630      	mov	r0, r6
      pTemplate         = va_arg(arguments, CK_ATTRIBUTE_PTR);
 80045a4:	e9d4 8902 	ldrd	r8, r9, [r4, #8]
      phKey             = va_arg(arguments, CK_OBJECT_HANDLE_PTR);
 80045a8:	e9d4 ab04 	ldrd	sl, fp, [r4, #16]
      KMS_LL_IsBufferInSecureEnclave((void *)pMechanism, sizeof(CK_MECHANISM));
 80045ac:	f7fc f962 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      if (pMechanism != NULL)
 80045b0:	bb0e      	cbnz	r6, 80045f6 <KMS_Entry+0x842>
 80045b2:	464c      	mov	r4, r9
      for (CK_ULONG i = 0; i < ulAttributeCount; i++)
 80045b4:	4555      	cmp	r5, sl
 80045b6:	d129      	bne.n	800460c <KMS_Entry+0x858>
      KMS_LL_IsBufferInSecureEnclave((void *)phKey, sizeof(void *));
 80045b8:	2104      	movs	r1, #4
 80045ba:	4658      	mov	r0, fp
 80045bc:	f7fc f95a 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      if (!KMS_IS_INITIALIZED())
 80045c0:	4b44      	ldr	r3, [pc, #272]	@ (80046d4 <KMS_Entry+0x920>)
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f43f ac86 	beq.w	8003ed6 <KMS_Entry+0x122>
      if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 80045ca:	4638      	mov	r0, r7
 80045cc:	f000 f90c 	bl	80047e8 <KMS_CheckSessionHdle>
 80045d0:	2800      	cmp	r0, #0
 80045d2:	f47f ac94 	bne.w	8003efe <KMS_Entry+0x14a>
      object_range = KMS_Objects_GetRange(hBaseKey);
 80045d6:	4640      	mov	r0, r8
 80045d8:	f000 ff6e 	bl	80054b8 <KMS_Objects_GetRange>
      if ((object_range == KMS_OBJECT_RANGE_EMBEDDED) ||
 80045dc:	2803      	cmp	r0, #3
 80045de:	f63f ad19 	bhi.w	8004014 <KMS_Entry+0x260>
        e_ret_status = KMS_DeriveKey(hSession, pMechanism, hBaseKey, pTemplate, ulAttributeCount, phKey);
 80045e2:	e9cd 5b00 	strd	r5, fp, [sp]
 80045e6:	464b      	mov	r3, r9
 80045e8:	4642      	mov	r2, r8
 80045ea:	4631      	mov	r1, r6
 80045ec:	4638      	mov	r0, r7
 80045ee:	f000 f97d 	bl	80048ec <KMS_DeriveKey>
 80045f2:	f7ff bbe9 	b.w	8003dc8 <KMS_Entry+0x14>
        KMS_LL_IsBufferInSecureEnclave((void *)(pMechanism->pParameter), pMechanism->ulParameterLen * sizeof(CK_BYTE));
 80045f6:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
 80045fa:	f7fc f93b 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
        if (KMS_Entry_CheckMechanismContent(pMechanism) != CKR_OK)
 80045fe:	4630      	mov	r0, r6
 8004600:	f7ff fb6c 	bl	8003cdc <KMS_Entry_CheckMechanismContent>
 8004604:	2800      	cmp	r0, #0
 8004606:	f47f ad92 	bne.w	800412e <KMS_Entry+0x37a>
 800460a:	e7d2      	b.n	80045b2 <KMS_Entry+0x7fe>
        KMS_LL_IsBufferInSecureEnclave((void *) & (pTemplate[i]), sizeof(CK_ATTRIBUTE));
 800460c:	4620      	mov	r0, r4
 800460e:	210c      	movs	r1, #12
 8004610:	f7fc f930 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
        KMS_LL_IsBufferInSecureEnclave((void *)(pTemplate[i].pValue), pTemplate[i].ulValueLen);
 8004614:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 8004618:	f7fc f92c 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      for (CK_ULONG i = 0; i < ulAttributeCount; i++)
 800461c:	3501      	adds	r5, #1
 800461e:	340c      	adds	r4, #12
 8004620:	e7c8      	b.n	80045b4 <KMS_Entry+0x800>
      pFlash           = va_arg(arguments, CK_BYTE_PTR);
 8004622:	e9d4 5400 	ldrd	r5, r4, [r4]
      KMS_LL_IsBufferInSecureEnclave((void *)pHdr, sizeof(KMS_BlobRawHeaderTypeDef));
 8004626:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 800462a:	4628      	mov	r0, r5
 800462c:	f7fc f922 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      KMS_LL_IsBufferInSecureEnclave((void *)pFlash, ((KMS_BlobRawHeaderTypeDef *)(uint32_t)pHdr)->BlobSize);
 8004630:	68a9      	ldr	r1, [r5, #8]
 8004632:	4620      	mov	r0, r4
 8004634:	f7fc f91e 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      if (!KMS_IS_INITIALIZED())
 8004638:	4b26      	ldr	r3, [pc, #152]	@ (80046d4 <KMS_Entry+0x920>)
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	f43f ac4a 	beq.w	8003ed6 <KMS_Entry+0x122>
      e_ret_status = KMS_Objects_ImportBlob(pHdr, pFlash);
 8004642:	4621      	mov	r1, r4
 8004644:	4628      	mov	r0, r5
}
 8004646:	b003      	add	sp, #12
 8004648:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      e_ret_status = KMS_Objects_ImportBlob(pHdr, pFlash);
 800464c:	f001 b914 	b.w	8005878 <KMS_Objects_ImportBlob>
      if (!KMS_IS_INITIALIZED())
 8004650:	4b20      	ldr	r3, [pc, #128]	@ (80046d4 <KMS_Entry+0x920>)
 8004652:	781b      	ldrb	r3, [r3, #0]
      ulCount           = va_arg(arguments, CK_ULONG);
 8004654:	e9d4 0100 	ldrd	r0, r1, [r4]
      if (!KMS_IS_INITIALIZED())
 8004658:	2b00      	cmp	r3, #0
 800465a:	f43f ac3c 	beq.w	8003ed6 <KMS_Entry+0x122>
}
 800465e:	b003      	add	sp, #12
 8004660:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      e_ret_status = KMS_Objects_LockKeys(pKeys, ulCount);
 8004664:	f001 baf6 	b.w	8005c54 <KMS_Objects_LockKeys>
      if (!KMS_IS_INITIALIZED())
 8004668:	4b1a      	ldr	r3, [pc, #104]	@ (80046d4 <KMS_Entry+0x920>)
 800466a:	781b      	ldrb	r3, [r3, #0]
      ulCount           = va_arg(arguments, CK_ULONG);
 800466c:	e9d4 0100 	ldrd	r0, r1, [r4]
      if (!KMS_IS_INITIALIZED())
 8004670:	2b00      	cmp	r3, #0
 8004672:	f43f ac30 	beq.w	8003ed6 <KMS_Entry+0x122>
}
 8004676:	b003      	add	sp, #12
 8004678:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      e_ret_status = KMS_Objects_LockServices(pServices, ulCount);
 800467c:	f001 bafb 	b.w	8005c76 <KMS_Objects_LockServices>
      hObject           = va_arg(arguments, CK_OBJECT_HANDLE);
 8004680:	e9d4 5600 	ldrd	r5, r6, [r4]
      pCounterValue     = va_arg(arguments, CK_ULONG_PTR);
 8004684:	68a4      	ldr	r4, [r4, #8]
      if (pCounterValue != NULL)
 8004686:	b11c      	cbz	r4, 8004690 <KMS_Entry+0x8dc>
        KMS_LL_IsBufferInSecureEnclave((void *)pCounterValue, sizeof(CK_ULONG));
 8004688:	2104      	movs	r1, #4
 800468a:	4620      	mov	r0, r4
 800468c:	f7fc f8f2 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      if (!KMS_IS_INITIALIZED())
 8004690:	4b10      	ldr	r3, [pc, #64]	@ (80046d4 <KMS_Entry+0x920>)
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	f43f ac1e 	beq.w	8003ed6 <KMS_Entry+0x122>
      e_ret_status = KMS_CounterIncrement(hSession, hObject, pCounterValue);
 800469a:	4622      	mov	r2, r4
 800469c:	4631      	mov	r1, r6
 800469e:	4628      	mov	r0, r5
}
 80046a0:	b003      	add	sp, #12
 80046a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      e_ret_status = KMS_CounterIncrement(hSession, hObject, pCounterValue);
 80046a6:	f7fe bb61 	b.w	8002d6c <KMS_CounterIncrement>
      hObject           = va_arg(arguments, CK_OBJECT_HANDLE);
 80046aa:	e9d4 5600 	ldrd	r5, r6, [r4]
      pCounterValue     = va_arg(arguments, CK_ULONG_PTR);
 80046ae:	68a4      	ldr	r4, [r4, #8]
      KMS_LL_IsBufferInSecureEnclave((void *)pCounterValue, sizeof(CK_ULONG));
 80046b0:	2104      	movs	r1, #4
 80046b2:	4620      	mov	r0, r4
 80046b4:	f7fc f8de 	bl	8000874 <KMS_LL_IsBufferInSecureEnclave>
      if (!KMS_IS_INITIALIZED())
 80046b8:	4b06      	ldr	r3, [pc, #24]	@ (80046d4 <KMS_Entry+0x920>)
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f43f ac0a 	beq.w	8003ed6 <KMS_Entry+0x122>
      e_ret_status = KMS_CounterGetValue(hSession, hObject, pCounterValue);
 80046c2:	4622      	mov	r2, r4
 80046c4:	4631      	mov	r1, r6
 80046c6:	4628      	mov	r0, r5
}
 80046c8:	b003      	add	sp, #12
 80046ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      e_ret_status = KMS_CounterGetValue(hSession, hObject, pCounterValue);
 80046ce:	f7fe bc19 	b.w	8002f04 <KMS_CounterGetValue>
 80046d2:	bf00      	nop
 80046d4:	20000c48 	.word	0x20000c48

080046d8 <KMS_Initialize>:
  *         CKR_CANT_LOCK
  *         CKR_CRYPTOKI_ALREADY_INITIALIZED
  *         CKR_FUNCTION_FAILED
  */
CK_RV  KMS_Initialize(CK_VOID_PTR pInitArgs)
{
 80046d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  CK_RV e_ret_status;

  /* Check parameters */
  if (pInitArgs != NULL)
 80046da:	bb80      	cbnz	r0, 800473e <KMS_Initialize+0x66>
    return CKR_ARGUMENTS_BAD;
#endif /* KMS_PKCS11_COMPLIANCE */
  }

  /* Check if PKCS11 module has already been initialized */
  if (KMS_Manager.initialized == 0xFFU) /* Ensure C_Initialize is not called too many times */
 80046dc:	4e1a      	ldr	r6, [pc, #104]	@ (8004748 <KMS_Initialize+0x70>)
 80046de:	7834      	ldrb	r4, [r6, #0]
 80046e0:	2cff      	cmp	r4, #255	@ 0xff
 80046e2:	d02e      	beq.n	8004742 <KMS_Initialize+0x6a>
  {
    e_ret_status = CKR_FUNCTION_FAILED;
  }
  else if (KMS_Manager.initialized > 0U)
 80046e4:	b12c      	cbz	r4, 80046f2 <KMS_Initialize+0x1a>
  {
    KMS_Manager.initialized++;  /* Increase initialization counter to reflect number of C_Initialize calls */
 80046e6:	3401      	adds	r4, #1
 80046e8:	7034      	strb	r4, [r6, #0]
    e_ret_status = CKR_CRYPTOKI_ALREADY_INITIALIZED;
 80046ea:	f240 1591 	movw	r5, #401	@ 0x191
      (void)CA_DeInit();
    }
  }

  return e_ret_status;
}
 80046ee:	4628      	mov	r0, r5
 80046f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    KMS_Manager.sessionNb = 0;
 80046f2:	6074      	str	r4, [r6, #4]
    for (uint32_t i = 1 ; i <= KMS_NB_SESSIONS_MAX; i++)
 80046f4:	f106 0308 	add.w	r3, r6, #8
 80046f8:	2501      	movs	r5, #1
      KMS_GETSESSION(i).state = KMS_SESSION_NOT_USED;
 80046fa:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
      (void)memset((void *) & (KMS_GETSESSION(i)), 0, sizeof(kms_session_desc_t));
 80046fe:	4618      	mov	r0, r3
 8004700:	2224      	movs	r2, #36	@ 0x24
 8004702:	2100      	movs	r1, #0
 8004704:	f002 fa7a 	bl	8006bfc <memset>
    for (uint32_t i = 1 ; i <= KMS_NB_SESSIONS_MAX; i++)
 8004708:	3501      	adds	r5, #1
      (void)memset((void *) & (KMS_GETSESSION(i)), 0, sizeof(kms_session_desc_t));
 800470a:	4603      	mov	r3, r0
    for (uint32_t i = 1 ; i <= KMS_NB_SESSIONS_MAX; i++)
 800470c:	2d0b      	cmp	r5, #11
      KMS_GETSESSION(i).state = KMS_SESSION_NOT_USED;
 800470e:	6047      	str	r7, [r0, #4]
      KMS_GETSESSION(i).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 8004710:	61c4      	str	r4, [r0, #28]
    for (uint32_t i = 1 ; i <= KMS_NB_SESSIONS_MAX; i++)
 8004712:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8004716:	d1f2      	bne.n	80046fe <KMS_Initialize+0x26>
    KMS_MemInit();
 8004718:	f000 f9c2 	bl	8004aa0 <KMS_MemInit>
    (void)CA_Init();
 800471c:	f7fe fb21 	bl	8002d62 <CA_Init>
    KMS_PlatfObjects_Init();
 8004720:	f001 fc00 	bl	8005f24 <KMS_PlatfObjects_Init>
    e_ret_status = KMS_LL_Initialize();
 8004724:	f7fc f8c6 	bl	80008b4 <KMS_LL_Initialize>
    if (e_ret_status ==  CKR_OK)
 8004728:	4605      	mov	r5, r0
 800472a:	b910      	cbnz	r0, 8004732 <KMS_Initialize+0x5a>
      KMS_Manager.initialized = 1U;
 800472c:	2301      	movs	r3, #1
 800472e:	7033      	strb	r3, [r6, #0]
 8004730:	e7dd      	b.n	80046ee <KMS_Initialize+0x16>
      KMS_PlatfObjects_Finalize();
 8004732:	f001 fc07 	bl	8005f44 <KMS_PlatfObjects_Finalize>
      KMS_Manager.initialized = 0U;
 8004736:	7034      	strb	r4, [r6, #0]
      (void)CA_DeInit();
 8004738:	f7fe fb15 	bl	8002d66 <CA_DeInit>
 800473c:	e7d7      	b.n	80046ee <KMS_Initialize+0x16>
    return CKR_ARGUMENTS_BAD;
 800473e:	2507      	movs	r5, #7
 8004740:	e7d5      	b.n	80046ee <KMS_Initialize+0x16>
    e_ret_status = CKR_FUNCTION_FAILED;
 8004742:	2506      	movs	r5, #6
 8004744:	e7d3      	b.n	80046ee <KMS_Initialize+0x16>
 8004746:	bf00      	nop
 8004748:	20000c48 	.word	0x20000c48

0800474c <KMS_Finalize>:
  * @retval CKR_OK
  *         CKR_ARGUMENTS_BAD
  *         CKR_CRYPTOKI_NOT_INITIALIZED,
  */
CK_RV KMS_Finalize(CK_VOID_PTR pReserved)
{
 800474c:	b538      	push	{r3, r4, r5, lr}
  CK_RV e_ret_status;

  /* To fulfill the PKCS11 spec the input parameter is expected to be NULL */
  if (pReserved != NULL_PTR)
 800474e:	4604      	mov	r4, r0
 8004750:	b980      	cbnz	r0, 8004774 <KMS_Finalize+0x28>
  {
    e_ret_status = CKR_ARGUMENTS_BAD;
  }
  /* Check if PKCS11 module has not been initialized */
  else if (KMS_Manager.initialized == 0U)
 8004752:	4d0b      	ldr	r5, [pc, #44]	@ (8004780 <KMS_Finalize+0x34>)
 8004754:	782b      	ldrb	r3, [r5, #0]
 8004756:	b17b      	cbz	r3, 8004778 <KMS_Finalize+0x2c>
  {
    e_ret_status = CKR_CRYPTOKI_NOT_INITIALIZED;
  }
  else if (KMS_Manager.initialized > 1U)  /* If there are still some C_Finalize calls to come, simply return OK */
 8004758:	2b01      	cmp	r3, #1
 800475a:	d003      	beq.n	8004764 <KMS_Finalize+0x18>
  {
    KMS_Manager.initialized--;    /* Decrease initialization counter to reflect number of C_Finalize calls */
 800475c:	3b01      	subs	r3, #1
 800475e:	702b      	strb	r3, [r5, #0]
    e_ret_status = CKR_OK;
 8004760:	2000      	movs	r0, #0

    e_ret_status = CKR_OK;
  }

  return e_ret_status;
}
 8004762:	bd38      	pop	{r3, r4, r5, pc}
    (void)KMS_LL_Finalize();
 8004764:	f7fc f8a8 	bl	80008b8 <KMS_LL_Finalize>
    KMS_PlatfObjects_Finalize();
 8004768:	f001 fbec 	bl	8005f44 <KMS_PlatfObjects_Finalize>
    KMS_Manager.initialized = 0U;
 800476c:	702c      	strb	r4, [r5, #0]
    (void)CA_DeInit();
 800476e:	f7fe fafa 	bl	8002d66 <CA_DeInit>
    e_ret_status = CKR_OK;
 8004772:	e7f5      	b.n	8004760 <KMS_Finalize+0x14>
    e_ret_status = CKR_ARGUMENTS_BAD;
 8004774:	2007      	movs	r0, #7
 8004776:	e7f4      	b.n	8004762 <KMS_Finalize+0x16>
    e_ret_status = CKR_CRYPTOKI_NOT_INITIALIZED;
 8004778:	f44f 70c8 	mov.w	r0, #400	@ 0x190
  return e_ret_status;
 800477c:	e7f1      	b.n	8004762 <KMS_Finalize+0x16>
 800477e:	bf00      	nop
 8004780:	20000c48 	.word	0x20000c48

08004784 <KMS_OpenSession>:
  *         CKR_SESSION_PARALLEL_NOT_SUPPORTED
  */
CK_RV KMS_OpenSession(CK_SLOT_ID slotID, CK_FLAGS flags,
                      CK_VOID_PTR pApplication, CK_NOTIFY Notify,
                      CK_SESSION_HANDLE_PTR phSession)
{
 8004784:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* As defined in PKCS11 spec: For legacy reasons, the CKF_SERIAL_SESSION bit MUST
     always be set; if a call to C_OpenSession does not have this bit set, the call
     should return unsuccessfully with the error code CKR_SESSION_PARALLEL_NOT_SUPPORTED.
  */
  if ((flags & CKF_SERIAL_SESSION) == 0UL)
 8004786:	074c      	lsls	r4, r1, #29
 8004788:	d525      	bpl.n	80047d6 <KMS_OpenSession+0x52>
  {
    e_ret_status = CKR_SESSION_PARALLEL_NOT_SUPPORTED;
  }
  else if (!KMS_IS_INITIALIZED())
 800478a:	4d16      	ldr	r5, [pc, #88]	@ (80047e4 <KMS_OpenSession+0x60>)
 800478c:	782c      	ldrb	r4, [r5, #0]
 800478e:	b324      	cbz	r4, 80047da <KMS_OpenSession+0x56>
  {
    e_ret_status = CKR_CRYPTOKI_NOT_INITIALIZED;
  }
  /* We reach the max number of opened sessions */
  else if (KMS_Manager.sessionNb >=  KMS_NB_SESSIONS_MAX)
 8004790:	686c      	ldr	r4, [r5, #4]
 8004792:	2c09      	cmp	r4, #9
 8004794:	d824      	bhi.n	80047e0 <KMS_OpenSession+0x5c>
 8004796:	462c      	mov	r4, r5
    e_ret_status = CKR_SESSION_COUNT;
  }
  else
  {
    /* Find a slot for a Session */
    session_index = 1;
 8004798:	2601      	movs	r6, #1
    do
    {
      if (KMS_GETSESSION(session_index).state == KMS_SESSION_NOT_USED)
 800479a:	68e7      	ldr	r7, [r4, #12]
 800479c:	3701      	adds	r7, #1
 800479e:	d113      	bne.n	80047c8 <KMS_OpenSession+0x44>
      {
        *phSession = session_index;
 80047a0:	9f05      	ldr	r7, [sp, #20]
      if (KMS_GETSESSION(session_index).state == KMS_SESSION_NOT_USED)
 80047a2:	1e74      	subs	r4, r6, #1
        *phSession = session_index;
 80047a4:	603e      	str	r6, [r7, #0]
        KMS_GETSESSION(session_index).slotID = slotID;
 80047a6:	2624      	movs	r6, #36	@ 0x24
 80047a8:	fb06 5404 	mla	r4, r6, r4, r5
        KMS_GETSESSION(session_index).state = KMS_SESSION_IDLE;      /* Initialized */
        KMS_GETSESSION(session_index).flags = flags;
        KMS_GETSESSION(session_index).pApplication = pApplication;
        KMS_GETSESSION(session_index).Notify = Notify;
 80047ac:	e9c4 2306 	strd	r2, r3, [r4, #24]
        /* A session can have only one crypto mechanism on going at a time  */
        KMS_GETSESSION(session_index).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
        KMS_GETSESSION(session_index).Mechanism = CKM_VENDOR_DEFINED;
 80047b0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
        KMS_GETSESSION(session_index).slotID = slotID;
 80047b4:	60a0      	str	r0, [r4, #8]
        KMS_GETSESSION(session_index).Mechanism = CKM_VENDOR_DEFINED;
 80047b6:	6223      	str	r3, [r4, #32]
        KMS_GETSESSION(session_index).state = KMS_SESSION_IDLE;      /* Initialized */
 80047b8:	2000      	movs	r0, #0
#ifdef KMS_EXT_TOKEN_ENABLED
        KMS_GETSESSION(session_index).hSession_ExtToken = 0xFFFF;
#endif /* KMS_EXT_TOKEN_ENABLED      */

        /* Increment the session counter */
        KMS_Manager.sessionNb++;
 80047ba:	686b      	ldr	r3, [r5, #4]
        KMS_GETSESSION(session_index).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 80047bc:	6260      	str	r0, [r4, #36]	@ 0x24
        KMS_GETSESSION(session_index).flags = flags;
 80047be:	e9c4 0103 	strd	r0, r1, [r4, #12]
        KMS_Manager.sessionNb++;
 80047c2:	3301      	adds	r3, #1
 80047c4:	606b      	str	r3, [r5, #4]
             && (session_index <= KMS_NB_SESSIONS_MAX)); /* Session index are going from 1 to KMS_NB_SESSIONS_MAX */
  }

  /* All sessions are in used */
  return e_ret_status;
}
 80047c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      session_index++;
 80047c8:	3601      	adds	r6, #1
             && (session_index <= KMS_NB_SESSIONS_MAX)); /* Session index are going from 1 to KMS_NB_SESSIONS_MAX */
 80047ca:	2e0b      	cmp	r6, #11
 80047cc:	f104 0424 	add.w	r4, r4, #36	@ 0x24
 80047d0:	d1e3      	bne.n	800479a <KMS_OpenSession+0x16>
 80047d2:	2006      	movs	r0, #6
 80047d4:	e7f7      	b.n	80047c6 <KMS_OpenSession+0x42>
    e_ret_status = CKR_SESSION_PARALLEL_NOT_SUPPORTED;
 80047d6:	20b4      	movs	r0, #180	@ 0xb4
 80047d8:	e7f5      	b.n	80047c6 <KMS_OpenSession+0x42>
    e_ret_status = CKR_CRYPTOKI_NOT_INITIALIZED;
 80047da:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80047de:	e7f2      	b.n	80047c6 <KMS_OpenSession+0x42>
    e_ret_status = CKR_SESSION_COUNT;
 80047e0:	20b1      	movs	r0, #177	@ 0xb1
  return e_ret_status;
 80047e2:	e7f0      	b.n	80047c6 <KMS_OpenSession+0x42>
 80047e4:	20000c48 	.word	0x20000c48

080047e8 <KMS_CheckSessionHdle>:
  */
CK_RV     KMS_CheckSessionHdle(CK_SESSION_HANDLE hSession)
{
  CK_RV e_ret_status = CKR_SESSION_HANDLE_INVALID;

  if ((hSession >= 1UL) &&
 80047e8:	3801      	subs	r0, #1
 80047ea:	2809      	cmp	r0, #9
 80047ec:	d809      	bhi.n	8004802 <KMS_CheckSessionHdle+0x1a>
      (hSession <= KMS_NB_SESSIONS_MAX) &&
      (KMS_GETSESSION(hSession).state != KMS_SESSION_NOT_USED))
 80047ee:	4b06      	ldr	r3, [pc, #24]	@ (8004808 <KMS_CheckSessionHdle+0x20>)
 80047f0:	2224      	movs	r2, #36	@ 0x24
 80047f2:	fb02 3300 	mla	r3, r2, r0, r3
      (hSession <= KMS_NB_SESSIONS_MAX) &&
 80047f6:	68db      	ldr	r3, [r3, #12]
  {
    e_ret_status = CKR_OK;
 80047f8:	3301      	adds	r3, #1
 80047fa:	bf0c      	ite	eq
 80047fc:	20b3      	moveq	r0, #179	@ 0xb3
 80047fe:	2000      	movne	r0, #0
 8004800:	4770      	bx	lr
  CK_RV e_ret_status = CKR_SESSION_HANDLE_INVALID;
 8004802:	20b3      	movs	r0, #179	@ 0xb3
  }
  return e_ret_status;
}
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	20000c48 	.word	0x20000c48

0800480c <KMS_CloseSession>:
{
 800480c:	b570      	push	{r4, r5, r6, lr}
  if (!KMS_IS_INITIALIZED())
 800480e:	4d10      	ldr	r5, [pc, #64]	@ (8004850 <KMS_CloseSession+0x44>)
 8004810:	782b      	ldrb	r3, [r5, #0]
{
 8004812:	4601      	mov	r1, r0
  if (!KMS_IS_INITIALIZED())
 8004814:	b1b3      	cbz	r3, 8004844 <KMS_CloseSession+0x38>
  else if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8004816:	f7ff ffe7 	bl	80047e8 <KMS_CheckSessionHdle>
 800481a:	b9b0      	cbnz	r0, 800484a <KMS_CloseSession+0x3e>
  else if (KMS_GETSESSION(hSession).state != KMS_SESSION_IDLE)
 800481c:	1e48      	subs	r0, r1, #1
 800481e:	2224      	movs	r2, #36	@ 0x24
 8004820:	4350      	muls	r0, r2
 8004822:	182e      	adds	r6, r5, r0
 8004824:	68f4      	ldr	r4, [r6, #12]
 8004826:	b984      	cbnz	r4, 800484a <KMS_CloseSession+0x3e>
    (void)memset((void *) & (KMS_GETSESSION(hSession)), 0, sizeof(kms_session_desc_t));
 8004828:	3008      	adds	r0, #8
 800482a:	4621      	mov	r1, r4
 800482c:	4428      	add	r0, r5
 800482e:	f002 f9e5 	bl	8006bfc <memset>
    KMS_GETSESSION(hSession).state = KMS_SESSION_NOT_USED;
 8004832:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004836:	60f3      	str	r3, [r6, #12]
    KMS_Manager.sessionNb--;
 8004838:	686b      	ldr	r3, [r5, #4]
    KMS_GETSESSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 800483a:	6274      	str	r4, [r6, #36]	@ 0x24
    KMS_Manager.sessionNb--;
 800483c:	3b01      	subs	r3, #1
 800483e:	606b      	str	r3, [r5, #4]
}
 8004840:	4620      	mov	r0, r4
 8004842:	bd70      	pop	{r4, r5, r6, pc}
    e_ret_status = CKR_CRYPTOKI_NOT_INITIALIZED;
 8004844:	f44f 74c8 	mov.w	r4, #400	@ 0x190
 8004848:	e7fa      	b.n	8004840 <KMS_CloseSession+0x34>
    e_ret_status = CKR_SESSION_HANDLE_INVALID;
 800484a:	24b3      	movs	r4, #179	@ 0xb3
  return e_ret_status;
 800484c:	e7f8      	b.n	8004840 <KMS_CloseSession+0x34>
 800484e:	bf00      	nop
 8004850:	20000c48 	.word	0x20000c48

08004854 <KMS_SetStateIdle>:
  * @param  hSession session handle
  * @retval None
  */
void     KMS_SetStateIdle(CK_SESSION_HANDLE hSession)
{
  KMS_GETSESSION(hSession).state = KMS_SESSION_IDLE;
 8004854:	4b03      	ldr	r3, [pc, #12]	@ (8004864 <KMS_SetStateIdle+0x10>)
 8004856:	2224      	movs	r2, #36	@ 0x24
 8004858:	3801      	subs	r0, #1
 800485a:	fb02 3300 	mla	r3, r2, r0, r3
 800485e:	2200      	movs	r2, #0
 8004860:	60da      	str	r2, [r3, #12]
}
 8004862:	4770      	bx	lr
 8004864:	20000c48 	.word	0x20000c48

08004868 <KMS_GetMechanismInfo>:
#else /* KMS_RSA_xxxx */
#error "No RSA modulus size specified"
#endif /* KMS_RSA_xxxx */
#endif /* KMS_RSA */

  switch (type)
 8004868:	f241 0382 	movw	r3, #4226	@ 0x1082
 800486c:	4299      	cmp	r1, r3
{
 800486e:	b510      	push	{r4, lr}
  switch (type)
 8004870:	d815      	bhi.n	800489e <KMS_GetMechanismInfo+0x36>
 8004872:	f5b1 5f84 	cmp.w	r1, #4224	@ 0x1080
 8004876:	d81e      	bhi.n	80048b6 <KMS_GetMechanismInfo+0x4e>
 8004878:	f241 0341 	movw	r3, #4161	@ 0x1041
 800487c:	4299      	cmp	r1, r3
 800487e:	d024      	beq.n	80048ca <KMS_GetMechanismInfo+0x62>
 8004880:	f241 0344 	movw	r3, #4164	@ 0x1044
 8004884:	4299      	cmp	r1, r3
 8004886:	d020      	beq.n	80048ca <KMS_GetMechanismInfo+0x62>
 8004888:	f5b1 7f14 	cmp.w	r1, #592	@ 0x250
 800488c:	d023      	beq.n	80048d6 <KMS_GetMechanismInfo+0x6e>
 800488e:	2300      	movs	r3, #0
 8004890:	4619      	mov	r1, r3
 8004892:	461c      	mov	r4, r3
  CK_RV ret_status = CKR_MECHANISM_INVALID;
 8004894:	2070      	movs	r0, #112	@ 0x70
#endif /* KMS_AES_CBC & KMS_FCT_ENCRYPT */
#if (KMS_AES_CBC & KMS_FCT_DECRYPT)
                     | CKF_DECRYPT
#endif /* KMS_AES_CBC & KMS_FCT_DECRYPT */
                     ;
      pInfo->ulMaxKeySize = CA_CRL_AES256_KEY;
 8004896:	e9c2 1301 	strd	r1, r3, [r2, #4]
      pInfo->ulMinKeySize = CA_CRL_AES128_KEY;
 800489a:	6014      	str	r4, [r2, #0]
  (void)slotID;
  (void)type;
  (void)pInfo;
  return CKR_FUNCTION_NOT_SUPPORTED;
#endif /* KMS_SEARCH */
}
 800489c:	bd10      	pop	{r4, pc}
  switch (type)
 800489e:	f241 038b 	movw	r3, #4235	@ 0x108b
 80048a2:	4299      	cmp	r1, r3
 80048a4:	d80a      	bhi.n	80048bc <KMS_GetMechanismInfo+0x54>
 80048a6:	f241 0389 	movw	r3, #4233	@ 0x1089
 80048aa:	4299      	cmp	r1, r3
 80048ac:	d817      	bhi.n	80048de <KMS_GetMechanismInfo+0x76>
 80048ae:	f241 0387 	movw	r3, #4231	@ 0x1087
 80048b2:	4299      	cmp	r1, r3
 80048b4:	d1eb      	bne.n	800488e <KMS_GetMechanismInfo+0x26>
 80048b6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80048ba:	e012      	b.n	80048e2 <KMS_GetMechanismInfo+0x7a>
 80048bc:	f241 1304 	movw	r3, #4356	@ 0x1104
 80048c0:	4299      	cmp	r1, r3
 80048c2:	d1e4      	bne.n	800488e <KMS_GetMechanismInfo+0x26>
 80048c4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80048c8:	e00b      	b.n	80048e2 <KMS_GetMechanismInfo+0x7a>
 80048ca:	4b07      	ldr	r3, [pc, #28]	@ (80048e8 <KMS_GetMechanismInfo+0x80>)
 80048cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80048d0:	460c      	mov	r4, r1
      ret_status = CKR_OK;
 80048d2:	2000      	movs	r0, #0
 80048d4:	e7df      	b.n	8004896 <KMS_GetMechanismInfo+0x2e>
  switch (type)
 80048d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80048da:	2100      	movs	r1, #0
 80048dc:	e7f8      	b.n	80048d0 <KMS_GetMechanismInfo+0x68>
 80048de:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80048e2:	2120      	movs	r1, #32
 80048e4:	2410      	movs	r4, #16
 80048e6:	e7f4      	b.n	80048d2 <KMS_GetMechanismInfo+0x6a>
 80048e8:	01502000 	.word	0x01502000

080048ec <KMS_DeriveKey>:
  *         @ref KMS_ECC_LoadCurve returned values
  */
CK_RV          KMS_DeriveKey(CK_SESSION_HANDLE hSession, CK_MECHANISM_PTR pMechanism,
                             CK_OBJECT_HANDLE hBaseKey, CK_ATTRIBUTE_PTR  pTemplate,
                             CK_ULONG  ulAttributeCount, CK_OBJECT_HANDLE_PTR  phKey)
{
 80048ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#else /* KMS_ENCRYPT_DECRYPT_BLOB */
  kms_obj_keyhead_t *pkms_object;
#endif /* KMS_ENCRYPT_DECRYPT_BLOB */
  kms_attr_t *P_pKeyAttribute = NULL;

  if (!KMS_IS_INITIALIZED())
 80048f0:	f8df 8154 	ldr.w	r8, [pc, #340]	@ 8004a48 <KMS_DeriveKey+0x15c>
{
 80048f4:	b089      	sub	sp, #36	@ 0x24
 80048f6:	469a      	mov	sl, r3
  kms_attr_t *P_pKeyAttribute = NULL;
 80048f8:	2300      	movs	r3, #0
 80048fa:	9302      	str	r3, [sp, #8]
  if (!KMS_IS_INITIALIZED())
 80048fc:	f898 3000 	ldrb.w	r3, [r8]
{
 8004900:	4605      	mov	r5, r0
 8004902:	460e      	mov	r6, r1
 8004904:	4691      	mov	r9, r2
  if (!KMS_IS_INITIALIZED())
 8004906:	2b00      	cmp	r3, #0
 8004908:	f000 8095 	beq.w	8004a36 <KMS_DeriveKey+0x14a>
  {
    return CKR_CRYPTOKI_NOT_INITIALIZED;
  }
  if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 800490c:	f7ff ff6c 	bl	80047e8 <KMS_CheckSessionHdle>
 8004910:	2800      	cmp	r0, #0
 8004912:	f040 8093 	bne.w	8004a3c <KMS_DeriveKey+0x150>
  {
    return CKR_SESSION_HANDLE_INVALID;
  }
  /* No processing already on going  */
  if (KMS_GETSESSION(hSession).state != KMS_SESSION_IDLE)
 8004916:	f105 3bff 	add.w	fp, r5, #4294967295	@ 0xffffffff
 800491a:	2324      	movs	r3, #36	@ 0x24
 800491c:	fb03 830b 	mla	r3, r3, fp, r8
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	2b00      	cmp	r3, #0
 8004924:	f040 808a 	bne.w	8004a3c <KMS_DeriveKey+0x150>
  {
    return CKR_SESSION_HANDLE_INVALID;
  }
  if (pMechanism == NULL_PTR)
 8004928:	2e00      	cmp	r6, #0
 800492a:	f000 8089 	beq.w	8004a40 <KMS_DeriveKey+0x154>
  {
    return CKR_ARGUMENTS_BAD;
  }
  switch (pMechanism->mechanism)
 800492e:	6831      	ldr	r1, [r6, #0]
 8004930:	f241 1204 	movw	r2, #4356	@ 0x1104
 8004934:	4291      	cmp	r1, r2
 8004936:	f040 8085 	bne.w	8004a44 <KMS_DeriveKey+0x158>
  {
#if defined(KMS_AES_ECB) && (KMS_AES_ECB & KMS_FCT_DERIVE_KEY)
    case CKM_AES_ECB_ENCRYPT_DATA:
    {
      CK_MECHANISM aes_ecb_mechanism = { CKM_AES_ECB, NULL, 0 };
 800493a:	f241 0281 	movw	r2, #4225	@ 0x1081
 800493e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004942:	9307      	str	r3, [sp, #28]
      CK_ULONG EncryptedLen;
      uint8_t *pKeyBuffer;

      /* Derivation is done based on the value passed in the MEchanism */
      if ((pMechanism->pParameter == NULL) ||
 8004944:	6873      	ldr	r3, [r6, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d073      	beq.n	8004a32 <KMS_DeriveKey+0x146>
          (pMechanism->ulParameterLen == 0UL))
 800494a:	68b3      	ldr	r3, [r6, #8]
      if ((pMechanism->pParameter == NULL) ||
 800494c:	2b00      	cmp	r3, #0
 800494e:	d070      	beq.n	8004a32 <KMS_DeriveKey+0x146>
      {
        e_ret_status = CKR_MECHANISM_PARAM_INVALID;
        break;
      }
      if ((pMechanism->ulParameterLen != CA_CRL_AES128_KEY)
 8004950:	3b10      	subs	r3, #16
 8004952:	2b10      	cmp	r3, #16
 8004954:	d86d      	bhi.n	8004a32 <KMS_DeriveKey+0x146>
 8004956:	4a3d      	ldr	r2, [pc, #244]	@ (8004a4c <KMS_DeriveKey+0x160>)
 8004958:	fa22 f303 	lsr.w	r3, r2, r3
 800495c:	07d8      	lsls	r0, r3, #31
 800495e:	d568      	bpl.n	8004a32 <KMS_DeriveKey+0x146>
      }

      /* The Key */
      /* Read the key value from the Key Handle                 */
      /* Key Handle is the index to one of static or nvm        */
      pkms_object = KMS_Objects_GetPointer(hBaseKey);
 8004960:	4648      	mov	r0, r9
 8004962:	f000 fe07 	bl	8005574 <KMS_Objects_GetPointer>

      /* Check that hKey is valid */
      if ((pkms_object != NULL) &&
 8004966:	4607      	mov	r7, r0
 8004968:	2800      	cmp	r0, #0
 800496a:	d060      	beq.n	8004a2e <KMS_DeriveKey+0x142>
 800496c:	6802      	ldr	r2, [r0, #0]
 800496e:	4b38      	ldr	r3, [pc, #224]	@ (8004a50 <KMS_DeriveKey+0x164>)
 8004970:	429a      	cmp	r2, r3
 8004972:	d15c      	bne.n	8004a2e <KMS_DeriveKey+0x142>
          (pkms_object->version == KMS_ABI_VERSION_CK_2_40) &&
 8004974:	6842      	ldr	r2, [r0, #4]
 8004976:	f46f 710f 	mvn.w	r1, #572	@ 0x23c
 800497a:	440b      	add	r3, r1
 800497c:	429a      	cmp	r2, r3
 800497e:	d156      	bne.n	8004a2e <KMS_DeriveKey+0x142>
          (pkms_object->configuration == KMS_ABI_CONFIG_KEYHEAD))
      {

        /* Search for the Key Value to use */
        e_ret_status = KMS_Objects_SearchAttributes(CKA_VALUE, pkms_object, &P_pKeyAttribute);
 8004980:	4601      	mov	r1, r0
 8004982:	aa02      	add	r2, sp, #8
 8004984:	2011      	movs	r0, #17
 8004986:	f000 fe7b 	bl	8005680 <KMS_Objects_SearchAttributes>

        if (e_ret_status == CKR_OK)
 800498a:	4604      	mov	r4, r0
 800498c:	2800      	cmp	r0, #0
 800498e:	d141      	bne.n	8004a14 <KMS_DeriveKey+0x128>

          /* As stated in PKCS11 spec:                                                   */
          /* The CKA_DERIVE attribute has the value CK_TRUE if and only if it is         */
          /*   possible to derive other keys from the key                                */
          /* Check that the object allows to DERIVE a KEY, checking ATTRIBUTE CKA_DERIVE */
          e_ret_status = KMS_Objects_SearchAttributes(CKA_DERIVE, pkms_object, &pDeriveAttribute);
 8004990:	aa04      	add	r2, sp, #16
 8004992:	4639      	mov	r1, r7
 8004994:	f44f 7086 	mov.w	r0, #268	@ 0x10c
 8004998:	f000 fe72 	bl	8005680 <KMS_Objects_SearchAttributes>

          if (e_ret_status == CKR_OK)
 800499c:	b918      	cbnz	r0, 80049a6 <KMS_DeriveKey+0xba>
          {
            if (*pDeriveAttribute->data != CK_TRUE)
 800499e:	9b04      	ldr	r3, [sp, #16]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d13d      	bne.n	8004a22 <KMS_DeriveKey+0x136>
              break;
            }
          }

          /* Set key size with value from attribute  */
          if ((P_pKeyAttribute->size == CA_CRL_AES128_KEY) ||    /* 128 bits */
 80049a6:	9b02      	ldr	r3, [sp, #8]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f023 0208 	bic.w	r2, r3, #8
 80049ae:	2a10      	cmp	r2, #16
 80049b0:	d001      	beq.n	80049b6 <KMS_DeriveKey+0xca>
              (P_pKeyAttribute->size == CA_CRL_AES192_KEY) ||     /* 192 bits */
 80049b2:	2b20      	cmp	r3, #32
 80049b4:	d137      	bne.n	8004a26 <KMS_DeriveKey+0x13a>
              (P_pKeyAttribute->size == CA_CRL_AES256_KEY))       /* 256 bits */
          {
            /* Allocate a Key buffer */
            pKeyBuffer = (uint8_t *)KMS_Alloc(hSession, pMechanism->ulParameterLen);
 80049b6:	68b1      	ldr	r1, [r6, #8]
 80049b8:	4628      	mov	r0, r5
 80049ba:	f000 f89b 	bl	8004af4 <KMS_Alloc>
            if (pKeyBuffer == NULL)
 80049be:	4607      	mov	r7, r0
 80049c0:	b398      	cbz	r0, 8004a2a <KMS_DeriveKey+0x13e>
            break;
          }

          /* Reuse the AES-EncryptInit function */
          /* The Encryption mechanism do not expect any param, use one the local definition */
          e_ret_status = KMS_EncryptInit(hSession, &aes_ecb_mechanism, hBaseKey);
 80049c2:	464a      	mov	r2, r9
 80049c4:	a905      	add	r1, sp, #20
 80049c6:	4628      	mov	r0, r5
 80049c8:	f7fe ff8a 	bl	80038e0 <KMS_EncryptInit>
          if (e_ret_status != CKR_OK)
 80049cc:	4604      	mov	r4, r0
 80049ce:	b138      	cbz	r0, 80049e0 <KMS_DeriveKey+0xf4>
          {
            KMS_Free(hSession, pKeyBuffer);
 80049d0:	4639      	mov	r1, r7
 80049d2:	4628      	mov	r0, r5
 80049d4:	f000 f8b2 	bl	8004b3c <KMS_Free>

  return e_ret_status;
#else /* KMS_DERIVE_KEY */
  return CKR_FUNCTION_NOT_SUPPORTED;
#endif /* KMS_DERIVE_KEY */
}
 80049d8:	4620      	mov	r0, r4
 80049da:	b009      	add	sp, #36	@ 0x24
 80049dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          e_ret_status = KMS_Encrypt(hSession, pMechanism->pParameter,
 80049e0:	ab03      	add	r3, sp, #12
          EncryptedLen = pMechanism->ulParameterLen;
 80049e2:	68b2      	ldr	r2, [r6, #8]
          e_ret_status = KMS_Encrypt(hSession, pMechanism->pParameter,
 80049e4:	9300      	str	r3, [sp, #0]
 80049e6:	6871      	ldr	r1, [r6, #4]
          EncryptedLen = pMechanism->ulParameterLen;
 80049e8:	9203      	str	r2, [sp, #12]
          e_ret_status = KMS_Encrypt(hSession, pMechanism->pParameter,
 80049ea:	463b      	mov	r3, r7
 80049ec:	4628      	mov	r0, r5
 80049ee:	f7fe ffef 	bl	80039d0 <KMS_Encrypt>
          if (e_ret_status == CKR_OK)
 80049f2:	4604      	mov	r4, r0
 80049f4:	b950      	cbnz	r0, 8004a0c <KMS_DeriveKey+0x120>
            e_ret_status = KMS_Objects_CreateNStoreBlobForAES(hSession,
 80049f6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80049f8:	9301      	str	r3, [sp, #4]
 80049fa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80049fc:	9300      	str	r3, [sp, #0]
 80049fe:	9a03      	ldr	r2, [sp, #12]
 8004a00:	4653      	mov	r3, sl
 8004a02:	4639      	mov	r1, r7
 8004a04:	4628      	mov	r0, r5
 8004a06:	f001 f9e9 	bl	8005ddc <KMS_Objects_CreateNStoreBlobForAES>
 8004a0a:	4604      	mov	r4, r0
            KMS_Free(hSession, pKeyBuffer);
 8004a0c:	4639      	mov	r1, r7
 8004a0e:	4628      	mov	r0, r5
 8004a10:	f000 f894 	bl	8004b3c <KMS_Free>
      KMS_GETSESSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 8004a14:	2324      	movs	r3, #36	@ 0x24
 8004a16:	fb03 880b 	mla	r8, r3, fp, r8
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	f8c8 3024 	str.w	r3, [r8, #36]	@ 0x24
      break;
 8004a20:	e7da      	b.n	80049d8 <KMS_DeriveKey+0xec>
              e_ret_status = CKR_ACTION_PROHIBITED;
 8004a22:	241b      	movs	r4, #27
 8004a24:	e7d8      	b.n	80049d8 <KMS_DeriveKey+0xec>
            e_ret_status = CKR_ATTRIBUTE_VALUE_INVALID;
 8004a26:	2413      	movs	r4, #19
 8004a28:	e7d6      	b.n	80049d8 <KMS_DeriveKey+0xec>
              e_ret_status = CKR_DEVICE_MEMORY;
 8004a2a:	2431      	movs	r4, #49	@ 0x31
 8004a2c:	e7d4      	b.n	80049d8 <KMS_DeriveKey+0xec>
        e_ret_status = CKR_KEY_HANDLE_INVALID;
 8004a2e:	2460      	movs	r4, #96	@ 0x60
 8004a30:	e7f0      	b.n	8004a14 <KMS_DeriveKey+0x128>
        e_ret_status = CKR_MECHANISM_PARAM_INVALID;
 8004a32:	2471      	movs	r4, #113	@ 0x71
 8004a34:	e7d0      	b.n	80049d8 <KMS_DeriveKey+0xec>
    return CKR_CRYPTOKI_NOT_INITIALIZED;
 8004a36:	f44f 74c8 	mov.w	r4, #400	@ 0x190
 8004a3a:	e7cd      	b.n	80049d8 <KMS_DeriveKey+0xec>
    return CKR_SESSION_HANDLE_INVALID;
 8004a3c:	24b3      	movs	r4, #179	@ 0xb3
 8004a3e:	e7cb      	b.n	80049d8 <KMS_DeriveKey+0xec>
    return CKR_ARGUMENTS_BAD;
 8004a40:	2407      	movs	r4, #7
 8004a42:	e7c9      	b.n	80049d8 <KMS_DeriveKey+0xec>
      e_ret_status = CKR_MECHANISM_INVALID;
 8004a44:	2470      	movs	r4, #112	@ 0x70
 8004a46:	e7c7      	b.n	80049d8 <KMS_DeriveKey+0xec>
 8004a48:	20000c48 	.word	0x20000c48
 8004a4c:	00010101 	.word	0x00010101
 8004a50:	b10b0240 	.word	0xb10b0240

08004a54 <mempool_init>:
/**
  * @brief  Memory pool initialization
  * @retval None
  */
static void mempool_init(kms_mem_pool_header_t *pHead, uint32_t size)
{
 8004a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ptr = (uint8_t *)(((uint32_t)pHead) + sizeof(kms_mem_pool_header_t));
  p_foot = (kms_mem_pool_footer_t *)(((uint32_t)pHead) + sizeof(kms_mem_pool_header_t) + size + (4UL - (size & 0x3UL)));
  /* Initialize header with canaries and controls */
  for (uint32_t i = 0; i < (sizeof(pHead->canaries) / sizeof(pHead->canaries[0])); i++)
  {
    pHead->canaries[i] = normalizedHeader[i];
 8004a56:	4b0d      	ldr	r3, [pc, #52]	@ (8004a8c <mempool_init+0x38>)
 8004a58:	4f0d      	ldr	r7, [pc, #52]	@ (8004a90 <mempool_init+0x3c>)
  }
  pHead->size = size;
 8004a5a:	6081      	str	r1, [r0, #8]
{
 8004a5c:	460a      	mov	r2, r1
  p_foot = (kms_mem_pool_footer_t *)(((uint32_t)pHead) + sizeof(kms_mem_pool_header_t) + size + (4UL - (size & 0x3UL)));
 8004a5e:	f101 0624 	add.w	r6, r1, #36	@ 0x24
  pHead->used = 0;
 8004a62:	2100      	movs	r1, #0
    pHead->canaries[i] = normalizedHeader[i];
 8004a64:	e9c0 3700 	strd	r3, r7, [r0]
  p_foot = (kms_mem_pool_footer_t *)(((uint32_t)pHead) + sizeof(kms_mem_pool_header_t) + size + (4UL - (size & 0x3UL)));
 8004a68:	1835      	adds	r5, r6, r0
#if defined(KMS_MEM_DEBUGGING)
  pHead->session = KMS_SESSION_ID_INVALID;
 8004a6a:	e9c0 1103 	strd	r1, r1, [r0, #12]
  pHead->caller = 0;
  pHead->reqSize = 0;
 8004a6e:	e9c0 1105 	strd	r1, r1, [r0, #20]
{
 8004a72:	4604      	mov	r4, r0
  pHead->reserved = 0;
 8004a74:	61c1      	str	r1, [r0, #28]
#endif /* KMS_MEM_DEBUGGING */
  (void)memset(ptr, 0, size);   /* Initialize pool buffer contents to 0 */
 8004a76:	3020      	adds	r0, #32
 8004a78:	f002 f8c0 	bl	8006bfc <memset>
  /* Initialize footer with canaries */
  for (uint32_t i = 0; i < (sizeof(p_foot->canaries) / sizeof(p_foot->canaries[0])); i++)
  {
    p_foot->canaries[i] = normalizedFooter.canaries[i];
 8004a7c:	4b05      	ldr	r3, [pc, #20]	@ (8004a94 <mempool_init+0x40>)
 8004a7e:	4a06      	ldr	r2, [pc, #24]	@ (8004a98 <mempool_init+0x44>)
 8004a80:	51a7      	str	r7, [r4, r6]
 8004a82:	e9c5 2301 	strd	r2, r3, [r5, #4]
 8004a86:	4b05      	ldr	r3, [pc, #20]	@ (8004a9c <mempool_init+0x48>)
 8004a88:	60eb      	str	r3, [r5, #12]
  }
}
 8004a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a8c:	54762fd6 	.word	0x54762fd6
 8004a90:	6aeef1d2 	.word	0x6aeef1d2
 8004a94:	dced746e 	.word	0xdced746e
 8004a98:	8ae1c029 	.word	0x8ae1c029
 8004a9c:	5411254f 	.word	0x5411254f

08004aa0 <KMS_MemInit>:
  * @brief  Initialize memory management structure
  * @retval None
  */
#if !defined(KMS_MEM_USE_CUSTOM_ALLOCATOR)
void KMS_MemInit(void)
{
 8004aa0:	b510      	push	{r4, lr}
 * 2 pools of 1K
 * 1 pool of 5K
 */

KMS_MEM_DECLARE_POOL_START()
KMS_MEM_DECLARE_POOL_ENTRY(1, 256)
 8004aa2:	4c13      	ldr	r4, [pc, #76]	@ (8004af0 <KMS_MemInit+0x50>)
 8004aa4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004aa8:	4620      	mov	r0, r4
 8004aaa:	f7ff ffd3 	bl	8004a54 <mempool_init>
KMS_MEM_DECLARE_POOL_ENTRY(2, 256)
 8004aae:	f504 709a 	add.w	r0, r4, #308	@ 0x134
 8004ab2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004ab6:	f7ff ffcd 	bl	8004a54 <mempool_init>
KMS_MEM_DECLARE_POOL_ENTRY(3, 512)
 8004aba:	f504 701a 	add.w	r0, r4, #616	@ 0x268
 8004abe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004ac2:	f7ff ffc7 	bl	8004a54 <mempool_init>
KMS_MEM_DECLARE_POOL_ENTRY(4, 1024)
 8004ac6:	f204 409c 	addw	r0, r4, #1180	@ 0x49c
 8004aca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004ace:	f7ff ffc1 	bl	8004a54 <mempool_init>
KMS_MEM_DECLARE_POOL_ENTRY(5, 1024)
 8004ad2:	f504 600d 	add.w	r0, r4, #2256	@ 0x8d0
 8004ad6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004ada:	f7ff ffbb 	bl	8004a54 <mempool_init>
KMS_MEM_DECLARE_POOL_ENTRY(6, 5 * 1024)
 8004ade:	f604 5004 	addw	r0, r4, #3332	@ 0xd04
 8004ae2:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400

#endif /* KMS_MEM_USE_POOL_ALLOCATOR */
#if defined(KMS_MEM_LOGGING)
  KMS_LL_ReportMemInit();
#endif /* KMS_MEM_LOGGING */
}
 8004ae6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004aea:	f7ff bfb3 	b.w	8004a54 <mempool_init>
 8004aee:	bf00      	nop
 8004af0:	20000db8 	.word	0x20000db8

08004af4 <KMS_Alloc>:
  * @param  Size Size of the memory to allocate
  * @retval Allocated pointer if successful to allocate, NULL_PTR if failed
  */
#if !defined(KMS_MEM_USE_CUSTOM_ALLOCATOR)
CK_VOID_PTR KMS_Alloc(CK_SESSION_HANDLE Session, size_t Size)
{
 8004af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
__attribute__((always_inline)) __STATIC_INLINE uint32_t KMS_LL_GetLR(void)
{
  register uint32_t result;

#if defined ( __ICCARM__ ) || ( __GNUC__ )
  __ASM volatile("MOV %0, LR" : "=r"(result));
 8004af6:	4676      	mov	r6, lr
    }
  }
#endif /* KMS_MEM_DEBUGGING */
#endif /* KMS_MEM_USE_HEAP_ALLOCATOR */
#if defined(KMS_MEM_USE_POOL_ALLOCATOR)
  for (uint32_t i = 0; (i < (sizeof(kms_mem_pool_tab) / sizeof(kms_mem_pool_header_t *))) && (ptr == NULL_PTR); i++)
 8004af8:	4d0f      	ldr	r5, [pc, #60]	@ (8004b38 <KMS_Alloc+0x44>)
 8004afa:	2200      	movs	r2, #0
  {
    if ((kms_mem_pool_tab[i]->used == 0UL) && (kms_mem_pool_tab[i]->size >= Size))
    {
      kms_mem_pool_tab[i]->used = 1;
 8004afc:	2701      	movs	r7, #1
    if ((kms_mem_pool_tab[i]->used == 0UL) && (kms_mem_pool_tab[i]->size >= Size))
 8004afe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b02:	68dc      	ldr	r4, [r3, #12]
 8004b04:	b984      	cbnz	r4, 8004b28 <KMS_Alloc+0x34>
 8004b06:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8004b0a:	458c      	cmp	ip, r1
 8004b0c:	d305      	bcc.n	8004b1a <KMS_Alloc+0x26>
#if defined(KMS_MEM_DEBUGGING)
      kms_mem_pool_tab[i]->session = Session;
 8004b0e:	e9c3 7003 	strd	r7, r0, [r3, #12]
      kms_mem_pool_tab[i]->caller = LR;
      kms_mem_pool_tab[i]->reqSize = Size;
 8004b12:	e9c3 6105 	strd	r6, r1, [r3, #20]
#endif /* KMS_MEM_DEBUGGING */
      ptr = (void *)(uint32_t *)((uint32_t)(kms_mem_pool_tab[i]) + sizeof(kms_mem_pool_header_t));
 8004b16:	f103 0420 	add.w	r4, r3, #32
  for (uint32_t i = 0; (i < (sizeof(kms_mem_pool_tab) / sizeof(kms_mem_pool_header_t *))) && (ptr == NULL_PTR); i++)
 8004b1a:	3201      	adds	r2, #1
 8004b1c:	2a06      	cmp	r2, #6
 8004b1e:	d005      	beq.n	8004b2c <KMS_Alloc+0x38>
 8004b20:	2c00      	cmp	r4, #0
 8004b22:	d0ec      	beq.n	8004afe <KMS_Alloc+0xa>
  {
    KMS_LL_ReportMemAlloc(Size, ptr);
  }
#endif /* KMS_MEM_LOGGING */
  return ptr;
}
 8004b24:	4620      	mov	r0, r4
 8004b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b28:	2400      	movs	r4, #0
 8004b2a:	e7f6      	b.n	8004b1a <KMS_Alloc+0x26>
  if (ptr == NULL_PTR)
 8004b2c:	2c00      	cmp	r4, #0
 8004b2e:	d1f9      	bne.n	8004b24 <KMS_Alloc+0x30>
    KMS_LL_ReportError(KMS_LL_ERROR_MEM_ALLOC_FAILURE);
 8004b30:	2001      	movs	r0, #1
 8004b32:	f7fb fecf 	bl	80008d4 <KMS_LL_ReportError>
  return ptr;
 8004b36:	e7f5      	b.n	8004b24 <KMS_Alloc+0x30>
 8004b38:	08006d4c 	.word	0x08006d4c

08004b3c <KMS_Free>:
  * @param  Ptr     Pointer to the memory to free
  * @retval None
  */
#if !defined(KMS_MEM_USE_CUSTOM_ALLOCATOR)
void KMS_Free(CK_SESSION_HANDLE Session, CK_VOID_PTR Ptr)
{
 8004b3c:	b570      	push	{r4, r5, r6, lr}
  uint32_t i;

  (void)Session;

  if (Ptr == NULL_PTR)
 8004b3e:	460d      	mov	r5, r1
 8004b40:	b921      	cbnz	r1, 8004b4c <KMS_Free+0x10>
  {
    KMS_LL_ReportError(KMS_LL_ERROR_MEM_FREE_NULL_PTR);
 8004b42:	2003      	movs	r0, #3
    {
      KMS_LL_ReportError(KMS_LL_ERROR_MEM_FREE_UNKNOWN);
    }
#endif /* KMS_MEM_USE_POOL_ALLOCATOR */
  } /* (Ptr == NULL_PTR) */
}
 8004b44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      KMS_LL_ReportError(KMS_LL_ERROR_MEM_FREE_UNKNOWN);
 8004b48:	f7fb bec4 	b.w	80008d4 <KMS_LL_ReportError>
    pfoot = (kms_mem_pool_footer_t *)(tmp_ptr + phead->size + 4UL - (phead->size & 0x3UL));
 8004b4c:	f851 6c18 	ldr.w	r6, [r1, #-24]
    phead = (kms_mem_pool_header_t *)(tmp_ptr - sizeof(kms_mem_pool_header_t));
 8004b50:	f1a1 0420 	sub.w	r4, r1, #32
    pfoot = (kms_mem_pool_footer_t *)(tmp_ptr + phead->size + 4UL - (phead->size & 0x3UL));
 8004b54:	1d0b      	adds	r3, r1, #4
 8004b56:	f026 0603 	bic.w	r6, r6, #3
    if (memcmp((void *)phead, &normalizedHeader, sizeof(normalizedHeader)) != 0)
 8004b5a:	491b      	ldr	r1, [pc, #108]	@ (8004bc8 <KMS_Free+0x8c>)
 8004b5c:	2208      	movs	r2, #8
 8004b5e:	4620      	mov	r0, r4
    pfoot = (kms_mem_pool_footer_t *)(tmp_ptr + phead->size + 4UL - (phead->size & 0x3UL));
 8004b60:	441e      	add	r6, r3
    if (memcmp((void *)phead, &normalizedHeader, sizeof(normalizedHeader)) != 0)
 8004b62:	f002 f83b 	bl	8006bdc <memcmp>
 8004b66:	b110      	cbz	r0, 8004b6e <KMS_Free+0x32>
      KMS_LL_ReportError(KMS_LL_ERROR_MEM_FREE_CANARY);
 8004b68:	2002      	movs	r0, #2
 8004b6a:	f7fb feb3 	bl	80008d4 <KMS_LL_ReportError>
    if (memcmp((void *)pfoot, &normalizedFooter, sizeof(normalizedFooter)) != 0)
 8004b6e:	4917      	ldr	r1, [pc, #92]	@ (8004bcc <KMS_Free+0x90>)
 8004b70:	2210      	movs	r2, #16
 8004b72:	4630      	mov	r0, r6
 8004b74:	f002 f832 	bl	8006bdc <memcmp>
 8004b78:	b110      	cbz	r0, 8004b80 <KMS_Free+0x44>
      KMS_LL_ReportError(KMS_LL_ERROR_MEM_FREE_CANARY);
 8004b7a:	2002      	movs	r0, #2
 8004b7c:	f7fb feaa 	bl	80008d4 <KMS_LL_ReportError>
      if (phead == kms_mem_pool_tab[i])
 8004b80:	4b13      	ldr	r3, [pc, #76]	@ (8004bd0 <KMS_Free+0x94>)
 8004b82:	429c      	cmp	r4, r3
 8004b84:	d013      	beq.n	8004bae <KMS_Free+0x72>
 8004b86:	f503 729a 	add.w	r2, r3, #308	@ 0x134
 8004b8a:	4294      	cmp	r4, r2
 8004b8c:	d00f      	beq.n	8004bae <KMS_Free+0x72>
 8004b8e:	f503 721a 	add.w	r2, r3, #616	@ 0x268
 8004b92:	4294      	cmp	r4, r2
 8004b94:	d00b      	beq.n	8004bae <KMS_Free+0x72>
 8004b96:	f203 429c 	addw	r2, r3, #1180	@ 0x49c
 8004b9a:	4294      	cmp	r4, r2
 8004b9c:	d007      	beq.n	8004bae <KMS_Free+0x72>
 8004b9e:	f503 620d 	add.w	r2, r3, #2256	@ 0x8d0
 8004ba2:	4294      	cmp	r4, r2
 8004ba4:	d003      	beq.n	8004bae <KMS_Free+0x72>
 8004ba6:	f603 5304 	addw	r3, r3, #3332	@ 0xd04
 8004baa:	429c      	cmp	r4, r3
 8004bac:	d10a      	bne.n	8004bc4 <KMS_Free+0x88>
        phead->used = 0;
 8004bae:	2100      	movs	r1, #0
        phead->session = KMS_SESSION_ID_INVALID;
 8004bb0:	e9c4 1103 	strd	r1, r1, [r4, #12]
        phead->reqSize = 0;
 8004bb4:	e9c4 1105 	strd	r1, r1, [r4, #20]
        (void)memset(Ptr, 0, phead->size);
 8004bb8:	68a2      	ldr	r2, [r4, #8]
 8004bba:	4628      	mov	r0, r5
}
 8004bbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        (void)memset(Ptr, 0, phead->size);
 8004bc0:	f002 b81c 	b.w	8006bfc <memset>
      KMS_LL_ReportError(KMS_LL_ERROR_MEM_FREE_UNKNOWN);
 8004bc4:	2004      	movs	r0, #4
 8004bc6:	e7bd      	b.n	8004b44 <KMS_Free+0x8>
 8004bc8:	08006d74 	.word	0x08006d74
 8004bcc:	08006d64 	.word	0x08006d64
 8004bd0:	20000db8 	.word	0x20000db8

08004bd4 <reset>:

/**
  * @brief   Invalidates the current state.
  */
static void reset(void)
{
 8004bd4:	b538      	push	{r3, r4, r5, lr}
  uint32_t i;

  nvm.header = NULL;
 8004bd6:	4c06      	ldr	r4, [pc, #24]	@ (8004bf0 <reset+0x1c>)
 8004bd8:	2500      	movs	r5, #0
  nvm.block = NVMS_BLOCK0;
  for (i = 0; i < NVMS_CFG_NUM_SLOTS; i++)
  {
    nvm.slots[i] = NULL;
 8004bda:	22a0      	movs	r2, #160	@ 0xa0
 8004bdc:	4629      	mov	r1, r5
 8004bde:	f104 0008 	add.w	r0, r4, #8
  nvm.header = NULL;
 8004be2:	6025      	str	r5, [r4, #0]
  nvm.block = NVMS_BLOCK0;
 8004be4:	7125      	strb	r5, [r4, #4]
    nvm.slots[i] = NULL;
 8004be6:	f002 f809 	bl	8006bfc <memset>
  }
  nvm.free_next = NULL;
  nvm.used_size = 0;
 8004bea:	e9c4 552a 	strd	r5, r5, [r4, #168]	@ 0xa8
}
 8004bee:	bd38      	pop	{r3, r4, r5, pc}
 8004bf0:	20002ef0 	.word	0x20002ef0

08004bf4 <null_callback>:
  */
static void null_callback(nvms_data_header_t *hdrp)
{

  (void)(hdrp);
}
 8004bf4:	4770      	bx	lr
	...

08004bf8 <use_slot_callback>:
  * @brief   Private callback of @p use().
  */
static void use_slot_callback(nvms_data_header_t *hdrp)
{

  nvm.slots[hdrp->fields.slot] = hdrp;
 8004bf8:	6883      	ldr	r3, [r0, #8]
 8004bfa:	4a02      	ldr	r2, [pc, #8]	@ (8004c04 <use_slot_callback+0xc>)
 8004bfc:	3302      	adds	r3, #2
 8004bfe:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 8004c02:	4770      	bx	lr
 8004c04:	20002ef0 	.word	0x20002ef0

08004c08 <use_end_callback>:
  * @brief   Private callback of @p use().
  */
static void use_end_callback(nvms_data_header_t *hdrp)
{

  nvm.free_next = hdrp;
 8004c08:	4b01      	ldr	r3, [pc, #4]	@ (8004c10 <use_end_callback+0x8>)
 8004c0a:	f8c3 00a8 	str.w	r0, [r3, #168]	@ 0xa8
}
 8004c0e:	4770      	bx	lr
 8004c10:	20002ef0 	.word	0x20002ef0

08004c14 <block_erase>:
{
 8004c14:	b508      	push	{r3, lr}
  result = NVMS_LL_BlockErase(block);
 8004c16:	f7fb fe77 	bl	8000908 <NVMS_LL_BlockErase>
  return NVMS_NOERROR;
 8004c1a:	2800      	cmp	r0, #0
}
 8004c1c:	bf14      	ite	ne
 8004c1e:	2003      	movne	r0, #3
 8004c20:	2000      	moveq	r0, #0
 8004c22:	bd08      	pop	{r3, pc}

08004c24 <validate>:
{
 8004c24:	b510      	push	{r4, lr}
static inline uint32_t NVMS_LL_GetBlockAddress(nvms_block_t block)
{

  if (block == NVMS_BLOCK0)
  {
    return (uint32_t)NVMS_LL_BLOCK0_ADDRESS;
 8004c26:	4c15      	ldr	r4, [pc, #84]	@ (8004c7c <validate+0x58>)
 8004c28:	b088      	sub	sp, #32
  if (block == NVMS_BLOCK0)
 8004c2a:	b118      	cbz	r0, 8004c34 <validate+0x10>
  }
  return (uint32_t)NVMS_LL_BLOCK1_ADDRESS;
 8004c2c:	4b14      	ldr	r3, [pc, #80]	@ (8004c80 <validate+0x5c>)
 8004c2e:	1b1b      	subs	r3, r3, r4
 8004c30:	eb04 0453 	add.w	r4, r4, r3, lsr #1
  hdr.fields.slot               = NVMS_SLOT_MAIN_HEADER;
 8004c34:	2300      	movs	r3, #0
  hdr.fields.magic1             = NVMS_LL_ERASED;
 8004c36:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
  hdr.fields.instance           = instance;
 8004c3a:	e9cd 3102 	strd	r3, r1, [sp, #8]
  hdr.fields.next               = &((nvms_data_header_t *)(uint32_t)dp)[1];
 8004c3e:	f104 0120 	add.w	r1, r4, #32
  hdr.fields.data_type       = NVMS_LL_ERASED;
 8004c42:	e9cd 1204 	strd	r1, r2, [sp, #16]
  hdr.fields.magic2             = NVMS_LL_ERASED;
 8004c46:	e9cd 2200 	strd	r2, r2, [sp]
  result = NVMS_LL_Write(&hdr.hdr8[8], &dp[8], sizeof(nvms_data_header_t) - 8UL);
 8004c4a:	f104 0108 	add.w	r1, r4, #8
 8004c4e:	2218      	movs	r2, #24
 8004c50:	a802      	add	r0, sp, #8
  hdr.fields.data_checksum   = 0;
 8004c52:	e9cd 3306 	strd	r3, r3, [sp, #24]
  result = NVMS_LL_Write(&hdr.hdr8[8], &dp[8], sizeof(nvms_data_header_t) - 8UL);
 8004c56:	f7fb fe7d 	bl	8000954 <NVMS_LL_Write>
  if (result)
 8004c5a:	b110      	cbz	r0, 8004c62 <validate+0x3e>
    return NVMS_FLASH_FAILURE;
 8004c5c:	2003      	movs	r0, #3
}
 8004c5e:	b008      	add	sp, #32
 8004c60:	bd10      	pop	{r4, pc}
  hdr.fields.magic2 = NVMS_HEADER_MAGIC2;
 8004c62:	4a08      	ldr	r2, [pc, #32]	@ (8004c84 <validate+0x60>)
 8004c64:	4b08      	ldr	r3, [pc, #32]	@ (8004c88 <validate+0x64>)
  result = NVMS_LL_Write(hdr.hdr8, dp, sizeof(uint32_t) * 2UL);
 8004c66:	4621      	mov	r1, r4
  hdr.fields.magic2 = NVMS_HEADER_MAGIC2;
 8004c68:	e9cd 2300 	strd	r2, r3, [sp]
  result = NVMS_LL_Write(hdr.hdr8, dp, sizeof(uint32_t) * 2UL);
 8004c6c:	4668      	mov	r0, sp
 8004c6e:	2208      	movs	r2, #8
 8004c70:	f7fb fe70 	bl	8000954 <NVMS_LL_Write>
  if (result)
 8004c74:	2800      	cmp	r0, #0
 8004c76:	d0f2      	beq.n	8004c5e <validate+0x3a>
 8004c78:	e7f0      	b.n	8004c5c <validate+0x38>
 8004c7a:	bf00      	nop
 8004c7c:	08013000 	.word	0x08013000
 8004c80:	08015000 	.word	0x08015000
 8004c84:	5aa5f731 	.word	0x5aa5f731
 8004c88:	137fa55a 	.word	0x137fa55a

08004c8c <check_slot_instance>:
{
 8004c8c:	b530      	push	{r4, r5, lr}
 8004c8e:	1f0b      	subs	r3, r1, #4
 8004c90:	f101 021c 	add.w	r2, r1, #28
    if (hdrp->hdr32[i] != NVMS_LL_ERASED)
 8004c94:	f853 4f04 	ldr.w	r4, [r3, #4]!
 8004c98:	3401      	adds	r4, #1
 8004c9a:	d030      	beq.n	8004cfe <check_slot_instance+0x72>
      if (((uint32_t)hdrp->fields.next & (NVMS_LL_PAGE_SIZE - 1UL)) != 0UL)
 8004c9c:	690c      	ldr	r4, [r1, #16]
 8004c9e:	f014 0507 	ands.w	r5, r4, #7
 8004ca2:	d11f      	bne.n	8004ce4 <check_slot_instance+0x58>
    return (uint32_t)NVMS_LL_BLOCK0_ADDRESS;
 8004ca4:	4b18      	ldr	r3, [pc, #96]	@ (8004d08 <check_slot_instance+0x7c>)
  return (uint32_t)NVMS_LL_BLOCK1_ADDRESS;
 8004ca6:	4a19      	ldr	r2, [pc, #100]	@ (8004d0c <check_slot_instance+0x80>)
 8004ca8:	1ad2      	subs	r2, r2, r3
 8004caa:	0852      	lsrs	r2, r2, #1
  if (block == NVMS_BLOCK0)
 8004cac:	b100      	cbz	r0, 8004cb0 <check_slot_instance+0x24>
  return (uint32_t)NVMS_LL_BLOCK1_ADDRESS;
 8004cae:	4413      	add	r3, r2
      endp = &startp[NVMS_LL_GetBlockSize()];
 8004cb0:	4413      	add	r3, r2
      if ((hdrp->fields.next->hdr8 < (hdrp->hdr8 + sizeof(nvms_data_header_t))) ||
 8004cb2:	f101 0220 	add.w	r2, r1, #32
 8004cb6:	4294      	cmp	r4, r2
 8004cb8:	d314      	bcc.n	8004ce4 <check_slot_instance+0x58>
 8004cba:	42a3      	cmp	r3, r4
 8004cbc:	d312      	bcc.n	8004ce4 <check_slot_instance+0x58>
      if ((hdrp->fields.magic1 != NVMS_HEADER_MAGIC1) ||
 8004cbe:	6808      	ldr	r0, [r1, #0]
 8004cc0:	4b13      	ldr	r3, [pc, #76]	@ (8004d10 <check_slot_instance+0x84>)
 8004cc2:	4298      	cmp	r0, r3
 8004cc4:	d10e      	bne.n	8004ce4 <check_slot_instance+0x58>
 8004cc6:	6848      	ldr	r0, [r1, #4]
 8004cc8:	4b12      	ldr	r3, [pc, #72]	@ (8004d14 <check_slot_instance+0x88>)
 8004cca:	4298      	cmp	r0, r3
 8004ccc:	d10a      	bne.n	8004ce4 <check_slot_instance+0x58>
      if (hdrp->fields.slot >= NVMS_CFG_NUM_SLOTS)
 8004cce:	688b      	ldr	r3, [r1, #8]
 8004cd0:	2b27      	cmp	r3, #39	@ 0x27
 8004cd2:	d807      	bhi.n	8004ce4 <check_slot_instance+0x58>
      if (hdrp->fields.instance == NVMS_LL_ERASED)
 8004cd4:	68cb      	ldr	r3, [r1, #12]
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	d004      	beq.n	8004ce4 <check_slot_instance+0x58>
      if ((hdrp->hdr8 + sizeof(nvms_data_header_t) + hdrp->fields.data_size) >
 8004cda:	698b      	ldr	r3, [r1, #24]
 8004cdc:	3320      	adds	r3, #32
 8004cde:	440b      	add	r3, r1
 8004ce0:	429c      	cmp	r4, r3
 8004ce2:	d204      	bcs.n	8004cee <check_slot_instance+0x62>
        return NVMS_SLOT_STATUS_BROKEN;
 8004ce4:	2003      	movs	r0, #3
 8004ce6:	e009      	b.n	8004cfc <check_slot_instance+0x70>
    checksum += *p;
 8004ce8:	f812 0b01 	ldrb.w	r0, [r2], #1
 8004cec:	4405      	add	r5, r0
  while (n != 0UL)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d1fa      	bne.n	8004ce8 <check_slot_instance+0x5c>
      if (checksum != hdrp->fields.data_checksum)
 8004cf2:	69c8      	ldr	r0, [r1, #28]
        return NVMS_SLOT_STATUS_CRC;
 8004cf4:	42a8      	cmp	r0, r5
 8004cf6:	bf0c      	ite	eq
 8004cf8:	2001      	moveq	r0, #1
 8004cfa:	2002      	movne	r0, #2
}
 8004cfc:	bd30      	pop	{r4, r5, pc}
  for (i = 0; i < 8U; i++)
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d1c8      	bne.n	8004c94 <check_slot_instance+0x8>
  return NVMS_SLOT_STATUS_ERASED;
 8004d02:	2000      	movs	r0, #0
 8004d04:	e7fa      	b.n	8004cfc <check_slot_instance+0x70>
 8004d06:	bf00      	nop
 8004d08:	08013000 	.word	0x08013000
 8004d0c:	08015000 	.word	0x08015000
 8004d10:	5aa5f731 	.word	0x5aa5f731
 8004d14:	137fa55a 	.word	0x137fa55a

08004d18 <scan_slots>:
{
 8004d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return (uint32_t)NVMS_LL_BLOCK0_ADDRESS;
 8004d1c:	4c1a      	ldr	r4, [pc, #104]	@ (8004d88 <scan_slots+0x70>)
  return (uint32_t)NVMS_LL_BLOCK1_ADDRESS;
 8004d1e:	4d1b      	ldr	r5, [pc, #108]	@ (8004d8c <scan_slots+0x74>)
 8004d20:	1b2d      	subs	r5, r5, r4
 8004d22:	4688      	mov	r8, r1
 8004d24:	4617      	mov	r7, r2
 8004d26:	086d      	lsrs	r5, r5, #1
  if (block == NVMS_BLOCK0)
 8004d28:	4681      	mov	r9, r0
 8004d2a:	b100      	cbz	r0, 8004d2e <scan_slots+0x16>
  return (uint32_t)NVMS_LL_BLOCK1_ADDRESS;
 8004d2c:	442c      	add	r4, r5
  slotsts = check_slot_instance(block, hdrp);
 8004d2e:	4621      	mov	r1, r4
 8004d30:	4648      	mov	r0, r9
 8004d32:	f7ff ffab 	bl	8004c8c <check_slot_instance>
  if (slotsts != NVMS_SLOT_STATUS_OK)
 8004d36:	2801      	cmp	r0, #1
 8004d38:	d123      	bne.n	8004d82 <scan_slots+0x6a>
  endp = &startp[NVMS_LL_GetBlockSize()];
 8004d3a:	1966      	adds	r6, r4, r5
  bool warning = false;
 8004d3c:	2500      	movs	r5, #0
    hdrp = (nvms_data_header_t *)hdrp->fields.next;
 8004d3e:	6924      	ldr	r4, [r4, #16]
    if (hdrp->hdr8 == endp)
 8004d40:	42b4      	cmp	r4, r6
 8004d42:	d104      	bne.n	8004d4e <scan_slots+0x36>
        endcallback(hdrp);
 8004d44:	4620      	mov	r0, r4
 8004d46:	47b8      	blx	r7
        if (warning)
 8004d48:	1c68      	adds	r0, r5, #1
}
 8004d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    slotsts = check_slot_instance(block, hdrp);
 8004d4e:	4621      	mov	r1, r4
 8004d50:	4648      	mov	r0, r9
 8004d52:	f7ff ff9b 	bl	8004c8c <check_slot_instance>
    switch (slotsts)
 8004d56:	2803      	cmp	r0, #3
 8004d58:	d8f1      	bhi.n	8004d3e <scan_slots+0x26>
 8004d5a:	a301      	add	r3, pc, #4	@ (adr r3, 8004d60 <scan_slots+0x48>)
 8004d5c:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8004d60:	08004d45 	.word	0x08004d45
 8004d64:	08004d71 	.word	0x08004d71
 8004d68:	08004d7f 	.word	0x08004d7f
 8004d6c:	08004d77 	.word	0x08004d77
        slotcallback(hdrp);
 8004d70:	4620      	mov	r0, r4
 8004d72:	47c0      	blx	r8
        break;
 8004d74:	e7e3      	b.n	8004d3e <scan_slots+0x26>
        endcallback(hdrp);
 8004d76:	4620      	mov	r0, r4
 8004d78:	47b8      	blx	r7
        status = NVMS_STATUS_PARTIAL;
 8004d7a:	2002      	movs	r0, #2
        break;
 8004d7c:	e7e5      	b.n	8004d4a <scan_slots+0x32>
    switch (slotsts)
 8004d7e:	2501      	movs	r5, #1
  while (!status_found)
 8004d80:	e7dd      	b.n	8004d3e <scan_slots+0x26>
    return NVMS_STATUS_BROKEN;
 8004d82:	2003      	movs	r0, #3
 8004d84:	e7e1      	b.n	8004d4a <scan_slots+0x32>
 8004d86:	bf00      	nop
 8004d88:	08013000 	.word	0x08013000
 8004d8c:	08015000 	.word	0x08015000

08004d90 <use>:
  * @return                    The operation status.
  * @retval NVMS_NOERROR       if the operation has been successfully completed.
  * @retval NVMS_INTERNAL      if an internal error occurred.
  */
static nvms_error_t use(nvms_block_t block)
{
 8004d90:	b570      	push	{r4, r5, r6, lr}
    return (uint32_t)NVMS_LL_BLOCK0_ADDRESS;
 8004d92:	4d1c      	ldr	r5, [pc, #112]	@ (8004e04 <use+0x74>)
  if (block == NVMS_BLOCK0)
 8004d94:	4606      	mov	r6, r0
 8004d96:	b118      	cbz	r0, 8004da0 <use+0x10>
  return (uint32_t)NVMS_LL_BLOCK1_ADDRESS;
 8004d98:	4b1b      	ldr	r3, [pc, #108]	@ (8004e08 <use+0x78>)
 8004d9a:	1b5b      	subs	r3, r3, r5
 8004d9c:	eb05 0553 	add.w	r5, r5, r3, lsr #1

  /* Resetting state */
  reset();

  /* Global info */
  nvm.header    = hdrp;
 8004da0:	4c1a      	ldr	r4, [pc, #104]	@ (8004e0c <use+0x7c>)
  reset();
 8004da2:	f7ff ff17 	bl	8004bd4 <reset>
  nvm.block     = block;
  nvm.used_size = sizeof(nvms_data_header_t);
 8004da6:	2320      	movs	r3, #32
  nvm.header    = hdrp;
 8004da8:	6025      	str	r5, [r4, #0]
  nvm.free_next = &hdrp[1];

  /* The block should have been checked before calling use() so any
     kind of anomaly in the block is considered an internal error */
  status = scan_slots(block, use_slot_callback, use_end_callback);
 8004daa:	4a19      	ldr	r2, [pc, #100]	@ (8004e10 <use+0x80>)
 8004dac:	4919      	ldr	r1, [pc, #100]	@ (8004e14 <use+0x84>)
  nvm.block     = block;
 8004dae:	7126      	strb	r6, [r4, #4]
  nvm.free_next = &hdrp[1];
 8004db0:	441d      	add	r5, r3
  status = scan_slots(block, use_slot_callback, use_end_callback);
 8004db2:	4630      	mov	r0, r6
  nvm.used_size = sizeof(nvms_data_header_t);
 8004db4:	f8c4 30ac 	str.w	r3, [r4, #172]	@ 0xac
  nvm.free_next = &hdrp[1];
 8004db8:	f8c4 50a8 	str.w	r5, [r4, #168]	@ 0xa8
  status = scan_slots(block, use_slot_callback, use_end_callback);
 8004dbc:	f7ff ffac 	bl	8004d18 <scan_slots>
  if (status != NVMS_STATUS_NORMAL)
 8004dc0:	2801      	cmp	r0, #1
 8004dc2:	d003      	beq.n	8004dcc <use+0x3c>
  {
    reset();
 8004dc4:	f7ff ff06 	bl	8004bd4 <reset>
    return NVMS_INTERNAL;
 8004dc8:	2008      	movs	r0, #8
      nvm.used_size += hdrp->fields.next->hdr8 - hdrp->hdr8;
    }
  }

  return NVMS_NOERROR;
}
 8004dca:	bd70      	pop	{r4, r5, r6, pc}
  if (status != NVMS_STATUS_NORMAL)
 8004dcc:	2100      	movs	r1, #0
 8004dce:	f8d4 20ac 	ldr.w	r2, [r4, #172]	@ 0xac
 8004dd2:	1d25      	adds	r5, r4, #4
  for (i = 0; i < NVMS_CFG_NUM_SLOTS; i++)
 8004dd4:	4608      	mov	r0, r1
    hdrp = nvm.slots[i];
 8004dd6:	f855 3f04 	ldr.w	r3, [r5, #4]!
    if (hdrp != NULL)
 8004dda:	b12b      	cbz	r3, 8004de8 <use+0x58>
      if (hdrp->fields.data_size == 0UL)
 8004ddc:	699e      	ldr	r6, [r3, #24]
 8004dde:	b95e      	cbnz	r6, 8004df8 <use+0x68>
        nvm.slots[hdrp->fields.slot] = NULL;
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	3302      	adds	r3, #2
 8004de4:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
  for (i = 0; i < NVMS_CFG_NUM_SLOTS; i++)
 8004de8:	3001      	adds	r0, #1
 8004dea:	2828      	cmp	r0, #40	@ 0x28
 8004dec:	d1f3      	bne.n	8004dd6 <use+0x46>
 8004dee:	b109      	cbz	r1, 8004df4 <use+0x64>
 8004df0:	f8c4 20ac 	str.w	r2, [r4, #172]	@ 0xac
    return NVMS_INTERNAL;
 8004df4:	2000      	movs	r0, #0
 8004df6:	e7e8      	b.n	8004dca <use+0x3a>
      nvm.used_size += hdrp->fields.next->hdr8 - hdrp->hdr8;
 8004df8:	6919      	ldr	r1, [r3, #16]
 8004dfa:	1ac9      	subs	r1, r1, r3
 8004dfc:	440a      	add	r2, r1
 8004dfe:	2101      	movs	r1, #1
 8004e00:	e7f2      	b.n	8004de8 <use+0x58>
 8004e02:	bf00      	nop
 8004e04:	08013000 	.word	0x08013000
 8004e08:	08015000 	.word	0x08015000
 8004e0c:	20002ef0 	.word	0x20002ef0
 8004e10:	08004c09 	.word	0x08004c09
 8004e14:	08004bf9 	.word	0x08004bf9

08004e18 <copy_slots>:
{
 8004e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return (uint32_t)NVMS_LL_BLOCK0_ADDRESS;
 8004e1c:	4b3e      	ldr	r3, [pc, #248]	@ (8004f18 <copy_slots+0x100>)
  return (uint32_t)NVMS_LL_BLOCK1_ADDRESS;
 8004e1e:	4e3f      	ldr	r6, [pc, #252]	@ (8004f1c <copy_slots+0x104>)
  hdr.fields.magic2 = NVMS_HEADER_MAGIC2;
 8004e20:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 8004f20 <copy_slots+0x108>
 8004e24:	1af6      	subs	r6, r6, r3
 8004e26:	eb03 0856 	add.w	r8, r3, r6, lsr #1
  if (block == NVMS_BLOCK0)
 8004e2a:	2900      	cmp	r1, #0
 8004e2c:	bf14      	ite	ne
 8004e2e:	4645      	movne	r5, r8
 8004e30:	461d      	moveq	r5, r3
  startp = (uint8_t *)NVMS_LL_GetBlockAddress(block);
 8004e32:	f1b0 0a00 	subs.w	sl, r0, #0
 8004e36:	bf08      	it	eq
 8004e38:	4698      	moveq	r8, r3
{
 8004e3a:	b08b      	sub	sp, #44	@ 0x2c
  whdrp = (nvms_data_header_t *)NVMS_LL_GetBlockAddress(dest_block) + 1;
 8004e3c:	3520      	adds	r5, #32
  endp = &startp[NVMS_LL_GetBlockSize()];
 8004e3e:	eb08 0656 	add.w	r6, r8, r6, lsr #1
  for (slot = 0; slot < NVMS_CFG_NUM_SLOTS; slot++)
 8004e42:	2700      	movs	r7, #0
  hdr.fields.magic1             = NVMS_LL_ERASED;
 8004e44:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
  crcerr = false;
 8004e48:	2300      	movs	r3, #0
  hdrp = (nvms_data_header_t *)(uint32_t)startp;
 8004e4a:	4641      	mov	r1, r8
  slotp = NULL;
 8004e4c:	461c      	mov	r4, r3
    hdrp = (nvms_data_header_t *)hdrp->fields.next;
 8004e4e:	6909      	ldr	r1, [r1, #16]
    if ((hdrp->hdr8 == endp) || (hdrp->hdr8 + sizeof(nvms_data_header_t) >= endp))
 8004e50:	428e      	cmp	r6, r1
 8004e52:	d003      	beq.n	8004e5c <copy_slots+0x44>
 8004e54:	f101 0220 	add.w	r2, r1, #32
 8004e58:	4296      	cmp	r6, r2
 8004e5a:	d825      	bhi.n	8004ea8 <copy_slots+0x90>
        if (slotp == NULL)
 8004e5c:	2c00      	cmp	r4, #0
 8004e5e:	d056      	beq.n	8004f0e <copy_slots+0xf6>
          if (crcerr)
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d154      	bne.n	8004f0e <copy_slots+0xf6>
    if ((err == NVMS_NOERROR) && (rhdrp->fields.data_size > 0UL))
 8004e64:	69a3      	ldr	r3, [r4, #24]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d051      	beq.n	8004f0e <copy_slots+0xf6>
  hdr.fields.slot                = rhdrp->fields.slot;
 8004e6a:	68a2      	ldr	r2, [r4, #8]
 8004e6c:	9204      	str	r2, [sp, #16]
  hdr.fields.instance           = 1;    /* Resetting instance number */
 8004e6e:	2201      	movs	r2, #1
 8004e70:	9205      	str	r2, [sp, #20]
  p_free = &p_next[(((sizeof(nvms_data_header_t) + size - 1UL) | (NVMS_LL_PAGE_SIZE - 1UL)) + 1UL)];
 8004e72:	f103 021f 	add.w	r2, r3, #31
 8004e76:	f042 0207 	orr.w	r2, r2, #7
 8004e7a:	3201      	adds	r2, #1
 8004e7c:	442a      	add	r2, r5
  hdr.fields.next               = (nvms_data_header_t *)(uint32_t)p_free;
 8004e7e:	9206      	str	r2, [sp, #24]
  hdr.fields.data_type       = rhdrp->fields.data_type;
 8004e80:	6962      	ldr	r2, [r4, #20]
  hdr.fields.data_size       = size;
 8004e82:	9301      	str	r3, [sp, #4]
 8004e84:	e9cd 2307 	strd	r2, r3, [sp, #28]
  hdr.fields.data_checksum   = rhdrp->fields.data_checksum;
 8004e88:	69e2      	ldr	r2, [r4, #28]
 8004e8a:	9209      	str	r2, [sp, #36]	@ 0x24
  result = NVMS_LL_Write(&((const uint8_t *)&hdr)[8], &p_next[8], sizeof(nvms_data_header_t) - 8UL);
 8004e8c:	f105 0108 	add.w	r1, r5, #8
 8004e90:	2218      	movs	r2, #24
 8004e92:	a804      	add	r0, sp, #16
  hdr.fields.magic2             = NVMS_LL_ERASED;
 8004e94:	e9cd 9902 	strd	r9, r9, [sp, #8]
  result = NVMS_LL_Write(&((const uint8_t *)&hdr)[8], &p_next[8], sizeof(nvms_data_header_t) - 8UL);
 8004e98:	f7fb fd5c 	bl	8000954 <NVMS_LL_Write>
  if (result)
 8004e9c:	9b01      	ldr	r3, [sp, #4]
 8004e9e:	b308      	cbz	r0, 8004ee4 <copy_slots+0xcc>
    return NVMS_FLASH_FAILURE;
 8004ea0:	2003      	movs	r0, #3
}
 8004ea2:	b00b      	add	sp, #44	@ 0x2c
 8004ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    slotsts = check_slot_instance(block, hdrp);
 8004ea8:	4650      	mov	r0, sl
 8004eaa:	9301      	str	r3, [sp, #4]
 8004eac:	f7ff feee 	bl	8004c8c <check_slot_instance>
    switch (slotsts)
 8004eb0:	9b01      	ldr	r3, [sp, #4]
 8004eb2:	2803      	cmp	r0, #3
 8004eb4:	d8cb      	bhi.n	8004e4e <copy_slots+0x36>
 8004eb6:	a201      	add	r2, pc, #4	@ (adr r2, 8004ebc <copy_slots+0xa4>)
 8004eb8:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
 8004ebc:	08004e5d 	.word	0x08004e5d
 8004ec0:	08004ecd 	.word	0x08004ecd
 8004ec4:	08004ed9 	.word	0x08004ed9
 8004ec8:	08004e5d 	.word	0x08004e5d
        if (hdrp->fields.slot == slot)
 8004ecc:	688a      	ldr	r2, [r1, #8]
 8004ece:	42ba      	cmp	r2, r7
 8004ed0:	bf04      	itt	eq
 8004ed2:	460c      	moveq	r4, r1
 8004ed4:	2300      	moveq	r3, #0
 8004ed6:	e7ba      	b.n	8004e4e <copy_slots+0x36>
        if (hdrp->fields.slot == slot)
 8004ed8:	688a      	ldr	r2, [r1, #8]
 8004eda:	42ba      	cmp	r2, r7
 8004edc:	bf04      	itt	eq
 8004ede:	460c      	moveq	r4, r1
 8004ee0:	2301      	moveq	r3, #1
  while (!status_found)
 8004ee2:	e7b4      	b.n	8004e4e <copy_slots+0x36>
  result = NVMS_LL_Write(rhdrp->hdr8 + sizeof(nvms_data_header_t),
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	f105 0120 	add.w	r1, r5, #32
 8004eea:	f104 0020 	add.w	r0, r4, #32
 8004eee:	f7fb fd31 	bl	8000954 <NVMS_LL_Write>
  if (result)
 8004ef2:	2800      	cmp	r0, #0
 8004ef4:	d1d4      	bne.n	8004ea0 <copy_slots+0x88>
  hdr.fields.magic1 = NVMS_HEADER_MAGIC1;
 8004ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8004f24 <copy_slots+0x10c>)
  result = NVMS_LL_Write((const uint8_t *)&hdr, p_next, sizeof(uint32_t) * 2UL);
 8004ef8:	2208      	movs	r2, #8
 8004efa:	4629      	mov	r1, r5
 8004efc:	eb0d 0002 	add.w	r0, sp, r2
  hdr.fields.magic2 = NVMS_HEADER_MAGIC2;
 8004f00:	e9cd 3b02 	strd	r3, fp, [sp, #8]
  result = NVMS_LL_Write((const uint8_t *)&hdr, p_next, sizeof(uint32_t) * 2UL);
 8004f04:	f7fb fd26 	bl	8000954 <NVMS_LL_Write>
  if (result)
 8004f08:	2800      	cmp	r0, #0
 8004f0a:	d1c9      	bne.n	8004ea0 <copy_slots+0x88>
      whdrp = (nvms_data_header_t *)whdrp->fields.next;
 8004f0c:	692d      	ldr	r5, [r5, #16]
  for (slot = 0; slot < NVMS_CFG_NUM_SLOTS; slot++)
 8004f0e:	3701      	adds	r7, #1
 8004f10:	2f28      	cmp	r7, #40	@ 0x28
 8004f12:	d199      	bne.n	8004e48 <copy_slots+0x30>
  return NVMS_NOERROR;
 8004f14:	2000      	movs	r0, #0
 8004f16:	e7c4      	b.n	8004ea2 <copy_slots+0x8a>
 8004f18:	08013000 	.word	0x08013000
 8004f1c:	08015000 	.word	0x08015000
 8004f20:	137fa55a 	.word	0x137fa55a
 8004f24:	5aa5f731 	.word	0x5aa5f731

08004f28 <garbage_collect>:
/**
  * @brief   Enforces a garbage collection.
  * @details Storage data is compacted into a single bank.
  */
static nvms_error_t garbage_collect(void)
{
 8004f28:	b510      	push	{r4, lr}

  if (nvm.block == NVMS_BLOCK0)
 8004f2a:	4c17      	ldr	r4, [pc, #92]	@ (8004f88 <garbage_collect+0x60>)
 8004f2c:	7920      	ldrb	r0, [r4, #4]
 8004f2e:	b9a8      	cbnz	r0, 8004f5c <garbage_collect+0x34>
  {
    CHECK_ERROR(copy_slots(NVMS_BLOCK0, NVMS_BLOCK1));
 8004f30:	2101      	movs	r1, #1
 8004f32:	f7ff ff71 	bl	8004e18 <copy_slots>
 8004f36:	4603      	mov	r3, r0
 8004f38:	bb18      	cbnz	r0, 8004f82 <garbage_collect+0x5a>
    CHECK_ERROR(validate(NVMS_BLOCK1, nvm.header->fields.instance + 1UL));
 8004f3a:	6823      	ldr	r3, [r4, #0]
 8004f3c:	68d9      	ldr	r1, [r3, #12]
 8004f3e:	2001      	movs	r0, #1
 8004f40:	3101      	adds	r1, #1
 8004f42:	f7ff fe6f 	bl	8004c24 <validate>
 8004f46:	4603      	mov	r3, r0
 8004f48:	b9d8      	cbnz	r0, 8004f82 <garbage_collect+0x5a>
    CHECK_ERROR(block_erase(NVMS_BLOCK0));
 8004f4a:	f7ff fe63 	bl	8004c14 <block_erase>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	b9b8      	cbnz	r0, 8004f82 <garbage_collect+0x5a>
    CHECK_ERROR(use(NVMS_BLOCK1));
 8004f52:	2001      	movs	r0, #1
    CHECK_ERROR(block_erase(NVMS_BLOCK1));
    CHECK_ERROR(use(NVMS_BLOCK0));
  }

  return NVMS_NOERROR;
}
 8004f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    CHECK_ERROR(use(NVMS_BLOCK0));
 8004f58:	f7ff bf1a 	b.w	8004d90 <use>
    CHECK_ERROR(copy_slots(NVMS_BLOCK1, NVMS_BLOCK0));
 8004f5c:	2100      	movs	r1, #0
 8004f5e:	2001      	movs	r0, #1
 8004f60:	f7ff ff5a 	bl	8004e18 <copy_slots>
 8004f64:	4603      	mov	r3, r0
 8004f66:	b960      	cbnz	r0, 8004f82 <garbage_collect+0x5a>
    CHECK_ERROR(validate(NVMS_BLOCK0, nvm.header->fields.instance + 1UL));
 8004f68:	6823      	ldr	r3, [r4, #0]
 8004f6a:	68d9      	ldr	r1, [r3, #12]
 8004f6c:	3101      	adds	r1, #1
 8004f6e:	f7ff fe59 	bl	8004c24 <validate>
 8004f72:	4603      	mov	r3, r0
 8004f74:	b928      	cbnz	r0, 8004f82 <garbage_collect+0x5a>
    CHECK_ERROR(block_erase(NVMS_BLOCK1));
 8004f76:	2001      	movs	r0, #1
 8004f78:	f7ff fe4c 	bl	8004c14 <block_erase>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2800      	cmp	r0, #0
 8004f80:	d0e8      	beq.n	8004f54 <garbage_collect+0x2c>
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	bd10      	pop	{r4, pc}
 8004f86:	bf00      	nop
 8004f88:	20002ef0 	.word	0x20002ef0

08004f8c <append_slot>:
{
 8004f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  p_next = nvm.free_next->hdr8;
 8004f90:	4e21      	ldr	r6, [pc, #132]	@ (8005018 <append_slot+0x8c>)
{
 8004f92:	b088      	sub	sp, #32
  p_free = &p_next[(((sizeof(nvms_data_header_t) + size - 1UL) | (NVMS_LL_PAGE_SIZE - 1UL)) + 1UL)];
 8004f94:	f101 041f 	add.w	r4, r1, #31
{
 8004f98:	461f      	mov	r7, r3
  p_next = nvm.free_next->hdr8;
 8004f9a:	f8d6 80a8 	ldr.w	r8, [r6, #168]	@ 0xa8
  hdr.fields.slot               = slot;
 8004f9e:	9002      	str	r0, [sp, #8]
  hdr.fields.magic1             = NVMS_LL_ERASED;
 8004fa0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
  p_free = &p_next[(((sizeof(nvms_data_header_t) + size - 1UL) | (NVMS_LL_PAGE_SIZE - 1UL)) + 1UL)];
 8004fa4:	f044 0407 	orr.w	r4, r4, #7
  hdr.fields.magic2             = NVMS_LL_ERASED;
 8004fa8:	e9cd 3300 	strd	r3, r3, [sp]
  p_free = &p_next[(((sizeof(nvms_data_header_t) + size - 1UL) | (NVMS_LL_PAGE_SIZE - 1UL)) + 1UL)];
 8004fac:	3401      	adds	r4, #1
  hdr.fields.instance           = instance;
 8004fae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
  p_free = &p_next[(((sizeof(nvms_data_header_t) + size - 1UL) | (NVMS_LL_PAGE_SIZE - 1UL)) + 1UL)];
 8004fb0:	4444      	add	r4, r8
  hdr.fields.data_size          = size;
 8004fb2:	e9cd 2105 	strd	r2, r1, [sp, #20]
  hdr.fields.next               = (nvms_data_header_t *)(uint32_t)p_free;
 8004fb6:	e9cd 3403 	strd	r3, r4, [sp, #12]
{
 8004fba:	460d      	mov	r5, r1
  const uint8_t *p = data_p;
 8004fbc:	463a      	mov	r2, r7
 8004fbe:	1879      	adds	r1, r7, r1
  checksum = 0;
 8004fc0:	2300      	movs	r3, #0
  while (n != 0UL)
 8004fc2:	428a      	cmp	r2, r1
 8004fc4:	d10b      	bne.n	8004fde <append_slot+0x52>
  result = NVMS_LL_Write(&((const uint8_t *)&hdr)[8], &p_next[8], sizeof(nvms_data_header_t) - 8UL);
 8004fc6:	2218      	movs	r2, #24
 8004fc8:	f108 0108 	add.w	r1, r8, #8
 8004fcc:	a802      	add	r0, sp, #8
  hdr.fields.data_checksum      = do_checksum(slotp, size);
 8004fce:	9307      	str	r3, [sp, #28]
  result = NVMS_LL_Write(&((const uint8_t *)&hdr)[8], &p_next[8], sizeof(nvms_data_header_t) - 8UL);
 8004fd0:	f7fb fcc0 	bl	8000954 <NVMS_LL_Write>
  if (result)
 8004fd4:	b138      	cbz	r0, 8004fe6 <append_slot+0x5a>
    return NVMS_FLASH_FAILURE;
 8004fd6:	2003      	movs	r0, #3
}
 8004fd8:	b008      	add	sp, #32
 8004fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    checksum += *p;
 8004fde:	f812 0b01 	ldrb.w	r0, [r2], #1
 8004fe2:	4403      	add	r3, r0
    n--;
 8004fe4:	e7ed      	b.n	8004fc2 <append_slot+0x36>
  if (size > 0UL)
 8004fe6:	b975      	cbnz	r5, 8005006 <append_slot+0x7a>
  hdr.fields.magic2 = NVMS_HEADER_MAGIC2;
 8004fe8:	4a0c      	ldr	r2, [pc, #48]	@ (800501c <append_slot+0x90>)
 8004fea:	4b0d      	ldr	r3, [pc, #52]	@ (8005020 <append_slot+0x94>)
  result = NVMS_LL_Write((const uint8_t *)&hdr,
 8004fec:	f8d6 10a8 	ldr.w	r1, [r6, #168]	@ 0xa8
  hdr.fields.magic2 = NVMS_HEADER_MAGIC2;
 8004ff0:	e9cd 2300 	strd	r2, r3, [sp]
  result = NVMS_LL_Write((const uint8_t *)&hdr,
 8004ff4:	4668      	mov	r0, sp
 8004ff6:	2208      	movs	r2, #8
 8004ff8:	f7fb fcac 	bl	8000954 <NVMS_LL_Write>
  if (result)
 8004ffc:	2800      	cmp	r0, #0
 8004ffe:	d1ea      	bne.n	8004fd6 <append_slot+0x4a>
  nvm.free_next = (nvms_data_header_t *)(uint32_t)p_free;
 8005000:	f8c6 40a8 	str.w	r4, [r6, #168]	@ 0xa8
  return NVMS_NOERROR;
 8005004:	e7e8      	b.n	8004fd8 <append_slot+0x4c>
    result = NVMS_LL_Write(slotp, &p_next[sizeof(nvms_data_header_t)], size);
 8005006:	462a      	mov	r2, r5
 8005008:	f108 0120 	add.w	r1, r8, #32
 800500c:	4638      	mov	r0, r7
 800500e:	f7fb fca1 	bl	8000954 <NVMS_LL_Write>
    if (result)
 8005012:	2800      	cmp	r0, #0
 8005014:	d0e8      	beq.n	8004fe8 <append_slot+0x5c>
 8005016:	e7de      	b.n	8004fd6 <append_slot+0x4a>
 8005018:	20002ef0 	.word	0x20002ef0
 800501c:	5aa5f731 	.word	0x5aa5f731
 8005020:	137fa55a 	.word	0x137fa55a

08005024 <NVMS_Init>:
  * @retval NVMS_FLASH_FAILURE if the flash memory is unusable because HW
  *                            failures.
  * @retval NVMS_INTERNAL      if an internal error occurred.
  */
nvms_error_t NVMS_Init(void)
{
 8005024:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return (uint32_t)NVMS_LL_BLOCK1_ADDRESS;
 8005028:	4d84      	ldr	r5, [pc, #528]	@ (800523c <NVMS_Init+0x218>)
 800502a:	4c85      	ldr	r4, [pc, #532]	@ (8005240 <NVMS_Init+0x21c>)
  return scan_slots(block, null_callback, null_callback);
 800502c:	4f85      	ldr	r7, [pc, #532]	@ (8005244 <NVMS_Init+0x220>)
  NVMS_LL_Init();
 800502e:	f7fb fc52 	bl	80008d6 <NVMS_LL_Init>
  reset();
 8005032:	f7ff fdcf 	bl	8004bd4 <reset>
 8005036:	1b64      	subs	r4, r4, r5
 8005038:	eb05 0454 	add.w	r4, r5, r4, lsr #1
  *instance = ((nvms_data_header_t *)NVMS_LL_GetBlockAddress(block))->fields.instance;
 800503c:	2603      	movs	r6, #3
  if (NVMS_LL_IsBlockErased(block))
 800503e:	2000      	movs	r0, #0
 8005040:	f7fb fc4a 	bl	80008d8 <NVMS_LL_IsBlockErased>
 8005044:	bb50      	cbnz	r0, 800509c <NVMS_Init+0x78>
  return scan_slots(block, null_callback, null_callback);
 8005046:	497f      	ldr	r1, [pc, #508]	@ (8005244 <NVMS_Init+0x220>)
  *instance = ((nvms_data_header_t *)NVMS_LL_GetBlockAddress(block))->fields.instance;
 8005048:	f8d5 800c 	ldr.w	r8, [r5, #12]
  return scan_slots(block, null_callback, null_callback);
 800504c:	463a      	mov	r2, r7
 800504e:	f7ff fe63 	bl	8004d18 <scan_slots>
 8005052:	4683      	mov	fp, r0
  if (NVMS_LL_IsBlockErased(block))
 8005054:	2001      	movs	r0, #1
 8005056:	f7fb fc3f 	bl	80008d8 <NVMS_LL_IsBlockErased>
 800505a:	9001      	str	r0, [sp, #4]
 800505c:	2800      	cmp	r0, #0
 800505e:	f040 80e7 	bne.w	8005230 <NVMS_Init+0x20c>
  return scan_slots(block, null_callback, null_callback);
 8005062:	4978      	ldr	r1, [pc, #480]	@ (8005244 <NVMS_Init+0x220>)
  *instance = ((nvms_data_header_t *)NVMS_LL_GetBlockAddress(block))->fields.instance;
 8005064:	f8d4 900c 	ldr.w	r9, [r4, #12]
  return scan_slots(block, null_callback, null_callback);
 8005068:	463a      	mov	r2, r7
 800506a:	2001      	movs	r0, #1
 800506c:	f7ff fe54 	bl	8004d18 <scan_slots>
  if ((sts0 == NVMS_STATUS_ERASED) && (sts1 == NVMS_STATUS_ERASED))
 8005070:	9b01      	ldr	r3, [sp, #4]
  return scan_slots(block, null_callback, null_callback);
 8005072:	4682      	mov	sl, r0
  if ((sts0 == NVMS_STATUS_ERASED) && (sts1 == NVMS_STATUS_ERASED))
 8005074:	f1bb 0f00 	cmp.w	fp, #0
 8005078:	d128      	bne.n	80050cc <NVMS_Init+0xa8>
 800507a:	b998      	cbnz	r0, 80050a4 <NVMS_Init+0x80>
    CHECK_ERROR(validate(NVMS_BLOCK0, 1));
 800507c:	2101      	movs	r1, #1
 800507e:	2000      	movs	r0, #0
 8005080:	f7ff fdd0 	bl	8004c24 <validate>
 8005084:	4601      	mov	r1, r0
 8005086:	2800      	cmp	r0, #0
 8005088:	d17a      	bne.n	8005180 <NVMS_Init+0x15c>
    CHECK_ERROR(use(NVMS_BLOCK0));
 800508a:	f7ff fe81 	bl	8004d90 <use>
 800508e:	4601      	mov	r1, r0
 8005090:	2800      	cmp	r0, #0
 8005092:	d175      	bne.n	8005180 <NVMS_Init+0x15c>

  for (uint32_t i = NVMS_CFG_MAX_REPAIR_ATTEMPTS; i > 0UL; i--)
  {
    nvms_error_t err = try_boot();
 8005094:	2000      	movs	r0, #0
    {
      return err;
    }
  }
  return NVMS_FLASH_FAILURE;
}
 8005096:	b003      	add	sp, #12
 8005098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t seq0 = 0;
 800509c:	f04f 0800 	mov.w	r8, #0
    return NVMS_STATUS_ERASED;
 80050a0:	46c3      	mov	fp, r8
 80050a2:	e7d7      	b.n	8005054 <NVMS_Init+0x30>
    if (sts1 == NVMS_STATUS_NORMAL)
 80050a4:	2801      	cmp	r0, #1
 80050a6:	d0f0      	beq.n	800508a <NVMS_Init+0x66>
    if (sts1 == NVMS_STATUS_PARTIAL)
 80050a8:	2802      	cmp	r0, #2
 80050aa:	f040 8086 	bne.w	80051ba <NVMS_Init+0x196>
      CHECK_ERROR(copy_slots(NVMS_BLOCK1, NVMS_BLOCK0));
 80050ae:	4659      	mov	r1, fp
      CHECK_ERROR(copy_slots(NVMS_BLOCK1, NVMS_BLOCK0));
 80050b0:	2001      	movs	r0, #1
        CHECK_ERROR(copy_slots(NVMS_BLOCK1, NVMS_BLOCK0));
 80050b2:	f7ff feb1 	bl	8004e18 <copy_slots>
 80050b6:	4601      	mov	r1, r0
 80050b8:	2800      	cmp	r0, #0
 80050ba:	d161      	bne.n	8005180 <NVMS_Init+0x15c>
        CHECK_ERROR(validate(NVMS_BLOCK0, seq1 + 1UL));
 80050bc:	f109 0101 	add.w	r1, r9, #1
 80050c0:	f7ff fdb0 	bl	8004c24 <validate>
 80050c4:	4601      	mov	r1, r0
 80050c6:	2800      	cmp	r0, #0
 80050c8:	d15a      	bne.n	8005180 <NVMS_Init+0x15c>
 80050ca:	e064      	b.n	8005196 <NVMS_Init+0x172>
  if (sts1 == NVMS_STATUS_ERASED)
 80050cc:	bb60      	cbnz	r0, 8005128 <NVMS_Init+0x104>
    if (sts0 == NVMS_STATUS_NORMAL)
 80050ce:	f1bb 0f01 	cmp.w	fp, #1
 80050d2:	d101      	bne.n	80050d8 <NVMS_Init+0xb4>
      CHECK_ERROR(use(NVMS_BLOCK0));
 80050d4:	2000      	movs	r0, #0
 80050d6:	e7d8      	b.n	800508a <NVMS_Init+0x66>
    if (sts0 == NVMS_STATUS_PARTIAL)
 80050d8:	f1bb 0f02 	cmp.w	fp, #2
 80050dc:	d10f      	bne.n	80050fe <NVMS_Init+0xda>
      CHECK_ERROR(copy_slots(NVMS_BLOCK0, NVMS_BLOCK1));
 80050de:	2101      	movs	r1, #1
 80050e0:	2000      	movs	r0, #0
    CHECK_ERROR(copy_slots(NVMS_BLOCK0, NVMS_BLOCK1));
 80050e2:	f7ff fe99 	bl	8004e18 <copy_slots>
 80050e6:	4601      	mov	r1, r0
 80050e8:	2800      	cmp	r0, #0
 80050ea:	d149      	bne.n	8005180 <NVMS_Init+0x15c>
    CHECK_ERROR(validate(NVMS_BLOCK1, seq0 + 1UL));
 80050ec:	f108 0101 	add.w	r1, r8, #1
 80050f0:	2001      	movs	r0, #1
 80050f2:	f7ff fd97 	bl	8004c24 <validate>
 80050f6:	4601      	mov	r1, r0
 80050f8:	2800      	cmp	r0, #0
 80050fa:	d141      	bne.n	8005180 <NVMS_Init+0x15c>
 80050fc:	e037      	b.n	800516e <NVMS_Init+0x14a>
    if (sts0 == NVMS_STATUS_BROKEN)
 80050fe:	f1bb 0f03 	cmp.w	fp, #3
 8005102:	d154      	bne.n	80051ae <NVMS_Init+0x18a>
      CHECK_ERROR(block_erase(NVMS_BLOCK0));
 8005104:	2000      	movs	r0, #0
 8005106:	f7ff fd85 	bl	8004c14 <block_erase>
 800510a:	4601      	mov	r1, r0
 800510c:	bbc0      	cbnz	r0, 8005180 <NVMS_Init+0x15c>
      CHECK_ERROR(validate(NVMS_BLOCK1, 1));
 800510e:	2101      	movs	r1, #1
 8005110:	4608      	mov	r0, r1
 8005112:	f7ff fd87 	bl	8004c24 <validate>
    CHECK_ERROR(block_erase(NVMS_BLOCK0));
 8005116:	4601      	mov	r1, r0
 8005118:	bb90      	cbnz	r0, 8005180 <NVMS_Init+0x15c>
    CHECK_ERROR(use(NVMS_BLOCK1));
 800511a:	2001      	movs	r0, #1
      CHECK_ERROR(use(NVMS_BLOCK0));
 800511c:	f7ff fe38 	bl	8004d90 <use>
 8005120:	4601      	mov	r1, r0
 8005122:	bb68      	cbnz	r0, 8005180 <NVMS_Init+0x15c>
    nvms_error_t err = try_boot();
 8005124:	2002      	movs	r0, #2
 8005126:	e7b6      	b.n	8005096 <NVMS_Init+0x72>
  if ((sts0 == NVMS_STATUS_NORMAL) && (sts1 == NVMS_STATUS_NORMAL))
 8005128:	f1bb 0f01 	cmp.w	fp, #1
 800512c:	d176      	bne.n	800521c <NVMS_Init+0x1f8>
 800512e:	2801      	cmp	r0, #1
 8005130:	d12d      	bne.n	800518e <NVMS_Init+0x16a>
    if (seq0 > seq1)
 8005132:	45c1      	cmp	r9, r8
 8005134:	d21a      	bcs.n	800516c <NVMS_Init+0x148>
        CHECK_ERROR(block_erase(NVMS_BLOCK1));
 8005136:	f7ff fd6d 	bl	8004c14 <block_erase>
  CHECK_ERROR(validate(NVMS_BLOCK0, 1));
 800513a:	4601      	mov	r1, r0
 800513c:	bb00      	cbnz	r0, 8005180 <NVMS_Init+0x15c>
 800513e:	e7ed      	b.n	800511c <NVMS_Init+0xf8>
  if ((sts0 == NVMS_STATUS_PARTIAL) && (sts1 == NVMS_STATUS_PARTIAL))
 8005140:	f1ba 0f02 	cmp.w	sl, #2
 8005144:	d15e      	bne.n	8005204 <NVMS_Init+0x1e0>
    if (seq0 > seq1)
 8005146:	45c1      	cmp	r9, r8
 8005148:	d214      	bcs.n	8005174 <NVMS_Init+0x150>
      CHECK_ERROR(block_erase(NVMS_BLOCK1));
 800514a:	2001      	movs	r0, #1
 800514c:	f7ff fd62 	bl	8004c14 <block_erase>
 8005150:	4601      	mov	r1, r0
 8005152:	b9a8      	cbnz	r0, 8005180 <NVMS_Init+0x15c>
      CHECK_ERROR(copy_slots(NVMS_BLOCK0, NVMS_BLOCK1));
 8005154:	2101      	movs	r1, #1
 8005156:	f7ff fe5f 	bl	8004e18 <copy_slots>
 800515a:	4601      	mov	r1, r0
 800515c:	b980      	cbnz	r0, 8005180 <NVMS_Init+0x15c>
      CHECK_ERROR(validate(NVMS_BLOCK1, seq0 + 1UL));
 800515e:	f108 0101 	add.w	r1, r8, #1
 8005162:	2001      	movs	r0, #1
 8005164:	f7ff fd5e 	bl	8004c24 <validate>
 8005168:	4601      	mov	r1, r0
 800516a:	b948      	cbnz	r0, 8005180 <NVMS_Init+0x15c>
      CHECK_ERROR(block_erase(NVMS_BLOCK0));
 800516c:	2000      	movs	r0, #0
    CHECK_ERROR(block_erase(NVMS_BLOCK0));
 800516e:	f7ff fd51 	bl	8004c14 <block_erase>
 8005172:	e7d0      	b.n	8005116 <NVMS_Init+0xf2>
      CHECK_ERROR(block_erase(NVMS_BLOCK0));
 8005174:	4618      	mov	r0, r3
 8005176:	f7ff fd4d 	bl	8004c14 <block_erase>
 800517a:	4601      	mov	r1, r0
 800517c:	2800      	cmp	r0, #0
 800517e:	d097      	beq.n	80050b0 <NVMS_Init+0x8c>
    if ((err == NVMS_NOERROR) || (err == NVMS_WARNING))
 8005180:	2902      	cmp	r1, #2
 8005182:	d0cf      	beq.n	8005124 <NVMS_Init+0x100>
  for (uint32_t i = NVMS_CFG_MAX_REPAIR_ATTEMPTS; i > 0UL; i--)
 8005184:	3e01      	subs	r6, #1
 8005186:	f47f af5a 	bne.w	800503e <NVMS_Init+0x1a>
  return NVMS_FLASH_FAILURE;
 800518a:	2003      	movs	r0, #3
 800518c:	e783      	b.n	8005096 <NVMS_Init+0x72>
    if (sts1 == NVMS_STATUS_PARTIAL)
 800518e:	2802      	cmp	r0, #2
 8005190:	d10b      	bne.n	80051aa <NVMS_Init+0x186>
      if (seq0 > seq1)
 8005192:	45c1      	cmp	r9, r8
 8005194:	d201      	bcs.n	800519a <NVMS_Init+0x176>
        CHECK_ERROR(block_erase(NVMS_BLOCK1));
 8005196:	2001      	movs	r0, #1
 8005198:	e7cd      	b.n	8005136 <NVMS_Init+0x112>
        CHECK_ERROR(block_erase(NVMS_BLOCK0));
 800519a:	4618      	mov	r0, r3
 800519c:	f7ff fd3a 	bl	8004c14 <block_erase>
 80051a0:	4601      	mov	r1, r0
 80051a2:	2800      	cmp	r0, #0
 80051a4:	d1ec      	bne.n	8005180 <NVMS_Init+0x15c>
        CHECK_ERROR(copy_slots(NVMS_BLOCK1, NVMS_BLOCK0));
 80051a6:	4658      	mov	r0, fp
 80051a8:	e783      	b.n	80050b2 <NVMS_Init+0x8e>
    if (sts1 == NVMS_STATUS_BROKEN)
 80051aa:	2803      	cmp	r0, #3
 80051ac:	d0f3      	beq.n	8005196 <NVMS_Init+0x172>
  CHECK_ERROR(block_erase(NVMS_BLOCK0));
 80051ae:	2000      	movs	r0, #0
 80051b0:	f7ff fd30 	bl	8004c14 <block_erase>
 80051b4:	4601      	mov	r1, r0
 80051b6:	2800      	cmp	r0, #0
 80051b8:	d1e2      	bne.n	8005180 <NVMS_Init+0x15c>
  CHECK_ERROR(block_erase(NVMS_BLOCK1));
 80051ba:	2001      	movs	r0, #1
 80051bc:	f7ff fd2a 	bl	8004c14 <block_erase>
 80051c0:	4601      	mov	r1, r0
 80051c2:	2800      	cmp	r0, #0
 80051c4:	d1dc      	bne.n	8005180 <NVMS_Init+0x15c>
  CHECK_ERROR(validate(NVMS_BLOCK0, 1));
 80051c6:	2101      	movs	r1, #1
 80051c8:	f7ff fd2c 	bl	8004c24 <validate>
 80051cc:	e7b5      	b.n	800513a <NVMS_Init+0x116>
  if ((sts0 == NVMS_STATUS_PARTIAL) && (sts1 == NVMS_STATUS_BROKEN))
 80051ce:	f1ba 0f03 	cmp.w	sl, #3
 80051d2:	d1ec      	bne.n	80051ae <NVMS_Init+0x18a>
    CHECK_ERROR(block_erase(NVMS_BLOCK1));
 80051d4:	2001      	movs	r0, #1
 80051d6:	e01a      	b.n	800520e <NVMS_Init+0x1ea>
  if ((sts0 == NVMS_STATUS_BROKEN) && (sts1 == NVMS_STATUS_PARTIAL))
 80051d8:	f1bb 0f03 	cmp.w	fp, #3
 80051dc:	d1e7      	bne.n	80051ae <NVMS_Init+0x18a>
 80051de:	f1ba 0f02 	cmp.w	sl, #2
 80051e2:	d1e4      	bne.n	80051ae <NVMS_Init+0x18a>
    CHECK_ERROR(block_erase(NVMS_BLOCK0));
 80051e4:	4618      	mov	r0, r3
 80051e6:	f7ff fd15 	bl	8004c14 <block_erase>
 80051ea:	4601      	mov	r1, r0
 80051ec:	2800      	cmp	r0, #0
 80051ee:	d1c7      	bne.n	8005180 <NVMS_Init+0x15c>
    CHECK_ERROR(copy_slots(NVMS_BLOCK1, NVMS_BLOCK0));
 80051f0:	2001      	movs	r0, #1
 80051f2:	f7ff fe11 	bl	8004e18 <copy_slots>
 80051f6:	4601      	mov	r1, r0
 80051f8:	2800      	cmp	r0, #0
 80051fa:	d1c1      	bne.n	8005180 <NVMS_Init+0x15c>
    CHECK_ERROR(validate(NVMS_BLOCK0, seq0 + 1UL));
 80051fc:	f108 0101 	add.w	r1, r8, #1
 8005200:	2000      	movs	r0, #0
 8005202:	e75d      	b.n	80050c0 <NVMS_Init+0x9c>
  if (sts1 == NVMS_STATUS_NORMAL)
 8005204:	f1ba 0f01 	cmp.w	sl, #1
 8005208:	d1e1      	bne.n	80051ce <NVMS_Init+0x1aa>
      if (seq1 > seq0)
 800520a:	45c1      	cmp	r9, r8
 800520c:	d8ae      	bhi.n	800516c <NVMS_Init+0x148>
    CHECK_ERROR(block_erase(NVMS_BLOCK1));
 800520e:	f7ff fd01 	bl	8004c14 <block_erase>
 8005212:	4601      	mov	r1, r0
 8005214:	2800      	cmp	r0, #0
 8005216:	d1b3      	bne.n	8005180 <NVMS_Init+0x15c>
    CHECK_ERROR(copy_slots(NVMS_BLOCK0, NVMS_BLOCK1));
 8005218:	2101      	movs	r1, #1
 800521a:	e762      	b.n	80050e2 <NVMS_Init+0xbe>
  if ((sts0 == NVMS_STATUS_PARTIAL) && (sts1 == NVMS_STATUS_PARTIAL))
 800521c:	f1bb 0f02 	cmp.w	fp, #2
 8005220:	d08e      	beq.n	8005140 <NVMS_Init+0x11c>
  if (sts1 == NVMS_STATUS_NORMAL)
 8005222:	f1ba 0f01 	cmp.w	sl, #1
 8005226:	d1d7      	bne.n	80051d8 <NVMS_Init+0x1b4>
    if (sts0 == NVMS_STATUS_BROKEN)
 8005228:	f1bb 0f03 	cmp.w	fp, #3
 800522c:	d1bf      	bne.n	80051ae <NVMS_Init+0x18a>
 800522e:	e79d      	b.n	800516c <NVMS_Init+0x148>
  if ((sts0 == NVMS_STATUS_ERASED) && (sts1 == NVMS_STATUS_ERASED))
 8005230:	f1bb 0f00 	cmp.w	fp, #0
 8005234:	f43f af22 	beq.w	800507c <NVMS_Init+0x58>
 8005238:	e749      	b.n	80050ce <NVMS_Init+0xaa>
 800523a:	bf00      	nop
 800523c:	08013000 	.word	0x08013000
 8005240:	08015000 	.word	0x08015000
 8005244:	08004bf5 	.word	0x08004bf5

08005248 <NVMS_Deinit>:
  *          been yet initialized.
  */
void NVMS_Deinit(void)
{
  /* Clearing data structures */
  reset();
 8005248:	f7ff bcc4 	b.w	8004bd4 <reset>

0800524c <NVMS_WriteDataWithType>:
  * @retval NVMS_OUT_OF_MEM    if the slot space is exhausted.
  * @retval NVMS_INTERNAL      if an internal error occurred.
  */
nvms_error_t NVMS_WriteDataWithType(nvms_slot_t slot, size_t size, nvms_data_type_t type,
                                    const uint8_t *slotp)
{
 800524c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return nvm.header != NULL;
 8005250:	4c2a      	ldr	r4, [pc, #168]	@ (80052fc <NVMS_WriteDataWithType+0xb0>)
{
 8005252:	460f      	mov	r7, r1
  return nvm.header != NULL;
 8005254:	6821      	ldr	r1, [r4, #0]
{
 8005256:	b085      	sub	sp, #20
 8005258:	4606      	mov	r6, r0
 800525a:	4691      	mov	r9, r2
  size_t oldused;
  nvms_error_t err;
  nvms_data_header_t *hdrp;

  /* Check on initialization */
  if (!is_initialized())
 800525c:	2900      	cmp	r1, #0
 800525e:	d047      	beq.n	80052f0 <NVMS_WriteDataWithType+0xa4>
  {
    return NVMS_NOTINIT;
  }

  /* Check on the slot identifier */
  if (slot >= NVMS_CFG_NUM_SLOTS)
 8005260:	2827      	cmp	r0, #39	@ 0x27
 8005262:	d847      	bhi.n	80052f4 <NVMS_WriteDataWithType+0xa8>
  * @retval  Block size
  */
static inline size_t NVMS_LL_GetBlockSize(void)
{

  return NVMS_LL_BLOCK_SIZE;
 8005264:	4a26      	ldr	r2, [pc, #152]	@ (8005300 <NVMS_WriteDataWithType+0xb4>)
 8005266:	4827      	ldr	r0, [pc, #156]	@ (8005304 <NVMS_WriteDataWithType+0xb8>)
 8005268:	1a80      	subs	r0, r0, r2
  {
    return NVMS_SLOT_INVALID;
  }

  /* Checking for immediately available space */
  free = NVMS_LL_GetBlockSize() - (nvm.free_next->hdr8 -
 800526a:	f8d4 20a8 	ldr.w	r2, [r4, #168]	@ 0xa8
 800526e:	1a52      	subs	r2, r2, r1
  /* If the requested space is out of the compacted block size then an error is returned.
   * NOTE: The space for one header is reserved in order to allow for a
   * data erase operation after the space has been fully allocated.
   */
  if ((sizeof(nvms_data_header_t) + size) > (NVMS_LL_GetBlockSize() -
                                             nvm.used_size -
 8005270:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 8005274:	f1c1 21ff 	rsb	r1, r1, #4278255360	@ 0xff00ff00
 8005278:	f501 017f 	add.w	r1, r1, #16711680	@ 0xff0000
 800527c:	31e0      	adds	r1, #224	@ 0xe0
  if ((sizeof(nvms_data_header_t) + size) > (NVMS_LL_GetBlockSize() -
 800527e:	f107 0520 	add.w	r5, r7, #32
                                             nvm.used_size -
 8005282:	eb01 0150 	add.w	r1, r1, r0, lsr #1
  if ((sizeof(nvms_data_header_t) + size) > (NVMS_LL_GetBlockSize() -
 8005286:	428d      	cmp	r5, r1
  free = NVMS_LL_GetBlockSize() - (nvm.free_next->hdr8 -
 8005288:	ebc2 0250 	rsb	r2, r2, r0, lsr #1
  if ((sizeof(nvms_data_header_t) + size) > (NVMS_LL_GetBlockSize() -
 800528c:	d834      	bhi.n	80052f8 <NVMS_WriteDataWithType+0xac>
    return NVMS_OUT_OF_MEM;
  }

  /* This is the condition where we need to compact the current block in
     order to obtain enough space for the new data instance */
  if ((sizeof(nvms_data_header_t) + size) > free)
 800528e:	4295      	cmp	r5, r2
 8005290:	d929      	bls.n	80052e6 <NVMS_WriteDataWithType+0x9a>
 8005292:	9303      	str	r3, [sp, #12]
  {
    warning = true;
    err = garbage_collect();
 8005294:	f7ff fe48 	bl	8004f28 <garbage_collect>
    if (err != NVMS_NOERROR)
 8005298:	bb10      	cbnz	r0, 80052e0 <NVMS_WriteDataWithType+0x94>
 800529a:	9b03      	ldr	r3, [sp, #12]
    warning = true;
 800529c:	f04f 0a01 	mov.w	sl, #1
      return err;
    }
  }

  /* Index for the new data */
  if (nvm.slots[slot] == NULL)
 80052a0:	f106 0b02 	add.w	fp, r6, #2
 80052a4:	f854 502b 	ldr.w	r5, [r4, fp, lsl #2]
 80052a8:	b305      	cbz	r5, 80052ec <NVMS_WriteDataWithType+0xa0>
    instance = 1;
    oldused = 0;
  }
  else
  {
    instance = nvm.slots[slot]->fields.instance + 1UL;
 80052aa:	68ea      	ldr	r2, [r5, #12]
    oldused = (uint32_t)(nvm.slots[slot]->fields.next->hdr8) - (uint32_t)(nvm.slots[slot]->hdr8);
 80052ac:	6929      	ldr	r1, [r5, #16]
    instance = nvm.slots[slot]->fields.instance + 1UL;
 80052ae:	3201      	adds	r2, #1
    oldused = (uint32_t)(nvm.slots[slot]->fields.next->hdr8) - (uint32_t)(nvm.slots[slot]->hdr8);
 80052b0:	1b4d      	subs	r5, r1, r5
  }

  /* Position of the new data instance */
  hdrp = nvm.free_next;
 80052b2:	f8d4 80a8 	ldr.w	r8, [r4, #168]	@ 0xa8

  /* Writing the new instance */
  err = append_slot(slot, size, type, slotp, instance);
 80052b6:	9200      	str	r2, [sp, #0]
 80052b8:	4639      	mov	r1, r7
 80052ba:	464a      	mov	r2, r9
 80052bc:	4630      	mov	r0, r6
 80052be:	f7ff fe65 	bl	8004f8c <append_slot>
  if (err != NVMS_NOERROR)
 80052c2:	b968      	cbnz	r0, 80052e0 <NVMS_WriteDataWithType+0x94>
  }

  /* Adjusting the counter of the effective used size */
  nvm.slots[slot]  = hdrp;
  nvm.used_size -= oldused;
  nvm.used_size += nvm.slots[slot]->fields.next->hdr8 - nvm.slots[slot]->hdr8;
 80052c4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80052c8:	f8d4 20ac 	ldr.w	r2, [r4, #172]	@ 0xac
  nvm.slots[slot]  = hdrp;
 80052cc:	f844 802b 	str.w	r8, [r4, fp, lsl #2]
  nvm.used_size += nvm.slots[slot]->fields.next->hdr8 - nvm.slots[slot]->hdr8;
 80052d0:	eba3 0308 	sub.w	r3, r3, r8
 80052d4:	4413      	add	r3, r2
 80052d6:	1b5b      	subs	r3, r3, r5
 80052d8:	f8c4 30ac 	str.w	r3, [r4, #172]	@ 0xac

  return warning ? NVMS_WARNING : NVMS_NOERROR;
 80052dc:	ea4f 004a 	mov.w	r0, sl, lsl #1
}
 80052e0:	b005      	add	sp, #20
 80052e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bool warning = false;
 80052e6:	f04f 0a00 	mov.w	sl, #0
 80052ea:	e7d9      	b.n	80052a0 <NVMS_WriteDataWithType+0x54>
    instance = 1;
 80052ec:	2201      	movs	r2, #1
 80052ee:	e7e0      	b.n	80052b2 <NVMS_WriteDataWithType+0x66>
    return NVMS_NOTINIT;
 80052f0:	2001      	movs	r0, #1
 80052f2:	e7f5      	b.n	80052e0 <NVMS_WriteDataWithType+0x94>
    return NVMS_SLOT_INVALID;
 80052f4:	2004      	movs	r0, #4
 80052f6:	e7f3      	b.n	80052e0 <NVMS_WriteDataWithType+0x94>
    return NVMS_OUT_OF_MEM;
 80052f8:	2007      	movs	r0, #7
 80052fa:	e7f1      	b.n	80052e0 <NVMS_WriteDataWithType+0x94>
 80052fc:	20002ef0 	.word	0x20002ef0
 8005300:	08013000 	.word	0x08013000
 8005304:	08015000 	.word	0x08015000

08005308 <NVMS_EraseData>:
  *                             failures.
  * @retval NVMS_DATA_NOT_FOUND if the data does not exists.
  * @retval NVMS_INTERNAL       if an internal error occurred.
  */
nvms_error_t NVMS_EraseData(nvms_slot_t slot)
{
 8005308:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  return nvm.header != NULL;
 800530c:	4c21      	ldr	r4, [pc, #132]	@ (8005394 <NVMS_EraseData+0x8c>)
 800530e:	6821      	ldr	r1, [r4, #0]
{
 8005310:	4681      	mov	r9, r0
  size_t free;
  size_t oldused;
  nvms_error_t err;

  /* Check on initialization */
  if (!is_initialized())
 8005312:	b3b1      	cbz	r1, 8005382 <NVMS_EraseData+0x7a>
  {
    return NVMS_NOTINIT;
  }

  /* Check on the slot identifier */
  if (slot >= NVMS_CFG_NUM_SLOTS)
 8005314:	2827      	cmp	r0, #39	@ 0x27
 8005316:	d836      	bhi.n	8005386 <NVMS_EraseData+0x7e>
  {
    return NVMS_SLOT_INVALID;
  }

  /* Check slot presence */
  if (nvm.slots[slot] == NULL)
 8005318:	1c86      	adds	r6, r0, #2
 800531a:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
 800531e:	b3a3      	cbz	r3, 800538a <NVMS_EraseData+0x82>
 8005320:	4b1d      	ldr	r3, [pc, #116]	@ (8005398 <NVMS_EraseData+0x90>)
 8005322:	4a1e      	ldr	r2, [pc, #120]	@ (800539c <NVMS_EraseData+0x94>)
 8005324:	1ad2      	subs	r2, r2, r3
  {
    return NVMS_DATA_NOT_FOUND;
  }

  /* Checking for immediately available space */
  free = NVMS_LL_GetBlockSize() - (nvm.free_next->hdr8 -
 8005326:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
 800532a:	1a5b      	subs	r3, r3, r1

  /* If the requested space is out of the compacted block size then an
     error is returned.
     NOTE: This condition SHOULD NEVER HAPPEN because the slot write operation
     makes sure to leave to leave enough space for an erase operation */
  if (sizeof(nvms_data_header_t) > (NVMS_LL_GetBlockSize() - nvm.used_size))
 800532c:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 8005330:	ebc1 0152 	rsb	r1, r1, r2, lsr #1
 8005334:	291f      	cmp	r1, #31
  free = NVMS_LL_GetBlockSize() - (nvm.free_next->hdr8 -
 8005336:	ebc3 0352 	rsb	r3, r3, r2, lsr #1
  if (sizeof(nvms_data_header_t) > (NVMS_LL_GetBlockSize() - nvm.used_size))
 800533a:	d928      	bls.n	800538e <NVMS_EraseData+0x86>
    return NVMS_INTERNAL;
  }

  /* This is the condition where we need to compact the current block in
     order to obtain enough space for the new slot instance */
  if (sizeof(nvms_data_header_t) > free)
 800533c:	2b1f      	cmp	r3, #31
 800533e:	d81e      	bhi.n	800537e <NVMS_EraseData+0x76>
  {
    warning = true;
    err = garbage_collect();
 8005340:	f7ff fdf2 	bl	8004f28 <garbage_collect>
    if (err != NVMS_NOERROR)
 8005344:	b9c0      	cbnz	r0, 8005378 <NVMS_EraseData+0x70>
    warning = true;
 8005346:	2701      	movs	r7, #1
      return err;
    }
  }

  /* Index for the new slot */
  instance = nvm.slots[slot]->fields.instance + 1UL;
 8005348:	f854 5026 	ldr.w	r5, [r4, r6, lsl #2]
 800534c:	e9d5 3803 	ldrd	r3, r8, [r5, #12]
 8005350:	3301      	adds	r3, #1
  oldused = (uint32_t)(nvm.slots[slot]->fields.next->hdr8) - (uint32_t)(nvm.slots[slot]->hdr8);

  /* Writing the new instance */
  err = append_slot(slot, 0, NVMS_DATA_TYPE_DEFAULT, NULL, instance);
 8005352:	9300      	str	r3, [sp, #0]
 8005354:	2300      	movs	r3, #0
 8005356:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800535a:	4619      	mov	r1, r3
 800535c:	4648      	mov	r0, r9
 800535e:	f7ff fe15 	bl	8004f8c <append_slot>
  if (err != NVMS_NOERROR)
 8005362:	b948      	cbnz	r0, 8005378 <NVMS_EraseData+0x70>
    return err;
  }

  /* Adjusting the counter of the effective used size */
  nvm.slots[slot]  = NULL;
  nvm.used_size -= oldused;
 8005364:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
  nvm.slots[slot]  = NULL;
 8005368:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
  nvm.used_size -= oldused;
 800536c:	441d      	add	r5, r3
 800536e:	eba5 0508 	sub.w	r5, r5, r8
 8005372:	f8c4 50ac 	str.w	r5, [r4, #172]	@ 0xac

  return warning ? NVMS_WARNING : NVMS_NOERROR;
 8005376:	0078      	lsls	r0, r7, #1
}
 8005378:	b003      	add	sp, #12
 800537a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  bool warning = false;
 800537e:	2700      	movs	r7, #0
 8005380:	e7e2      	b.n	8005348 <NVMS_EraseData+0x40>
    return NVMS_NOTINIT;
 8005382:	2001      	movs	r0, #1
 8005384:	e7f8      	b.n	8005378 <NVMS_EraseData+0x70>
    return NVMS_SLOT_INVALID;
 8005386:	2004      	movs	r0, #4
 8005388:	e7f6      	b.n	8005378 <NVMS_EraseData+0x70>
    return NVMS_DATA_NOT_FOUND;
 800538a:	2005      	movs	r0, #5
 800538c:	e7f4      	b.n	8005378 <NVMS_EraseData+0x70>
    return NVMS_INTERNAL;
 800538e:	2008      	movs	r0, #8
 8005390:	e7f2      	b.n	8005378 <NVMS_EraseData+0x70>
 8005392:	bf00      	nop
 8005394:	20002ef0 	.word	0x20002ef0
 8005398:	08013000 	.word	0x08013000
 800539c:	08015000 	.word	0x08015000

080053a0 <NVMS_GetDataWithType>:
  * @retval NVMS_SLOT_INVALID   if the slot number is out of range.
  * @retval NVMS_DATA_NOT_FOUND if the data does not exists.
  */
nvms_error_t NVMS_GetDataWithType(nvms_slot_t slot, size_t *size_p, nvms_data_type_t *type_p,
                                  uint8_t **data_pp)
{
 80053a0:	b530      	push	{r4, r5, lr}
  return nvm.header != NULL;
 80053a2:	4c0d      	ldr	r4, [pc, #52]	@ (80053d8 <NVMS_GetDataWithType+0x38>)
  /* Check on initialization */
  if (!is_initialized())
 80053a4:	6825      	ldr	r5, [r4, #0]
 80053a6:	b18d      	cbz	r5, 80053cc <NVMS_GetDataWithType+0x2c>
  {
    return NVMS_NOTINIT;
  }

  /* Check on the slot identifier */
  if (slot >= NVMS_CFG_NUM_SLOTS)
 80053a8:	2827      	cmp	r0, #39	@ 0x27
 80053aa:	d811      	bhi.n	80053d0 <NVMS_GetDataWithType+0x30>
  {
    return NVMS_SLOT_INVALID;
  }

  /* Check slot presence */
  if (nvm.slots[slot] == NULL)
 80053ac:	3002      	adds	r0, #2
 80053ae:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80053b2:	b178      	cbz	r0, 80053d4 <NVMS_GetDataWithType+0x34>
  {
    return NVMS_DATA_NOT_FOUND;
  }

  if (size_p != NULL)
 80053b4:	b109      	cbz	r1, 80053ba <NVMS_GetDataWithType+0x1a>
  {
    *size_p = nvm.slots[slot]->fields.data_size;
 80053b6:	6984      	ldr	r4, [r0, #24]
 80053b8:	600c      	str	r4, [r1, #0]
  }

  if (type_p != NULL)
 80053ba:	b10a      	cbz	r2, 80053c0 <NVMS_GetDataWithType+0x20>
  {
    *type_p = nvm.slots[slot]->fields.data_type;
 80053bc:	6941      	ldr	r1, [r0, #20]
 80053be:	6011      	str	r1, [r2, #0]
  }

  if (data_pp != NULL)
 80053c0:	b90b      	cbnz	r3, 80053c6 <NVMS_GetDataWithType+0x26>
  {
    *data_pp = nvm.slots[slot]->hdr8 + sizeof(nvms_data_header_t);
  }

  return NVMS_NOERROR;
 80053c2:	2000      	movs	r0, #0
}
 80053c4:	bd30      	pop	{r4, r5, pc}
    *data_pp = nvm.slots[slot]->hdr8 + sizeof(nvms_data_header_t);
 80053c6:	3020      	adds	r0, #32
 80053c8:	6018      	str	r0, [r3, #0]
 80053ca:	e7fa      	b.n	80053c2 <NVMS_GetDataWithType+0x22>
    return NVMS_NOTINIT;
 80053cc:	2001      	movs	r0, #1
 80053ce:	e7f9      	b.n	80053c4 <NVMS_GetDataWithType+0x24>
    return NVMS_SLOT_INVALID;
 80053d0:	2004      	movs	r0, #4
 80053d2:	e7f7      	b.n	80053c4 <NVMS_GetDataWithType+0x24>
    return NVMS_DATA_NOT_FOUND;
 80053d4:	2005      	movs	r0, #5
 80053d6:	e7f5      	b.n	80053c4 <NVMS_GetDataWithType+0x24>
 80053d8:	20002ef0 	.word	0x20002ef0

080053dc <authenticate_blob_header.constprop.0>:
  * @retval CKR_OK
  *         CKR_FUNCTION_FAILED
  *         CKR_SIGNATURE_INVALID
  *         @ref KMS_OpenSession returned values
  */
static CK_RV authenticate_blob_header(kms_importblob_ctx_t *pCtx,
 80053dc:	b570      	push	{r4, r5, r6, lr}
 80053de:	b086      	sub	sp, #24
  CK_ULONG blob_hdr_add;

  (void)pCtx;

  /* Open session */
  e_ret_status = KMS_OpenSession(0, CKF_SERIAL_SESSION, NULL, 0, &session);
 80053e0:	2300      	movs	r3, #0
 80053e2:	ae02      	add	r6, sp, #8
static CK_RV authenticate_blob_header(kms_importblob_ctx_t *pCtx,
 80053e4:	4605      	mov	r5, r0
  e_ret_status = KMS_OpenSession(0, CKF_SERIAL_SESSION, NULL, 0, &session);
 80053e6:	9600      	str	r6, [sp, #0]
 80053e8:	461a      	mov	r2, r3
 80053ea:	2104      	movs	r1, #4
 80053ec:	4618      	mov	r0, r3
 80053ee:	f7ff f9c9 	bl	8004784 <KMS_OpenSession>
  if (e_ret_status == CKR_OK)
 80053f2:	4604      	mov	r4, r0
 80053f4:	b118      	cbz	r0, 80053fe <authenticate_blob_header.constprop.0+0x22>
  CK_RV e_authenticate_status = CKR_SIGNATURE_INVALID;
 80053f6:	24c0      	movs	r4, #192	@ 0xc0
      (void)KMS_CloseSession(session);
    }
  }

  return e_authenticate_status;
}
 80053f8:	4620      	mov	r0, r4
 80053fa:	b006      	add	sp, #24
 80053fc:	bd70      	pop	{r4, r5, r6, pc}
    obj_id_index = KMS_PlatfObjects_GetBlobVerifyKey();
 80053fe:	f000 fdfc 	bl	8005ffa <KMS_PlatfObjects_GetBlobVerifyKey>
    smech.mechanism = CKM_ECDSA_SHA256;
 8005402:	f241 0344 	movw	r3, #4164	@ 0x1044
    obj_id_index = KMS_PlatfObjects_GetBlobVerifyKey();
 8005406:	4602      	mov	r2, r0
    if (KMS_VerifyInit(session, &smech, obj_id_index) != CKR_OK)
 8005408:	a903      	add	r1, sp, #12
 800540a:	9802      	ldr	r0, [sp, #8]
    smech.mechanism = CKM_ECDSA_SHA256;
 800540c:	9303      	str	r3, [sp, #12]
    smech.ulParameterLen = 0;
 800540e:	e9cd 4404 	strd	r4, r4, [sp, #16]
    if (KMS_VerifyInit(session, &smech, obj_id_index) != CKR_OK)
 8005412:	f000 ff39 	bl	8006288 <KMS_VerifyInit>
 8005416:	bb58      	cbnz	r0, 8005470 <authenticate_blob_header.constprop.0+0x94>
      if (KMS_Verify(session,
 8005418:	2340      	movs	r3, #64	@ 0x40
 800541a:	9300      	str	r3, [sp, #0]
 800541c:	9802      	ldr	r0, [sp, #8]
 800541e:	f105 0380 	add.w	r3, r5, #128	@ 0x80
 8005422:	2280      	movs	r2, #128	@ 0x80
 8005424:	4629      	mov	r1, r5
 8005426:	f000 ff3f 	bl	80062a8 <KMS_Verify>
        e_ret_status = CKR_SIGNATURE_INVALID;
 800542a:	1e04      	subs	r4, r0, #0
 800542c:	bf18      	it	ne
 800542e:	24c0      	movne	r4, #192	@ 0xc0
    (void)KMS_CloseSession(session);
 8005430:	9802      	ldr	r0, [sp, #8]
 8005432:	f7ff f9eb 	bl	800480c <KMS_CloseSession>
  if (e_ret_status == CKR_OK)
 8005436:	2c00      	cmp	r4, #0
 8005438:	d1dd      	bne.n	80053f6 <authenticate_blob_header.constprop.0+0x1a>
    e_ret_status = KMS_OpenSession(0, CKF_SERIAL_SESSION, NULL, 0, &session);
 800543a:	9600      	str	r6, [sp, #0]
 800543c:	4623      	mov	r3, r4
 800543e:	4622      	mov	r2, r4
 8005440:	2104      	movs	r1, #4
 8005442:	4620      	mov	r0, r4
 8005444:	f7ff f99e 	bl	8004784 <KMS_OpenSession>
    if (e_ret_status == CKR_OK)
 8005448:	2800      	cmp	r0, #0
 800544a:	d1d4      	bne.n	80053f6 <authenticate_blob_header.constprop.0+0x1a>
      obj_id_index = KMS_PlatfObjects_GetBlobVerifyKey();
 800544c:	f000 fdd5 	bl	8005ffa <KMS_PlatfObjects_GetBlobVerifyKey>
      smech.mechanism = CKM_ECDSA_SHA256;
 8005450:	f241 0344 	movw	r3, #4164	@ 0x1044
      obj_id_index = KMS_PlatfObjects_GetBlobVerifyKey();
 8005454:	4602      	mov	r2, r0
      if (KMS_VerifyInit(session, &smech, obj_id_index) != CKR_OK)
 8005456:	a903      	add	r1, sp, #12
 8005458:	9802      	ldr	r0, [sp, #8]
      smech.mechanism = CKM_ECDSA_SHA256;
 800545a:	9303      	str	r3, [sp, #12]
      smech.ulParameterLen = 0;
 800545c:	e9cd 4404 	strd	r4, r4, [sp, #16]
      if (KMS_VerifyInit(session, &smech, obj_id_index) != CKR_OK)
 8005460:	f000 ff12 	bl	8006288 <KMS_VerifyInit>
 8005464:	b130      	cbz	r0, 8005474 <authenticate_blob_header.constprop.0+0x98>
  CK_RV e_authenticate_status = CKR_SIGNATURE_INVALID;
 8005466:	24c0      	movs	r4, #192	@ 0xc0
      (void)KMS_CloseSession(session);
 8005468:	9802      	ldr	r0, [sp, #8]
 800546a:	f7ff f9cf 	bl	800480c <KMS_CloseSession>
  return e_authenticate_status;
 800546e:	e7c3      	b.n	80053f8 <authenticate_blob_header.constprop.0+0x1c>
      e_ret_status = CKR_FUNCTION_FAILED;
 8005470:	2406      	movs	r4, #6
 8005472:	e7dd      	b.n	8005430 <authenticate_blob_header.constprop.0+0x54>
        if (KMS_Verify(session,
 8005474:	2340      	movs	r3, #64	@ 0x40
 8005476:	9300      	str	r3, [sp, #0]
 8005478:	9802      	ldr	r0, [sp, #8]
 800547a:	f105 0380 	add.w	r3, r5, #128	@ 0x80
 800547e:	2280      	movs	r2, #128	@ 0x80
 8005480:	4629      	mov	r1, r5
 8005482:	f000 ff11 	bl	80062a8 <KMS_Verify>
 8005486:	4604      	mov	r4, r0
 8005488:	2800      	cmp	r0, #0
 800548a:	d1ec      	bne.n	8005466 <authenticate_blob_header.constprop.0+0x8a>
 800548c:	e7ec      	b.n	8005468 <authenticate_blob_header.constprop.0+0x8c>

0800548e <read_next_chunk>:
                       uint32_t session,
                       uint8_t *p_source_address,
                       uint32_t size,
                       uint8_t *p_decrypted_chunk,
                       uint32_t *p_decrypted_size)
{
 800548e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  CK_RV        e_ret_status;

  /* Read */
  e_ret_status = KMS_LL_FLASH_Read(pCtx->fw_encrypted_chunk, p_source_address, size);
 8005490:	f500 7400 	add.w	r4, r0, #512	@ 0x200
{
 8005494:	460e      	mov	r6, r1
  e_ret_status = KMS_LL_FLASH_Read(pCtx->fw_encrypted_chunk, p_source_address, size);
 8005496:	4620      	mov	r0, r4
{
 8005498:	4611      	mov	r1, r2
  e_ret_status = KMS_LL_FLASH_Read(pCtx->fw_encrypted_chunk, p_source_address, size);
 800549a:	461a      	mov	r2, r3
{
 800549c:	461d      	mov	r5, r3
  e_ret_status = KMS_LL_FLASH_Read(pCtx->fw_encrypted_chunk, p_source_address, size);
 800549e:	f7fb fa0d 	bl	80008bc <KMS_LL_FLASH_Read>

  if (e_ret_status == CKR_OK)
 80054a2:	b938      	cbnz	r0, 80054b4 <read_next_chunk+0x26>
  {
    e_ret_status = KMS_DecryptUpdate(session,
 80054a4:	ab07      	add	r3, sp, #28
 80054a6:	9300      	str	r3, [sp, #0]
 80054a8:	462a      	mov	r2, r5
 80054aa:	9b06      	ldr	r3, [sp, #24]
 80054ac:	4621      	mov	r1, r4
 80054ae:	4630      	mov	r0, r6
 80054b0:	f7fe fb14 	bl	8003adc <KMS_DecryptUpdate>
                                     (CK_BYTE *)p_decrypted_chunk,
                                     (CK_ULONG_PTR)(uint32_t)&p_decrypted_size);
  }

  return e_ret_status;
}
 80054b4:	b002      	add	sp, #8
 80054b6:	bd70      	pop	{r4, r5, r6, pc}

080054b8 <KMS_Objects_GetRange>:
  * @brief  This function returns object range identification from key handle
  * @param  hKey key handle
  * @retval Value within @ref kms_obj_range_t
  */
kms_obj_range_t  KMS_Objects_GetRange(CK_OBJECT_HANDLE hKey)
{
 80054b8:	b513      	push	{r0, r1, r4, lr}
 80054ba:	4604      	mov	r4, r0
  uint32_t MinSlot;
  uint32_t MaxSlot;

  /* Read the available static slots from the platform */
  KMS_PlatfObjects_EmbeddedRange(&MinSlot, &MaxSlot);
 80054bc:	a901      	add	r1, sp, #4
 80054be:	4668      	mov	r0, sp
 80054c0:	f000 fd06 	bl	8005ed0 <KMS_PlatfObjects_EmbeddedRange>
  /* If hKey is in the range of the embedded keys */
  if ((hKey <= MaxSlot) && (hKey >= MinSlot))
 80054c4:	9b01      	ldr	r3, [sp, #4]
 80054c6:	42a3      	cmp	r3, r4
 80054c8:	d302      	bcc.n	80054d0 <KMS_Objects_GetRange+0x18>
 80054ca:	9b00      	ldr	r3, [sp, #0]
 80054cc:	42a3      	cmp	r3, r4
 80054ce:	d917      	bls.n	8005500 <KMS_Objects_GetRange+0x48>
    return (KMS_OBJECT_RANGE_EMBEDDED);
  }

#ifdef KMS_NVM_ENABLED
  /* Read the available nvm slots from the platform */
  KMS_PlatfObjects_NvmStaticRange(&MinSlot, &MaxSlot);
 80054d0:	a901      	add	r1, sp, #4
 80054d2:	4668      	mov	r0, sp
 80054d4:	f000 fd0a 	bl	8005eec <KMS_PlatfObjects_NvmStaticRange>
  /* If hKey is in the range of nvm keys */
  if ((hKey <= MaxSlot) && (hKey >= MinSlot))
 80054d8:	9b01      	ldr	r3, [sp, #4]
 80054da:	42a3      	cmp	r3, r4
 80054dc:	d302      	bcc.n	80054e4 <KMS_Objects_GetRange+0x2c>
 80054de:	9b00      	ldr	r3, [sp, #0]
 80054e0:	42a3      	cmp	r3, r4
 80054e2:	d90f      	bls.n	8005504 <KMS_Objects_GetRange+0x4c>
    return (KMS_OBJECT_RANGE_NVM_STATIC_ID);
  }

#ifdef KMS_NVM_DYNAMIC_ENABLED
  /* Read the available nvm slots from the platform */
  KMS_PlatfObjects_NvmDynamicRange(&MinSlot, &MaxSlot);
 80054e4:	a901      	add	r1, sp, #4
 80054e6:	4668      	mov	r0, sp
 80054e8:	f000 fd0e 	bl	8005f08 <KMS_PlatfObjects_NvmDynamicRange>
  /* If hKey is in the range of nvm keys */
  if ((hKey <= MaxSlot) && (hKey >= MinSlot))
 80054ec:	9b01      	ldr	r3, [sp, #4]
 80054ee:	42a3      	cmp	r3, r4
 80054f0:	d30a      	bcc.n	8005508 <KMS_Objects_GetRange+0x50>
  {
    return (KMS_OBJECT_RANGE_NVM_DYNAMIC_ID);
 80054f2:	9800      	ldr	r0, [sp, #0]
 80054f4:	42a0      	cmp	r0, r4
 80054f6:	bf8c      	ite	hi
 80054f8:	2006      	movhi	r0, #6
 80054fa:	2002      	movls	r0, #2
  }
#endif  /* KMS_EXT_TOKEN_ENABLED */

  /* hKey not in known ranges */
  return KMS_OBJECT_RANGE_UNKNOWN;
}
 80054fc:	b002      	add	sp, #8
 80054fe:	bd10      	pop	{r4, pc}
    return (KMS_OBJECT_RANGE_EMBEDDED);
 8005500:	2000      	movs	r0, #0
 8005502:	e7fb      	b.n	80054fc <KMS_Objects_GetRange+0x44>
    return (KMS_OBJECT_RANGE_NVM_STATIC_ID);
 8005504:	2001      	movs	r0, #1
 8005506:	e7f9      	b.n	80054fc <KMS_Objects_GetRange+0x44>
  return KMS_OBJECT_RANGE_UNKNOWN;
 8005508:	2006      	movs	r0, #6
 800550a:	e7f7      	b.n	80054fc <KMS_Objects_GetRange+0x44>

0800550c <KMS_LockKeyHandle>:
  * @retval CKR_OK if lock successful,
  *         CKR_CANT_LOCK if lock not possible
  *         CKR_FUNCTION_NOT_SUPPORTED
  */
CK_RV  KMS_LockKeyHandle(CK_OBJECT_HANDLE hKey)
{
 800550c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(KMS_SE_LOCK_KEYS)
  CK_RV e_ret_status = CKR_CANT_LOCK;
  uint32_t  lock_table_index;

  /* Check that the Handle is not already registered in the table */
  for (lock_table_index = 0; lock_table_index < kms_locked_key_index; lock_table_index++)
 800550e:	4d0c      	ldr	r5, [pc, #48]	@ (8005540 <KMS_LockKeyHandle+0x34>)
 8005510:	4c0c      	ldr	r4, [pc, #48]	@ (8005544 <KMS_LockKeyHandle+0x38>)
 8005512:	682b      	ldr	r3, [r5, #0]
{
 8005514:	4602      	mov	r2, r0
  CK_RV e_ret_status = CKR_CANT_LOCK;
 8005516:	210a      	movs	r1, #10
  for (lock_table_index = 0; lock_table_index < kms_locked_key_index; lock_table_index++)
 8005518:	2000      	movs	r0, #0
 800551a:	4626      	mov	r6, r4
 800551c:	4283      	cmp	r3, r0
 800551e:	d108      	bne.n	8005532 <KMS_LockKeyHandle+0x26>
    if (kms_locked_key_handles[lock_table_index] == hKey)
    {
      e_ret_status = CKR_OK;
    }
  }
  if (e_ret_status != CKR_OK)
 8005520:	b129      	cbz	r1, 800552e <KMS_LockKeyHandle+0x22>
  {
    /* hKey is not already locked,try to lock it */
    /* if the table is full, then return */
    if (kms_locked_key_index >= KMS_SE_LOCK_KEYS_MAX)
 8005522:	2b0a      	cmp	r3, #10
 8005524:	d004      	beq.n	8005530 <KMS_LockKeyHandle+0x24>
    {
      e_ret_status = CKR_CANT_LOCK;
    }
    else
    {
      kms_locked_key_handles[lock_table_index] = hKey;
 8005526:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
      kms_locked_key_index++;
 800552a:	3301      	adds	r3, #1
 800552c:	602b      	str	r3, [r5, #0]
  CK_RV e_ret_status = CKR_CANT_LOCK;
 800552e:	2000      	movs	r0, #0

  return e_ret_status;
#else /* KMS_SE_LOCK_KEYS */
  return CKR_FUNCTION_NOT_SUPPORTED;
#endif /* KMS_SE_LOCK_KEYS */
}
 8005530:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (kms_locked_key_handles[lock_table_index] == hKey)
 8005532:	f854 7b04 	ldr.w	r7, [r4], #4
  for (lock_table_index = 0; lock_table_index < kms_locked_key_index; lock_table_index++)
 8005536:	3001      	adds	r0, #1
      e_ret_status = CKR_OK;
 8005538:	4297      	cmp	r7, r2
 800553a:	bf08      	it	eq
 800553c:	2100      	moveq	r1, #0
  for (lock_table_index = 0; lock_table_index < kms_locked_key_index; lock_table_index++)
 800553e:	e7ed      	b.n	800551c <KMS_LockKeyHandle+0x10>
 8005540:	20002fac 	.word	0x20002fac
 8005544:	20002fb0 	.word	0x20002fb0

08005548 <KMS_CheckKeyIsNotLocked>:
#if defined(KMS_SE_LOCK_KEYS)
  CK_RV e_ret_status = CKR_OK;
  uint32_t  lock_table_index;

  /* Check that the Handle is not already registered in the table */
  for (lock_table_index = 0; lock_table_index < kms_locked_key_index; lock_table_index++)
 8005548:	4b08      	ldr	r3, [pc, #32]	@ (800556c <KMS_CheckKeyIsNotLocked+0x24>)
 800554a:	4909      	ldr	r1, [pc, #36]	@ (8005570 <KMS_CheckKeyIsNotLocked+0x28>)
{
 800554c:	b530      	push	{r4, r5, lr}
  for (lock_table_index = 0; lock_table_index < kms_locked_key_index; lock_table_index++)
 800554e:	681c      	ldr	r4, [r3, #0]
 8005550:	2300      	movs	r3, #0
{
 8005552:	4602      	mov	r2, r0
  CK_RV e_ret_status = CKR_OK;
 8005554:	4618      	mov	r0, r3
  for (lock_table_index = 0; lock_table_index < kms_locked_key_index; lock_table_index++)
 8005556:	429c      	cmp	r4, r3
 8005558:	d100      	bne.n	800555c <KMS_CheckKeyIsNotLocked+0x14>
  }
  return e_ret_status;
#else /* KMS_SE_LOCK_KEYS */
  return CKR_OK;
#endif /* KMS_SE_LOCK_KEYS */
}
 800555a:	bd30      	pop	{r4, r5, pc}
    if (kms_locked_key_handles[lock_table_index] == hKey)
 800555c:	f851 5b04 	ldr.w	r5, [r1], #4
  for (lock_table_index = 0; lock_table_index < kms_locked_key_index; lock_table_index++)
 8005560:	3301      	adds	r3, #1
      e_ret_status = CKR_KEY_HANDLE_INVALID;
 8005562:	4295      	cmp	r5, r2
 8005564:	bf08      	it	eq
 8005566:	2060      	moveq	r0, #96	@ 0x60
  for (lock_table_index = 0; lock_table_index < kms_locked_key_index; lock_table_index++)
 8005568:	e7f5      	b.n	8005556 <KMS_CheckKeyIsNotLocked+0xe>
 800556a:	bf00      	nop
 800556c:	20002fac 	.word	0x20002fac
 8005570:	20002fb0 	.word	0x20002fb0

08005574 <KMS_Objects_GetPointer>:
{
 8005574:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005576:	4605      	mov	r5, r0
  if (KMS_CheckKeyIsNotLocked(hKey) == CKR_OK)
 8005578:	f7ff ffe6 	bl	8005548 <KMS_CheckKeyIsNotLocked>
 800557c:	4604      	mov	r4, r0
 800557e:	bb90      	cbnz	r0, 80055e6 <KMS_Objects_GetPointer+0x72>
    KMS_PlatfObjects_EmbeddedRange(&min_slot, &max_slot);
 8005580:	a901      	add	r1, sp, #4
 8005582:	4668      	mov	r0, sp
 8005584:	f000 fca4 	bl	8005ed0 <KMS_PlatfObjects_EmbeddedRange>
    if ((hKey <= max_slot) && (hKey >= min_slot))
 8005588:	9b01      	ldr	r3, [sp, #4]
 800558a:	42ab      	cmp	r3, r5
 800558c:	d306      	bcc.n	800559c <KMS_Objects_GetPointer+0x28>
 800558e:	9b00      	ldr	r3, [sp, #0]
 8005590:	42ab      	cmp	r3, r5
 8005592:	d803      	bhi.n	800559c <KMS_Objects_GetPointer+0x28>
      p_object = KMS_PlatfObjects_EmbeddedObject(hKey);
 8005594:	4628      	mov	r0, r5
 8005596:	f000 fca1 	bl	8005edc <KMS_PlatfObjects_EmbeddedObject>
 800559a:	4604      	mov	r4, r0
    KMS_PlatfObjects_NvmStaticRange(&min_slot, &max_slot);
 800559c:	a901      	add	r1, sp, #4
 800559e:	4668      	mov	r0, sp
 80055a0:	f000 fca4 	bl	8005eec <KMS_PlatfObjects_NvmStaticRange>
    if ((hKey <= max_slot) && (hKey >= min_slot))
 80055a4:	9b01      	ldr	r3, [sp, #4]
 80055a6:	42ab      	cmp	r3, r5
 80055a8:	d306      	bcc.n	80055b8 <KMS_Objects_GetPointer+0x44>
 80055aa:	9b00      	ldr	r3, [sp, #0]
 80055ac:	42ab      	cmp	r3, r5
 80055ae:	d803      	bhi.n	80055b8 <KMS_Objects_GetPointer+0x44>
      p_object = KMS_PlatfObjects_NvmStaticObject(hKey);
 80055b0:	4628      	mov	r0, r5
 80055b2:	f000 fca1 	bl	8005ef8 <KMS_PlatfObjects_NvmStaticObject>
 80055b6:	4604      	mov	r4, r0
    KMS_PlatfObjects_NvmDynamicRange(&min_slot, &max_slot);
 80055b8:	a901      	add	r1, sp, #4
 80055ba:	4668      	mov	r0, sp
 80055bc:	f000 fca4 	bl	8005f08 <KMS_PlatfObjects_NvmDynamicRange>
    if ((hKey <= max_slot) && (hKey >= min_slot))
 80055c0:	9b01      	ldr	r3, [sp, #4]
 80055c2:	42ab      	cmp	r3, r5
 80055c4:	d306      	bcc.n	80055d4 <KMS_Objects_GetPointer+0x60>
 80055c6:	9b00      	ldr	r3, [sp, #0]
 80055c8:	42ab      	cmp	r3, r5
 80055ca:	d803      	bhi.n	80055d4 <KMS_Objects_GetPointer+0x60>
      p_object = KMS_PlatfObjects_NvmDynamicObject(hKey);
 80055cc:	4628      	mov	r0, r5
 80055ce:	f000 fca1 	bl	8005f14 <KMS_PlatfObjects_NvmDynamicObject>
 80055d2:	4604      	mov	r4, r0
  if (KMS_CheckKeyIsNotLocked(hKey) == CKR_OK)
 80055d4:	4628      	mov	r0, r5
 80055d6:	f7ff ffb7 	bl	8005548 <KMS_CheckKeyIsNotLocked>
    return NULL;
 80055da:	2800      	cmp	r0, #0
}
 80055dc:	bf0c      	ite	eq
 80055de:	4620      	moveq	r0, r4
 80055e0:	2000      	movne	r0, #0
 80055e2:	b003      	add	sp, #12
 80055e4:	bd30      	pop	{r4, r5, pc}
  kms_obj_keyhead_t *p_object = NULL;
 80055e6:	2400      	movs	r4, #0
 80055e8:	e7f4      	b.n	80055d4 <KMS_Objects_GetPointer+0x60>
	...

080055ec <KMS_LockServiceFctId>:
  * @retval CKR_OK if lock successful,
  *         CKR_CANT_LOCK if lock not possible
  *         CKR_FUNCTION_NOT_SUPPORTED
  */
CK_RV  KMS_LockServiceFctId(CK_ULONG fctId)
{
 80055ec:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(KMS_SE_LOCK_SERVICES)
  CK_RV e_ret_status = CKR_CANT_LOCK;
  uint32_t  lock_table_index;

  /* Check that the Handle is not already registered in the table */
  for (lock_table_index = 0; lock_table_index < kms_locked_function_id_index; lock_table_index++)
 80055ee:	4d0d      	ldr	r5, [pc, #52]	@ (8005624 <KMS_LockServiceFctId+0x38>)
 80055f0:	4c0d      	ldr	r4, [pc, #52]	@ (8005628 <KMS_LockServiceFctId+0x3c>)
 80055f2:	682b      	ldr	r3, [r5, #0]
 80055f4:	2100      	movs	r1, #0
  CK_RV e_ret_status = CKR_CANT_LOCK;
 80055f6:	220a      	movs	r2, #10
 80055f8:	4626      	mov	r6, r4
  for (lock_table_index = 0; lock_table_index < kms_locked_function_id_index; lock_table_index++)
 80055fa:	428b      	cmp	r3, r1
 80055fc:	d108      	bne.n	8005610 <KMS_LockServiceFctId+0x24>
    if (kms_locked_function_id[lock_table_index] == fctId)
    {
      e_ret_status = CKR_OK;
    }
  }
  if (e_ret_status != CKR_OK)
 80055fe:	b12a      	cbz	r2, 800560c <KMS_LockServiceFctId+0x20>
  {
    /* Service is not already locked,try to lock it */
    /* if the table is full, then return */
    if (kms_locked_function_id_index >= KMS_SE_LOCK_SERVICES_MAX)
 8005600:	2b02      	cmp	r3, #2
 8005602:	d00c      	beq.n	800561e <KMS_LockServiceFctId+0x32>
    {
      e_ret_status = CKR_CANT_LOCK;
    }
    else
    {
      kms_locked_function_id[lock_table_index] = fctId;
 8005604:	f846 0023 	str.w	r0, [r6, r3, lsl #2]
      kms_locked_function_id_index++;
 8005608:	3301      	adds	r3, #1
 800560a:	602b      	str	r3, [r5, #0]
  CK_RV e_ret_status = CKR_CANT_LOCK;
 800560c:	2000      	movs	r0, #0

  return e_ret_status;
#else /* KMS_SE_LOCK_SERVICES */
  return CKR_FUNCTION_NOT_SUPPORTED;
#endif /* KMS_SE_LOCK_SERVICES */
}
 800560e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (kms_locked_function_id[lock_table_index] == fctId)
 8005610:	f854 7b04 	ldr.w	r7, [r4], #4
  for (lock_table_index = 0; lock_table_index < kms_locked_function_id_index; lock_table_index++)
 8005614:	3101      	adds	r1, #1
      e_ret_status = CKR_OK;
 8005616:	4287      	cmp	r7, r0
 8005618:	bf08      	it	eq
 800561a:	2200      	moveq	r2, #0
  for (lock_table_index = 0; lock_table_index < kms_locked_function_id_index; lock_table_index++)
 800561c:	e7ed      	b.n	80055fa <KMS_LockServiceFctId+0xe>
      e_ret_status = CKR_CANT_LOCK;
 800561e:	200a      	movs	r0, #10
  return e_ret_status;
 8005620:	e7f5      	b.n	800560e <KMS_LockServiceFctId+0x22>
 8005622:	bf00      	nop
 8005624:	20002fa0 	.word	0x20002fa0
 8005628:	20002fa4 	.word	0x20002fa4

0800562c <KMS_CheckServiceFctIdIsNotLocked>:
#if defined(KMS_SE_LOCK_SERVICES)
  CK_RV e_ret_status = CKR_OK;
  uint32_t  lock_table_index;

  /* Check that the Handle is not already registered in the table */
  for (lock_table_index = 0; lock_table_index < kms_locked_function_id_index; lock_table_index++)
 800562c:	4b08      	ldr	r3, [pc, #32]	@ (8005650 <KMS_CheckServiceFctIdIsNotLocked+0x24>)
 800562e:	4909      	ldr	r1, [pc, #36]	@ (8005654 <KMS_CheckServiceFctIdIsNotLocked+0x28>)
{
 8005630:	b530      	push	{r4, r5, lr}
  for (lock_table_index = 0; lock_table_index < kms_locked_function_id_index; lock_table_index++)
 8005632:	681c      	ldr	r4, [r3, #0]
 8005634:	2300      	movs	r3, #0
{
 8005636:	4602      	mov	r2, r0
  CK_RV e_ret_status = CKR_OK;
 8005638:	4618      	mov	r0, r3
  for (lock_table_index = 0; lock_table_index < kms_locked_function_id_index; lock_table_index++)
 800563a:	429c      	cmp	r4, r3
 800563c:	d100      	bne.n	8005640 <KMS_CheckServiceFctIdIsNotLocked+0x14>
  }
  return e_ret_status;
#else /* KMS_SE_LOCK_SERVICES */
  return CKR_OK;
#endif /* KMS_SE_LOCK_SERVICES */
}
 800563e:	bd30      	pop	{r4, r5, pc}
    if (kms_locked_function_id[lock_table_index] == fctId)
 8005640:	f851 5b04 	ldr.w	r5, [r1], #4
  for (lock_table_index = 0; lock_table_index < kms_locked_function_id_index; lock_table_index++)
 8005644:	3301      	adds	r3, #1
      e_ret_status = CKR_ACTION_PROHIBITED;
 8005646:	4295      	cmp	r5, r2
 8005648:	bf08      	it	eq
 800564a:	201b      	moveq	r0, #27
  for (lock_table_index = 0; lock_table_index < kms_locked_function_id_index; lock_table_index++)
 800564c:	e7f5      	b.n	800563a <KMS_CheckServiceFctIdIsNotLocked+0xe>
 800564e:	bf00      	nop
 8005650:	20002fa0 	.word	0x20002fa0
 8005654:	20002fa4 	.word	0x20002fa4

08005658 <KMS_FindAttributeInTemplate>:
  *         CKR_ARGUMENTS_BAD
  *         CKR_GENERAL_ERROR
  */
CK_RV KMS_FindAttributeInTemplate(CK_ATTRIBUTE_PTR pTemplate, CK_ULONG ulCount, CK_ATTRIBUTE_TYPE type,
                                  CK_ATTRIBUTE_PTR *ppAttr)
{
 8005658:	b530      	push	{r4, r5, lr}
  CK_RV e_ret_status = CKR_GENERAL_ERROR;
  if ((pTemplate == NULL_PTR) || (ulCount == 0UL) || (ppAttr == NULL_PTR))
 800565a:	b178      	cbz	r0, 800567c <KMS_FindAttributeInTemplate+0x24>
 800565c:	b171      	cbz	r1, 800567c <KMS_FindAttributeInTemplate+0x24>
 800565e:	b16b      	cbz	r3, 800567c <KMS_FindAttributeInTemplate+0x24>
    e_ret_status = CKR_ARGUMENTS_BAD;
  }
  else
  {
    /* Search within template attributes the given attribute type */
    for (uint32_t i = 0; i < ulCount; i++)
 8005660:	2400      	movs	r4, #0
    {
      if (pTemplate[i].type == type)
 8005662:	6805      	ldr	r5, [r0, #0]
 8005664:	4295      	cmp	r5, r2
 8005666:	d102      	bne.n	800566e <KMS_FindAttributeInTemplate+0x16>
      {
        *ppAttr = &(pTemplate[i]);
 8005668:	6018      	str	r0, [r3, #0]
        e_ret_status = CKR_OK;
 800566a:	2000      	movs	r0, #0
        break;
      }
    }
  }
  return e_ret_status;
}
 800566c:	bd30      	pop	{r4, r5, pc}
    for (uint32_t i = 0; i < ulCount; i++)
 800566e:	3401      	adds	r4, #1
 8005670:	42a1      	cmp	r1, r4
 8005672:	f100 000c 	add.w	r0, r0, #12
 8005676:	d1f4      	bne.n	8005662 <KMS_FindAttributeInTemplate+0xa>
  CK_RV e_ret_status = CKR_GENERAL_ERROR;
 8005678:	2005      	movs	r0, #5
 800567a:	e7f7      	b.n	800566c <KMS_FindAttributeInTemplate+0x14>
    e_ret_status = CKR_ARGUMENTS_BAD;
 800567c:	2007      	movs	r0, #7
  return e_ret_status;
 800567e:	e7f5      	b.n	800566c <KMS_FindAttributeInTemplate+0x14>

08005680 <KMS_Objects_SearchAttributes>:
  * @param  pAttribute found attribute
  * @retval CKR_OK if attribute is found
  *         CKR_ATTRIBUTE_TYPE_INVALID otherwise
  */
CK_RV KMS_Objects_SearchAttributes(uint32_t SearchedId, kms_obj_keyhead_t *pKmsKeyHead, kms_attr_t **pAttribute)
{
 8005680:	b530      	push	{r4, r5, lr}
  uint8_t  *pkms_blob;
  uint32_t blob_index;
  uint32_t current_attribute_size;

  /* The blob containing the attributes is described by the kms_obj_keyhead_t */
  for (blob_index = 0; blob_index < pKmsKeyHead->blobs_count; blob_index++)
 8005682:	68cd      	ldr	r5, [r1, #12]
  kms_attr_t *pkms_blob_current = (kms_attr_t *)(uint32_t)(pKmsKeyHead->blobs);
 8005684:	f101 0414 	add.w	r4, r1, #20
  for (blob_index = 0; blob_index < pKmsKeyHead->blobs_count; blob_index++)
 8005688:	2100      	movs	r1, #0
 800568a:	428d      	cmp	r5, r1
 800568c:	d101      	bne.n	8005692 <KMS_Objects_SearchAttributes+0x12>
  CK_RV e_ret_status = CKR_ATTRIBUTE_TYPE_INVALID;
 800568e:	2012      	movs	r0, #18
    pkms_blob = &((uint8_t *)pkms_blob_current)[4UL + 4UL + current_attribute_size];

    /* Point to the next Attribute */
    pkms_blob_current = (kms_attr_t *)(uint32_t)pkms_blob;
  }
  return e_ret_status;
 8005690:	e004      	b.n	800569c <KMS_Objects_SearchAttributes+0x1c>
    if (pkms_blob_current->id == SearchedId)
 8005692:	6823      	ldr	r3, [r4, #0]
 8005694:	4283      	cmp	r3, r0
 8005696:	d102      	bne.n	800569e <KMS_Objects_SearchAttributes+0x1e>
      *pAttribute = pkms_blob_current;
 8005698:	6014      	str	r4, [r2, #0]
      e_ret_status = CKR_OK;
 800569a:	2000      	movs	r0, #0
}
 800569c:	bd30      	pop	{r4, r5, pc}
    current_attribute_size = pkms_blob_current->size ;
 800569e:	6863      	ldr	r3, [r4, #4]
    if ((current_attribute_size % 4UL) != 0UL)
 80056a0:	f013 0f03 	tst.w	r3, #3
      current_attribute_size += 4UL - (current_attribute_size % 4UL);
 80056a4:	bf1c      	itt	ne
 80056a6:	f023 0303 	bicne.w	r3, r3, #3
 80056aa:	3304      	addne	r3, #4
    pkms_blob = &((uint8_t *)pkms_blob_current)[4UL + 4UL + current_attribute_size];
 80056ac:	3308      	adds	r3, #8
 80056ae:	441c      	add	r4, r3
  for (blob_index = 0; blob_index < pKmsKeyHead->blobs_count; blob_index++)
 80056b0:	3101      	adds	r1, #1
 80056b2:	e7ea      	b.n	800568a <KMS_Objects_SearchAttributes+0xa>

080056b4 <KMS_FindObjectsFromTemplate>:
{
 80056b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  *p_working_obj_count = 0;
 80056b8:	2600      	movs	r6, #0
{
 80056ba:	b08b      	sub	sp, #44	@ 0x2c
  *p_working_obj_count = 0;
 80056bc:	601e      	str	r6, [r3, #0]
  KMS_PlatfObjects_EmbeddedRange(&h_emb_obj_min, &h_emb_obj_max);
 80056be:	a804      	add	r0, sp, #16
{
 80056c0:	4689      	mov	r9, r1
  KMS_PlatfObjects_EmbeddedRange(&h_emb_obj_min, &h_emb_obj_max);
 80056c2:	a905      	add	r1, sp, #20
{
 80056c4:	9201      	str	r2, [sp, #4]
 80056c6:	461d      	mov	r5, r3
  KMS_PlatfObjects_EmbeddedRange(&h_emb_obj_min, &h_emb_obj_max);
 80056c8:	f000 fc02 	bl	8005ed0 <KMS_PlatfObjects_EmbeddedRange>
  KMS_PlatfObjects_NvmStaticRange(&h_nvms_obj_min, &h_nvms_obj_max);
 80056cc:	a907      	add	r1, sp, #28
 80056ce:	a806      	add	r0, sp, #24
 80056d0:	f000 fc0c 	bl	8005eec <KMS_PlatfObjects_NvmStaticRange>
  KMS_PlatfObjects_NvmDynamicRange(&h_nvmd_obj_min, &h_nvmd_obj_max);
 80056d4:	a909      	add	r1, sp, #36	@ 0x24
 80056d6:	a808      	add	r0, sp, #32
 80056d8:	f000 fc16 	bl	8005f08 <KMS_PlatfObjects_NvmDynamicRange>
  h_object = h_emb_obj_min;
 80056dc:	9c04      	ldr	r4, [sp, #16]
  CK_RV e_ret_status = CKR_OK;
 80056de:	46b0      	mov	r8, r6
         && (e_ret_status == CKR_OK))
 80056e0:	682b      	ldr	r3, [r5, #0]
 80056e2:	9a01      	ldr	r2, [sp, #4]
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d203      	bcs.n	80056f0 <KMS_FindObjectsFromTemplate+0x3c>
         && (h_object != KMS_HANDLE_KEY_NOT_KNOWN)
 80056e8:	b114      	cbz	r4, 80056f0 <KMS_FindObjectsFromTemplate+0x3c>
         && (e_ret_status == CKR_OK))
 80056ea:	f1b8 0f00 	cmp.w	r8, #0
 80056ee:	d003      	beq.n	80056f8 <KMS_FindObjectsFromTemplate+0x44>
}
 80056f0:	2000      	movs	r0, #0
 80056f2:	b00b      	add	sp, #44	@ 0x2c
 80056f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    p_pkms_object = KMS_Objects_GetPointer(h_object);
 80056f8:	4620      	mov	r0, r4
 80056fa:	f7ff ff3b 	bl	8005574 <KMS_Objects_GetPointer>
    if ((p_pkms_object != NULL) && (e_ret_status == CKR_OK))
 80056fe:	9000      	str	r0, [sp, #0]
 8005700:	b338      	cbz	r0, 8005752 <KMS_FindObjectsFromTemplate+0x9e>
      if (ulCount > 0UL)
 8005702:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005704:	2b00      	cmp	r3, #0
 8005706:	d031      	beq.n	800576c <KMS_FindObjectsFromTemplate+0xb8>
 8005708:	9f14      	ldr	r7, [sp, #80]	@ 0x50
        for (template_index = 0; template_index < ulCount; template_index++)
 800570a:	46c2      	mov	sl, r8
        ul_attributes_found_count = 0;
 800570c:	46c3      	mov	fp, r8
          if (KMS_Objects_SearchAttributes(pTemplate[template_index].type, p_pkms_object, &p_attribute) == CKR_OK)
 800570e:	9900      	ldr	r1, [sp, #0]
 8005710:	6838      	ldr	r0, [r7, #0]
 8005712:	aa03      	add	r2, sp, #12
 8005714:	f7ff ffb4 	bl	8005680 <KMS_Objects_SearchAttributes>
 8005718:	b958      	cbnz	r0, 8005732 <KMS_FindObjectsFromTemplate+0x7e>
            if ((p_attribute->size == pTemplate[template_index].ulValueLen)
 800571a:	9803      	ldr	r0, [sp, #12]
 800571c:	68b9      	ldr	r1, [r7, #8]
 800571e:	6842      	ldr	r2, [r0, #4]
 8005720:	428a      	cmp	r2, r1
 8005722:	d106      	bne.n	8005732 <KMS_FindObjectsFromTemplate+0x7e>
                && (memcmp(p_attribute->data, pTemplate[template_index].pValue, p_attribute->size) == 0))
 8005724:	6879      	ldr	r1, [r7, #4]
 8005726:	3008      	adds	r0, #8
 8005728:	f001 fa58 	bl	8006bdc <memcmp>
 800572c:	b908      	cbnz	r0, 8005732 <KMS_FindObjectsFromTemplate+0x7e>
              ul_attributes_found_count++;
 800572e:	f10b 0b01 	add.w	fp, fp, #1
        for (template_index = 0; template_index < ulCount; template_index++)
 8005732:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005734:	f10a 0a01 	add.w	sl, sl, #1
 8005738:	4553      	cmp	r3, sl
 800573a:	f107 070c 	add.w	r7, r7, #12
 800573e:	d1e6      	bne.n	800570e <KMS_FindObjectsFromTemplate+0x5a>
        if (ul_attributes_found_count == ulCount)
 8005740:	9a15      	ldr	r2, [sp, #84]	@ 0x54
        phObject[*p_working_obj_count] = h_object;
 8005742:	682b      	ldr	r3, [r5, #0]
        if (ul_attributes_found_count == ulCount)
 8005744:	4593      	cmp	fp, r2
 8005746:	d104      	bne.n	8005752 <KMS_FindObjectsFromTemplate+0x9e>
        phObject[*p_working_obj_count] = h_object;
 8005748:	f849 4023 	str.w	r4, [r9, r3, lsl #2]
        *p_working_obj_count = *p_working_obj_count + 1;
 800574c:	682b      	ldr	r3, [r5, #0]
 800574e:	3301      	adds	r3, #1
 8005750:	602b      	str	r3, [r5, #0]
    switch (state)
 8005752:	2e01      	cmp	r6, #1
    h_object++;
 8005754:	f104 0401 	add.w	r4, r4, #1
    switch (state)
 8005758:	d00a      	beq.n	8005770 <KMS_FindObjectsFromTemplate+0xbc>
 800575a:	2e02      	cmp	r6, #2
 800575c:	d00e      	beq.n	800577c <KMS_FindObjectsFromTemplate+0xc8>
 800575e:	b996      	cbnz	r6, 8005786 <KMS_FindObjectsFromTemplate+0xd2>
        if (h_object > h_emb_obj_max)
 8005760:	9b05      	ldr	r3, [sp, #20]
 8005762:	42a3      	cmp	r3, r4
 8005764:	d2bc      	bcs.n	80056e0 <KMS_FindObjectsFromTemplate+0x2c>
          h_object = h_nvms_obj_min;
 8005766:	9c06      	ldr	r4, [sp, #24]
          state = KMS_OBJECT_RANGE_NVM_STATIC_ID;
 8005768:	2601      	movs	r6, #1
 800576a:	e7b9      	b.n	80056e0 <KMS_FindObjectsFromTemplate+0x2c>
        phObject[*p_working_obj_count] = h_object;
 800576c:	682b      	ldr	r3, [r5, #0]
 800576e:	e7eb      	b.n	8005748 <KMS_FindObjectsFromTemplate+0x94>
        if (h_object > h_nvms_obj_max)
 8005770:	9b07      	ldr	r3, [sp, #28]
 8005772:	42a3      	cmp	r3, r4
 8005774:	d2b4      	bcs.n	80056e0 <KMS_FindObjectsFromTemplate+0x2c>
          h_object = h_nvmd_obj_min;
 8005776:	9c08      	ldr	r4, [sp, #32]
          state = KMS_OBJECT_RANGE_NVM_DYNAMIC_ID;
 8005778:	2602      	movs	r6, #2
 800577a:	e7b1      	b.n	80056e0 <KMS_FindObjectsFromTemplate+0x2c>
          h_object = KMS_HANDLE_KEY_NOT_KNOWN;
 800577c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800577e:	42a3      	cmp	r3, r4
 8005780:	bf38      	it	cc
 8005782:	2400      	movcc	r4, #0
 8005784:	e7ac      	b.n	80056e0 <KMS_FindObjectsFromTemplate+0x2c>
    switch (state)
 8005786:	f04f 0805 	mov.w	r8, #5
 800578a:	e7a9      	b.n	80056e0 <KMS_FindObjectsFromTemplate+0x2c>

0800578c <KMS_Objects_u8ptr_2_BlobU32>:
  * @param  u8Size u8 buffer size (in bytes)
  * @param  pU32 translated buffer
  * @retval None
  */
void KMS_Objects_u8ptr_2_BlobU32(uint8_t *pU8, uint32_t u8Size, uint32_t *pU32)
{
 800578c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t index;
  uint32_t reste = u8Size & 0x3UL;
 800578e:	f001 0603 	and.w	r6, r1, #3
  for (index = 0; index < ((u8Size) / 4UL); index++)
 8005792:	4604      	mov	r4, r0
 8005794:	0889      	lsrs	r1, r1, #2
 8005796:	2500      	movs	r5, #0
 8005798:	42a9      	cmp	r1, r5
 800579a:	f104 0404 	add.w	r4, r4, #4
 800579e:	d107      	bne.n	80057b0 <KMS_Objects_u8ptr_2_BlobU32+0x24>
    pU32[index] = ((uint32_t)pU8[(index * 4UL) + 0UL] << 24) + \
                  ((uint32_t)pU8[(index * 4UL) + 1UL] << 16) + \
                  ((uint32_t)pU8[(index * 4UL) + 2UL] << 8) + \
                  ((uint32_t)pU8[(index * 4UL) + 3UL]);
  }
  if (reste != 0UL)     /* check that we have a multiple of 4 bytes */
 80057a0:	b12e      	cbz	r6, 80057ae <KMS_Objects_u8ptr_2_BlobU32+0x22>
  {
    if (reste == 1UL)
 80057a2:	2e01      	cmp	r6, #1
 80057a4:	d116      	bne.n	80057d4 <KMS_Objects_u8ptr_2_BlobU32+0x48>
    {
      /* One byte remains, convention is as follow:
       *         u8[]  = {0x01}
       *         u32[] = {0x00000001} */
      pU32[index] = ((uint32_t)pU8[(index * 4UL) + 0UL]);
 80057a6:	f810 3021 	ldrb.w	r3, [r0, r1, lsl #2]
    if (reste == 3UL)
    {
      /* Three bytes remains, convention is as follow:
       *         u8[]  = {0x01, 0x02, 0x03}
       *         u32[] = {0x00010203} */
      pU32[index] = ((uint32_t)pU8[(index * 4UL) + 0UL] << 16) + \
 80057aa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
                    ((uint32_t)pU8[(index * 4UL) + 1UL] << 8) + \
                    ((uint32_t)pU8[(index * 4UL) + 2UL]);
    }
  }
}
 80057ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
                  ((uint32_t)pU8[(index * 4UL) + 1UL] << 16) + \
 80057b0:	f814 3c03 	ldrb.w	r3, [r4, #-3]
    pU32[index] = ((uint32_t)pU8[(index * 4UL) + 0UL] << 24) + \
 80057b4:	f814 7c04 	ldrb.w	r7, [r4, #-4]
                  ((uint32_t)pU8[(index * 4UL) + 1UL] << 16) + \
 80057b8:	041b      	lsls	r3, r3, #16
                  ((uint32_t)pU8[(index * 4UL) + 2UL] << 8) + \
 80057ba:	eb03 6307 	add.w	r3, r3, r7, lsl #24
                  ((uint32_t)pU8[(index * 4UL) + 3UL]);
 80057be:	f814 7c01 	ldrb.w	r7, [r4, #-1]
                  ((uint32_t)pU8[(index * 4UL) + 2UL] << 8) + \
 80057c2:	443b      	add	r3, r7
 80057c4:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 80057c8:	eb03 2307 	add.w	r3, r3, r7, lsl #8
    pU32[index] = ((uint32_t)pU8[(index * 4UL) + 0UL] << 24) + \
 80057cc:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
  for (index = 0; index < ((u8Size) / 4UL); index++)
 80057d0:	3501      	adds	r5, #1
 80057d2:	e7e1      	b.n	8005798 <KMS_Objects_u8ptr_2_BlobU32+0xc>
    if (reste == 2UL)
 80057d4:	2e02      	cmp	r6, #2
 80057d6:	ea4f 0381 	mov.w	r3, r1, lsl #2
      pU32[index] = ((uint32_t)pU8[(index * 4UL) + 0UL] << 8) + \
 80057da:	f810 4021 	ldrb.w	r4, [r0, r1, lsl #2]
                    ((uint32_t)pU8[(index * 4UL) + 2UL]);
 80057de:	bf15      	itete	ne
 80057e0:	18c0      	addne	r0, r0, r3
                    ((uint32_t)pU8[(index * 4UL) + 1UL]);
 80057e2:	181b      	addeq	r3, r3, r0
                    ((uint32_t)pU8[(index * 4UL) + 2UL]);
 80057e4:	7883      	ldrbne	r3, [r0, #2]
                    ((uint32_t)pU8[(index * 4UL) + 1UL]);
 80057e6:	785b      	ldrbeq	r3, [r3, #1]
                    ((uint32_t)pU8[(index * 4UL) + 1UL] << 8) + \
 80057e8:	bf1b      	ittet	ne
 80057ea:	7840      	ldrbne	r0, [r0, #1]
 80057ec:	eb03 4304 	addne.w	r3, r3, r4, lsl #16
      pU32[index] = ((uint32_t)pU8[(index * 4UL) + 0UL] << 8) + \
 80057f0:	eb03 2304 	addeq.w	r3, r3, r4, lsl #8
                    ((uint32_t)pU8[(index * 4UL) + 1UL] << 8) + \
 80057f4:	eb03 2300 	addne.w	r3, r3, r0, lsl #8
 80057f8:	e7d7      	b.n	80057aa <KMS_Objects_u8ptr_2_BlobU32+0x1e>

080057fa <KMS_Objects_BlobU32_2_u8ptr>:
  * @param  u32Size u32 buffer size
  * @param  pU8 translated buffer
  * @retval None
  */
void  KMS_Objects_BlobU32_2_u8ptr(uint32_t *pU32, uint32_t u32Size, uint8_t *pU8)
{
 80057fa:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t index_key;
  uint32_t reste = u32Size & 0x3UL;

  for (index_key = 0; index_key < (u32Size / sizeof(uint32_t)); index_key++)
 80057fc:	088b      	lsrs	r3, r1, #2
  uint32_t reste = u32Size & 0x3UL;
 80057fe:	f001 0603 	and.w	r6, r1, #3
  for (index_key = 0; index_key < (u32Size / sizeof(uint32_t)); index_key++)
 8005802:	f021 0103 	bic.w	r1, r1, #3
 8005806:	4604      	mov	r4, r0
 8005808:	4615      	mov	r5, r2
 800580a:	eb00 0c01 	add.w	ip, r0, r1
 800580e:	4564      	cmp	r4, ip
 8005810:	f105 0504 	add.w	r5, r5, #4
 8005814:	d107      	bne.n	8005826 <KMS_Objects_BlobU32_2_u8ptr+0x2c>
    pU8[(index_key * sizeof(uint32_t)) + 1UL] = (uint8_t)(pU32[index_key] >> 16);
    pU8[(index_key * sizeof(uint32_t)) + 2UL] = (uint8_t)(pU32[index_key] >> 8);
    pU8[(index_key * sizeof(uint32_t)) + 3UL] = (uint8_t)(pU32[index_key]);
  }

  if (reste != 0UL)     /* check that we have a multiple of 4 bytes */
 8005816:	b12e      	cbz	r6, 8005824 <KMS_Objects_BlobU32_2_u8ptr+0x2a>
  {
    if (reste == 1UL)
 8005818:	2e01      	cmp	r6, #1
 800581a:	d116      	bne.n	800584a <KMS_Objects_BlobU32_2_u8ptr+0x50>
    {
      /* One byte remains, convention is as follow:
       *         u8[]  = {0x01}
       *         u32[] = {0x00000001} */
      pU8[(index_key * sizeof(uint32_t))]   = (uint8_t)(pU32[index_key]);
 800581c:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8005820:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
      pU8[(index_key * sizeof(uint32_t))]       = (uint8_t)(pU32[index_key] >> 16);
      pU8[(index_key * sizeof(uint32_t)) + 1UL] = (uint8_t)(pU32[index_key] >> 8);
      pU8[(index_key * sizeof(uint32_t)) + 2UL] = (uint8_t)(pU32[index_key]);
    }
  }
}
 8005824:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pU8[(index_key * sizeof(uint32_t))]       = (uint8_t)(pU32[index_key] >> 24);
 8005826:	78e7      	ldrb	r7, [r4, #3]
 8005828:	f805 7c04 	strb.w	r7, [r5, #-4]
    pU8[(index_key * sizeof(uint32_t)) + 1UL] = (uint8_t)(pU32[index_key] >> 16);
 800582c:	f854 7b04 	ldr.w	r7, [r4], #4
 8005830:	0c3f      	lsrs	r7, r7, #16
 8005832:	f805 7c03 	strb.w	r7, [r5, #-3]
    pU8[(index_key * sizeof(uint32_t)) + 2UL] = (uint8_t)(pU32[index_key] >> 8);
 8005836:	f854 7c04 	ldr.w	r7, [r4, #-4]
 800583a:	0a3f      	lsrs	r7, r7, #8
 800583c:	f805 7c02 	strb.w	r7, [r5, #-2]
    pU8[(index_key * sizeof(uint32_t)) + 3UL] = (uint8_t)(pU32[index_key]);
 8005840:	f854 7c04 	ldr.w	r7, [r4, #-4]
 8005844:	f805 7c01 	strb.w	r7, [r5, #-1]
  for (index_key = 0; index_key < (u32Size / sizeof(uint32_t)); index_key++)
 8005848:	e7e1      	b.n	800580e <KMS_Objects_BlobU32_2_u8ptr+0x14>
    if (reste == 2UL)
 800584a:	2e02      	cmp	r6, #2
      pU8[(index_key * sizeof(uint32_t))]   = (uint8_t)(pU32[index_key] >> 8);
 800584c:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8005850:	4411      	add	r1, r2
    if (reste == 2UL)
 8005852:	d106      	bne.n	8005862 <KMS_Objects_BlobU32_2_u8ptr+0x68>
      pU8[(index_key * sizeof(uint32_t))]   = (uint8_t)(pU32[index_key] >> 8);
 8005854:	0a24      	lsrs	r4, r4, #8
 8005856:	f802 4023 	strb.w	r4, [r2, r3, lsl #2]
      pU8[(index_key * sizeof(uint32_t)) + 1UL] = (uint8_t)(pU32[index_key]);
 800585a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800585e:	704b      	strb	r3, [r1, #1]
    if (reste == 3UL)
 8005860:	e7e0      	b.n	8005824 <KMS_Objects_BlobU32_2_u8ptr+0x2a>
      pU8[(index_key * sizeof(uint32_t))]       = (uint8_t)(pU32[index_key] >> 16);
 8005862:	0c24      	lsrs	r4, r4, #16
 8005864:	f802 4023 	strb.w	r4, [r2, r3, lsl #2]
      pU8[(index_key * sizeof(uint32_t)) + 1UL] = (uint8_t)(pU32[index_key] >> 8);
 8005868:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800586c:	0a12      	lsrs	r2, r2, #8
 800586e:	704a      	strb	r2, [r1, #1]
      pU8[(index_key * sizeof(uint32_t)) + 2UL] = (uint8_t)(pU32[index_key]);
 8005870:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005874:	708b      	strb	r3, [r1, #2]
}
 8005876:	e7d5      	b.n	8005824 <KMS_Objects_BlobU32_2_u8ptr+0x2a>

08005878 <KMS_Objects_ImportBlob>:
  *         @ref authenticate_blob_header returned values
  *         @ref authenticate_blob returned values
  *         @ref install_blob returned values
  */
CK_RV  KMS_Objects_ImportBlob(CK_BYTE_PTR pHdr, CK_BYTE_PTR pFlash)
{
 8005878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CK_RV e_ret_status = CKR_GENERAL_ERROR;
  CK_RV e_install_status = CKR_GENERAL_ERROR;
  uint32_t session_index;
  kms_importblob_ctx_t *p_ctx;

  if (!KMS_IS_INITIALIZED())
 800587c:	4ba5      	ldr	r3, [pc, #660]	@ (8005b14 <KMS_Objects_ImportBlob+0x29c>)
 800587e:	781a      	ldrb	r2, [r3, #0]
{
 8005880:	b09b      	sub	sp, #108	@ 0x6c
 8005882:	4683      	mov	fp, r0
 8005884:	4688      	mov	r8, r1
  if (!KMS_IS_INITIALIZED())
 8005886:	b922      	cbnz	r2, 8005892 <KMS_Objects_ImportBlob+0x1a>
  CK_RV e_install_status = CKR_GENERAL_ERROR;
 8005888:	2605      	movs	r6, #5
  }
  return e_install_status;
#else /* KMS_IMPORT_BLOB */
  return CKR_FUNCTION_NOT_SUPPORTED;
#endif /* KMS_IMPORT_BLOB */
}
 800588a:	4630      	mov	r0, r6
 800588c:	b01b      	add	sp, #108	@ 0x6c
 800588e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    session_index = 1;
 8005892:	2201      	movs	r2, #1
      if (KMS_GETSESSION(session_index).state != KMS_SESSION_NOT_USED)
 8005894:	68de      	ldr	r6, [r3, #12]
 8005896:	1c71      	adds	r1, r6, #1
 8005898:	d1f6      	bne.n	8005888 <KMS_Objects_ImportBlob+0x10>
      session_index++;
 800589a:	3201      	adds	r2, #1
    } while (session_index <= KMS_NB_SESSIONS_MAX); /* Session index are going from 1 to KMS_NB_SESSIONS_MAX */
 800589c:	2a0b      	cmp	r2, #11
 800589e:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 80058a2:	d1f7      	bne.n	8005894 <KMS_Objects_ImportBlob+0x1c>
      p_ctx = KMS_Alloc(KMS_SESSION_ID_INVALID, sizeof(kms_importblob_ctx_t));
 80058a4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80058a8:	2000      	movs	r0, #0
 80058aa:	f7ff f923 	bl	8004af4 <KMS_Alloc>
      if (p_ctx == NULL)
 80058ae:	4605      	mov	r5, r0
 80058b0:	2800      	cmp	r0, #0
 80058b2:	d0e9      	beq.n	8005888 <KMS_Objects_ImportBlob+0x10>
        e_ret_status = authenticate_blob_header(p_ctx, (KMS_BlobRawHeaderTypeDef *)(uint32_t)pHdr, pFlash);
 80058b4:	4658      	mov	r0, fp
 80058b6:	f7ff fd91 	bl	80053dc <authenticate_blob_header.constprop.0>
 80058ba:	4603      	mov	r3, r0
        if (e_ret_status == CKR_OK)
 80058bc:	b9a0      	cbnz	r0, 80058e8 <KMS_Objects_ImportBlob+0x70>
  if ((pBlobHeader == NULL))
 80058be:	f1bb 0f00 	cmp.w	fp, #0
 80058c2:	d011      	beq.n	80058e8 <KMS_Objects_ImportBlob+0x70>
  if (KMS_OpenSession(0, CKF_SERIAL_SESSION, NULL, 0, &aessession) != CKR_OK)
 80058c4:	af08      	add	r7, sp, #32
 80058c6:	9700      	str	r7, [sp, #0]
 80058c8:	4602      	mov	r2, r0
 80058ca:	2104      	movs	r1, #4
 80058cc:	f7fe ff5a 	bl	8004784 <KMS_OpenSession>
 80058d0:	4603      	mov	r3, r0
 80058d2:	b948      	cbnz	r0, 80058e8 <KMS_Objects_ImportBlob+0x70>
  if (KMS_OpenSession(0, CKF_SERIAL_SESSION, NULL, 0, &digsession) != CKR_OK)
 80058d4:	aa09      	add	r2, sp, #36	@ 0x24
 80058d6:	9200      	str	r2, [sp, #0]
 80058d8:	2104      	movs	r1, #4
 80058da:	4602      	mov	r2, r0
 80058dc:	f7fe ff52 	bl	8004784 <KMS_OpenSession>
 80058e0:	b140      	cbz	r0, 80058f4 <KMS_Objects_ImportBlob+0x7c>
    (void)KMS_CloseSession(aessession);
 80058e2:	9808      	ldr	r0, [sp, #32]
 80058e4:	f7fe ff92 	bl	800480c <KMS_CloseSession>
  CK_RV e_install_status = CKR_GENERAL_ERROR;
 80058e8:	2605      	movs	r6, #5
        KMS_Free(KMS_SESSION_ID_INVALID, p_ctx);
 80058ea:	4629      	mov	r1, r5
 80058ec:	2000      	movs	r0, #0
 80058ee:	f7ff f925 	bl	8004b3c <KMS_Free>
  return e_install_status;
 80058f2:	e7ca      	b.n	800588a <KMS_Objects_ImportBlob+0x12>
  obj_id_index = KMS_PlatfObjects_GetBlobDecryptKey();
 80058f4:	f000 fb83 	bl	8005ffe <KMS_PlatfObjects_GetBlobDecryptKey>
  aesmech.mechanism = CKM_AES_CBC;
 80058f8:	f241 0382 	movw	r3, #4226	@ 0x1082
 80058fc:	930a      	str	r3, [sp, #40]	@ 0x28
  aesmech.pParameter = &(pBlobHeader->InitVector[0]);
 80058fe:	f10b 0354 	add.w	r3, fp, #84	@ 0x54
  obj_id_index = KMS_PlatfObjects_GetBlobDecryptKey();
 8005902:	4602      	mov	r2, r0
  aesmech.pParameter = &(pBlobHeader->InitVector[0]);
 8005904:	9303      	str	r3, [sp, #12]
 8005906:	930b      	str	r3, [sp, #44]	@ 0x2c
  e_ret_status = KMS_DecryptInit(aessession, &aesmech, obj_id_index);
 8005908:	9808      	ldr	r0, [sp, #32]
  aesmech.ulParameterLen = KMS_BLOB_IV_LEN;
 800590a:	2310      	movs	r3, #16
  e_ret_status = KMS_DecryptInit(aessession, &aesmech, obj_id_index);
 800590c:	a90a      	add	r1, sp, #40	@ 0x28
  aesmech.ulParameterLen = KMS_BLOB_IV_LEN;
 800590e:	930c      	str	r3, [sp, #48]	@ 0x30
  e_ret_status = KMS_DecryptInit(aessession, &aesmech, obj_id_index);
 8005910:	f7fe f8e0 	bl	8003ad4 <KMS_DecryptInit>
  if (e_ret_status == CKR_OK)
 8005914:	4604      	mov	r4, r0
 8005916:	b960      	cbnz	r0, 8005932 <KMS_Objects_ImportBlob+0xba>
    digmech.mechanism = CKM_SHA256;
 8005918:	f44f 7314 	mov.w	r3, #592	@ 0x250
    digmech.pParameter = NULL;
 800591c:	e9cd 300d 	strd	r3, r0, [sp, #52]	@ 0x34
    digmech.ulParameterLen = 0;
 8005920:	900f      	str	r0, [sp, #60]	@ 0x3c
    e_ret_status = KMS_DigestInit(digsession, &digmech);
 8005922:	a90d      	add	r1, sp, #52	@ 0x34
 8005924:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005926:	f7fd fb5d 	bl	8002fe4 <KMS_DigestInit>
  if (e_ret_status == CKR_OK)
 800592a:	4604      	mov	r4, r0
 800592c:	2800      	cmp	r0, #0
 800592e:	f000 8099 	beq.w	8005a64 <KMS_Objects_ImportBlob+0x1ec>
  (void)KMS_CloseSession(aessession);
 8005932:	9808      	ldr	r0, [sp, #32]
 8005934:	f7fe ff6a 	bl	800480c <KMS_CloseSession>
  (void)KMS_CloseSession(digsession);
 8005938:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800593a:	f7fe ff67 	bl	800480c <KMS_CloseSession>
  if (e_ret_status == CKR_OK)
 800593e:	2c00      	cmp	r4, #0
 8005940:	d1d2      	bne.n	80058e8 <KMS_Objects_ImportBlob+0x70>
    if ((fw_tag_len == KMS_BLOB_TAG_LEN) && (memcmp(fw_tag_output, pBlobHeader->BlobTag, KMS_BLOB_TAG_LEN) == 0))
 8005942:	9a07      	ldr	r2, [sp, #28]
 8005944:	2a20      	cmp	r2, #32
 8005946:	d1cf      	bne.n	80058e8 <KMS_Objects_ImportBlob+0x70>
 8005948:	f10b 0114 	add.w	r1, fp, #20
 800594c:	a812      	add	r0, sp, #72	@ 0x48
 800594e:	f001 f945 	bl	8006bdc <memcmp>
 8005952:	2800      	cmp	r0, #0
 8005954:	d1c8      	bne.n	80058e8 <KMS_Objects_ImportBlob+0x70>
            e_ret_status = authenticate_blob_header(p_ctx, (KMS_BlobRawHeaderTypeDef *)(uint32_t)pHdr, pFlash);
 8005956:	4658      	mov	r0, fp
 8005958:	f7ff fd40 	bl	80053dc <authenticate_blob_header.constprop.0>
            if (e_ret_status == CKR_OK)
 800595c:	2800      	cmp	r0, #0
 800595e:	d1c3      	bne.n	80058e8 <KMS_Objects_ImportBlob+0x70>
  if (KMS_OpenSession(0, CKF_SERIAL_SESSION, NULL, 0, &session) != CKR_OK)
 8005960:	ab07      	add	r3, sp, #28
 8005962:	9300      	str	r3, [sp, #0]
 8005964:	4622      	mov	r2, r4
 8005966:	4623      	mov	r3, r4
 8005968:	2104      	movs	r1, #4
 800596a:	f7fe ff0b 	bl	8004784 <KMS_OpenSession>
 800596e:	2800      	cmp	r0, #0
 8005970:	f040 8146 	bne.w	8005c00 <KMS_Objects_ImportBlob+0x388>
  obj_id_index = KMS_PlatfObjects_GetBlobDecryptKey();
 8005974:	f000 fb43 	bl	8005ffe <KMS_PlatfObjects_GetBlobDecryptKey>
  aesmech.mechanism = CKM_AES_CBC;
 8005978:	f241 0382 	movw	r3, #4226	@ 0x1082
 800597c:	930a      	str	r3, [sp, #40]	@ 0x28
  aesmech.pParameter = &(pBlobHeader->InitVector[0]);
 800597e:	9b03      	ldr	r3, [sp, #12]
 8005980:	930b      	str	r3, [sp, #44]	@ 0x2c
  obj_id_index = KMS_PlatfObjects_GetBlobDecryptKey();
 8005982:	4602      	mov	r2, r0
  aesmech.ulParameterLen = KMS_BLOB_IV_LEN;
 8005984:	2310      	movs	r3, #16
  e_ret_status = KMS_DecryptInit(session, &aesmech, obj_id_index);
 8005986:	9807      	ldr	r0, [sp, #28]
  aesmech.ulParameterLen = KMS_BLOB_IV_LEN;
 8005988:	930c      	str	r3, [sp, #48]	@ 0x30
  e_ret_status = KMS_DecryptInit(session, &aesmech, obj_id_index);
 800598a:	a90a      	add	r1, sp, #40	@ 0x28
 800598c:	f7fe f8a2 	bl	8003ad4 <KMS_DecryptInit>
  if (e_ret_status != CKR_OK)
 8005990:	4606      	mov	r6, r0
 8005992:	2800      	cmp	r0, #0
 8005994:	d1a9      	bne.n	80058ea <KMS_Objects_ImportBlob+0x72>
  if (pBlobHeader->BlobSize < fw_decrypted_chunk_size)
 8005996:	f8db 3008 	ldr.w	r3, [fp, #8]
  e_ret_status = read_next_chunk(pCtx,
 800599a:	9907      	ldr	r1, [sp, #28]
    fw_decrypted_chunk_size = pBlobHeader->BlobSize;
 800599c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059a0:	bf28      	it	cs
 80059a2:	f44f 7300 	movcs.w	r3, #512	@ 0x200
  e_ret_status = read_next_chunk(pCtx,
 80059a6:	4642      	mov	r2, r8
 80059a8:	e9cd 5700 	strd	r5, r7, [sp]
 80059ac:	4628      	mov	r0, r5
    fw_decrypted_chunk_size = pBlobHeader->BlobSize;
 80059ae:	9308      	str	r3, [sp, #32]
  e_ret_status = read_next_chunk(pCtx,
 80059b0:	f7ff fd6d 	bl	800548e <read_next_chunk>
  pfw_source_address = &pfw_source_address[fw_decrypted_chunk_size];
 80059b4:	f8dd a020 	ldr.w	sl, [sp, #32]
  e_ret_status = read_next_chunk(pCtx,
 80059b8:	9002      	str	r0, [sp, #8]
  pfw_source_address = &pfw_source_address[fw_decrypted_chunk_size];
 80059ba:	eb08 030a 	add.w	r3, r8, sl
 80059be:	9303      	str	r3, [sp, #12]
                                 pCtx->fw_decrypted_chunk,
 80059c0:	46a8      	mov	r8, r5
  while (((fw_decrypted_total_size < (pBlobHeader->BlobSize))
 80059c2:	f8db 3008 	ldr.w	r3, [fp, #8]
 80059c6:	9304      	str	r3, [sp, #16]
         && (e_ret_status == CKR_OK))
 80059c8:	4553      	cmp	r3, sl
 80059ca:	d804      	bhi.n	80059d6 <KMS_Objects_ImportBlob+0x15e>
          || (p_next_magic < (uint32_t *)(uint32_t)(&(pCtx->fw_decrypted_chunk[fw_decrypted_chunk_size]))))
 80059cc:	9b08      	ldr	r3, [sp, #32]
 80059ce:	442b      	add	r3, r5
 80059d0:	4598      	cmp	r8, r3
 80059d2:	f080 8102 	bcs.w	8005bda <KMS_Objects_ImportBlob+0x362>
         && (e_ret_status == CKR_OK))
 80059d6:	9b02      	ldr	r3, [sp, #8]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f040 8113 	bne.w	8005c04 <KMS_Objects_ImportBlob+0x38c>
           && (p_next_magic < (uint32_t *)(uint32_t)(&(pCtx->fw_decrypted_chunk[fw_decrypted_chunk_size])))
 80059de:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80059e2:	eba6 0608 	sub.w	r6, r6, r8
 80059e6:	eb05 0309 	add.w	r3, r5, r9
 80059ea:	e059      	b.n	8005aa0 <KMS_Objects_ImportBlob+0x228>
      if ((pBlobHeader->BlobSize - fw_decrypted_total_size) < fw_decrypted_chunk_size)
 80059ec:	eba2 020a 	sub.w	r2, r2, sl
        pfw_source_address = pBlobInFlash;
 80059f0:	f1b9 0f00 	cmp.w	r9, #0
 80059f4:	bf08      	it	eq
 80059f6:	4646      	moveq	r6, r8
      if ((pBlobHeader->BlobSize - fw_decrypted_total_size) < fw_decrypted_chunk_size)
 80059f8:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 80059fc:	bf28      	it	cs
 80059fe:	f44f 7200 	movcs.w	r2, #512	@ 0x200
      e_ret_status = KMS_LL_FLASH_Read(pCtx->fw_encrypted_chunk, pfw_source_address, size);
 8005a02:	9802      	ldr	r0, [sp, #8]
      fw_decrypted_chunk_size = sizeof(pCtx->fw_decrypted_chunk);
 8005a04:	9206      	str	r2, [sp, #24]
      e_ret_status = KMS_LL_FLASH_Read(pCtx->fw_encrypted_chunk, pfw_source_address, size);
 8005a06:	4631      	mov	r1, r6
 8005a08:	9204      	str	r2, [sp, #16]
 8005a0a:	f7fa ff57 	bl	80008bc <KMS_LL_FLASH_Read>
      if (e_ret_status == CKR_OK)
 8005a0e:	4604      	mov	r4, r0
 8005a10:	b918      	cbnz	r0, 8005a1a <KMS_Objects_ImportBlob+0x1a2>
        if (size == 0UL)
 8005a12:	9a04      	ldr	r2, [sp, #16]
 8005a14:	b942      	cbnz	r2, 8005a28 <KMS_Objects_ImportBlob+0x1b0>
              pass_index += 1UL;
 8005a16:	f109 0901 	add.w	r9, r9, #1
    while ((fw_decrypted_total_size < (pBlobHeader->BlobSize)) && (e_ret_status == CKR_OK))
 8005a1a:	f8db 2008 	ldr.w	r2, [fp, #8]
 8005a1e:	4552      	cmp	r2, sl
 8005a20:	d926      	bls.n	8005a70 <KMS_Objects_ImportBlob+0x1f8>
 8005a22:	2c00      	cmp	r4, #0
 8005a24:	d0e2      	beq.n	80059ec <KMS_Objects_ImportBlob+0x174>
 8005a26:	e784      	b.n	8005932 <KMS_Objects_ImportBlob+0xba>
          e_ret_status = KMS_DecryptUpdate(aessession,
 8005a28:	ab06      	add	r3, sp, #24
 8005a2a:	9300      	str	r3, [sp, #0]
 8005a2c:	9902      	ldr	r1, [sp, #8]
 8005a2e:	9808      	ldr	r0, [sp, #32]
 8005a30:	9204      	str	r2, [sp, #16]
 8005a32:	462b      	mov	r3, r5
 8005a34:	f7fe f852 	bl	8003adc <KMS_DecryptUpdate>
          if ((e_ret_status == CKR_OK) && (fw_decrypted_chunk_size == size))
 8005a38:	4604      	mov	r4, r0
 8005a3a:	2800      	cmp	r0, #0
 8005a3c:	d1ed      	bne.n	8005a1a <KMS_Objects_ImportBlob+0x1a2>
 8005a3e:	9b06      	ldr	r3, [sp, #24]
 8005a40:	9a04      	ldr	r2, [sp, #16]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d1e9      	bne.n	8005a1a <KMS_Objects_ImportBlob+0x1a2>
            e_ret_status = KMS_DigestUpdate(digsession, pCtx->fw_decrypted_chunk, fw_decrypted_chunk_size);
 8005a46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005a48:	4629      	mov	r1, r5
 8005a4a:	f7fd fb67 	bl	800311c <KMS_DigestUpdate>
            if (e_ret_status == CKR_OK)
 8005a4e:	4604      	mov	r4, r0
 8005a50:	2800      	cmp	r0, #0
 8005a52:	d1e2      	bne.n	8005a1a <KMS_Objects_ImportBlob+0x1a2>
              pfw_source_address = &pfw_source_address[fw_decrypted_chunk_size];
 8005a54:	9a06      	ldr	r2, [sp, #24]
              (void)memset(pCtx->fw_decrypted_chunk, 0xff, fw_decrypted_chunk_size);
 8005a56:	21ff      	movs	r1, #255	@ 0xff
 8005a58:	4628      	mov	r0, r5
              pfw_source_address = &pfw_source_address[fw_decrypted_chunk_size];
 8005a5a:	4416      	add	r6, r2
              fw_decrypted_total_size += fw_decrypted_chunk_size;
 8005a5c:	4492      	add	sl, r2
              (void)memset(pCtx->fw_decrypted_chunk, 0xff, fw_decrypted_chunk_size);
 8005a5e:	f001 f8cd 	bl	8006bfc <memset>
 8005a62:	e7d8      	b.n	8005a16 <KMS_Objects_ImportBlob+0x19e>
      e_ret_status = KMS_LL_FLASH_Read(pCtx->fw_encrypted_chunk, pfw_source_address, size);
 8005a64:	f505 7300 	add.w	r3, r5, #512	@ 0x200
  pass_index = 0;
 8005a68:	4681      	mov	r9, r0
  uint32_t fw_decrypted_total_size = 0;
 8005a6a:	4682      	mov	sl, r0
      e_ret_status = KMS_LL_FLASH_Read(pCtx->fw_encrypted_chunk, pfw_source_address, size);
 8005a6c:	9302      	str	r3, [sp, #8]
 8005a6e:	e7d4      	b.n	8005a1a <KMS_Objects_ImportBlob+0x1a2>
    e_ret_status =  KMS_DecryptFinal(aessession, fw_tag_output, (CK_ULONG_PTR)(uint32_t)&fw_tag_len);
 8005a70:	9808      	ldr	r0, [sp, #32]
  if ((e_ret_status == CKR_OK))
 8005a72:	2c00      	cmp	r4, #0
 8005a74:	f47f af5d 	bne.w	8005932 <KMS_Objects_ImportBlob+0xba>
    fw_tag_len = KMS_BLOB_TAG_LEN; /* PKCS#11 - Section 5.2: Buffer handling compliance */
 8005a78:	2620      	movs	r6, #32
    e_ret_status =  KMS_DecryptFinal(aessession, fw_tag_output, (CK_ULONG_PTR)(uint32_t)&fw_tag_len);
 8005a7a:	aa07      	add	r2, sp, #28
 8005a7c:	a912      	add	r1, sp, #72	@ 0x48
    fw_tag_len = KMS_BLOB_TAG_LEN; /* PKCS#11 - Section 5.2: Buffer handling compliance */
 8005a7e:	9607      	str	r6, [sp, #28]
    e_ret_status =  KMS_DecryptFinal(aessession, fw_tag_output, (CK_ULONG_PTR)(uint32_t)&fw_tag_len);
 8005a80:	f7fe f8c8 	bl	8003c14 <KMS_DecryptFinal>
    if (e_ret_status == CKR_OK)
 8005a84:	4604      	mov	r4, r0
 8005a86:	2800      	cmp	r0, #0
 8005a88:	f47f af53 	bne.w	8005932 <KMS_Objects_ImportBlob+0xba>
      e_ret_status = KMS_DigestFinal(digsession, fw_tag_output, (CK_ULONG_PTR)(uint32_t)&fw_tag_len);
 8005a8c:	9809      	ldr	r0, [sp, #36]	@ 0x24
      fw_tag_len = KMS_BLOB_TAG_LEN; /* PKCS#11 - Section 5.2: Buffer handling compliance */
 8005a8e:	9607      	str	r6, [sp, #28]
      e_ret_status = KMS_DigestFinal(digsession, fw_tag_output, (CK_ULONG_PTR)(uint32_t)&fw_tag_len);
 8005a90:	aa07      	add	r2, sp, #28
 8005a92:	a912      	add	r1, sp, #72	@ 0x48
 8005a94:	f7fd fb70 	bl	8003178 <KMS_DigestFinal>
 8005a98:	4604      	mov	r4, r0
      if (e_ret_status == CKR_OK)
 8005a9a:	e74a      	b.n	8005932 <KMS_Objects_ImportBlob+0xba>
        p_next_magic++;
 8005a9c:	f108 0804 	add.w	r8, r8, #4
           && (e_ret_status == CKR_OK))
 8005aa0:	f8d8 2000 	ldr.w	r2, [r8]
 8005aa4:	491c      	ldr	r1, [pc, #112]	@ (8005b18 <KMS_Objects_ImportBlob+0x2a0>)
 8005aa6:	428a      	cmp	r2, r1
 8005aa8:	eb08 0706 	add.w	r7, r8, r6
 8005aac:	f000 80ac 	beq.w	8005c08 <KMS_Objects_ImportBlob+0x390>
           && (p_next_magic < (uint32_t *)(uint32_t)(&(pCtx->fw_decrypted_chunk[fw_decrypted_chunk_size])))
 8005ab0:	4598      	cmp	r8, r3
 8005ab2:	d3f3      	bcc.n	8005a9c <KMS_Objects_ImportBlob+0x224>
          e_ret_status = CKR_DATA_INVALID;
 8005ab4:	463e      	mov	r6, r7
 8005ab6:	e784      	b.n	80059c2 <KMS_Objects_ImportBlob+0x14a>
      else if (fw_decrypted_total_size < (pBlobHeader->BlobSize))
 8005ab8:	9b04      	ldr	r3, [sp, #16]
 8005aba:	4553      	cmp	r3, sl
 8005abc:	f240 808a 	bls.w	8005bd4 <KMS_Objects_ImportBlob+0x35c>
        (void)memcpy(&blobObject, pCtx->fw_decrypted_chunk + index_in_decrypted_chunk,
 8005ac0:	eba9 0207 	sub.w	r2, r9, r7
 8005ac4:	19e9      	adds	r1, r5, r7
 8005ac6:	a80d      	add	r0, sp, #52	@ 0x34
 8005ac8:	f001 f8a0 	bl	8006c0c <memcpy>
        if ((pBlobHeader->BlobSize - fw_decrypted_total_size) < fw_decrypted_chunk_size)
 8005acc:	9b04      	ldr	r3, [sp, #16]
        e_ret_status = read_next_chunk(pCtx,
 8005ace:	9907      	ldr	r1, [sp, #28]
        if ((pBlobHeader->BlobSize - fw_decrypted_total_size) < fw_decrypted_chunk_size)
 8005ad0:	eba3 030a 	sub.w	r3, r3, sl
 8005ad4:	4599      	cmp	r9, r3
          fw_decrypted_chunk_size = pBlobHeader->BlobSize - fw_decrypted_total_size;
 8005ad6:	bf88      	it	hi
 8005ad8:	9308      	strhi	r3, [sp, #32]
        size = fw_decrypted_chunk_size;
 8005ada:	9b08      	ldr	r3, [sp, #32]
        if (size < (sizeof(kms_obj_keyhead_no_blob_t) - bytes_copied_in_kms))
 8005adc:	f1c9 0914 	rsb	r9, r9, #20
 8005ae0:	444f      	add	r7, r9
 8005ae2:	42bb      	cmp	r3, r7
 8005ae4:	d376      	bcc.n	8005bd4 <KMS_Objects_ImportBlob+0x35c>
        e_ret_status = read_next_chunk(pCtx,
 8005ae6:	aa08      	add	r2, sp, #32
 8005ae8:	e9cd 5200 	strd	r5, r2, [sp]
 8005aec:	4628      	mov	r0, r5
 8005aee:	9a03      	ldr	r2, [sp, #12]
 8005af0:	f7ff fccd 	bl	800548e <read_next_chunk>
        if (e_ret_status != CKR_OK)
 8005af4:	4606      	mov	r6, r0
 8005af6:	2800      	cmp	r0, #0
 8005af8:	d16d      	bne.n	8005bd6 <KMS_Objects_ImportBlob+0x35e>
        pfw_source_address = &pfw_source_address[fw_decrypted_chunk_size];
 8005afa:	9b08      	ldr	r3, [sp, #32]
 8005afc:	9a03      	ldr	r2, [sp, #12]
        (void)memcpy((void *)((uint32_t *)tmp), pCtx->fw_decrypted_chunk,
 8005afe:	9805      	ldr	r0, [sp, #20]
        pfw_source_address = &pfw_source_address[fw_decrypted_chunk_size];
 8005b00:	441a      	add	r2, r3
        fw_decrypted_total_size += fw_decrypted_chunk_size;
 8005b02:	449a      	add	sl, r3
        (void)memcpy((void *)((uint32_t *)tmp), pCtx->fw_decrypted_chunk,
 8005b04:	ab0d      	add	r3, sp, #52	@ 0x34
        pfw_source_address = &pfw_source_address[fw_decrypted_chunk_size];
 8005b06:	9203      	str	r2, [sp, #12]
        (void)memcpy((void *)((uint32_t *)tmp), pCtx->fw_decrypted_chunk,
 8005b08:	4629      	mov	r1, r5
 8005b0a:	463a      	mov	r2, r7
 8005b0c:	4418      	add	r0, r3
 8005b0e:	f001 f87d 	bl	8006c0c <memcpy>
        index_in_decrypted_chunk = sizeof(kms_obj_keyhead_no_blob_t) - bytes_copied_in_kms ;
 8005b12:	e091      	b.n	8005c38 <KMS_Objects_ImportBlob+0x3c0>
 8005b14:	20000c48 	.word	0x20000c48
 8005b18:	b10b0240 	.word	0xb10b0240
      (void)memcpy(pBlob, &blobObject, sizeof(kms_obj_keyhead_no_blob_t));
 8005b1c:	ae0d      	add	r6, sp, #52	@ 0x34
 8005b1e:	4603      	mov	r3, r0
 8005b20:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8005b24:	4632      	mov	r2, r6
 8005b26:	ca03      	ldmia	r2!, {r0, r1}
 8005b28:	4562      	cmp	r2, ip
 8005b2a:	6018      	str	r0, [r3, #0]
 8005b2c:	6059      	str	r1, [r3, #4]
 8005b2e:	4616      	mov	r6, r2
 8005b30:	f103 0308 	add.w	r3, r3, #8
 8005b34:	d1f6      	bne.n	8005b24 <KMS_Objects_ImportBlob+0x2ac>
 8005b36:	6810      	ldr	r0, [r2, #0]
 8005b38:	6018      	str	r0, [r3, #0]
      bytes_copied_in_kms = 0;
 8005b3a:	2600      	movs	r6, #0
          tmp = (uint32_t)(&(pBlob->blobs[0]));
 8005b3c:	f104 0914 	add.w	r9, r4, #20
      while ((e_ret_status == CKR_OK) && (pBlob->blobs_size > bytes_copied_in_kms))
 8005b40:	68a3      	ldr	r3, [r4, #8]
 8005b42:	42b3      	cmp	r3, r6
 8005b44:	d9b6      	bls.n	8005ab4 <KMS_Objects_ImportBlob+0x23c>
        if ((fw_decrypted_chunk_size - index_in_decrypted_chunk) >= (pBlob->blobs_size - bytes_copied_in_kms))
 8005b46:	9a08      	ldr	r2, [sp, #32]
 8005b48:	1b9b      	subs	r3, r3, r6
 8005b4a:	1bd2      	subs	r2, r2, r7
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d317      	bcc.n	8005b80 <KMS_Objects_ImportBlob+0x308>
          tmp = (uint32_t)(&(pBlob->blobs[0]));
 8005b50:	f104 0014 	add.w	r0, r4, #20
          (void)memcpy((void *)((uint32_t *)(tmp)),
 8005b54:	461a      	mov	r2, r3
 8005b56:	19e9      	adds	r1, r5, r7
 8005b58:	4430      	add	r0, r6
 8005b5a:	f001 f857 	bl	8006c0c <memcpy>
          index_in_decrypted_chunk = index_in_decrypted_chunk + pBlob->blobs_size - bytes_copied_in_kms;
 8005b5e:	68a2      	ldr	r2, [r4, #8]
          e_ret_status = KMS_PlatfObjects_NvmStoreObject(pBlob->object_id,
 8005b60:	6920      	ldr	r0, [r4, #16]
 8005b62:	4621      	mov	r1, r4
          index_in_decrypted_chunk = index_in_decrypted_chunk + pBlob->blobs_size - bytes_copied_in_kms;
 8005b64:	4417      	add	r7, r2
          e_ret_status = KMS_PlatfObjects_NvmStoreObject(pBlob->object_id,
 8005b66:	3214      	adds	r2, #20
 8005b68:	f000 f9f6 	bl	8005f58 <KMS_PlatfObjects_NvmStoreObject>
          index_in_decrypted_chunk = index_in_decrypted_chunk + pBlob->blobs_size - bytes_copied_in_kms;
 8005b6c:	1bbf      	subs	r7, r7, r6
          e_ret_status = KMS_PlatfObjects_NvmStoreObject(pBlob->object_id,
 8005b6e:	9002      	str	r0, [sp, #8]
          KMS_Free(session, pBlob);
 8005b70:	4621      	mov	r1, r4
 8005b72:	9807      	ldr	r0, [sp, #28]
 8005b74:	f7fe ffe2 	bl	8004b3c <KMS_Free>
          p_next_magic = (uint32_t *)(uint32_t) &(pCtx->fw_decrypted_chunk[index_in_decrypted_chunk]);
 8005b78:	eb05 0807 	add.w	r8, r5, r7
          pBlob = NULL_PTR;
 8005b7c:	2400      	movs	r4, #0
          break;
 8005b7e:	e799      	b.n	8005ab4 <KMS_Objects_ImportBlob+0x23c>
        else if (fw_decrypted_total_size < (pBlobHeader->BlobSize))
 8005b80:	f8db 3008 	ldr.w	r3, [fp, #8]
 8005b84:	4553      	cmp	r3, sl
 8005b86:	d920      	bls.n	8005bca <KMS_Objects_ImportBlob+0x352>
          (void)memcpy((void *)((uint32_t *)(tmp)),
 8005b88:	19e9      	adds	r1, r5, r7
 8005b8a:	eb09 0006 	add.w	r0, r9, r6
 8005b8e:	f001 f83d 	bl	8006c0c <memcpy>
          if ((pBlobHeader->BlobSize - fw_decrypted_total_size) < fw_decrypted_chunk_size)
 8005b92:	f8db 3008 	ldr.w	r3, [fp, #8]
          bytes_copied_in_kms += fw_decrypted_chunk_size - index_in_decrypted_chunk;
 8005b96:	9a08      	ldr	r2, [sp, #32]
          e_ret_status = read_next_chunk(pCtx,
 8005b98:	9907      	ldr	r1, [sp, #28]
          if ((pBlobHeader->BlobSize - fw_decrypted_total_size) < fw_decrypted_chunk_size)
 8005b9a:	eba3 030a 	sub.w	r3, r3, sl
 8005b9e:	429a      	cmp	r2, r3
            fw_decrypted_chunk_size = pBlobHeader->BlobSize - fw_decrypted_total_size;
 8005ba0:	bf88      	it	hi
 8005ba2:	9308      	strhi	r3, [sp, #32]
          e_ret_status = read_next_chunk(pCtx,
 8005ba4:	ab08      	add	r3, sp, #32
 8005ba6:	4416      	add	r6, r2
 8005ba8:	e9cd 5300 	strd	r5, r3, [sp]
 8005bac:	9a03      	ldr	r2, [sp, #12]
 8005bae:	9b08      	ldr	r3, [sp, #32]
 8005bb0:	4628      	mov	r0, r5
          bytes_copied_in_kms += fw_decrypted_chunk_size - index_in_decrypted_chunk;
 8005bb2:	1bf6      	subs	r6, r6, r7
          e_ret_status = read_next_chunk(pCtx,
 8005bb4:	f7ff fc6b 	bl	800548e <read_next_chunk>
          if (e_ret_status != CKR_OK)
 8005bb8:	b950      	cbnz	r0, 8005bd0 <KMS_Objects_ImportBlob+0x358>
          pfw_source_address = &pfw_source_address[fw_decrypted_chunk_size];
 8005bba:	9b08      	ldr	r3, [sp, #32]
 8005bbc:	9a03      	ldr	r2, [sp, #12]
 8005bbe:	441a      	add	r2, r3
 8005bc0:	9203      	str	r2, [sp, #12]
          fw_decrypted_total_size += fw_decrypted_chunk_size;
 8005bc2:	449a      	add	sl, r3
          index_in_decrypted_chunk = 0;
 8005bc4:	4607      	mov	r7, r0
                                 pCtx->fw_decrypted_chunk,
 8005bc6:	46a8      	mov	r8, r5
 8005bc8:	e7ba      	b.n	8005b40 <KMS_Objects_ImportBlob+0x2c8>
          e_ret_status = CKR_DATA_INVALID;
 8005bca:	2320      	movs	r3, #32
 8005bcc:	9302      	str	r3, [sp, #8]
 8005bce:	e771      	b.n	8005ab4 <KMS_Objects_ImportBlob+0x23c>
          e_ret_status = read_next_chunk(pCtx,
 8005bd0:	9002      	str	r0, [sp, #8]
 8005bd2:	e76f      	b.n	8005ab4 <KMS_Objects_ImportBlob+0x23c>
          e_ret_status = CKR_DATA_INVALID;
 8005bd4:	2620      	movs	r6, #32
  if (pBlob != NULL_PTR)
 8005bd6:	b914      	cbnz	r4, 8005bde <KMS_Objects_ImportBlob+0x366>
 8005bd8:	e00e      	b.n	8005bf8 <KMS_Objects_ImportBlob+0x380>
 8005bda:	9e02      	ldr	r6, [sp, #8]
 8005bdc:	b11c      	cbz	r4, 8005be6 <KMS_Objects_ImportBlob+0x36e>
    KMS_Free(session, pBlob);
 8005bde:	9807      	ldr	r0, [sp, #28]
 8005be0:	4621      	mov	r1, r4
 8005be2:	f7fe ffab 	bl	8004b3c <KMS_Free>
  if (e_ret_status == CKR_OK)
 8005be6:	b93e      	cbnz	r6, 8005bf8 <KMS_Objects_ImportBlob+0x380>
    fw_tag_len = KMS_BLOB_TAG_LEN; /* PKCS#11 - Section 5.2: Buffer handling compliance */
 8005be8:	2320      	movs	r3, #32
    e_ret_status =  KMS_DecryptFinal(session, fw_tag_output, (CK_ULONG_PTR)(uint32_t)&fw_tag_len);
 8005bea:	9807      	ldr	r0, [sp, #28]
    fw_tag_len = KMS_BLOB_TAG_LEN; /* PKCS#11 - Section 5.2: Buffer handling compliance */
 8005bec:	9309      	str	r3, [sp, #36]	@ 0x24
    e_ret_status =  KMS_DecryptFinal(session, fw_tag_output, (CK_ULONG_PTR)(uint32_t)&fw_tag_len);
 8005bee:	aa09      	add	r2, sp, #36	@ 0x24
 8005bf0:	a912      	add	r1, sp, #72	@ 0x48
 8005bf2:	f7fe f80f 	bl	8003c14 <KMS_DecryptFinal>
 8005bf6:	4606      	mov	r6, r0
  (void)KMS_CloseSession(session);
 8005bf8:	9807      	ldr	r0, [sp, #28]
 8005bfa:	f7fe fe07 	bl	800480c <KMS_CloseSession>
  return e_ret_status;
 8005bfe:	e674      	b.n	80058ea <KMS_Objects_ImportBlob+0x72>
    return CKR_FUNCTION_FAILED;
 8005c00:	2606      	movs	r6, #6
 8005c02:	e672      	b.n	80058ea <KMS_Objects_ImportBlob+0x72>
 8005c04:	9e02      	ldr	r6, [sp, #8]
 8005c06:	e7e6      	b.n	8005bd6 <KMS_Objects_ImportBlob+0x35e>
        && (p_next_magic < (uint32_t *)(uint32_t)(&(pCtx->fw_decrypted_chunk[fw_decrypted_chunk_size])))
 8005c08:	4598      	cmp	r8, r3
 8005c0a:	f4bf af53 	bcs.w	8005ab4 <KMS_Objects_ImportBlob+0x23c>
      if ((fw_decrypted_chunk_size - index_in_decrypted_chunk) >= sizeof(kms_obj_keyhead_no_blob_t))
 8005c0e:	eba9 0307 	sub.w	r3, r9, r7
 8005c12:	2b13      	cmp	r3, #19
 8005c14:	9305      	str	r3, [sp, #20]
 8005c16:	f67f af4f 	bls.w	8005ab8 <KMS_Objects_ImportBlob+0x240>
        (void)memcpy(&blobObject, pCtx->fw_decrypted_chunk + index_in_decrypted_chunk,
 8005c1a:	19eb      	adds	r3, r5, r7
 8005c1c:	aa0d      	add	r2, sp, #52	@ 0x34
 8005c1e:	f103 0610 	add.w	r6, r3, #16
 8005c22:	6818      	ldr	r0, [r3, #0]
 8005c24:	6859      	ldr	r1, [r3, #4]
 8005c26:	4614      	mov	r4, r2
 8005c28:	c403      	stmia	r4!, {r0, r1}
 8005c2a:	3308      	adds	r3, #8
 8005c2c:	42b3      	cmp	r3, r6
 8005c2e:	4622      	mov	r2, r4
 8005c30:	d1f7      	bne.n	8005c22 <KMS_Objects_ImportBlob+0x3aa>
 8005c32:	6818      	ldr	r0, [r3, #0]
 8005c34:	6020      	str	r0, [r4, #0]
        index_in_decrypted_chunk = index_in_decrypted_chunk + sizeof(kms_obj_keyhead_no_blob_t);
 8005c36:	3714      	adds	r7, #20
      pBlob = KMS_Alloc(session, sizeof(kms_obj_keyhead_no_blob_t) + blobObject.blobs_size);
 8005c38:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005c3a:	9807      	ldr	r0, [sp, #28]
 8005c3c:	3114      	adds	r1, #20
 8005c3e:	f7fe ff59 	bl	8004af4 <KMS_Alloc>
      if (pBlob == NULL_PTR)
 8005c42:	4604      	mov	r4, r0
 8005c44:	2800      	cmp	r0, #0
 8005c46:	f47f af69 	bne.w	8005b1c <KMS_Objects_ImportBlob+0x2a4>
        (void)KMS_CloseSession(session);
 8005c4a:	9807      	ldr	r0, [sp, #28]
 8005c4c:	f7fe fdde 	bl	800480c <KMS_CloseSession>
        return CKR_DEVICE_MEMORY;
 8005c50:	2631      	movs	r6, #49	@ 0x31
 8005c52:	e64a      	b.n	80058ea <KMS_Objects_ImportBlob+0x72>

08005c54 <KMS_Objects_LockKeys>:
  * @retval CKR_OK
  *         CKR_ARGUMENTS_BAD
  *         CKR_FUNCTION_NOT_SUPPORTED
  */
CK_RV KMS_Objects_LockKeys(CK_OBJECT_HANDLE_PTR pKeys, CK_ULONG ulCount)
{
 8005c54:	b570      	push	{r4, r5, r6, lr}
 8005c56:	460d      	mov	r5, r1
#if defined(KMS_SE_LOCK_KEYS)
  if ((pKeys == NULL_PTR) || (ulCount == 0UL))
 8005c58:	4606      	mov	r6, r0
 8005c5a:	b150      	cbz	r0, 8005c72 <KMS_Objects_LockKeys+0x1e>
 8005c5c:	b149      	cbz	r1, 8005c72 <KMS_Objects_LockKeys+0x1e>
  {
    return CKR_ARGUMENTS_BAD;
  }
  for (uint32_t i = 0; i < ulCount; i++)
 8005c5e:	2400      	movs	r4, #0
  {
    (void)KMS_LockKeyHandle(pKeys[i]);
 8005c60:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
  for (uint32_t i = 0; i < ulCount; i++)
 8005c64:	3401      	adds	r4, #1
    (void)KMS_LockKeyHandle(pKeys[i]);
 8005c66:	f7ff fc51 	bl	800550c <KMS_LockKeyHandle>
  for (uint32_t i = 0; i < ulCount; i++)
 8005c6a:	42a5      	cmp	r5, r4
 8005c6c:	d1f8      	bne.n	8005c60 <KMS_Objects_LockKeys+0xc>
  }
  return CKR_OK;
 8005c6e:	2000      	movs	r0, #0
#else /* KMS_SE_LOCK_KEYS */
  return CKR_FUNCTION_NOT_SUPPORTED;
#endif /* KMS_SE_LOCK_KEYS */
}
 8005c70:	bd70      	pop	{r4, r5, r6, pc}
    return CKR_ARGUMENTS_BAD;
 8005c72:	2007      	movs	r0, #7
 8005c74:	e7fc      	b.n	8005c70 <KMS_Objects_LockKeys+0x1c>

08005c76 <KMS_Objects_LockServices>:
  * @retval CKR_OK
  *         CKR_ARGUMENTS_BAD
  *         CKR_FUNCTION_NOT_SUPPORTED
  */
CK_RV KMS_Objects_LockServices(CK_ULONG_PTR pServices, CK_ULONG ulCount)
{
 8005c76:	b570      	push	{r4, r5, r6, lr}
 8005c78:	460d      	mov	r5, r1
#if defined(KMS_SE_LOCK_SERVICES)
  if ((pServices == NULL_PTR) || (ulCount == 0UL))
 8005c7a:	4606      	mov	r6, r0
 8005c7c:	b150      	cbz	r0, 8005c94 <KMS_Objects_LockServices+0x1e>
 8005c7e:	b149      	cbz	r1, 8005c94 <KMS_Objects_LockServices+0x1e>
  {
    return CKR_ARGUMENTS_BAD;
  }
  for (uint32_t i = 0; i < ulCount; i++)
 8005c80:	2400      	movs	r4, #0
  {
    (void)KMS_LockServiceFctId(pServices[i]);
 8005c82:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
  for (uint32_t i = 0; i < ulCount; i++)
 8005c86:	3401      	adds	r4, #1
    (void)KMS_LockServiceFctId(pServices[i]);
 8005c88:	f7ff fcb0 	bl	80055ec <KMS_LockServiceFctId>
  for (uint32_t i = 0; i < ulCount; i++)
 8005c8c:	42a5      	cmp	r5, r4
 8005c8e:	d1f8      	bne.n	8005c82 <KMS_Objects_LockServices+0xc>
  }
  return CKR_OK;
 8005c90:	2000      	movs	r0, #0
#else /* KMS_SE_LOCK_SERVICES */
  return CKR_FUNCTION_NOT_SUPPORTED;
#endif /* KMS_SE_LOCK_SERVICES */
}
 8005c92:	bd70      	pop	{r4, r5, r6, pc}
    return CKR_ARGUMENTS_BAD;
 8005c94:	2007      	movs	r0, #7
 8005c96:	e7fc      	b.n	8005c92 <KMS_Objects_LockServices+0x1c>

08005c98 <KMS_Objects_CreateNStoreBlobFromTemplates>:
                                                CK_ATTRIBUTE_PTR pTemplate1,
                                                CK_ULONG ulCount1,
                                                CK_ATTRIBUTE_PTR pTemplate2,
                                                CK_ULONG ulCount2,
                                                CK_OBJECT_HANDLE_PTR phObject)
{
 8005c98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c9c:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 8005ca0:	9001      	str	r0, [sp, #4]
 8005ca2:	4692      	mov	sl, r2
 8005ca4:	461c      	mov	r4, r3
  uint32_t offset;
  uint32_t *ptr;
  uint32_t tmp;
  kms_obj_keyhead_no_blob_t *p_blob;

  if ((pTemplate1 == NULL_PTR) || (ulCount1 == 0UL) || (phObject == NULL_PTR)
 8005ca6:	460e      	mov	r6, r1
 8005ca8:	b131      	cbz	r1, 8005cb8 <KMS_Objects_CreateNStoreBlobFromTemplates+0x20>
 8005caa:	b12a      	cbz	r2, 8005cb8 <KMS_Objects_CreateNStoreBlobFromTemplates+0x20>
 8005cac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005cae:	b11b      	cbz	r3, 8005cb8 <KMS_Objects_CreateNStoreBlobFromTemplates+0x20>
      || ((pTemplate2 == NULL_PTR) && (ulCount2 != 0UL)) || ((pTemplate2 != NULL_PTR) && (ulCount2 == 0UL)))
 8005cb0:	b924      	cbnz	r4, 8005cbc <KMS_Objects_CreateNStoreBlobFromTemplates+0x24>
 8005cb2:	f1b8 0f00 	cmp.w	r8, #0
 8005cb6:	d004      	beq.n	8005cc2 <KMS_Objects_CreateNStoreBlobFromTemplates+0x2a>
  {
    return CKR_ARGUMENTS_BAD;
 8005cb8:	2407      	movs	r4, #7
 8005cba:	e086      	b.n	8005dca <KMS_Objects_CreateNStoreBlobFromTemplates+0x132>
      || ((pTemplate2 == NULL_PTR) && (ulCount2 != 0UL)) || ((pTemplate2 != NULL_PTR) && (ulCount2 == 0UL)))
 8005cbc:	f1b8 0f00 	cmp.w	r8, #0
 8005cc0:	d0fa      	beq.n	8005cb8 <KMS_Objects_CreateNStoreBlobFromTemplates+0x20>
 8005cc2:	210c      	movs	r1, #12
 8005cc4:	fb01 610a 	mla	r1, r1, sl, r6
{
 8005cc8:	4632      	mov	r2, r6
 8005cca:	2500      	movs	r5, #0
  /* Calculate blob size */
  blob_size = 0;
  for (uint32_t i = 0; i < ulCount1; i++)
  {
    /* pValue size align on 4 bytes */
    blob_size += (pTemplate1[i].ulValueLen & 0xFFFFFFFCUL)
 8005ccc:	6893      	ldr	r3, [r2, #8]
                 + (((pTemplate1[i].ulValueLen & 0x3UL) != 0UL) ? 4UL : 0UL);
 8005cce:	f013 0003 	ands.w	r0, r3, #3
 8005cd2:	bf18      	it	ne
 8005cd4:	2001      	movne	r0, #1
    blob_size += (pTemplate1[i].ulValueLen & 0xFFFFFFFCUL)
 8005cd6:	f023 0303 	bic.w	r3, r3, #3
  for (uint32_t i = 0; i < ulCount1; i++)
 8005cda:	320c      	adds	r2, #12
    blob_size += (pTemplate1[i].ulValueLen & 0xFFFFFFFCUL)
 8005cdc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
  for (uint32_t i = 0; i < ulCount1; i++)
 8005ce0:	4291      	cmp	r1, r2
    blob_size += (pTemplate1[i].ulValueLen & 0xFFFFFFFCUL)
 8005ce2:	441d      	add	r5, r3
  for (uint32_t i = 0; i < ulCount1; i++)
 8005ce4:	d1f2      	bne.n	8005ccc <KMS_Objects_CreateNStoreBlobFromTemplates+0x34>
  }

  /* Add for each attribute type & length fields */
  blob_size += ulCount1 * 2UL * sizeof(uint32_t);
 8005ce6:	eb05 05ca 	add.w	r5, r5, sl, lsl #3
  if ((ulCount2 != 0UL) && (pTemplate2 != NULL_PTR))
 8005cea:	f1b8 0f00 	cmp.w	r8, #0
 8005cee:	d013      	beq.n	8005d18 <KMS_Objects_CreateNStoreBlobFromTemplates+0x80>
 8005cf0:	b194      	cbz	r4, 8005d18 <KMS_Objects_CreateNStoreBlobFromTemplates+0x80>
 8005cf2:	210c      	movs	r1, #12
 8005cf4:	4622      	mov	r2, r4
 8005cf6:	fb01 4108 	mla	r1, r1, r8, r4
  {
    for (uint32_t i = 0; i < ulCount2; i++)
    {
      /* pValue size align on 4 bytes */
      blob_size += (pTemplate2[i].ulValueLen & 0xFFFFFFFCUL)
 8005cfa:	6893      	ldr	r3, [r2, #8]
                   + (((pTemplate2[i].ulValueLen & 0x3UL) != 0UL) ? 4UL : 0UL);
 8005cfc:	f013 0003 	ands.w	r0, r3, #3
 8005d00:	bf18      	it	ne
 8005d02:	2001      	movne	r0, #1
      blob_size += (pTemplate2[i].ulValueLen & 0xFFFFFFFCUL)
 8005d04:	f023 0303 	bic.w	r3, r3, #3
    for (uint32_t i = 0; i < ulCount2; i++)
 8005d08:	320c      	adds	r2, #12
      blob_size += (pTemplate2[i].ulValueLen & 0xFFFFFFFCUL)
 8005d0a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    for (uint32_t i = 0; i < ulCount2; i++)
 8005d0e:	4291      	cmp	r1, r2
      blob_size += (pTemplate2[i].ulValueLen & 0xFFFFFFFCUL)
 8005d10:	441d      	add	r5, r3
    for (uint32_t i = 0; i < ulCount2; i++)
 8005d12:	d1f2      	bne.n	8005cfa <KMS_Objects_CreateNStoreBlobFromTemplates+0x62>
    }
    /* Add for each attribute type & length fields */
    blob_size += ulCount2 * 2UL * sizeof(uint32_t);
 8005d14:	eb05 05c8 	add.w	r5, r5, r8, lsl #3
  }

  /* Allocate blob object */
  p_blob = (kms_obj_keyhead_no_blob_t *)KMS_Alloc(hSession, sizeof(kms_obj_keyhead_no_blob_t) + blob_size);
 8005d18:	9801      	ldr	r0, [sp, #4]
 8005d1a:	f105 0114 	add.w	r1, r5, #20
 8005d1e:	f7fe fee9 	bl	8004af4 <KMS_Alloc>
  if (p_blob == NULL_PTR)
 8005d22:	4607      	mov	r7, r0
 8005d24:	2800      	cmp	r0, #0
 8005d26:	d054      	beq.n	8005dd2 <KMS_Objects_CreateNStoreBlobFromTemplates+0x13a>
  {
    e_ret_status = CKR_DEVICE_MEMORY;
  }
  else
  {
    p_blob->version = KMS_ABI_VERSION_CK_2_40;
 8005d28:	4b2b      	ldr	r3, [pc, #172]	@ (8005dd8 <KMS_Objects_CreateNStoreBlobFromTemplates+0x140>)
 8005d2a:	6003      	str	r3, [r0, #0]
    p_blob->configuration = KMS_ABI_CONFIG_KEYHEAD;
 8005d2c:	f46f 720f 	mvn.w	r2, #572	@ 0x23c
 8005d30:	4413      	add	r3, r2
    p_blob->blobs_size = blob_size;
 8005d32:	e9c0 3501 	strd	r3, r5, [r0, #4]
    p_blob->blobs_count = ulCount1 + ulCount2;
    p_blob->object_id = KMS_HANDLE_KEY_NOT_KNOWN;    /* Updated when inserting object in NVM / VM */
 8005d36:	2200      	movs	r2, #0
    p_blob->blobs_count = ulCount1 + ulCount2;
 8005d38:	eb0a 0308 	add.w	r3, sl, r8
 8005d3c:	eb0a 054a 	add.w	r5, sl, sl, lsl #1
 8005d40:	60c3      	str	r3, [r0, #12]
    p_blob->object_id = KMS_HANDLE_KEY_NOT_KNOWN;    /* Updated when inserting object in NVM / VM */
 8005d42:	6102      	str	r2, [r0, #16]

    offset = 0;
    tmp = (uint32_t)(p_blob);
    ptr = (uint32_t *)(tmp + sizeof(kms_obj_keyhead_no_blob_t));
 8005d44:	f100 0b14 	add.w	fp, r0, #20
 8005d48:	4691      	mov	r9, r2
    offset = 0;
 8005d4a:	4692      	mov	sl, r2

    /* Copy Template in blob, size and pValue are reversed, memcpy is impossible */
    for (uint32_t i = 0; i < ulCount1; i++)
    {
      ptr[(3UL * i) + offset] = pTemplate1[i].type;
 8005d4c:	eb0a 0009 	add.w	r0, sl, r9
 8005d50:	6832      	ldr	r2, [r6, #0]
 8005d52:	f84b 2020 	str.w	r2, [fp, r0, lsl #2]
      ptr[(3UL * i) + 1UL + offset] = pTemplate1[i].ulValueLen;
 8005d56:	eb0b 0180 	add.w	r1, fp, r0, lsl #2
 8005d5a:	68b2      	ldr	r2, [r6, #8]
 8005d5c:	604a      	str	r2, [r1, #4]
      (void)memcpy((uint8_t *) & (ptr[(3UL * i) + 2UL + offset]), (uint8_t *)(pTemplate1[i].pValue),
 8005d5e:	4608      	mov	r0, r1
 8005d60:	3008      	adds	r0, #8
 8005d62:	6871      	ldr	r1, [r6, #4]
 8005d64:	f000 ff52 	bl	8006c0c <memcpy>
                   pTemplate1[i].ulValueLen);
      offset += (pTemplate1[i].ulValueLen - 1UL) / 4UL;
 8005d68:	68b2      	ldr	r2, [r6, #8]
    for (uint32_t i = 0; i < ulCount1; i++)
 8005d6a:	f109 0903 	add.w	r9, r9, #3
      offset += (pTemplate1[i].ulValueLen - 1UL) / 4UL;
 8005d6e:	3a01      	subs	r2, #1
    for (uint32_t i = 0; i < ulCount1; i++)
 8005d70:	454d      	cmp	r5, r9
      offset += (pTemplate1[i].ulValueLen - 1UL) / 4UL;
 8005d72:	eb0a 0a92 	add.w	sl, sl, r2, lsr #2
    for (uint32_t i = 0; i < ulCount1; i++)
 8005d76:	f106 060c 	add.w	r6, r6, #12
 8005d7a:	d1e7      	bne.n	8005d4c <KMS_Objects_CreateNStoreBlobFromTemplates+0xb4>
    }

    /* Object template #2 management when required by the caller */
    if ((ulCount2 != 0UL) && (pTemplate2 != NULL_PTR))
 8005d7c:	f1b8 0f00 	cmp.w	r8, #0
 8005d80:	d01a      	beq.n	8005db8 <KMS_Objects_CreateNStoreBlobFromTemplates+0x120>
 8005d82:	b1cc      	cbz	r4, 8005db8 <KMS_Objects_CreateNStoreBlobFromTemplates+0x120>
 8005d84:	260c      	movs	r6, #12
 8005d86:	fb06 4608 	mla	r6, r6, r8, r4
    {
      for (uint32_t i = 0; i < ulCount2; i++)
      {
        ptr[(3UL * (i + ulCount1)) + offset] = pTemplate2[i].type;
 8005d8a:	eb05 000a 	add.w	r0, r5, sl
 8005d8e:	6822      	ldr	r2, [r4, #0]
 8005d90:	f84b 2020 	str.w	r2, [fp, r0, lsl #2]
        ptr[(3UL * (i + ulCount1)) + 1UL + offset] = pTemplate2[i].ulValueLen;
 8005d94:	eb0b 0180 	add.w	r1, fp, r0, lsl #2
 8005d98:	68a2      	ldr	r2, [r4, #8]
 8005d9a:	604a      	str	r2, [r1, #4]
        (void)memcpy((uint8_t *) & (ptr[(3UL * (i + ulCount1)) + 2UL + offset]), (uint8_t *)(pTemplate2[i].pValue),
 8005d9c:	4608      	mov	r0, r1
 8005d9e:	3008      	adds	r0, #8
 8005da0:	6861      	ldr	r1, [r4, #4]
 8005da2:	f000 ff33 	bl	8006c0c <memcpy>
                     pTemplate2[i].ulValueLen);
        offset += (pTemplate2[i].ulValueLen - 1UL) / 4UL;
 8005da6:	68a2      	ldr	r2, [r4, #8]
      for (uint32_t i = 0; i < ulCount2; i++)
 8005da8:	340c      	adds	r4, #12
        offset += (pTemplate2[i].ulValueLen - 1UL) / 4UL;
 8005daa:	3a01      	subs	r2, #1
      for (uint32_t i = 0; i < ulCount2; i++)
 8005dac:	42a6      	cmp	r6, r4
        offset += (pTemplate2[i].ulValueLen - 1UL) / 4UL;
 8005dae:	eb0a 0a92 	add.w	sl, sl, r2, lsr #2
      for (uint32_t i = 0; i < ulCount2; i++)
 8005db2:	f105 0503 	add.w	r5, r5, #3
 8005db6:	d1e8      	bne.n	8005d8a <KMS_Objects_CreateNStoreBlobFromTemplates+0xf2>
      }
    }

    e_ret_status = KMS_PlatfObjects_AllocateAndStore(p_blob, phObject);
 8005db8:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005dba:	4638      	mov	r0, r7
 8005dbc:	f000 f8e6 	bl	8005f8c <KMS_PlatfObjects_AllocateAndStore>
    KMS_Free(hSession, p_blob);
 8005dc0:	4639      	mov	r1, r7
    e_ret_status = KMS_PlatfObjects_AllocateAndStore(p_blob, phObject);
 8005dc2:	4604      	mov	r4, r0
    KMS_Free(hSession, p_blob);
 8005dc4:	9801      	ldr	r0, [sp, #4]
 8005dc6:	f7fe feb9 	bl	8004b3c <KMS_Free>
  }

  return e_ret_status;
}
 8005dca:	4620      	mov	r0, r4
 8005dcc:	b003      	add	sp, #12
 8005dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e_ret_status = CKR_DEVICE_MEMORY;
 8005dd2:	2431      	movs	r4, #49	@ 0x31
 8005dd4:	e7f9      	b.n	8005dca <KMS_Objects_CreateNStoreBlobFromTemplates+0x132>
 8005dd6:	bf00      	nop
 8005dd8:	b10b0240 	.word	0xb10b0240

08005ddc <KMS_Objects_CreateNStoreBlobForAES>:
                                         uint8_t *pKey,
                                         uint32_t keySize,
                                         CK_ATTRIBUTE_PTR pTemplate,
                                         CK_ULONG ulCount,
                                         CK_OBJECT_HANDLE_PTR phObject)
{
 8005ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005de0:	b08c      	sub	sp, #48	@ 0x30
 8005de2:	e9dd 9a14 	ldrd	r9, sl, [sp, #80]	@ 0x50
 8005de6:	4606      	mov	r6, r0
 8005de8:	4614      	mov	r4, r2
 8005dea:	461f      	mov	r7, r3
   */
  CK_RV e_ret_status;
  CK_ATTRIBUTE template[3];
  uint32_t *trans_key;

  if ((pKey == NULL_PTR) || (keySize == 0UL) || (phObject == NULL_PTR)
 8005dec:	4688      	mov	r8, r1
 8005dee:	b139      	cbz	r1, 8005e00 <KMS_Objects_CreateNStoreBlobForAES+0x24>
 8005df0:	b132      	cbz	r2, 8005e00 <KMS_Objects_CreateNStoreBlobForAES+0x24>
 8005df2:	f1ba 0f00 	cmp.w	sl, #0
 8005df6:	d003      	beq.n	8005e00 <KMS_Objects_CreateNStoreBlobForAES+0x24>
      || ((pTemplate == NULL_PTR) && (ulCount != 0UL))
 8005df8:	b923      	cbnz	r3, 8005e04 <KMS_Objects_CreateNStoreBlobForAES+0x28>
 8005dfa:	f1b9 0f00 	cmp.w	r9, #0
 8005dfe:	d004      	beq.n	8005e0a <KMS_Objects_CreateNStoreBlobForAES+0x2e>
      || ((pTemplate != NULL_PTR) && (ulCount == 0UL)))
  {
    e_ret_status = CKR_ARGUMENTS_BAD;
 8005e00:	2407      	movs	r4, #7
 8005e02:	e02a      	b.n	8005e5a <KMS_Objects_CreateNStoreBlobForAES+0x7e>
      || ((pTemplate != NULL_PTR) && (ulCount == 0UL)))
 8005e04:	f1b9 0f00 	cmp.w	r9, #0
 8005e08:	d0fa      	beq.n	8005e00 <KMS_Objects_CreateNStoreBlobForAES+0x24>
  }
  else
  {
    trans_key = KMS_Alloc(hSession, keySize); /* AES keys shall be multiple of 4 length */
 8005e0a:	4621      	mov	r1, r4
 8005e0c:	4630      	mov	r0, r6
 8005e0e:	f7fe fe71 	bl	8004af4 <KMS_Alloc>
    if (trans_key == NULL_PTR)
 8005e12:	4605      	mov	r5, r0
 8005e14:	b328      	cbz	r0, 8005e62 <KMS_Objects_CreateNStoreBlobForAES+0x86>
      e_ret_status = CKR_DEVICE_MEMORY;
    }
    else
    {
      /* Convert key from u8 to u32 */
      KMS_Objects_u8ptr_2_BlobU32(pKey, keySize, trans_key);
 8005e16:	4602      	mov	r2, r0
 8005e18:	4621      	mov	r1, r4
 8005e1a:	4640      	mov	r0, r8
 8005e1c:	f7ff fcb6 	bl	800578c <KMS_Objects_u8ptr_2_BlobU32>
  pTemp->type = Type;
 8005e20:	2300      	movs	r3, #0
 8005e22:	9303      	str	r3, [sp, #12]
  pTemp->pValue = pValue;
 8005e24:	4b10      	ldr	r3, [pc, #64]	@ (8005e68 <KMS_Objects_CreateNStoreBlobForAES+0x8c>)
 8005e26:	9304      	str	r3, [sp, #16]
  pTemp->type = Type;
 8005e28:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005e2c:	2304      	movs	r3, #4
 8005e2e:	e9cd 3205 	strd	r3, r2, [sp, #20]
  pTemp->pValue = pValue;
 8005e32:	4a0e      	ldr	r2, [pc, #56]	@ (8005e6c <KMS_Objects_CreateNStoreBlobForAES+0x90>)
  pTemp->ulValueLen = ulValueLen;
 8005e34:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005e36:	e9cd 2307 	strd	r2, r3, [sp, #28]
  pTemp->type = Type;
 8005e3a:	2311      	movs	r3, #17
  pTemp->pValue = pValue;
 8005e3c:	e9cd 3509 	strd	r3, r5, [sp, #36]	@ 0x24
      fill_TLV(&(template[0]), CKA_CLASS, (void *)&vCKO_SECRET_KEY, sizeof(CK_OBJECT_CLASS));
      fill_TLV(&(template[1]), CKA_KEY_TYPE, (void *)&vCKK_AES, sizeof(CK_KEY_TYPE));
      fill_TLV(&(template[2]), CKA_VALUE, trans_key, keySize);

      /* Create and store blob object including additional user template */
      e_ret_status = KMS_Objects_CreateNStoreBlobFromTemplates(hSession,
 8005e40:	a903      	add	r1, sp, #12
 8005e42:	e9cd 9a00 	strd	r9, sl, [sp]
 8005e46:	463b      	mov	r3, r7
 8005e48:	2203      	movs	r2, #3
 8005e4a:	4630      	mov	r0, r6
 8005e4c:	f7ff ff24 	bl	8005c98 <KMS_Objects_CreateNStoreBlobFromTemplates>
                                                               3,
                                                               pTemplate,
                                                               ulCount,
                                                               phObject);

      KMS_Free(hSession, trans_key);
 8005e50:	4629      	mov	r1, r5
      e_ret_status = KMS_Objects_CreateNStoreBlobFromTemplates(hSession,
 8005e52:	4604      	mov	r4, r0
      KMS_Free(hSession, trans_key);
 8005e54:	4630      	mov	r0, r6
 8005e56:	f7fe fe71 	bl	8004b3c <KMS_Free>
    }
  }
  return e_ret_status;
}
 8005e5a:	4620      	mov	r0, r4
 8005e5c:	b00c      	add	sp, #48	@ 0x30
 8005e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      e_ret_status = CKR_DEVICE_MEMORY;
 8005e62:	2431      	movs	r4, #49	@ 0x31
  return e_ret_status;
 8005e64:	e7f9      	b.n	8005e5a <KMS_Objects_CreateNStoreBlobForAES+0x7e>
 8005e66:	bf00      	nop
 8005e68:	20000c04 	.word	0x20000c04
 8005e6c:	20000c00 	.word	0x20000c00

08005e70 <KMS_PlatfObjects_NvmStaticObjectList>:
/**
  * @brief  Update @ref KMS_PlatfObjects_NvmStaticList with NVM contents
  * @retval None
  */
static void KMS_PlatfObjects_NvmStaticObjectList(void)
{
 8005e70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e72:	4d0a      	ldr	r5, [pc, #40]	@ (8005e9c <KMS_PlatfObjects_NvmStaticObjectList+0x2c>)
 8005e74:	2400      	movs	r4, #0
  /* Load the KMS_PlatfObjects_NvmStaticList[], used to store buffer to NVM  */
  /* This should save processing time  */
  for (uint32_t i = KMS_INDEX_MIN_NVM_STATIC_OBJECTS; i <= KMS_INDEX_MAX_NVM_STATIC_OBJECTS; i++)
  {
    /* Read values from NVM */
    nvms_rv = NVMS_GET_DATA(i - KMS_INDEX_MIN_NVM_STATIC_OBJECTS, &nvms_data_size, (uint8_t **)(uint32_t)&p_nvms_data);
 8005e76:	ab01      	add	r3, sp, #4
 8005e78:	2200      	movs	r2, #0
 8005e7a:	4669      	mov	r1, sp
 8005e7c:	4620      	mov	r0, r4
 8005e7e:	f7ff fa8f 	bl	80053a0 <NVMS_GetDataWithType>

    if ((nvms_data_size != 0UL) && (nvms_rv == NVMS_NOERROR))
 8005e82:	9b00      	ldr	r3, [sp, #0]
 8005e84:	b10b      	cbz	r3, 8005e8a <KMS_PlatfObjects_NvmStaticObjectList+0x1a>
 8005e86:	b938      	cbnz	r0, 8005e98 <KMS_PlatfObjects_NvmStaticObjectList+0x28>
    {
      KMS_PlatfObjects_NvmStaticList[i - KMS_INDEX_MIN_NVM_STATIC_OBJECTS] = p_nvms_data;
 8005e88:	9b01      	ldr	r3, [sp, #4]
 8005e8a:	f845 3b04 	str.w	r3, [r5], #4
  for (uint32_t i = KMS_INDEX_MIN_NVM_STATIC_OBJECTS; i <= KMS_INDEX_MAX_NVM_STATIC_OBJECTS; i++)
 8005e8e:	3401      	adds	r4, #1
 8005e90:	2c14      	cmp	r4, #20
 8005e92:	d1f0      	bne.n	8005e76 <KMS_PlatfObjects_NvmStaticObjectList+0x6>
    else
    {
      KMS_PlatfObjects_NvmStaticList[i - KMS_INDEX_MIN_NVM_STATIC_OBJECTS] = NULL;
    }
  }
}
 8005e94:	b003      	add	sp, #12
 8005e96:	bd30      	pop	{r4, r5, pc}
      KMS_PlatfObjects_NvmStaticList[i - KMS_INDEX_MIN_NVM_STATIC_OBJECTS] = NULL;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	e7f6      	b.n	8005e8a <KMS_PlatfObjects_NvmStaticObjectList+0x1a>
 8005e9c:	20003028 	.word	0x20003028

08005ea0 <KMS_PlatfObjects_NvmDynamicObjectList>:
/**
  * @brief  Update @ref KMS_PlatfObjects_NvmDynamicList with NVM contents
  * @retval None
  */
static void KMS_PlatfObjects_NvmDynamicObjectList(void)
{
 8005ea0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ea2:	4d0a      	ldr	r5, [pc, #40]	@ (8005ecc <KMS_PlatfObjects_NvmDynamicObjectList+0x2c>)
 8005ea4:	2414      	movs	r4, #20
  /* Load the KMS_PlatfObjects_NvmDynamicList[], used to store buffer to NVM  */
  /* This should save processing time  */
  for (uint32_t i = KMS_INDEX_MIN_NVM_DYNAMIC_OBJECTS; i <= KMS_INDEX_MAX_NVM_DYNAMIC_OBJECTS; i++)
  {
    /* Read values from NVM */
    nvms_rv = NVMS_GET_DATA(i - KMS_INDEX_MIN_NVM_STATIC_OBJECTS, &nvms_data_size, (uint8_t **)(uint32_t)&p_nvms_data);
 8005ea6:	ab01      	add	r3, sp, #4
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	4669      	mov	r1, sp
 8005eac:	4620      	mov	r0, r4
 8005eae:	f7ff fa77 	bl	80053a0 <NVMS_GetDataWithType>

    if ((nvms_data_size != 0UL) && (nvms_rv == NVMS_NOERROR))
 8005eb2:	9b00      	ldr	r3, [sp, #0]
 8005eb4:	b10b      	cbz	r3, 8005eba <KMS_PlatfObjects_NvmDynamicObjectList+0x1a>
 8005eb6:	b938      	cbnz	r0, 8005ec8 <KMS_PlatfObjects_NvmDynamicObjectList+0x28>
    {
      KMS_PlatfObjects_NvmDynamicList[i - KMS_INDEX_MIN_NVM_DYNAMIC_OBJECTS] = p_nvms_data;
 8005eb8:	9b01      	ldr	r3, [sp, #4]
 8005eba:	f845 3b04 	str.w	r3, [r5], #4
  for (uint32_t i = KMS_INDEX_MIN_NVM_DYNAMIC_OBJECTS; i <= KMS_INDEX_MAX_NVM_DYNAMIC_OBJECTS; i++)
 8005ebe:	3401      	adds	r4, #1
 8005ec0:	2c28      	cmp	r4, #40	@ 0x28
 8005ec2:	d1f0      	bne.n	8005ea6 <KMS_PlatfObjects_NvmDynamicObjectList+0x6>
    {
      KMS_PlatfObjects_NvmDynamicList[i - KMS_INDEX_MIN_NVM_DYNAMIC_OBJECTS] = NULL;
    }

  }
}
 8005ec4:	b003      	add	sp, #12
 8005ec6:	bd30      	pop	{r4, r5, pc}
 8005ec8:	2300      	movs	r3, #0
 8005eca:	e7f6      	b.n	8005eba <KMS_PlatfObjects_NvmDynamicObjectList+0x1a>
 8005ecc:	20002fd8 	.word	0x20002fd8

08005ed0 <KMS_PlatfObjects_EmbeddedRange>:
  * @param  pMax Embedded objects max ID
  * @retval None
  */
void KMS_PlatfObjects_EmbeddedRange(uint32_t *pMin, uint32_t *pMax)
{
  *pMin = KMS_INDEX_MIN_EMBEDDED_OBJECTS;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	6003      	str	r3, [r0, #0]
  *pMax = KMS_INDEX_MAX_EMBEDDED_OBJECTS;
 8005ed4:	2314      	movs	r3, #20
 8005ed6:	600b      	str	r3, [r1, #0]
}
 8005ed8:	4770      	bx	lr
	...

08005edc <KMS_PlatfObjects_EmbeddedObject>:
  * @retval Corresponding object
  */
kms_obj_keyhead_t *KMS_PlatfObjects_EmbeddedObject(uint32_t hKey)
{
  return (kms_obj_keyhead_t *)(uint32_t)KMS_PlatfObjects_EmbeddedList[hKey - KMS_INDEX_MIN_EMBEDDED_OBJECTS];
}
 8005edc:	4b02      	ldr	r3, [pc, #8]	@ (8005ee8 <KMS_PlatfObjects_EmbeddedObject+0xc>)
  return (kms_obj_keyhead_t *)(uint32_t)KMS_PlatfObjects_EmbeddedList[hKey - KMS_INDEX_MIN_EMBEDDED_OBJECTS];
 8005ede:	3801      	subs	r0, #1
}
 8005ee0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8005ee4:	4770      	bx	lr
 8005ee6:	bf00      	nop
 8005ee8:	08006d7c 	.word	0x08006d7c

08005eec <KMS_PlatfObjects_NvmStaticRange>:
  * @param  pMax NVM static objects max ID
  * @retval None
  */
void KMS_PlatfObjects_NvmStaticRange(uint32_t *pMin, uint32_t *pMax)
{
  *pMin = KMS_INDEX_MIN_NVM_STATIC_OBJECTS;
 8005eec:	2315      	movs	r3, #21
 8005eee:	6003      	str	r3, [r0, #0]
  *pMax = KMS_INDEX_MAX_NVM_STATIC_OBJECTS;
 8005ef0:	2328      	movs	r3, #40	@ 0x28
 8005ef2:	600b      	str	r3, [r1, #0]
}
 8005ef4:	4770      	bx	lr
	...

08005ef8 <KMS_PlatfObjects_NvmStaticObject>:
  }
  return p_decrypted_object;
#else /* KMS_ENCRYPT_DECRYPT_BLOB */
  return KMS_PlatfObjects_NvmStaticList[hKey - KMS_INDEX_MIN_NVM_STATIC_OBJECTS];
#endif /* KMS_ENCRYPT_DECRYPT_BLOB */
}
 8005ef8:	4b02      	ldr	r3, [pc, #8]	@ (8005f04 <KMS_PlatfObjects_NvmStaticObject+0xc>)
  return KMS_PlatfObjects_NvmStaticList[hKey - KMS_INDEX_MIN_NVM_STATIC_OBJECTS];
 8005efa:	3815      	subs	r0, #21
}
 8005efc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	20003028 	.word	0x20003028

08005f08 <KMS_PlatfObjects_NvmDynamicRange>:
  * @param  pMax NVM dynamic objects max ID
  * @retval None
  */
void KMS_PlatfObjects_NvmDynamicRange(uint32_t *pMin, uint32_t *pMax)
{
  *pMin = KMS_INDEX_MIN_NVM_DYNAMIC_OBJECTS;
 8005f08:	2329      	movs	r3, #41	@ 0x29
 8005f0a:	6003      	str	r3, [r0, #0]
  *pMax = KMS_INDEX_MAX_NVM_DYNAMIC_OBJECTS;
 8005f0c:	233c      	movs	r3, #60	@ 0x3c
 8005f0e:	600b      	str	r3, [r1, #0]
}
 8005f10:	4770      	bx	lr
	...

08005f14 <KMS_PlatfObjects_NvmDynamicObject>:
  }
  return p_decrypted_object;
#else /* KMS_ENCRYPT_DECRYPT_BLOB */
  return KMS_PlatfObjects_NvmDynamicList[hKey - KMS_INDEX_MIN_NVM_DYNAMIC_OBJECTS];
#endif /* KMS_ENCRYPT_DECRYPT_BLOB */
}
 8005f14:	4b02      	ldr	r3, [pc, #8]	@ (8005f20 <KMS_PlatfObjects_NvmDynamicObject+0xc>)
  return KMS_PlatfObjects_NvmDynamicList[hKey - KMS_INDEX_MIN_NVM_DYNAMIC_OBJECTS];
 8005f16:	3829      	subs	r0, #41	@ 0x29
}
 8005f18:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	20002fd8 	.word	0x20002fd8

08005f24 <KMS_PlatfObjects_Init>:
  * @brief  Initialize platform objects
  * @note   Initialize NVM / VM storage and fill "cache" buffers
  * @retval None
  */
void KMS_PlatfObjects_Init(void)
{
 8005f24:	b510      	push	{r4, lr}
#ifdef KMS_NVM_ENABLED
  /* The NVMS_Init should be done only once */
  if (kms_platf_nvm_initialisation_done == 0UL)
 8005f26:	4c06      	ldr	r4, [pc, #24]	@ (8005f40 <KMS_PlatfObjects_Init+0x1c>)
 8005f28:	6823      	ldr	r3, [r4, #0]
 8005f2a:	b91b      	cbnz	r3, 8005f34 <KMS_PlatfObjects_Init+0x10>
  {
    /* Initialize the NVMS */
    (void)NVMS_Init();
 8005f2c:	f7ff f87a 	bl	8005024 <NVMS_Init>
    kms_platf_nvm_initialisation_done = 1UL;
 8005f30:	2301      	movs	r3, #1
 8005f32:	6023      	str	r3, [r4, #0]
  }

  KMS_PlatfObjects_NvmStaticObjectList();
 8005f34:	f7ff ff9c 	bl	8005e70 <KMS_PlatfObjects_NvmStaticObjectList>
    kms_platf_vm_initialisation_done = 1UL;
  }

  KMS_PlatfObjects_VmDynamicObjectList();
#endif /* KMS_VM_DYNAMIC_ENABLED */
}
 8005f38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  KMS_PlatfObjects_NvmDynamicObjectList();
 8005f3c:	f7ff bfb0 	b.w	8005ea0 <KMS_PlatfObjects_NvmDynamicObjectList>
 8005f40:	20003078 	.word	0x20003078

08005f44 <KMS_PlatfObjects_Finalize>:
/**
  * @brief  De-Initialize platform objects
  * @retval None
  */
void KMS_PlatfObjects_Finalize(void)
{
 8005f44:	b508      	push	{r3, lr}
#ifdef KMS_NVM_ENABLED
  /* Finalize the NVMS */
  NVMS_Deinit();
 8005f46:	f7ff f97f 	bl	8005248 <NVMS_Deinit>

  /* We must re-allow the call to NVMS_Init() */
  kms_platf_nvm_initialisation_done = 0UL;
 8005f4a:	4b02      	ldr	r3, [pc, #8]	@ (8005f54 <KMS_PlatfObjects_Finalize+0x10>)
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	601a      	str	r2, [r3, #0]
  VMS_Deinit();

  /* We must re-allow the call to VMS_Init() */
  kms_platf_vm_initialisation_done = 0UL;
#endif /* KMS_VM_DYNAMIC_ENABLED */
}
 8005f50:	bd08      	pop	{r3, pc}
 8005f52:	bf00      	nop
 8005f54:	20003078 	.word	0x20003078

08005f58 <KMS_PlatfObjects_NvmStoreObject>:
  * @param  ObjectSize Object size
  * @retval CKR_OK if storage is successful
  *         CKR_DEVICE_MEMORY otherwise
  */
CK_RV KMS_PlatfObjects_NvmStoreObject(uint32_t ObjectId, uint8_t *pObjectToAdd,  uint32_t ObjectSize)
{
 8005f58:	b510      	push	{r4, lr}
 8005f5a:	4604      	mov	r4, r0
    return e_ret_status;
  }
#endif /* KMS_ENCRYPT_DECRYPT_BLOB */

  /* It's a NVM STATIC object */
  if ((ObjectId >= KMS_INDEX_MIN_NVM_STATIC_OBJECTS) && (ObjectId <= KMS_INDEX_MAX_NVM_STATIC_OBJECTS))
 8005f5c:	3815      	subs	r0, #21
 8005f5e:	2813      	cmp	r0, #19
{
 8005f60:	460b      	mov	r3, r1
 8005f62:	4611      	mov	r1, r2
  if ((ObjectId >= KMS_INDEX_MIN_NVM_STATIC_OBJECTS) && (ObjectId <= KMS_INDEX_MAX_NVM_STATIC_OBJECTS))
 8005f64:	d807      	bhi.n	8005f76 <KMS_PlatfObjects_NvmStoreObject+0x1e>
  {
#ifdef KMS_NVM_DYNAMIC_ENABLED
    /* It's a NVM DYNAMIC object */
    if ((ObjectId >= KMS_INDEX_MIN_NVM_DYNAMIC_OBJECTS) && (ObjectId <= KMS_INDEX_MAX_NVM_DYNAMIC_OBJECTS))
    {
      rv = NVMS_WRITE_DATA(ObjectId - KMS_INDEX_MIN_NVM_STATIC_OBJECTS, ObjectSize, (const uint8_t *)pObjectToAdd);
 8005f66:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005f6a:	f7ff f96f 	bl	800524c <NVMS_WriteDataWithType>
  /* Free the allocated object when needed */
  KMS_PlatfObjects_FreeObject(KMS_SESSION_ID_INTERNAL | ObjectId,
                                 &p_encrypted_object);
#endif /* KMS_ENCRYPT_DECRYPT_BLOB */
  /* A Garbage collection generate a WARNING ==> Not an error */
  if ((rv == NVMS_NOERROR) || (rv == NVMS_WARNING))
 8005f6e:	f010 04fd 	ands.w	r4, r0, #253	@ 0xfd
 8005f72:	d103      	bne.n	8005f7c <KMS_PlatfObjects_NvmStoreObject+0x24>
 8005f74:	e003      	b.n	8005f7e <KMS_PlatfObjects_NvmStoreObject+0x26>
    if ((ObjectId >= KMS_INDEX_MIN_NVM_DYNAMIC_OBJECTS) && (ObjectId <= KMS_INDEX_MAX_NVM_DYNAMIC_OBJECTS))
 8005f76:	3c29      	subs	r4, #41	@ 0x29
 8005f78:	2c13      	cmp	r4, #19
 8005f7a:	d9f4      	bls.n	8005f66 <KMS_PlatfObjects_NvmStoreObject+0xe>
  {
    e_ret_status = CKR_OK;
  }
  else
  {
    e_ret_status = CKR_DEVICE_MEMORY;
 8005f7c:	2431      	movs	r4, #49	@ 0x31
  }

  /* Refresh NVM lists */
  KMS_PlatfObjects_NvmStaticObjectList();
 8005f7e:	f7ff ff77 	bl	8005e70 <KMS_PlatfObjects_NvmStaticObjectList>
#ifdef KMS_NVM_DYNAMIC_ENABLED
  KMS_PlatfObjects_NvmDynamicObjectList();
 8005f82:	f7ff ff8d 	bl	8005ea0 <KMS_PlatfObjects_NvmDynamicObjectList>
#endif /* KMS_NVM_DYNAMIC_ENABLED */

  return e_ret_status;
}
 8005f86:	4620      	mov	r0, r4
 8005f88:	bd10      	pop	{r4, pc}
	...

08005f8c <KMS_PlatfObjects_AllocateAndStore>:
{
 8005f8c:	b538      	push	{r3, r4, r5, lr}
 8005f8e:	4605      	mov	r5, r0
  if ((pObjId == NULL_PTR) || (pBlob == NULL_PTR))
 8005f90:	460c      	mov	r4, r1
 8005f92:	b1c1      	cbz	r1, 8005fc6 <KMS_PlatfObjects_AllocateAndStore+0x3a>
 8005f94:	b1b8      	cbz	r0, 8005fc6 <KMS_PlatfObjects_AllocateAndStore+0x3a>
    *pObjId = KMS_HANDLE_KEY_NOT_KNOWN;
 8005f96:	2300      	movs	r3, #0
 8005f98:	4a0d      	ldr	r2, [pc, #52]	@ (8005fd0 <KMS_PlatfObjects_AllocateAndStore+0x44>)
 8005f9a:	600b      	str	r3, [r1, #0]
      if (KMS_PlatfObjects_NvmDynamicList[Index] == NULL)
 8005f9c:	f852 1b04 	ldr.w	r1, [r2], #4
 8005fa0:	b969      	cbnz	r1, 8005fbe <KMS_PlatfObjects_AllocateAndStore+0x32>
        *pObjId = Index + KMS_INDEX_MIN_NVM_DYNAMIC_OBJECTS;
 8005fa2:	3329      	adds	r3, #41	@ 0x29
 8005fa4:	6023      	str	r3, [r4, #0]
    if (*pObjId == KMS_HANDLE_KEY_NOT_KNOWN)
 8005fa6:	6820      	ldr	r0, [r4, #0]
 8005fa8:	b178      	cbz	r0, 8005fca <KMS_PlatfObjects_AllocateAndStore+0x3e>
      e_ret_status = KMS_PlatfObjects_NvmStoreObject(*pObjId,
 8005faa:	68aa      	ldr	r2, [r5, #8]
      pBlob->object_id = *pObjId;
 8005fac:	6128      	str	r0, [r5, #16]
      e_ret_status = KMS_PlatfObjects_NvmStoreObject(*pObjId,
 8005fae:	3214      	adds	r2, #20
 8005fb0:	4629      	mov	r1, r5
 8005fb2:	f7ff ffd1 	bl	8005f58 <KMS_PlatfObjects_NvmStoreObject>
      if (e_ret_status != CKR_OK)
 8005fb6:	b108      	cbz	r0, 8005fbc <KMS_PlatfObjects_AllocateAndStore+0x30>
        *pObjId = KMS_HANDLE_KEY_NOT_KNOWN;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	6023      	str	r3, [r4, #0]
}
 8005fbc:	bd38      	pop	{r3, r4, r5, pc}
    for (Index = 0; Index <= (KMS_INDEX_MAX_NVM_DYNAMIC_OBJECTS - KMS_INDEX_MIN_NVM_DYNAMIC_OBJECTS); Index++)
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	2b14      	cmp	r3, #20
 8005fc2:	d1eb      	bne.n	8005f9c <KMS_PlatfObjects_AllocateAndStore+0x10>
 8005fc4:	e7ef      	b.n	8005fa6 <KMS_PlatfObjects_AllocateAndStore+0x1a>
    e_ret_status = CKR_ARGUMENTS_BAD;
 8005fc6:	2007      	movs	r0, #7
 8005fc8:	e7f8      	b.n	8005fbc <KMS_PlatfObjects_AllocateAndStore+0x30>
      e_ret_status = CKR_DEVICE_MEMORY;
 8005fca:	2031      	movs	r0, #49	@ 0x31
  return e_ret_status;
 8005fcc:	e7f6      	b.n	8005fbc <KMS_PlatfObjects_AllocateAndStore+0x30>
 8005fce:	bf00      	nop
 8005fd0:	20002fd8 	.word	0x20002fd8

08005fd4 <KMS_PlatfObjects_NvmRemoveObject>:
{
  nvms_error_t rv = NVMS_DATA_NOT_FOUND;
  CK_RV e_ret_status;

  /* Check that the ObjectID is in dynamic range */
  if ((ObjectId >= KMS_INDEX_MIN_NVM_DYNAMIC_OBJECTS) && (ObjectId <= KMS_INDEX_MAX_NVM_DYNAMIC_OBJECTS))
 8005fd4:	f1a0 0329 	sub.w	r3, r0, #41	@ 0x29
 8005fd8:	2b13      	cmp	r3, #19
{
 8005fda:	b510      	push	{r4, lr}
  if ((ObjectId >= KMS_INDEX_MIN_NVM_DYNAMIC_OBJECTS) && (ObjectId <= KMS_INDEX_MAX_NVM_DYNAMIC_OBJECTS))
 8005fdc:	d906      	bls.n	8005fec <KMS_PlatfObjects_NvmRemoveObject+0x18>
  {
    e_ret_status = CKR_OK;
  }
  else
  {
    e_ret_status = CKR_DEVICE_MEMORY;
 8005fde:	2431      	movs	r4, #49	@ 0x31
  }

  /* Refresh NVM lists */
  KMS_PlatfObjects_NvmStaticObjectList();
 8005fe0:	f7ff ff46 	bl	8005e70 <KMS_PlatfObjects_NvmStaticObjectList>
#ifdef KMS_NVM_DYNAMIC_ENABLED
  KMS_PlatfObjects_NvmDynamicObjectList();
 8005fe4:	f7ff ff5c 	bl	8005ea0 <KMS_PlatfObjects_NvmDynamicObjectList>
#endif /* KMS_NVM_DYNAMIC_ENABLED */

  return e_ret_status;
}
 8005fe8:	4620      	mov	r0, r4
 8005fea:	bd10      	pop	{r4, pc}
    rv = NVMS_EraseData(ObjectId - KMS_INDEX_MIN_NVM_STATIC_OBJECTS);
 8005fec:	3815      	subs	r0, #21
 8005fee:	f7ff f98b 	bl	8005308 <NVMS_EraseData>
  if ((rv == NVMS_NOERROR) || (rv == NVMS_WARNING))
 8005ff2:	f010 04fd 	ands.w	r4, r0, #253	@ 0xfd
 8005ff6:	d1f2      	bne.n	8005fde <KMS_PlatfObjects_NvmRemoveObject+0xa>
 8005ff8:	e7f2      	b.n	8005fe0 <KMS_PlatfObjects_NvmRemoveObject+0xc>

08005ffa <KMS_PlatfObjects_GetBlobVerifyKey>:
  * @retval Key handle
  */
CK_ULONG KMS_PlatfObjects_GetBlobVerifyKey(void)
{
  return (CK_ULONG)KMS_INDEX_BLOBIMPORT_VERIFY;
}
 8005ffa:	2001      	movs	r0, #1
 8005ffc:	4770      	bx	lr

08005ffe <KMS_PlatfObjects_GetBlobDecryptKey>:
  * @retval Key handle
  */
CK_ULONG KMS_PlatfObjects_GetBlobDecryptKey(void)
{
  return (CK_ULONG)KMS_INDEX_BLOBIMPORT_DECRYPT;
}
 8005ffe:	2002      	movs	r0, #2
 8006000:	4770      	bx	lr
	...

08006004 <sign_verify_init>:
  */
CK_RV     sign_verify_init(CK_SESSION_HANDLE hSession,
                           CK_MECHANISM_PTR  pMechanism,
                           CK_OBJECT_HANDLE  hKey,
                           uint32_t sigver_flag)
{
 8006004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CK_RV e_ret_status = CKR_MECHANISM_INVALID;

  if (!KMS_IS_INITIALIZED())
 8006008:	f8df 9180 	ldr.w	r9, [pc, #384]	@ 800618c <sign_verify_init+0x188>
{
 800600c:	b085      	sub	sp, #20
 800600e:	4606      	mov	r6, r0
 8006010:	9301      	str	r3, [sp, #4]
  if (!KMS_IS_INITIALIZED())
 8006012:	f899 3000 	ldrb.w	r3, [r9]
{
 8006016:	460f      	mov	r7, r1
 8006018:	4690      	mov	r8, r2
  if (!KMS_IS_INITIALIZED())
 800601a:	2b00      	cmp	r3, #0
 800601c:	f000 80ac 	beq.w	8006178 <sign_verify_init+0x174>
  {
    return CKR_CRYPTOKI_NOT_INITIALIZED;
  }
  if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 8006020:	f7fe fbe2 	bl	80047e8 <KMS_CheckSessionHdle>
 8006024:	2800      	cmp	r0, #0
 8006026:	f040 80aa 	bne.w	800617e <sign_verify_init+0x17a>
  {
    return CKR_SESSION_HANDLE_INVALID;
  }
  /* No processing already on going  */
  if (KMS_GETSESSION(hSession).state != KMS_SESSION_IDLE)
 800602a:	f106 3aff 	add.w	sl, r6, #4294967295	@ 0xffffffff
 800602e:	2324      	movs	r3, #36	@ 0x24
 8006030:	fb03 930a 	mla	r3, r3, sl, r9
 8006034:	68dc      	ldr	r4, [r3, #12]
 8006036:	2c00      	cmp	r4, #0
 8006038:	f040 80a1 	bne.w	800617e <sign_verify_init+0x17a>
  {
    return CKR_SESSION_HANDLE_INVALID;
  }

  /* Check that we support the expected mechanism  */
  if (pMechanism == NULL_PTR)
 800603c:	b387      	cbz	r7, 80060a0 <sign_verify_init+0x9c>
  {
    return CKR_ARGUMENTS_BAD;
  }
  switch (pMechanism->mechanism)
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	f241 0244 	movw	r2, #4164	@ 0x1044
 8006044:	4293      	cmp	r3, r2
 8006046:	d02d      	beq.n	80060a4 <sign_verify_init+0xa0>
 8006048:	d805      	bhi.n	8006056 <sign_verify_init+0x52>
 800604a:	f241 0241 	movw	r2, #4161	@ 0x1041
 800604e:	4293      	cmp	r3, r2
 8006050:	d028      	beq.n	80060a4 <sign_verify_init+0xa0>
 8006052:	2470      	movs	r4, #112	@ 0x70
 8006054:	e044      	b.n	80060e0 <sign_verify_init+0xdc>
 8006056:	f5a3 5384 	sub.w	r3, r3, #4224	@ 0x1080
 800605a:	3b0a      	subs	r3, #10
 800605c:	2b01      	cmp	r3, #1
 800605e:	d8f8      	bhi.n	8006052 <sign_verify_init+0x4e>
      kms_attr_t *P_pKeyAttribute;
      kms_aes_cmac_sv_ctx_t *p_ctx;

      /* Read the key value from the Key Handle                 */
      /* Key Handle is the index to one of static or nvm        */
      pkms_object = KMS_Objects_GetPointer(hKey);
 8006060:	4640      	mov	r0, r8
 8006062:	f7ff fa87 	bl	8005574 <KMS_Objects_GetPointer>

      /* Check that hKey is valid:
       * - NULL_PTR value means not found key handle
       * - KMS_ABI_VERSION_CK_2_40 & KMS_ABI_CONFIG_KEYHEAD are magic in header of the key
       */
      if ((pkms_object != NULL) &&
 8006066:	4601      	mov	r1, r0
 8006068:	2800      	cmp	r0, #0
 800606a:	f000 808a 	beq.w	8006182 <sign_verify_init+0x17e>
 800606e:	6802      	ldr	r2, [r0, #0]
 8006070:	4b47      	ldr	r3, [pc, #284]	@ (8006190 <sign_verify_init+0x18c>)
 8006072:	429a      	cmp	r2, r3
 8006074:	f040 8085 	bne.w	8006182 <sign_verify_init+0x17e>
          (pkms_object->version == KMS_ABI_VERSION_CK_2_40) &&
 8006078:	6842      	ldr	r2, [r0, #4]
 800607a:	f46f 700f 	mvn.w	r0, #572	@ 0x23c
 800607e:	4403      	add	r3, r0
 8006080:	429a      	cmp	r2, r3
 8006082:	d17e      	bne.n	8006182 <sign_verify_init+0x17e>
          (pkms_object->configuration == KMS_ABI_CONFIG_KEYHEAD))
      {
        /* Search for the Key Value to use */
        e_ret_status = KMS_Objects_SearchAttributes(CKA_VALUE, pkms_object, &P_pKeyAttribute);
 8006084:	aa03      	add	r2, sp, #12
 8006086:	2011      	movs	r0, #17
 8006088:	f7ff fafa 	bl	8005680 <KMS_Objects_SearchAttributes>

        if (e_ret_status == CKR_OK)
 800608c:	4604      	mov	r4, r0
 800608e:	bb38      	cbnz	r0, 80060e0 <sign_verify_init+0xdc>
        {
          /* Set key size with value from attribute  */
          if ((P_pKeyAttribute->size == CA_CRL_AES128_KEY) ||     /* 128 bits */
 8006090:	9b03      	ldr	r3, [sp, #12]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	f023 0208 	bic.w	r2, r3, #8
 8006098:	2a10      	cmp	r2, #16
 800609a:	d025      	beq.n	80060e8 <sign_verify_init+0xe4>
              (P_pKeyAttribute->size == CA_CRL_AES192_KEY) ||     /* 192 bits */
 800609c:	2b20      	cmp	r3, #32
 800609e:	d023      	beq.n	80060e8 <sign_verify_init+0xe4>
    return CKR_ARGUMENTS_BAD;
 80060a0:	2407      	movs	r4, #7
 80060a2:	e01d      	b.n	80060e0 <sign_verify_init+0xdc>
      pkms_object = KMS_Objects_GetPointer(hKey);
 80060a4:	4640      	mov	r0, r8
 80060a6:	f7ff fa65 	bl	8005574 <KMS_Objects_GetPointer>
      if ((pkms_object != NULL) &&
 80060aa:	2800      	cmp	r0, #0
 80060ac:	d069      	beq.n	8006182 <sign_verify_init+0x17e>
 80060ae:	6802      	ldr	r2, [r0, #0]
 80060b0:	4b37      	ldr	r3, [pc, #220]	@ (8006190 <sign_verify_init+0x18c>)
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d165      	bne.n	8006182 <sign_verify_init+0x17e>
          (pkms_object->version == KMS_ABI_VERSION_CK_2_40) &&
 80060b6:	6842      	ldr	r2, [r0, #4]
 80060b8:	f46f 750f 	mvn.w	r5, #572	@ 0x23c
 80060bc:	442b      	add	r3, r5
 80060be:	429a      	cmp	r2, r3
 80060c0:	d15f      	bne.n	8006182 <sign_verify_init+0x17e>
        p_ctx = KMS_Alloc(hSession, sizeof(kms_ecdsa_sv_ctx_t));
 80060c2:	f44f 712c 	mov.w	r1, #688	@ 0x2b0
 80060c6:	4630      	mov	r0, r6
 80060c8:	f7fe fd14 	bl	8004af4 <KMS_Alloc>
        if (p_ctx == NULL_PTR)
 80060cc:	2800      	cmp	r0, #0
 80060ce:	d05a      	beq.n	8006186 <sign_verify_init+0x182>
        KMS_GETSESSION(hSession).hKey = hKey;
 80060d0:	2324      	movs	r3, #36	@ 0x24
 80060d2:	fb03 930a 	mla	r3, r3, sl, r9
        KMS_GETSESSION(hSession).Mechanism = pMechanism->mechanism;
 80060d6:	683a      	ldr	r2, [r7, #0]
        KMS_GETSESSION(hSession).hKey = hKey;
 80060d8:	f8c3 8024 	str.w	r8, [r3, #36]	@ 0x24
        KMS_GETSESSION(hSession).Mechanism = pMechanism->mechanism;
 80060dc:	621a      	str	r2, [r3, #32]
        KMS_GETSESSION(hSession).pCtx = p_ctx;
 80060de:	6298      	str	r0, [r3, #40]	@ 0x28
    default:
      break;
  }

  return e_ret_status;
}
 80060e0:	4620      	mov	r0, r4
 80060e2:	b005      	add	sp, #20
 80060e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            p_ctx = KMS_Alloc(hSession, sizeof(kms_aes_cmac_sv_ctx_t));
 80060e8:	2178      	movs	r1, #120	@ 0x78
 80060ea:	4630      	mov	r0, r6
 80060ec:	f7fe fd02 	bl	8004af4 <KMS_Alloc>
            if (p_ctx == NULL_PTR)
 80060f0:	4605      	mov	r5, r0
 80060f2:	2800      	cmp	r0, #0
 80060f4:	d047      	beq.n	8006186 <sign_verify_init+0x182>
            KMS_GETSESSION(hSession).Mechanism = pMechanism->mechanism;
 80060f6:	683a      	ldr	r2, [r7, #0]
            KMS_GETSESSION(hSession).hKey = hKey;
 80060f8:	2324      	movs	r3, #36	@ 0x24
 80060fa:	fb03 9b0a 	mla	fp, r3, sl, r9
            if ((pMechanism->mechanism == CKM_AES_CMAC_GENERAL)
 80060fe:	f241 018b 	movw	r1, #4235	@ 0x108b
 8006102:	428a      	cmp	r2, r1
            KMS_GETSESSION(hSession).hKey = hKey;
 8006104:	f8cb 8024 	str.w	r8, [fp, #36]	@ 0x24
            KMS_GETSESSION(hSession).Mechanism = pMechanism->mechanism;
 8006108:	f8cb 2020 	str.w	r2, [fp, #32]
            KMS_GETSESSION(hSession).pCtx = p_ctx;
 800610c:	f8cb 0028 	str.w	r0, [fp, #40]	@ 0x28
            if ((pMechanism->mechanism == CKM_AES_CMAC_GENERAL)
 8006110:	d12d      	bne.n	800616e <sign_verify_init+0x16a>
                && (pMechanism->pParameter != NULL_PTR))
 8006112:	687f      	ldr	r7, [r7, #4]
 8006114:	b327      	cbz	r7, 8006160 <sign_verify_init+0x15c>
              p_ctx->tagLength = *(CK_ULONG_PTR)pMechanism->pParameter;
 8006116:	683b      	ldr	r3, [r7, #0]
            p_ctx->ca_ctx.mKeySize = (int32_t)P_pKeyAttribute->size ;
 8006118:	9803      	ldr	r0, [sp, #12]
              p_ctx->tagLength = *(CK_ULONG_PTR)pMechanism->pParameter;
 800611a:	632b      	str	r3, [r5, #48]	@ 0x30
            p_ctx->ca_ctx.mFlags = CA_E_SK_DEFAULT;
 800611c:	2300      	movs	r3, #0
 800611e:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
            p_ctx->ca_ctx.mKeySize = (int32_t)P_pKeyAttribute->size ;
 8006122:	6841      	ldr	r1, [r0, #4]
 8006124:	65a9      	str	r1, [r5, #88]	@ 0x58
            KMS_Objects_BlobU32_2_u8ptr(&(P_pKeyAttribute->data[0]), P_pKeyAttribute->size, p_ctx->key);
 8006126:	3008      	adds	r0, #8
 8006128:	462a      	mov	r2, r5
 800612a:	f7ff fb66 	bl	80057fa <KMS_Objects_BlobU32_2_u8ptr>
            p_ctx->ca_ctx.mTagSize = (int32_t)p_ctx->tagLength;
 800612e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8006130:	666b      	str	r3, [r5, #100]	@ 0x64
            p_ctx->ca_ctx.pmTag = p_ctx->tag;
 8006132:	f105 0320 	add.w	r3, r5, #32
 8006136:	662b      	str	r3, [r5, #96]	@ 0x60
            if (sigver_flag == KMS_FLAG_SIGN)
 8006138:	9b01      	ldr	r3, [sp, #4]
            p_ctx->ca_ctx.pmKey = p_ctx->key;
 800613a:	63ed      	str	r5, [r5, #60]	@ 0x3c
              if (CA_AES_CMAC_Decrypt_Init(&p_ctx->ca_ctx) == CA_AES_SUCCESS)
 800613c:	f105 0034 	add.w	r0, r5, #52	@ 0x34
            if (sigver_flag == KMS_FLAG_SIGN)
 8006140:	b1bb      	cbz	r3, 8006172 <sign_verify_init+0x16e>
              if (CA_AES_CMAC_Decrypt_Init(&p_ctx->ca_ctx) == CA_AES_SUCCESS)
 8006142:	f7fc f950 	bl	80023e6 <CA_AES_CMAC_Decrypt_Init>
              if (CA_AES_CMAC_Encrypt_Init(&p_ctx->ca_ctx) == CA_AES_SUCCESS)
 8006146:	2800      	cmp	r0, #0
 8006148:	d0ca      	beq.n	80060e0 <sign_verify_init+0xdc>
                KMS_Free(hSession, p_ctx);
 800614a:	4629      	mov	r1, r5
 800614c:	4630      	mov	r0, r6
 800614e:	f7fe fcf5 	bl	8004b3c <KMS_Free>
                KMS_GETSESSION(hSession).pCtx = NULL_PTR;
 8006152:	2324      	movs	r3, #36	@ 0x24
 8006154:	fb03 930a 	mla	r3, r3, sl, r9
 8006158:	2200      	movs	r2, #0
 800615a:	629a      	str	r2, [r3, #40]	@ 0x28
                e_ret_status = CKR_FUNCTION_FAILED;
 800615c:	2406      	movs	r4, #6
 800615e:	e7bf      	b.n	80060e0 <sign_verify_init+0xdc>
              KMS_Free(hSession, p_ctx);
 8006160:	4601      	mov	r1, r0
 8006162:	4630      	mov	r0, r6
 8006164:	f7fe fcea 	bl	8004b3c <KMS_Free>
              KMS_GETSESSION(hSession).pCtx = NULL_PTR;
 8006168:	f8cb 7028 	str.w	r7, [fp, #40]	@ 0x28
              break;
 800616c:	e798      	b.n	80060a0 <sign_verify_init+0x9c>
 800616e:	2310      	movs	r3, #16
 8006170:	e7d2      	b.n	8006118 <sign_verify_init+0x114>
              if (CA_AES_CMAC_Encrypt_Init(&p_ctx->ca_ctx) == CA_AES_SUCCESS)
 8006172:	f7fc f8f5 	bl	8002360 <CA_AES_CMAC_Encrypt_Init>
 8006176:	e7e6      	b.n	8006146 <sign_verify_init+0x142>
    return CKR_CRYPTOKI_NOT_INITIALIZED;
 8006178:	f44f 74c8 	mov.w	r4, #400	@ 0x190
 800617c:	e7b0      	b.n	80060e0 <sign_verify_init+0xdc>
    return CKR_SESSION_HANDLE_INVALID;
 800617e:	24b3      	movs	r4, #179	@ 0xb3
 8006180:	e7ae      	b.n	80060e0 <sign_verify_init+0xdc>
        e_ret_status = CKR_OBJECT_HANDLE_INVALID;
 8006182:	2482      	movs	r4, #130	@ 0x82
 8006184:	e7ac      	b.n	80060e0 <sign_verify_init+0xdc>
          e_ret_status = CKR_DEVICE_MEMORY;
 8006186:	2431      	movs	r4, #49	@ 0x31
 8006188:	e7aa      	b.n	80060e0 <sign_verify_init+0xdc>
 800618a:	bf00      	nop
 800618c:	20000c48 	.word	0x20000c48
 8006190:	b10b0240 	.word	0xb10b0240

08006194 <KMS_SignInit>:
  *         @ref sign_verify_init returned values
  */
CK_RV     KMS_SignInit(CK_SESSION_HANDLE hSession,
                       CK_MECHANISM_PTR  pMechanism,
                       CK_OBJECT_HANDLE  hKey)
{
 8006194:	b510      	push	{r4, lr}
#if defined(KMS_SIGN)
  CK_RV e_ret_status = sign_verify_init(hSession, pMechanism, hKey, KMS_FLAG_SIGN);
 8006196:	2300      	movs	r3, #0
{
 8006198:	4604      	mov	r4, r0
  CK_RV e_ret_status = sign_verify_init(hSession, pMechanism, hKey, KMS_FLAG_SIGN);
 800619a:	f7ff ff33 	bl	8006004 <sign_verify_init>

  if (e_ret_status == CKR_OK)
 800619e:	b930      	cbnz	r0, 80061ae <KMS_SignInit+0x1a>
  {
    /* If successful, set processing state of the session */
    KMS_GETSESSION(hSession).state = KMS_SESSION_SIGN;
 80061a0:	4b03      	ldr	r3, [pc, #12]	@ (80061b0 <KMS_SignInit+0x1c>)
 80061a2:	2224      	movs	r2, #36	@ 0x24
 80061a4:	3c01      	subs	r4, #1
 80061a6:	fb02 3304 	mla	r3, r2, r4, r3
 80061aa:	2204      	movs	r2, #4
 80061ac:	60da      	str	r2, [r3, #12]

  return e_ret_status;
#else /* KMS_SIGN */
  return CKR_FUNCTION_NOT_SUPPORTED;
#endif /* KMS_SIGN */
}
 80061ae:	bd10      	pop	{r4, pc}
 80061b0:	20000c48 	.word	0x20000c48

080061b4 <KMS_Sign>:
CK_RV     KMS_Sign(CK_SESSION_HANDLE hSession,         /* the session's handle */
                   CK_BYTE_PTR       pData,           /* the data to sign */
                   CK_ULONG          ulDataLen,       /* count of bytes to sign */
                   CK_BYTE_PTR       pSignature,      /* gets the signature */
                   CK_ULONG_PTR      pulSignatureLen)  /* gets signature length */
{
 80061b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if defined(KMS_SIGN)
  CK_RV e_ret_status = CKR_OK;
  kms_obj_keyhead_t *pkms_object;

  if (!KMS_IS_INITIALIZED())
 80061b8:	4d30      	ldr	r5, [pc, #192]	@ (800627c <KMS_Sign+0xc8>)
{
 80061ba:	4698      	mov	r8, r3
  if (!KMS_IS_INITIALIZED())
 80061bc:	782b      	ldrb	r3, [r5, #0]
{
 80061be:	4607      	mov	r7, r0
 80061c0:	4689      	mov	r9, r1
 80061c2:	4692      	mov	sl, r2
  if (!KMS_IS_INITIALIZED())
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d051      	beq.n	800626c <KMS_Sign+0xb8>
  {
    return CKR_CRYPTOKI_NOT_INITIALIZED;
  }
  if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 80061c8:	f7fe fb0e 	bl	80047e8 <KMS_CheckSessionHdle>
 80061cc:	4604      	mov	r4, r0
 80061ce:	2800      	cmp	r0, #0
 80061d0:	d14f      	bne.n	8006272 <KMS_Sign+0xbe>
  {
    return CKR_SESSION_HANDLE_INVALID;
  }
  /* No processing already on going  */
  if (KMS_GETSESSION(hSession).state != KMS_SESSION_SIGN)
 80061d2:	f107 3bff 	add.w	fp, r7, #4294967295	@ 0xffffffff
 80061d6:	2624      	movs	r6, #36	@ 0x24
 80061d8:	fb06 560b 	mla	r6, r6, fp, r5
 80061dc:	68f3      	ldr	r3, [r6, #12]
 80061de:	2b04      	cmp	r3, #4
 80061e0:	d149      	bne.n	8006276 <KMS_Sign+0xc2>
  {
    return CKR_OPERATION_NOT_INITIALIZED;
  }

  /* If a digest has to be computed */
  switch (KMS_GETSESSION(hSession).Mechanism)
 80061e2:	6a33      	ldr	r3, [r6, #32]
 80061e4:	f5a3 5384 	sub.w	r3, r3, #4224	@ 0x1080
 80061e8:	3b0a      	subs	r3, #10
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d911      	bls.n	8006212 <KMS_Sign+0x5e>
    }
#endif /* KMS_AES_CMAC & KMS_FCT_SIGN */

    default:
    {
      e_ret_status = CKR_MECHANISM_INVALID;
 80061ee:	2470      	movs	r4, #112	@ 0x70

  /* Upon completion error or not:
   * - free the allocated context
   * - release the session
   */
  KMS_GETSESSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 80061f0:	2324      	movs	r3, #36	@ 0x24
 80061f2:	fb03 550b 	mla	r5, r3, fp, r5
 80061f6:	2600      	movs	r6, #0
  if (KMS_GETSESSION(hSession).pCtx != NULL_PTR)
 80061f8:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
  KMS_GETSESSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 80061fa:	626e      	str	r6, [r5, #36]	@ 0x24
  if (KMS_GETSESSION(hSession).pCtx != NULL_PTR)
 80061fc:	b119      	cbz	r1, 8006206 <KMS_Sign+0x52>
  {
    KMS_Free(hSession, KMS_GETSESSION(hSession).pCtx);
 80061fe:	4638      	mov	r0, r7
 8006200:	f7fe fc9c 	bl	8004b3c <KMS_Free>
    KMS_GETSESSION(hSession).pCtx = NULL_PTR;
 8006204:	62ae      	str	r6, [r5, #40]	@ 0x28
  }

  KMS_SetStateIdle(hSession);
 8006206:	4638      	mov	r0, r7
 8006208:	f7fe fb24 	bl	8004854 <KMS_SetStateIdle>

  return e_ret_status;
#else /* KMS_SIGN */
  return CKR_FUNCTION_NOT_SUPPORTED;
#endif /* KMS_SIGN */
}
 800620c:	4620      	mov	r0, r4
 800620e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pkms_object = KMS_Objects_GetPointer(KMS_GETSESSION(hSession).hKey);
 8006212:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8006214:	f7ff f9ae 	bl	8005574 <KMS_Objects_GetPointer>
    if ((pkms_object != NULL) &&
 8006218:	b330      	cbz	r0, 8006268 <KMS_Sign+0xb4>
 800621a:	6803      	ldr	r3, [r0, #0]
 800621c:	4a18      	ldr	r2, [pc, #96]	@ (8006280 <KMS_Sign+0xcc>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d122      	bne.n	8006268 <KMS_Sign+0xb4>
        (pkms_object->version == KMS_ABI_VERSION_CK_2_40) &&
 8006222:	6842      	ldr	r2, [r0, #4]
 8006224:	4b17      	ldr	r3, [pc, #92]	@ (8006284 <KMS_Sign+0xd0>)
 8006226:	429a      	cmp	r2, r3
 8006228:	d11e      	bne.n	8006268 <KMS_Sign+0xb4>
      switch (KMS_GETSESSION(hSession).Mechanism)
 800622a:	6a33      	ldr	r3, [r6, #32]
          kms_aes_cmac_sv_ctx_t *p_ctx = KMS_GETSESSION(hSession).pCtx;
 800622c:	6ab0      	ldr	r0, [r6, #40]	@ 0x28
      switch (KMS_GETSESSION(hSession).Mechanism)
 800622e:	f5a3 5384 	sub.w	r3, r3, #4224	@ 0x1080
 8006232:	3b0a      	subs	r3, #10
 8006234:	2b01      	cmp	r3, #1
 8006236:	d8da      	bhi.n	80061ee <KMS_Sign+0x3a>
          p_ctx->ca_ctx.mFlags |= CA_E_SK_FINAL_APPEND;
 8006238:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
          if (CA_AES_CMAC_Encrypt_Append(&(p_ctx->ca_ctx),
 800623c:	f100 0634 	add.w	r6, r0, #52	@ 0x34
          p_ctx->ca_ctx.mFlags |= CA_E_SK_FINAL_APPEND;
 8006240:	f043 0320 	orr.w	r3, r3, #32
 8006244:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
          if (CA_AES_CMAC_Encrypt_Append(&(p_ctx->ca_ctx),
 8006248:	4652      	mov	r2, sl
 800624a:	4649      	mov	r1, r9
 800624c:	4630      	mov	r0, r6
 800624e:	f7fc f89d 	bl	800238c <CA_AES_CMAC_Encrypt_Append>
 8006252:	b108      	cbz	r0, 8006258 <KMS_Sign+0xa4>
            e_ret_status = CKR_FUNCTION_FAILED;
 8006254:	2406      	movs	r4, #6
 8006256:	e7cb      	b.n	80061f0 <KMS_Sign+0x3c>
            if (CA_AES_CMAC_Encrypt_Finish(&(p_ctx->ca_ctx),
 8006258:	aa0a      	add	r2, sp, #40	@ 0x28
 800625a:	4641      	mov	r1, r8
 800625c:	4630      	mov	r0, r6
 800625e:	f7fc f8af 	bl	80023c0 <CA_AES_CMAC_Encrypt_Finish>
 8006262:	2800      	cmp	r0, #0
 8006264:	d1f6      	bne.n	8006254 <KMS_Sign+0xa0>
 8006266:	e7c3      	b.n	80061f0 <KMS_Sign+0x3c>
      e_ret_status = CKR_OBJECT_HANDLE_INVALID;
 8006268:	2482      	movs	r4, #130	@ 0x82
 800626a:	e7c1      	b.n	80061f0 <KMS_Sign+0x3c>
    return CKR_CRYPTOKI_NOT_INITIALIZED;
 800626c:	f44f 74c8 	mov.w	r4, #400	@ 0x190
 8006270:	e7cc      	b.n	800620c <KMS_Sign+0x58>
    return CKR_SESSION_HANDLE_INVALID;
 8006272:	24b3      	movs	r4, #179	@ 0xb3
 8006274:	e7ca      	b.n	800620c <KMS_Sign+0x58>
    return CKR_OPERATION_NOT_INITIALIZED;
 8006276:	2491      	movs	r4, #145	@ 0x91
 8006278:	e7c8      	b.n	800620c <KMS_Sign+0x58>
 800627a:	bf00      	nop
 800627c:	20000c48 	.word	0x20000c48
 8006280:	b10b0240 	.word	0xb10b0240
 8006284:	b10b0003 	.word	0xb10b0003

08006288 <KMS_VerifyInit>:
  *         @ref sign_verify_init returned values
  */
CK_RV        KMS_VerifyInit(CK_SESSION_HANDLE hSession,
                            CK_MECHANISM_PTR  pMechanism,
                            CK_OBJECT_HANDLE  hKey)
{
 8006288:	b510      	push	{r4, lr}
#if defined(KMS_VERIFY)
  CK_RV e_ret_status = sign_verify_init(hSession, pMechanism, hKey, KMS_FLAG_VERIFY);
 800628a:	2301      	movs	r3, #1
{
 800628c:	4604      	mov	r4, r0
  CK_RV e_ret_status = sign_verify_init(hSession, pMechanism, hKey, KMS_FLAG_VERIFY);
 800628e:	f7ff feb9 	bl	8006004 <sign_verify_init>

  if (e_ret_status == CKR_OK)
 8006292:	b930      	cbnz	r0, 80062a2 <KMS_VerifyInit+0x1a>
  {
    /* If successful, set processing state of the session */
    KMS_GETSESSION(hSession).state = KMS_SESSION_VERIFY;
 8006294:	4b03      	ldr	r3, [pc, #12]	@ (80062a4 <KMS_VerifyInit+0x1c>)
 8006296:	2224      	movs	r2, #36	@ 0x24
 8006298:	3c01      	subs	r4, #1
 800629a:	fb02 3304 	mla	r3, r2, r4, r3
 800629e:	2205      	movs	r2, #5
 80062a0:	60da      	str	r2, [r3, #12]

  return e_ret_status;
#else /* KMS_VERIFY */
  return CKR_FUNCTION_NOT_SUPPORTED;
#endif /* KMS_VERIFY */
}
 80062a2:	bd10      	pop	{r4, pc}
 80062a4:	20000c48 	.word	0x20000c48

080062a8 <KMS_Verify>:
                  CK_BYTE_PTR       pData,           /* signed data */
                  CK_ULONG          ulDataLen,       /* length of signed data */
                  CK_BYTE_PTR       pSignature,      /* signature */
                  CK_ULONG          ulSignatureLen)  /* signature length */

{
 80062a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if defined(KMS_VERIFY)
  CK_RV    e_ret_status ;
  kms_obj_keyhead_t *pkms_object;

  if (!KMS_IS_INITIALIZED())
 80062ac:	4eae      	ldr	r6, [pc, #696]	@ (8006568 <KMS_Verify+0x2c0>)
{
 80062ae:	b0ab      	sub	sp, #172	@ 0xac
 80062b0:	469a      	mov	sl, r3
  if (!KMS_IS_INITIALIZED())
 80062b2:	7833      	ldrb	r3, [r6, #0]
{
 80062b4:	9002      	str	r0, [sp, #8]
 80062b6:	460f      	mov	r7, r1
 80062b8:	4690      	mov	r8, r2
  if (!KMS_IS_INITIALIZED())
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	f000 814d 	beq.w	800655a <KMS_Verify+0x2b2>
  {
    return CKR_CRYPTOKI_NOT_INITIALIZED;
  }
  if (KMS_CheckSessionHdle(hSession) != CKR_OK)
 80062c0:	f7fe fa92 	bl	80047e8 <KMS_CheckSessionHdle>
 80062c4:	4604      	mov	r4, r0
 80062c6:	2800      	cmp	r0, #0
 80062c8:	f040 814a 	bne.w	8006560 <KMS_Verify+0x2b8>
  {
    return CKR_SESSION_HANDLE_INVALID;
  }
  /* No processing already on going  */
  if (KMS_GETSESSION(hSession).state != KMS_SESSION_VERIFY)
 80062cc:	9b02      	ldr	r3, [sp, #8]
 80062ce:	2224      	movs	r2, #36	@ 0x24
 80062d0:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80062d4:	fb02 620b 	mla	r2, r2, fp, r6
 80062d8:	68d3      	ldr	r3, [r2, #12]
 80062da:	2b05      	cmp	r3, #5
 80062dc:	f040 8142 	bne.w	8006564 <KMS_Verify+0x2bc>
  {
    return CKR_OPERATION_NOT_INITIALIZED;
  }

  /* If a digest has to be computed */
  switch (KMS_GETSESSION(hSession).Mechanism)
 80062e0:	6a13      	ldr	r3, [r2, #32]
 80062e2:	f241 0144 	movw	r1, #4164	@ 0x1044
 80062e6:	428b      	cmp	r3, r1
 80062e8:	f000 80ed 	beq.w	80064c6 <KMS_Verify+0x21e>
 80062ec:	d817      	bhi.n	800631e <KMS_Verify+0x76>
 80062ee:	f241 0141 	movw	r1, #4161	@ 0x1041
 80062f2:	428b      	cmp	r3, r1
 80062f4:	f000 80d3 	beq.w	800649e <KMS_Verify+0x1f6>
          /* The CKA_EC_PARAMS attribute specify the Curve to use for the verification */
          e_ret_status = KMS_Objects_SearchAttributes(CKA_EC_PARAMS, pkms_object, &pAttr);
          if (e_ret_status != CKR_OK)
          {
            /* CKA_EC_PARAMS attribute not found */
            e_ret_status = CKR_FUNCTION_FAILED;
 80062f8:	2406      	movs	r4, #6

  /* Upon completion error or not:
   * - free the allocated context
   * - release the session
   */
  KMS_GETSESSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 80062fa:	2324      	movs	r3, #36	@ 0x24
 80062fc:	fb03 660b 	mla	r6, r3, fp, r6
 8006300:	2500      	movs	r5, #0
  if (KMS_GETSESSION(hSession).pCtx != NULL_PTR)
 8006302:	6ab1      	ldr	r1, [r6, #40]	@ 0x28
  KMS_GETSESSION(hSession).hKey = KMS_HANDLE_KEY_NOT_KNOWN;
 8006304:	6275      	str	r5, [r6, #36]	@ 0x24
  if (KMS_GETSESSION(hSession).pCtx != NULL_PTR)
 8006306:	b119      	cbz	r1, 8006310 <KMS_Verify+0x68>
  {
    KMS_Free(hSession, KMS_GETSESSION(hSession).pCtx);
 8006308:	9802      	ldr	r0, [sp, #8]
 800630a:	f7fe fc17 	bl	8004b3c <KMS_Free>
    KMS_GETSESSION(hSession).pCtx = NULL_PTR;
 800630e:	62b5      	str	r5, [r6, #40]	@ 0x28
  }

  KMS_SetStateIdle(hSession);
 8006310:	9802      	ldr	r0, [sp, #8]
 8006312:	f7fe fa9f 	bl	8004854 <KMS_SetStateIdle>
  return e_ret_status;

#else /* KMS_VERIFY */
  return CKR_FUNCTION_NOT_SUPPORTED;
#endif /* KMS_VERIFY */
}
 8006316:	4620      	mov	r0, r4
 8006318:	b02b      	add	sp, #172	@ 0xac
 800631a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch (KMS_GETSESSION(hSession).Mechanism)
 800631e:	f5a3 5384 	sub.w	r3, r3, #4224	@ 0x1080
 8006322:	3b0a      	subs	r3, #10
 8006324:	2b01      	cmp	r3, #1
 8006326:	d8e7      	bhi.n	80062f8 <KMS_Verify+0x50>
    pkms_object = KMS_Objects_GetPointer(KMS_GETSESSION(hSession).hKey);
 8006328:	2324      	movs	r3, #36	@ 0x24
 800632a:	fb03 630b 	mla	r3, r3, fp, r6
 800632e:	9303      	str	r3, [sp, #12]
 8006330:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8006332:	f7ff f91f 	bl	8005574 <KMS_Objects_GetPointer>
    if ((pkms_object != NULL) &&
 8006336:	4681      	mov	r9, r0
 8006338:	2800      	cmp	r0, #0
 800633a:	f000 810c 	beq.w	8006556 <KMS_Verify+0x2ae>
 800633e:	6801      	ldr	r1, [r0, #0]
 8006340:	4a8a      	ldr	r2, [pc, #552]	@ (800656c <KMS_Verify+0x2c4>)
 8006342:	9b03      	ldr	r3, [sp, #12]
 8006344:	4291      	cmp	r1, r2
 8006346:	f040 8106 	bne.w	8006556 <KMS_Verify+0x2ae>
        (pkms_object->version == KMS_ABI_VERSION_CK_2_40) &&
 800634a:	6841      	ldr	r1, [r0, #4]
 800634c:	f46f 700f 	mvn.w	r0, #572	@ 0x23c
 8006350:	4402      	add	r2, r0
 8006352:	4291      	cmp	r1, r2
 8006354:	f040 80ff 	bne.w	8006556 <KMS_Verify+0x2ae>
          kms_ecdsa_sv_ctx_t *p_ctx = KMS_GETSESSION(hSession).pCtx;
 8006358:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
      switch (KMS_GETSESSION(hSession).Mechanism)
 800635a:	6a1b      	ldr	r3, [r3, #32]
 800635c:	f241 0244 	movw	r2, #4164	@ 0x1044
 8006360:	4293      	cmp	r3, r2
 8006362:	d005      	beq.n	8006370 <KMS_Verify+0xc8>
 8006364:	f200 80cf 	bhi.w	8006506 <KMS_Verify+0x25e>
 8006368:	f241 0241 	movw	r2, #4161	@ 0x1041
 800636c:	4293      	cmp	r3, r2
 800636e:	d1c3      	bne.n	80062f8 <KMS_Verify+0x50>
          CA_ECpoint_stt *PubKey = NULL;
 8006370:	2300      	movs	r3, #0
          e_ret_status = KMS_Objects_SearchAttributes(CKA_EC_PARAMS, pkms_object, &pAttr);
 8006372:	aa05      	add	r2, sp, #20
 8006374:	4649      	mov	r1, r9
 8006376:	f44f 70c0 	mov.w	r0, #384	@ 0x180
          CA_ECDSAsignature_stt *p_sign = NULL;
 800637a:	e9cd 3306 	strd	r3, r3, [sp, #24]
          e_ret_status = KMS_Objects_SearchAttributes(CKA_EC_PARAMS, pkms_object, &pAttr);
 800637e:	f7ff f97f 	bl	8005680 <KMS_Objects_SearchAttributes>
          if (e_ret_status != CKR_OK)
 8006382:	2800      	cmp	r0, #0
 8006384:	d1b8      	bne.n	80062f8 <KMS_Verify+0x50>
          e_ret_status = KMS_ECC_LoadCurve(pAttr, &EC_st);
 8006386:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 800638a:	9805      	ldr	r0, [sp, #20]
 800638c:	4641      	mov	r1, r8
 800638e:	f7fd f8f1 	bl	8003574 <KMS_ECC_LoadCurve>
          if (e_ret_status != CKR_OK)
 8006392:	2800      	cmp	r0, #0
 8006394:	d1b0      	bne.n	80062f8 <KMS_Verify+0x50>
          mb_st.pmBuf = p_ctx->tmpbuffer;
 8006396:	f105 0328 	add.w	r3, r5, #40	@ 0x28
          if (CA_ECCinitEC(&EC_st, &mb_st) != CA_ECC_SUCCESS)
 800639a:	af08      	add	r7, sp, #32
          mb_st.pmBuf = p_ctx->tmpbuffer;
 800639c:	9308      	str	r3, [sp, #32]
          if (CA_ECCinitEC(&EC_st, &mb_st) != CA_ECC_SUCCESS)
 800639e:	4639      	mov	r1, r7
          mb_st.mSize = (int16_t)sizeof(p_ctx->tmpbuffer);
 80063a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
          if (CA_ECCinitEC(&EC_st, &mb_st) != CA_ECC_SUCCESS)
 80063a4:	4640      	mov	r0, r8
          mb_st.mSize = (int16_t)sizeof(p_ctx->tmpbuffer);
 80063a6:	9309      	str	r3, [sp, #36]	@ 0x24
          if (CA_ECCinitEC(&EC_st, &mb_st) != CA_ECC_SUCCESS)
 80063a8:	f7fc fb01 	bl	80029ae <CA_ECCinitEC>
 80063ac:	2800      	cmp	r0, #0
 80063ae:	d1a3      	bne.n	80062f8 <KMS_Verify+0x50>
          if (CA_ECCinitPoint(&PubKey, &EC_st, &mb_st) != CA_ECC_SUCCESS)
 80063b0:	463a      	mov	r2, r7
 80063b2:	4641      	mov	r1, r8
 80063b4:	a806      	add	r0, sp, #24
 80063b6:	f7fc fafe 	bl	80029b6 <CA_ECCinitPoint>
 80063ba:	2800      	cmp	r0, #0
 80063bc:	d19c      	bne.n	80062f8 <KMS_Verify+0x50>
          e_ret_status = KMS_Objects_SearchAttributes(CKA_EC_POINT, pkms_object, &pAttr);
 80063be:	aa05      	add	r2, sp, #20
 80063c0:	4649      	mov	r1, r9
 80063c2:	f240 1081 	movw	r0, #385	@ 0x181
 80063c6:	f7ff f95b 	bl	8005680 <KMS_Objects_SearchAttributes>
          if (e_ret_status != CKR_OK)
 80063ca:	2800      	cmp	r0, #0
 80063cc:	d194      	bne.n	80062f8 <KMS_Verify+0x50>
          if (pAttr->size > sizeof(p_ctx->der_pub))
 80063ce:	9805      	ldr	r0, [sp, #20]
          p_ctx->pub_size = (uint32_t)EC_st.mNsize;
 80063d0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
          if (pAttr->size > sizeof(p_ctx->der_pub))
 80063d2:	6841      	ldr	r1, [r0, #4]
          p_ctx->pub_size = (uint32_t)EC_st.mNsize;
 80063d4:	f8c5 32ac 	str.w	r3, [r5, #684]	@ 0x2ac
          if (pAttr->size > sizeof(p_ctx->der_pub))
 80063d8:	2944      	cmp	r1, #68	@ 0x44
 80063da:	f200 80b8 	bhi.w	800654e <KMS_Verify+0x2a6>
          KMS_Objects_BlobU32_2_u8ptr(&(pAttr->data[0]), pAttr->size, p_ctx->der_pub);
 80063de:	f505 740a 	add.w	r4, r5, #552	@ 0x228
 80063e2:	4622      	mov	r2, r4
 80063e4:	3008      	adds	r0, #8
          if (KMS_DerX962_ExtractPublicKeyCoord(p_ctx->der_pub,
 80063e6:	f505 7923 	add.w	r9, r5, #652	@ 0x28c
          KMS_Objects_BlobU32_2_u8ptr(&(pAttr->data[0]), pAttr->size, p_ctx->der_pub);
 80063ea:	f7ff fa06 	bl	80057fa <KMS_Objects_BlobU32_2_u8ptr>
          if (KMS_DerX962_ExtractPublicKeyCoord(p_ctx->der_pub,
 80063ee:	f505 711b 	add.w	r1, r5, #620	@ 0x26c
 80063f2:	4620      	mov	r0, r4
 80063f4:	f8d5 32ac 	ldr.w	r3, [r5, #684]	@ 0x2ac
 80063f8:	9103      	str	r1, [sp, #12]
 80063fa:	464a      	mov	r2, r9
 80063fc:	f7fc fdd1 	bl	8002fa2 <KMS_DerX962_ExtractPublicKeyCoord>
 8006400:	9903      	ldr	r1, [sp, #12]
 8006402:	4604      	mov	r4, r0
 8006404:	2800      	cmp	r0, #0
 8006406:	f47f af77 	bne.w	80062f8 <KMS_Verify+0x50>
          (void)CA_ECCsetPointCoordinate(PubKey, CA_E_ECC_POINT_COORDINATE_X, p_ctx->pub_x, (int32_t)(p_ctx->pub_size));
 800640a:	460a      	mov	r2, r1
 800640c:	f8d5 32ac 	ldr.w	r3, [r5, #684]	@ 0x2ac
 8006410:	4601      	mov	r1, r0
 8006412:	9806      	ldr	r0, [sp, #24]
 8006414:	f7fc fb16 	bl	8002a44 <CA_ECCsetPointCoordinate>
          (void)CA_ECCsetPointCoordinate(PubKey, CA_E_ECC_POINT_COORDINATE_Y, p_ctx->pub_y, (int32_t)(p_ctx->pub_size));
 8006418:	464a      	mov	r2, r9
 800641a:	2101      	movs	r1, #1
 800641c:	f8d5 32ac 	ldr.w	r3, [r5, #684]	@ 0x2ac
 8006420:	9806      	ldr	r0, [sp, #24]
 8006422:	f7fc fb0f 	bl	8002a44 <CA_ECCsetPointCoordinate>
          if (CA_ECCvalidatePubKey(PubKey, &EC_st, &mb_st) != CA_ECC_SUCCESS)
 8006426:	9806      	ldr	r0, [sp, #24]
 8006428:	463a      	mov	r2, r7
 800642a:	4641      	mov	r1, r8
 800642c:	f7fc fc97 	bl	8002d5e <CA_ECCvalidatePubKey>
 8006430:	2800      	cmp	r0, #0
 8006432:	f47f af61 	bne.w	80062f8 <KMS_Verify+0x50>
          if (CA_ECDSAinitSign(&p_sign, &EC_st, &mb_st) != CA_ECC_SUCCESS)
 8006436:	463a      	mov	r2, r7
 8006438:	4641      	mov	r1, r8
 800643a:	a807      	add	r0, sp, #28
 800643c:	f7fc fb18 	bl	8002a70 <CA_ECDSAinitSign>
 8006440:	2800      	cmp	r0, #0
 8006442:	f47f af59 	bne.w	80062f8 <KMS_Verify+0x50>
          (void)CA_ECDSAsetSignature(p_sign,
 8006446:	f8d5 32ac 	ldr.w	r3, [r5, #684]	@ 0x2ac
 800644a:	9807      	ldr	r0, [sp, #28]
 800644c:	4652      	mov	r2, sl
 800644e:	4621      	mov	r1, r4
 8006450:	f7fc fb5a 	bl	8002b08 <CA_ECDSAsetSignature>
          (void)CA_ECDSAsetSignature(p_sign,
 8006454:	f8d5 32ac 	ldr.w	r3, [r5, #684]	@ 0x2ac
 8006458:	9807      	ldr	r0, [sp, #28]
 800645a:	eb0a 0203 	add.w	r2, sl, r3
 800645e:	2101      	movs	r1, #1
 8006460:	f7fc fb52 	bl	8002b08 <CA_ECDSAsetSignature>
          verctx.pmPubKey = PubKey;
 8006464:	9b06      	ldr	r3, [sp, #24]
          if (CA_ECDSAverify(p_ctx->hash, p_ctx->hashSize, p_sign, &verctx, &mb_st) == CA_SIGNATURE_VALID)
 8006466:	9700      	str	r7, [sp, #0]
 8006468:	9a07      	ldr	r2, [sp, #28]
 800646a:	6a29      	ldr	r1, [r5, #32]
          verctx.pmPubKey = PubKey;
 800646c:	930a      	str	r3, [sp, #40]	@ 0x28
          if (CA_ECDSAverify(p_ctx->hash, p_ctx->hashSize, p_sign, &verctx, &mb_st) == CA_SIGNATURE_VALID)
 800646e:	4628      	mov	r0, r5
 8006470:	ab0a      	add	r3, sp, #40	@ 0x28
          verctx.pmEC = &EC_st;
 8006472:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
          if (CA_ECDSAverify(p_ctx->hash, p_ctx->hashSize, p_sign, &verctx, &mb_st) == CA_SIGNATURE_VALID)
 8006476:	f7fc fb5c 	bl	8002b32 <CA_ECDSAverify>
            e_ret_status = CKR_SIGNATURE_INVALID;
 800647a:	f240 33eb 	movw	r3, #1003	@ 0x3eb
 800647e:	4298      	cmp	r0, r3
 8006480:	bf18      	it	ne
 8006482:	24c0      	movne	r4, #192	@ 0xc0
          (void)CA_ECDSAfreeSign(&p_sign, &mb_st);
 8006484:	4639      	mov	r1, r7
 8006486:	a807      	add	r0, sp, #28
 8006488:	f7fc fb3c 	bl	8002b04 <CA_ECDSAfreeSign>
          (void)CA_ECCfreePoint(&PubKey, &mb_st);
 800648c:	4639      	mov	r1, r7
 800648e:	a806      	add	r0, sp, #24
 8006490:	f7fc fad6 	bl	8002a40 <CA_ECCfreePoint>
          (void)CA_ECCfreeEC(&EC_st, &mb_st);
 8006494:	4639      	mov	r1, r7
 8006496:	4640      	mov	r0, r8
 8006498:	f7fc fa8b 	bl	80029b2 <CA_ECCfreeEC>
          break;
 800649c:	e72d      	b.n	80062fa <KMS_Verify+0x52>
      else if (ulDataLen == CA_CRL_SHA256_SIZE)
 800649e:	f1b8 0f20 	cmp.w	r8, #32
 80064a2:	d156      	bne.n	8006552 <KMS_Verify+0x2aa>
      kms_asym_sv_ctx_t *p_ctx = KMS_GETSESSION(hSession).pCtx;
 80064a4:	6a93      	ldr	r3, [r2, #40]	@ 0x28
        p_ctx->hashMethod = CA_E_SHA256;
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        (void)memcpy(p_ctx->hash, pData, CA_CRL_SHA256_SIZE);
 80064ac:	4619      	mov	r1, r3
 80064ae:	463a      	mov	r2, r7
 80064b0:	f107 0020 	add.w	r0, r7, #32
 80064b4:	f852 5b04 	ldr.w	r5, [r2], #4
 80064b8:	f841 5b04 	str.w	r5, [r1], #4
 80064bc:	4282      	cmp	r2, r0
 80064be:	d1f9      	bne.n	80064b4 <KMS_Verify+0x20c>
        p_ctx->hashSize = (int32_t)CA_CRL_SHA256_SIZE;
 80064c0:	2220      	movs	r2, #32
 80064c2:	621a      	str	r2, [r3, #32]
  if (e_ret_status == CKR_OK)
 80064c4:	e730      	b.n	8006328 <KMS_Verify+0x80>
      kms_asym_sv_ctx_t *p_ctx = KMS_GETSESSION(hSession).pCtx;
 80064c6:	6a95      	ldr	r5, [r2, #40]	@ 0x28
      p_ctx->hashMethod = CA_E_SHA256;
 80064c8:	2301      	movs	r3, #1
 80064ca:	f885 3024 	strb.w	r3, [r5, #36]	@ 0x24
      HASH_ctxt_st.mFlags = CA_E_HASH_DEFAULT;
 80064ce:	f88d 0034 	strb.w	r0, [sp, #52]	@ 0x34
      HASH_ctxt_st.mTagSize = (int32_t)CA_CRL_SHA256_SIZE;
 80064d2:	2320      	movs	r3, #32
      if (CA_SHA256_Init(&HASH_ctxt_st) == CA_AES_SUCCESS)
 80064d4:	a80c      	add	r0, sp, #48	@ 0x30
      HASH_ctxt_st.mTagSize = (int32_t)CA_CRL_SHA256_SIZE;
 80064d6:	930e      	str	r3, [sp, #56]	@ 0x38
      if (CA_SHA256_Init(&HASH_ctxt_st) == CA_AES_SUCCESS)
 80064d8:	f7fc fa3a 	bl	8002950 <CA_SHA256_Init>
 80064dc:	2800      	cmp	r0, #0
 80064de:	f47f af0b 	bne.w	80062f8 <KMS_Verify+0x50>
        if (CA_SHA256_Append(&HASH_ctxt_st, pData, (int32_t)ulDataLen) == CA_AES_SUCCESS)
 80064e2:	4642      	mov	r2, r8
 80064e4:	4639      	mov	r1, r7
 80064e6:	a80c      	add	r0, sp, #48	@ 0x30
 80064e8:	f7fc fa42 	bl	8002970 <CA_SHA256_Append>
 80064ec:	2800      	cmp	r0, #0
 80064ee:	f47f af03 	bne.w	80062f8 <KMS_Verify+0x50>
          if (CA_SHA256_Finish(&HASH_ctxt_st, p_ctx->hash, &(p_ctx->hashSize)) == CA_AES_SUCCESS)
 80064f2:	f105 0220 	add.w	r2, r5, #32
 80064f6:	4629      	mov	r1, r5
 80064f8:	a80c      	add	r0, sp, #48	@ 0x30
 80064fa:	f7fc fa47 	bl	800298c <CA_SHA256_Finish>
 80064fe:	2800      	cmp	r0, #0
 8006500:	f47f aefa 	bne.w	80062f8 <KMS_Verify+0x50>
 8006504:	e710      	b.n	8006328 <KMS_Verify+0x80>
      switch (KMS_GETSESSION(hSession).Mechanism)
 8006506:	f5a3 5384 	sub.w	r3, r3, #4224	@ 0x1080
 800650a:	3b0a      	subs	r3, #10
 800650c:	2b01      	cmp	r3, #1
 800650e:	f63f aef3 	bhi.w	80062f8 <KMS_Verify+0x50>
          p_ctx->ca_ctx.mFlags |= CA_E_SK_FINAL_APPEND;
 8006512:	f895 3038 	ldrb.w	r3, [r5, #56]	@ 0x38
          if (CA_AES_CMAC_Decrypt_Append(&(p_ctx->ca_ctx),
 8006516:	f105 0934 	add.w	r9, r5, #52	@ 0x34
          p_ctx->ca_ctx.mFlags |= CA_E_SK_FINAL_APPEND;
 800651a:	f043 0320 	orr.w	r3, r3, #32
 800651e:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
          if (CA_AES_CMAC_Decrypt_Append(&(p_ctx->ca_ctx),
 8006522:	4642      	mov	r2, r8
 8006524:	4639      	mov	r1, r7
 8006526:	4648      	mov	r0, r9
 8006528:	f7fb ff75 	bl	8002416 <CA_AES_CMAC_Decrypt_Append>
 800652c:	2800      	cmp	r0, #0
 800652e:	f47f aee3 	bne.w	80062f8 <KMS_Verify+0x50>
          p_ctx->ca_ctx.mTagSize = (int32_t)ulSignatureLen;
 8006532:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
          if (CA_AES_CMAC_Decrypt_Finish(&(p_ctx->ca_ctx),
 8006534:	aa34      	add	r2, sp, #208	@ 0xd0
          p_ctx->ca_ctx.pmTag = pSignature;
 8006536:	e9c5 a318 	strd	sl, r3, [r5, #96]	@ 0x60
          if (CA_AES_CMAC_Decrypt_Finish(&(p_ctx->ca_ctx),
 800653a:	4651      	mov	r1, sl
 800653c:	4648      	mov	r0, r9
 800653e:	f7fb ff6c 	bl	800241a <CA_AES_CMAC_Decrypt_Finish>
            e_ret_status = CKR_SIGNATURE_INVALID;
 8006542:	f240 33eb 	movw	r3, #1003	@ 0x3eb
 8006546:	4298      	cmp	r0, r3
 8006548:	bf18      	it	ne
 800654a:	24c0      	movne	r4, #192	@ 0xc0
 800654c:	e6d5      	b.n	80062fa <KMS_Verify+0x52>
            e_ret_status = CKR_DATA_INVALID;
 800654e:	2420      	movs	r4, #32
 8006550:	e6d3      	b.n	80062fa <KMS_Verify+0x52>
        e_ret_status = CKR_ARGUMENTS_BAD;
 8006552:	2407      	movs	r4, #7
 8006554:	e6d1      	b.n	80062fa <KMS_Verify+0x52>
      e_ret_status = CKR_OBJECT_HANDLE_INVALID;
 8006556:	2482      	movs	r4, #130	@ 0x82
 8006558:	e6cf      	b.n	80062fa <KMS_Verify+0x52>
    return CKR_CRYPTOKI_NOT_INITIALIZED;
 800655a:	f44f 74c8 	mov.w	r4, #400	@ 0x190
 800655e:	e6da      	b.n	8006316 <KMS_Verify+0x6e>
    return CKR_SESSION_HANDLE_INVALID;
 8006560:	24b3      	movs	r4, #179	@ 0xb3
 8006562:	e6d8      	b.n	8006316 <KMS_Verify+0x6e>
    return CKR_OPERATION_NOT_INITIALIZED;
 8006564:	2491      	movs	r4, #145	@ 0x91
 8006566:	e6d6      	b.n	8006316 <KMS_Verify+0x6e>
 8006568:	20000c48 	.word	0x20000c48
 800656c:	b10b0240 	.word	0xb10b0240

08006570 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8006570:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006574:	4905      	ldr	r1, [pc, #20]	@ (800658c <__NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006576:	4b06      	ldr	r3, [pc, #24]	@ (8006590 <__NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006578:	68ca      	ldr	r2, [r1, #12]
 800657a:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800657e:	4313      	orrs	r3, r2
 8006580:	60cb      	str	r3, [r1, #12]
 8006582:	f3bf 8f4f 	dsb	sy
    __NOP();
 8006586:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8006588:	e7fd      	b.n	8006586 <__NVIC_SystemReset+0x16>
 800658a:	bf00      	nop
 800658c:	e000ed00 	.word	0xe000ed00
 8006590:	05fa0004 	.word	0x05fa0004

08006594 <SE_CallGateService>:
   */
  static SE_LockStatus SE_LockRestrictedServices = SE_UNLOCKED;

  SE_ErrorStatus e_ret_status = SE_ERROR;

  switch (eID)
 8006594:	2892      	cmp	r0, #146	@ 0x92
{
 8006596:	e92d 4778 	stmdb	sp!, {r3, r4, r5, r6, r8, r9, sl, lr}
 800659a:	460c      	mov	r4, r1
  switch (eID)
 800659c:	d05c      	beq.n	8006658 <SE_CallGateService+0xc4>
 800659e:	d82d      	bhi.n	80065fc <SE_CallGateService+0x68>
 80065a0:	2810      	cmp	r0, #16
 80065a2:	d044      	beq.n	800662e <SE_CallGateService+0x9a>
 80065a4:	d806      	bhi.n	80065b4 <SE_CallGateService+0x20>
 80065a6:	2800      	cmp	r0, #0
 80065a8:	d049      	beq.n	800663e <SE_CallGateService+0xaa>
 80065aa:	3804      	subs	r0, #4
 80065ac:	2805      	cmp	r0, #5
 80065ae:	d93e      	bls.n	800662e <SE_CallGateService+0x9a>
    case SE_INIT_ID:
    {
      uint32_t se_system_core_clock;

      /* Check that the Secure Engine services are not locked */
      IS_SE_LOCKED_SERVICES();
 80065b0:	f7ff ffde 	bl	8006570 <__NVIC_SystemReset>
  switch (eID)
 80065b4:	2820      	cmp	r0, #32
 80065b6:	d1fb      	bne.n	80065b0 <SE_CallGateService+0x1c>
      SE_APP_ActiveFwInfo_t *p_FwInfo;
      uint32_t slot_number;

      /* Retrieve argument(s) */
      slot_number = va_arg(arguments, uint32_t);
      p_FwInfo = va_arg(arguments, SE_APP_ActiveFwInfo_t *);
 80065b8:	e9d2 9500 	ldrd	r9, r5, [r2]

      /* Check structure allocation */
      if (SE_LL_Buffer_in_ram((void *)p_FwInfo, sizeof(*p_FwInfo)) != SE_SUCCESS)
 80065bc:	2108      	movs	r1, #8
 80065be:	4628      	mov	r0, r5
 80065c0:	f7fa fabe 	bl	8000b40 <SE_LL_Buffer_in_ram>
 80065c4:	4b56      	ldr	r3, [pc, #344]	@ (8006720 <SE_CallGateService+0x18c>)
 80065c6:	4298      	cmp	r0, r3
 80065c8:	4606      	mov	r6, r0
 80065ca:	d130      	bne.n	800662e <SE_CallGateService+0x9a>
      {
        e_ret_status = SE_ERROR;
        break;
      }
      if (SE_LL_Buffer_part_of_SE_ram((void *)p_FwInfo, sizeof(*p_FwInfo)) == SE_SUCCESS)
 80065cc:	2108      	movs	r1, #8
 80065ce:	4628      	mov	r0, r5
 80065d0:	f7fa fae2 	bl	8000b98 <SE_LL_Buffer_part_of_SE_ram>
 80065d4:	42b0      	cmp	r0, r6
 80065d6:	d02a      	beq.n	800662e <SE_CallGateService+0x9a>
        e_ret_status = SE_ERROR;
        break;
      }

      /* Double Check to avoid basic fault injection : Check structure allocation */
      if (SE_LL_Buffer_in_ram((void *)p_FwInfo, sizeof(*p_FwInfo)) != SE_SUCCESS)
 80065d8:	2108      	movs	r1, #8
 80065da:	4628      	mov	r0, r5
 80065dc:	f7fa fab0 	bl	8000b40 <SE_LL_Buffer_in_ram>
 80065e0:	42b0      	cmp	r0, r6
 80065e2:	4680      	mov	r8, r0
 80065e4:	d123      	bne.n	800662e <SE_CallGateService+0x9a>
      {
        e_ret_status = SE_ERROR;
        break;
      }
      if (SE_LL_Buffer_part_of_SE_ram((void *)p_FwInfo, sizeof(*p_FwInfo)) == SE_SUCCESS)
 80065e6:	2108      	movs	r1, #8
 80065e8:	4628      	mov	r0, r5
 80065ea:	f7fa fad5 	bl	8000b98 <SE_LL_Buffer_part_of_SE_ram>
 80065ee:	4540      	cmp	r0, r8
 80065f0:	d01d      	beq.n	800662e <SE_CallGateService+0x9a>
      {
        e_ret_status = SE_ERROR;
        break;
      }

      e_ret_status = SE_APPLI_GetActiveFwInfo(slot_number, p_FwInfo);
 80065f2:	4629      	mov	r1, r5
 80065f4:	4648      	mov	r0, r9
 80065f6:	f000 f8e1 	bl	80067bc <SE_APPLI_GetActiveFwInfo>
      break;
 80065fa:	e050      	b.n	800669e <SE_CallGateService+0x10a>
  switch (eID)
 80065fc:	2894      	cmp	r0, #148	@ 0x94
 80065fe:	d078      	beq.n	80066f2 <SE_CallGateService+0x15e>
 8006600:	d951      	bls.n	80066a6 <SE_CallGateService+0x112>
 8006602:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8006606:	d07f      	beq.n	8006708 <SE_CallGateService+0x174>
 8006608:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 800660c:	d00f      	beq.n	800662e <SE_CallGateService+0x9a>

    default:
    {
#ifdef KMS_ENABLED
      /* Is it a request to the KMS lib */
      if ((eID & SE_MW_ADDON_MSB_MASK) == SE_MW_ADDON_KMS_MSB)
 800660e:	f000 43e0 	and.w	r3, r0, #1879048192	@ 0x70000000
 8006612:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006616:	d1cb      	bne.n	80065b0 <SE_CallGateService+0x1c>
      {
        CK_RV    l_rv;
        /* Clear SE MW part of the ID, add KMS calling cluster part to the ID */
        KMS_FunctionID_t kmsID = (eID & ~(SE_MW_ADDON_MSB_MASK | KMS_CLUST_MASK)) | KMS_CLUST_UNSEC;
 8006618:	f020 40e1 	bic.w	r0, r0, #1887436800	@ 0x70800000
 800661c:	f420 00fe 	bic.w	r0, r0, #8323072	@ 0x7f0000

        /* To limit the number of passed parameters, we consider that */
        /* KMS_Entry() returns the CK_RV error. */
        l_rv = KMS_Entry(kmsID, arguments);
 8006620:	4611      	mov	r1, r2
 8006622:	f440 00b4 	orr.w	r0, r0, #5898240	@ 0x5a0000
 8006626:	f7fd fbc5 	bl	8003db4 <KMS_Entry>

        /*
         * SE_StatusTypeDef is used to forward the CK_RV result to upper layers
         */
        *peSE_Status = l_rv;
 800662a:	6020      	str	r0, [r4, #0]

        if (l_rv == CKR_OK)
 800662c:	b188      	cbz	r0, 8006652 <SE_CallGateService+0xbe>
      NVIC_SystemReset();

      break;
    }
  }
  if ((e_ret_status == SE_ERROR) && (*peSE_Status == SE_OK))
 800662e:	4b3d      	ldr	r3, [pc, #244]	@ (8006724 <SE_CallGateService+0x190>)
 8006630:	6822      	ldr	r2, [r4, #0]
{
 8006632:	483d      	ldr	r0, [pc, #244]	@ (8006728 <SE_CallGateService+0x194>)
  if ((e_ret_status == SE_ERROR) && (*peSE_Status == SE_OK))
 8006634:	429a      	cmp	r2, r3
  {
    *peSE_Status = SE_KO;
 8006636:	bf04      	itt	eq
 8006638:	4b3c      	ldreq	r3, [pc, #240]	@ (800672c <SE_CallGateService+0x198>)
 800663a:	6023      	streq	r3, [r4, #0]
  }
  return e_ret_status;
 800663c:	e00a      	b.n	8006654 <SE_CallGateService+0xc0>
      IS_SE_LOCKED_SERVICES();
 800663e:	4b3c      	ldr	r3, [pc, #240]	@ (8006730 <SE_CallGateService+0x19c>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f1b3 3f55 	cmp.w	r3, #1431655765	@ 0x55555555
 8006646:	d1b3      	bne.n	80065b0 <SE_CallGateService+0x1c>
      SE_SetSystemCoreClock(se_system_core_clock);
 8006648:	6810      	ldr	r0, [r2, #0]
 800664a:	f000 f8d5 	bl	80067f8 <SE_SetSystemCoreClock>
      *peSE_Status = SE_OK;
 800664e:	4b35      	ldr	r3, [pc, #212]	@ (8006724 <SE_CallGateService+0x190>)
 8006650:	6023      	str	r3, [r4, #0]
          e_ret_status = SE_SUCCESS;
 8006652:	4833      	ldr	r0, [pc, #204]	@ (8006720 <SE_CallGateService+0x18c>)
}
 8006654:	e8bd 8778 	ldmia.w	sp!, {r3, r4, r5, r6, r8, r9, sl, pc}
      IS_SE_LOCKED_SERVICES();
 8006658:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006730 <SE_CallGateService+0x19c>
 800665c:	f8da 3000 	ldr.w	r3, [sl]
 8006660:	f1b3 3f55 	cmp.w	r3, #1431655765	@ 0x55555555
 8006664:	d1a4      	bne.n	80065b0 <SE_CallGateService+0x1c>
      p_source = va_arg(arguments, const uint8_t *);
 8006666:	e9d2 6900 	ldrd	r6, r9, [r2]
      length = va_arg(arguments, uint32_t);
 800666a:	f8d2 8008 	ldr.w	r8, [r2, #8]
      if (SE_LL_Buffer_in_SBSFU_ram(p_destination, length) != SE_SUCCESS)
 800666e:	4630      	mov	r0, r6
 8006670:	4641      	mov	r1, r8
 8006672:	f7fa fa7b 	bl	8000b6c <SE_LL_Buffer_in_SBSFU_ram>
 8006676:	4b2a      	ldr	r3, [pc, #168]	@ (8006720 <SE_CallGateService+0x18c>)
 8006678:	4298      	cmp	r0, r3
 800667a:	4605      	mov	r5, r0
 800667c:	d1d7      	bne.n	800662e <SE_CallGateService+0x9a>
      IS_SE_LOCKED_SERVICES();
 800667e:	f8da 3000 	ldr.w	r3, [sl]
 8006682:	f1b3 3f55 	cmp.w	r3, #1431655765	@ 0x55555555
 8006686:	d193      	bne.n	80065b0 <SE_CallGateService+0x1c>
      if (SE_LL_Buffer_in_SBSFU_ram(p_destination, length) != SE_SUCCESS)
 8006688:	4641      	mov	r1, r8
 800668a:	4630      	mov	r0, r6
 800668c:	f7fa fa6e 	bl	8000b6c <SE_LL_Buffer_in_SBSFU_ram>
 8006690:	42a8      	cmp	r0, r5
 8006692:	d1cc      	bne.n	800662e <SE_CallGateService+0x9a>
      e_ret_status = SE_IMG_Read(p_destination, p_source, length);
 8006694:	4642      	mov	r2, r8
 8006696:	4649      	mov	r1, r9
 8006698:	4630      	mov	r0, r6
 800669a:	f000 f863 	bl	8006764 <SE_IMG_Read>
  if ((e_ret_status == SE_ERROR) && (*peSE_Status == SE_OK))
 800669e:	4b22      	ldr	r3, [pc, #136]	@ (8006728 <SE_CallGateService+0x194>)
 80066a0:	4298      	cmp	r0, r3
 80066a2:	d1d7      	bne.n	8006654 <SE_CallGateService+0xc0>
 80066a4:	e7c3      	b.n	800662e <SE_CallGateService+0x9a>
      IS_SE_LOCKED_SERVICES();
 80066a6:	f8df a088 	ldr.w	sl, [pc, #136]	@ 8006730 <SE_CallGateService+0x19c>
 80066aa:	f8da 3000 	ldr.w	r3, [sl]
 80066ae:	f1b3 3f55 	cmp.w	r3, #1431655765	@ 0x55555555
 80066b2:	f47f af7d 	bne.w	80065b0 <SE_CallGateService+0x1c>
      p_source = va_arg(arguments, const uint8_t *);
 80066b6:	e9d2 9600 	ldrd	r9, r6, [r2]
      length = va_arg(arguments, uint32_t);
 80066ba:	f8d2 8008 	ldr.w	r8, [r2, #8]
      if (SE_LL_Buffer_in_SBSFU_ram(p_source, length) != SE_SUCCESS)
 80066be:	4630      	mov	r0, r6
 80066c0:	4641      	mov	r1, r8
 80066c2:	f7fa fa53 	bl	8000b6c <SE_LL_Buffer_in_SBSFU_ram>
 80066c6:	4b16      	ldr	r3, [pc, #88]	@ (8006720 <SE_CallGateService+0x18c>)
 80066c8:	4298      	cmp	r0, r3
 80066ca:	4605      	mov	r5, r0
 80066cc:	d1af      	bne.n	800662e <SE_CallGateService+0x9a>
      IS_SE_LOCKED_SERVICES();
 80066ce:	f8da 3000 	ldr.w	r3, [sl]
 80066d2:	f1b3 3f55 	cmp.w	r3, #1431655765	@ 0x55555555
 80066d6:	f47f af6b 	bne.w	80065b0 <SE_CallGateService+0x1c>
      if (SE_LL_Buffer_in_SBSFU_ram(p_source, length) != SE_SUCCESS)
 80066da:	4641      	mov	r1, r8
 80066dc:	4630      	mov	r0, r6
 80066de:	f7fa fa45 	bl	8000b6c <SE_LL_Buffer_in_SBSFU_ram>
 80066e2:	42a8      	cmp	r0, r5
 80066e4:	d1a3      	bne.n	800662e <SE_CallGateService+0x9a>
      e_ret_status = SE_IMG_Write(p_destination, p_source, length);
 80066e6:	4642      	mov	r2, r8
 80066e8:	4631      	mov	r1, r6
 80066ea:	4648      	mov	r0, r9
 80066ec:	f000 f824 	bl	8006738 <SE_IMG_Write>
      break;
 80066f0:	e7d5      	b.n	800669e <SE_CallGateService+0x10a>
      IS_SE_LOCKED_SERVICES();
 80066f2:	4b0f      	ldr	r3, [pc, #60]	@ (8006730 <SE_CallGateService+0x19c>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f1b3 3f55 	cmp.w	r3, #1431655765	@ 0x55555555
 80066fa:	f47f af59 	bne.w	80065b0 <SE_CallGateService+0x1c>
      e_ret_status = SE_IMG_Erase(p_destination, length);
 80066fe:	e9d2 0100 	ldrd	r0, r1, [r2]
 8006702:	f000 f845 	bl	8006790 <SE_IMG_Erase>
      break;
 8006706:	e7ca      	b.n	800669e <SE_CallGateService+0x10a>
      SE_LockRestrictedServices = SE_LOCKED;
 8006708:	4d09      	ldr	r5, [pc, #36]	@ (8006730 <SE_CallGateService+0x19c>)
 800670a:	4e0a      	ldr	r6, [pc, #40]	@ (8006734 <SE_CallGateService+0x1a0>)
      SE_LL_CORE_Cleanup();
 800670c:	f7fa faae 	bl	8000c6c <SE_LL_CORE_Cleanup>
      SE_LockRestrictedServices = SE_LOCKED;
 8006710:	602e      	str	r6, [r5, #0]
      if (SE_LL_Lock_Keys() != SE_SUCCESS)
 8006712:	f7fa fa75 	bl	8000c00 <SE_LL_Lock_Keys>
 8006716:	4b02      	ldr	r3, [pc, #8]	@ (8006720 <SE_CallGateService+0x18c>)
 8006718:	4298      	cmp	r0, r3
 800671a:	d188      	bne.n	800662e <SE_CallGateService+0x9a>
      SE_LockRestrictedServices = SE_LOCKED;
 800671c:	602e      	str	r6, [r5, #0]
  if ((e_ret_status == SE_ERROR) && (*peSE_Status == SE_OK))
 800671e:	e798      	b.n	8006652 <SE_CallGateService+0xbe>
 8006720:	0012310f 	.word	0x0012310f
 8006724:	0012e223 	.word	0x0012e223
 8006728:	00018799 	.word	0x00018799
 800672c:	0013023d 	.word	0x0013023d
 8006730:	20000c08 	.word	0x20000c08
 8006734:	7aaaaaaa 	.word	0x7aaaaaaa

08006738 <SE_IMG_Write>:
  * @param  Length number of bytes to be written
  * @retval SE_SUCCESS if successful, otherwise SE_ERROR
  */

SE_ErrorStatus SE_IMG_Write(uint8_t *pDestination, const uint8_t *pSource, uint32_t Length)
{
 8006738:	b430      	push	{r4, r5}

  /* Is destination area part of 1 of the firmware image headers ?
     Headers are located inside protected memory   */
  for (i = 0U; i < SFU_NB_MAX_ACTIVE_IMAGE; i++)
  {
    if ((areabegin >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 800673a:	4c08      	ldr	r4, [pc, #32]	@ (800675c <SE_IMG_Write+0x24>)
 800673c:	6864      	ldr	r4, [r4, #4]
  uint32_t areaend = areabegin + Length - 1U;
 800673e:	1e53      	subs	r3, r2, #1
    if ((areabegin >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 8006740:	4284      	cmp	r4, r0
  uint32_t areaend = areabegin + Length - 1U;
 8006742:	4403      	add	r3, r0
        (areaend < (SlotHeaderAdd[SLOT_ACTIVE_1 + i] + SFU_IMG_IMAGE_OFFSET)))
 8006744:	f504 7500 	add.w	r5, r4, #512	@ 0x200
    if ((areabegin >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 8006748:	d804      	bhi.n	8006754 <SE_IMG_Write+0x1c>
 800674a:	429d      	cmp	r5, r3
 800674c:	d902      	bls.n	8006754 <SE_IMG_Write+0x1c>
  {
    /* Abnormal case: this primitive should not be used to access this address */
    ret = SE_ERROR;
  }
  return ret;
}
 800674e:	bc30      	pop	{r4, r5}
    ret = SE_LL_FLASH_Write(pDestination, pSource, Length);
 8006750:	f7fa b98c 	b.w	8000a6c <SE_LL_FLASH_Write>
}
 8006754:	4802      	ldr	r0, [pc, #8]	@ (8006760 <SE_IMG_Write+0x28>)
 8006756:	bc30      	pop	{r4, r5}
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	08006c70 	.word	0x08006c70
 8006760:	00018799 	.word	0x00018799

08006764 <SE_IMG_Read>:
  * @param  Length number of bytes to be read
  * @retval SE_SUCCESS if successful, otherwise SE_ERROR
  */

SE_ErrorStatus SE_IMG_Read(uint8_t *pDestination, const uint8_t *pSource, uint32_t Length)
{
 8006764:	b430      	push	{r4, r5}

  /* Is destination area part of 1 of the firmware image headers ?
     Headers are located inside protected memory   */
  for (i = 0U; i < SFU_NB_MAX_ACTIVE_IMAGE; i++)
  {
    if ((areabegin >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 8006766:	4c08      	ldr	r4, [pc, #32]	@ (8006788 <SE_IMG_Read+0x24>)
 8006768:	6864      	ldr	r4, [r4, #4]
  uint32_t areaend = areabegin + Length - 1U;
 800676a:	1e53      	subs	r3, r2, #1
    if ((areabegin >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 800676c:	428c      	cmp	r4, r1
  uint32_t areaend = areabegin + Length - 1U;
 800676e:	440b      	add	r3, r1
        (areaend < (SlotHeaderAdd[SLOT_ACTIVE_1 + i] + SFU_IMG_IMAGE_OFFSET)))
 8006770:	f504 7500 	add.w	r5, r4, #512	@ 0x200
    if ((areabegin >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 8006774:	d804      	bhi.n	8006780 <SE_IMG_Read+0x1c>
 8006776:	429d      	cmp	r5, r3
 8006778:	d902      	bls.n	8006780 <SE_IMG_Read+0x1c>
  {
    /* Abnormal case: this primitive should not be used to access this address */
    ret = SE_ERROR;
  }
  return ret;
}
 800677a:	bc30      	pop	{r4, r5}
    ret = SE_LL_FLASH_Read(pDestination, pSource, Length);
 800677c:	f7fa b9a4 	b.w	8000ac8 <SE_LL_FLASH_Read>
}
 8006780:	4802      	ldr	r0, [pc, #8]	@ (800678c <SE_IMG_Read+0x28>)
 8006782:	bc30      	pop	{r4, r5}
 8006784:	4770      	bx	lr
 8006786:	bf00      	nop
 8006788:	08006c70 	.word	0x08006c70
 800678c:	00018799 	.word	0x00018799

08006790 <SE_IMG_Erase>:

  /* Is destination area part of 1 of the firmware image headers ?
     Headers are located inside protected memory   */
  for (i = 0U; i < SFU_NB_MAX_ACTIVE_IMAGE; i++)
  {
    if ((areabegin >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 8006790:	4a08      	ldr	r2, [pc, #32]	@ (80067b4 <SE_IMG_Erase+0x24>)
 8006792:	6852      	ldr	r2, [r2, #4]
  uint32_t areaend = areabegin + Length - 1U;
 8006794:	1e4b      	subs	r3, r1, #1
    if ((areabegin >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 8006796:	4282      	cmp	r2, r0
{
 8006798:	b410      	push	{r4}
  uint32_t areaend = areabegin + Length - 1U;
 800679a:	4403      	add	r3, r0
        (areaend < (SlotHeaderAdd[SLOT_ACTIVE_1 + i] + SFU_IMG_IMAGE_OFFSET)))
 800679c:	f502 7400 	add.w	r4, r2, #512	@ 0x200
    if ((areabegin >= SlotHeaderAdd[SLOT_ACTIVE_1 + i]) &&
 80067a0:	d804      	bhi.n	80067ac <SE_IMG_Erase+0x1c>
 80067a2:	429c      	cmp	r4, r3
 80067a4:	d902      	bls.n	80067ac <SE_IMG_Erase+0x1c>
  {
    /* Abnormal case: this primitive should not be used to access this address */
    ret = SE_ERROR;
  }
  return ret;
}
 80067a6:	bc10      	pop	{r4}
    ret = SE_LL_FLASH_Erase(pDestination, Length);
 80067a8:	f7fa b936 	b.w	8000a18 <SE_LL_FLASH_Erase>
}
 80067ac:	4802      	ldr	r0, [pc, #8]	@ (80067b8 <SE_IMG_Erase+0x28>)
 80067ae:	bc10      	pop	{r4}
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop
 80067b4:	08006c70 	.word	0x08006c70
 80067b8:	00018799 	.word	0x00018799

080067bc <SE_APPLI_GetActiveFwInfo>:
  * @param  SlotNumber index of the slot in the list
  * @param p_FwInfo Active Firmware Info structure that will be filled.
  * @retval SE_ErrorStatus SE_SUCCESS if successful, SE_ERROR otherwise.
  */
SE_ErrorStatus SE_APPLI_GetActiveFwInfo(uint32_t SlotNumber, SE_APP_ActiveFwInfo_t *p_FwInfo)
{
 80067bc:	b510      	push	{r4, lr}
  SE_ErrorStatus e_ret_status;
  uint8_t buffer[SE_FW_HEADER_TOT_LEN];     /* to read FW metadata from FLASH */
  SE_FwRawHeaderTypeDef *pfw_image_header;  /* FW metadata */

  /* Check the pointer allocation */
  if (NULL == p_FwInfo)
 80067be:	460c      	mov	r4, r1
{
 80067c0:	b0d0      	sub	sp, #320	@ 0x140
  if (NULL == p_FwInfo)
 80067c2:	b161      	cbz	r1, 80067de <SE_APPLI_GetActiveFwInfo+0x22>
  {
    return SE_ERROR;
  }

  /* Check Slot_Number value */
  if (SlotNumber > SFU_NB_MAX_ACTIVE_IMAGE)
 80067c4:	2801      	cmp	r0, #1
 80067c6:	d80a      	bhi.n	80067de <SE_APPLI_GetActiveFwInfo+0x22>
    return SE_ERROR;
  }
  /*
   * The Firmware Information is available in the header of the active slot.
   */
  e_ret_status = SE_LL_FLASH_Read(buffer, (uint8_t *) SlotHeaderAdd[SlotNumber], sizeof(buffer));
 80067c8:	4b09      	ldr	r3, [pc, #36]	@ (80067f0 <SE_APPLI_GetActiveFwInfo+0x34>)
 80067ca:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80067ce:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
 80067d2:	4668      	mov	r0, sp
 80067d4:	f7fa f978 	bl	8000ac8 <SE_LL_FLASH_Read>
  if (e_ret_status != SE_ERROR)
 80067d8:	4b06      	ldr	r3, [pc, #24]	@ (80067f4 <SE_APPLI_GetActiveFwInfo+0x38>)
 80067da:	4298      	cmp	r0, r3
 80067dc:	d102      	bne.n	80067e4 <SE_APPLI_GetActiveFwInfo+0x28>
{
 80067de:	4805      	ldr	r0, [pc, #20]	@ (80067f4 <SE_APPLI_GetActiveFwInfo+0x38>)
    p_FwInfo->ActiveFwVersion = pfw_image_header->FwVersion;
    p_FwInfo->ActiveFwSize = pfw_image_header->FwSize;
  }

  return e_ret_status;
}
 80067e0:	b050      	add	sp, #320	@ 0x140
 80067e2:	bd10      	pop	{r4, pc}
    p_FwInfo->ActiveFwVersion = pfw_image_header->FwVersion;
 80067e4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80067e8:	8023      	strh	r3, [r4, #0]
    p_FwInfo->ActiveFwSize = pfw_image_header->FwSize;
 80067ea:	9b02      	ldr	r3, [sp, #8]
 80067ec:	6063      	str	r3, [r4, #4]
 80067ee:	e7f7      	b.n	80067e0 <SE_APPLI_GetActiveFwInfo+0x24>
 80067f0:	08006c70 	.word	0x08006c70
 80067f4:	00018799 	.word	0x00018799

080067f8 <SE_SetSystemCoreClock>:
  * @param uSystemCoreClock Secure Engine SystemCoreClock variable.
  * @retval None.
  */
void SE_SetSystemCoreClock(uint32_t uSystemCoreClock)
{
  m_uSE_SystemCoreClock = uSystemCoreClock;
 80067f8:	4b01      	ldr	r3, [pc, #4]	@ (8006800 <SE_SetSystemCoreClock+0x8>)
 80067fa:	6018      	str	r0, [r3, #0]
}
 80067fc:	4770      	bx	lr
 80067fe:	bf00      	nop
 8006800:	20003088 	.word	0x20003088

08006804 <HAL_GetTick>:
{
  static uint32_t m_uTick = 0U;
  static uint32_t t1 = 0U, tdelta = 0U;
  uint32_t t2;

  t2 =  SysTick->VAL;
 8006804:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
{
 8006808:	b530      	push	{r4, r5, lr}

  if (t2 <= t1)
 800680a:	4c0f      	ldr	r4, [pc, #60]	@ (8006848 <HAL_GetTick+0x44>)
  t2 =  SysTick->VAL;
 800680c:	698a      	ldr	r2, [r1, #24]
  if (t2 <= t1)
 800680e:	6823      	ldr	r3, [r4, #0]
  {
    tdelta += t1 - t2;
 8006810:	480e      	ldr	r0, [pc, #56]	@ (800684c <HAL_GetTick+0x48>)
  if (t2 <= t1)
 8006812:	4293      	cmp	r3, r2
    tdelta += t1 - t2;
 8006814:	6805      	ldr	r5, [r0, #0]
  }
  else
  {
    tdelta += t1 + SysTick->LOAD - t2;
 8006816:	bf38      	it	cc
 8006818:	6949      	ldrcc	r1, [r1, #20]
 800681a:	442b      	add	r3, r5
 800681c:	bf38      	it	cc
 800681e:	185b      	addcc	r3, r3, r1
  }

  if (tdelta > (m_uSE_SystemCoreClock / 1000U))
 8006820:	490b      	ldr	r1, [pc, #44]	@ (8006850 <HAL_GetTick+0x4c>)
    tdelta += t1 + SysTick->LOAD - t2;
 8006822:	1a9b      	subs	r3, r3, r2
  if (tdelta > (m_uSE_SystemCoreClock / 1000U))
 8006824:	6809      	ldr	r1, [r1, #0]
 8006826:	6003      	str	r3, [r0, #0]
 8006828:	f44f 757a 	mov.w	r5, #1000	@ 0x3e8
 800682c:	fbb1 f1f5 	udiv	r1, r1, r5
 8006830:	4299      	cmp	r1, r3
 8006832:	4b08      	ldr	r3, [pc, #32]	@ (8006854 <HAL_GetTick+0x50>)
 8006834:	d204      	bcs.n	8006840 <HAL_GetTick+0x3c>
  {
    tdelta = 0U;
    m_uTick ++;
 8006836:	6819      	ldr	r1, [r3, #0]
    tdelta = 0U;
 8006838:	2500      	movs	r5, #0
    m_uTick ++;
 800683a:	3101      	adds	r1, #1
    tdelta = 0U;
 800683c:	6005      	str	r5, [r0, #0]
    m_uTick ++;
 800683e:	6019      	str	r1, [r3, #0]
  }

  t1 = t2;
  return m_uTick;
}
 8006840:	6818      	ldr	r0, [r3, #0]
  t1 = t2;
 8006842:	6022      	str	r2, [r4, #0]
}
 8006844:	bd30      	pop	{r4, r5, pc}
 8006846:	bf00      	nop
 8006848:	20003084 	.word	0x20003084
 800684c:	20003080 	.word	0x20003080
 8006850:	20003088 	.word	0x20003088
 8006854:	2000307c 	.word	0x2000307c

08006858 <mbedtls_sha256_init>:

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
    SHA256_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
 8006858:	226c      	movs	r2, #108	@ 0x6c
 800685a:	2100      	movs	r1, #0
 800685c:	f000 b9ce 	b.w	8006bfc <memset>

08006860 <mbedtls_sha256_starts_ret>:
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );

    ctx->total[0] = 0;
    ctx->total[1] = 0;

    if( is224 == 0 )
 8006860:	4a23      	ldr	r2, [pc, #140]	@ (80068f0 <mbedtls_sha256_starts_ret+0x90>)
{
 8006862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if( is224 == 0 )
 8006866:	f1b1 0800 	subs.w	r8, r1, #0
 800686a:	bf18      	it	ne
 800686c:	4696      	movne	lr, r2
 800686e:	4a21      	ldr	r2, [pc, #132]	@ (80068f4 <mbedtls_sha256_starts_ret+0x94>)
 8006870:	4921      	ldr	r1, [pc, #132]	@ (80068f8 <mbedtls_sha256_starts_ret+0x98>)
 8006872:	4f22      	ldr	r7, [pc, #136]	@ (80068fc <mbedtls_sha256_starts_ret+0x9c>)
 8006874:	4e22      	ldr	r6, [pc, #136]	@ (8006900 <mbedtls_sha256_starts_ret+0xa0>)
 8006876:	4d23      	ldr	r5, [pc, #140]	@ (8006904 <mbedtls_sha256_starts_ret+0xa4>)
 8006878:	4c23      	ldr	r4, [pc, #140]	@ (8006908 <mbedtls_sha256_starts_ret+0xa8>)
 800687a:	bf18      	it	ne
 800687c:	4694      	movne	ip, r2
 800687e:	f102 4279 	add.w	r2, r2, #4177526784	@ 0xf9000000
 8006882:	bf08      	it	eq
 8006884:	468e      	moveq	lr, r1
 8006886:	f502 0274 	add.w	r2, r2, #15990784	@ 0xf40000
 800688a:	4920      	ldr	r1, [pc, #128]	@ (800690c <mbedtls_sha256_starts_ret+0xac>)
 800688c:	f502 6201 	add.w	r2, r2, #2064	@ 0x810
 8006890:	bf08      	it	eq
 8006892:	468c      	moveq	ip, r1
 8006894:	491e      	ldr	r1, [pc, #120]	@ (8006910 <mbedtls_sha256_starts_ret+0xb0>)
 8006896:	bf18      	it	ne
 8006898:	4611      	movne	r1, r2
 800689a:	4a1e      	ldr	r2, [pc, #120]	@ (8006914 <mbedtls_sha256_starts_ret+0xb4>)
 800689c:	bf18      	it	ne
 800689e:	4617      	movne	r7, r2
 80068a0:	4a1d      	ldr	r2, [pc, #116]	@ (8006918 <mbedtls_sha256_starts_ret+0xb8>)
 80068a2:	bf18      	it	ne
 80068a4:	4616      	movne	r6, r2
 80068a6:	f102 42d1 	add.w	r2, r2, #1753219072	@ 0x68800000
 80068aa:	f502 12c0 	add.w	r2, r2, #1572864	@ 0x180000
 80068ae:	f502 621e 	add.w	r2, r2, #2528	@ 0x9e0
 80068b2:	bf18      	it	ne
 80068b4:	4615      	movne	r5, r2
 80068b6:	4a19      	ldr	r2, [pc, #100]	@ (800691c <mbedtls_sha256_starts_ret+0xbc>)
{
 80068b8:	4603      	mov	r3, r0
    if( is224 == 0 )
 80068ba:	bf18      	it	ne
 80068bc:	4614      	movne	r4, r2
 80068be:	4818      	ldr	r0, [pc, #96]	@ (8006920 <mbedtls_sha256_starts_ret+0xc0>)
        ctx->state[5] = 0x68581511;
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
    }

    ctx->is224 = is224;
 80068c0:	f8c3 8068 	str.w	r8, [r3, #104]	@ 0x68
    if( is224 == 0 )
 80068c4:	f1a2 6211 	sub.w	r2, r2, #152043520	@ 0x9100000
 80068c8:	f5a2 220c 	sub.w	r2, r2, #573440	@ 0x8c000
 80068cc:	f2a2 228e 	subw	r2, r2, #654	@ 0x28e
 80068d0:	bf18      	it	ne
 80068d2:	4602      	movne	r2, r0
    ctx->total[0] = 0;
 80068d4:	2000      	movs	r0, #0
    ctx->total[1] = 0;
 80068d6:	e9c3 0000 	strd	r0, r0, [r3]
        ctx->state[1] = 0xBB67AE85;
 80068da:	e9c3 ec02 	strd	lr, ip, [r3, #8]
        ctx->state[3] = 0xA54FF53A;
 80068de:	e9c3 1704 	strd	r1, r7, [r3, #16]
        ctx->state[5] = 0x9B05688C;
 80068e2:	e9c3 6506 	strd	r6, r5, [r3, #24]
        ctx->state[7] = 0x5BE0CD19;
 80068e6:	e9c3 4208 	strd	r4, r2, [r3, #32]

    return( 0 );
}
 80068ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068ee:	bf00      	nop
 80068f0:	c1059ed8 	.word	0xc1059ed8
 80068f4:	367cd507 	.word	0x367cd507
 80068f8:	6a09e667 	.word	0x6a09e667
 80068fc:	a54ff53a 	.word	0xa54ff53a
 8006900:	510e527f 	.word	0x510e527f
 8006904:	9b05688c 	.word	0x9b05688c
 8006908:	1f83d9ab 	.word	0x1f83d9ab
 800690c:	bb67ae85 	.word	0xbb67ae85
 8006910:	3c6ef372 	.word	0x3c6ef372
 8006914:	f70e5939 	.word	0xf70e5939
 8006918:	ffc00b31 	.word	0xffc00b31
 800691c:	64f98fa7 	.word	0x64f98fa7
 8006920:	befa4fa4 	.word	0xbefa4fa4

08006924 <mbedtls_internal_sha256_process>:
        (d) += temp1; (h) = temp1 + temp2;              \
    } while( 0 )

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
 8006924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006928:	b0cd      	sub	sp, #308	@ 0x134
 800692a:	4686      	mov	lr, r0
 800692c:	460b      	mov	r3, r1

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
        A[i] = ctx->state[i];
 800692e:	f100 0208 	add.w	r2, r0, #8
 8006932:	ad04      	add	r5, sp, #16
 8006934:	f100 0628 	add.w	r6, r0, #40	@ 0x28
 8006938:	6810      	ldr	r0, [r2, #0]
 800693a:	6851      	ldr	r1, [r2, #4]
 800693c:	462c      	mov	r4, r5
 800693e:	c403      	stmia	r4!, {r0, r1}
 8006940:	3208      	adds	r2, #8
 8006942:	42b2      	cmp	r2, r6
 8006944:	4625      	mov	r5, r4
 8006946:	d1f7      	bne.n	8006938 <mbedtls_internal_sha256_process+0x14>
 8006948:	9a06      	ldr	r2, [sp, #24]
 800694a:	9201      	str	r2, [sp, #4]
 800694c:	e9dd 8709 	ldrd	r8, r7, [sp, #36]	@ 0x24
 8006950:	9a07      	ldr	r2, [sp, #28]
 8006952:	9202      	str	r2, [sp, #8]
 8006954:	e9dd 0604 	ldrd	r0, r6, [sp, #16]
 8006958:	4a41      	ldr	r2, [pc, #260]	@ (8006a60 <mbedtls_internal_sha256_process+0x13c>)
 800695a:	f8dd b02c 	ldr.w	fp, [sp, #44]	@ 0x2c
 800695e:	9c08      	ldr	r4, [sp, #32]
 8006960:	9203      	str	r2, [sp, #12]
 8006962:	ad0c      	add	r5, sp, #48	@ 0x30
 8006964:	4619      	mov	r1, r3

#if defined(MBEDTLS_SHA256_SMALLER)
    for( i = 0; i < 64; i++ )
 8006966:	f04f 0900 	mov.w	r9, #0
    {
        if( i < 16 )
 800696a:	f1b9 0f0f 	cmp.w	r9, #15
 800696e:	d85e      	bhi.n	8006a2e <mbedtls_internal_sha256_process+0x10a>
            GET_UINT32_BE( W[i], data, 4 * i );
 8006970:	784a      	ldrb	r2, [r1, #1]
 8006972:	780b      	ldrb	r3, [r1, #0]
 8006974:	0412      	lsls	r2, r2, #16
 8006976:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 800697a:	78cb      	ldrb	r3, [r1, #3]
 800697c:	4313      	orrs	r3, r2
 800697e:	788a      	ldrb	r2, [r1, #2]
 8006980:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        else
            R( i );

        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i], K[i] );
 8006984:	ea4f 2cf4 	mov.w	ip, r4, ror #11
 8006988:	ea87 0208 	eor.w	r2, r7, r8
 800698c:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8006990:	f845 3b04 	str.w	r3, [r5], #4
 8006994:	ea8c 1cb4 	eor.w	ip, ip, r4, ror #6
 8006998:	4022      	ands	r2, r4
 800699a:	ea8c 6c74 	eor.w	ip, ip, r4, ror #25
 800699e:	407a      	eors	r2, r7
 80069a0:	4462      	add	r2, ip
 80069a2:	f85a cb04 	ldr.w	ip, [sl], #4
 80069a6:	f8cd a00c 	str.w	sl, [sp, #12]
 80069aa:	4462      	add	r2, ip
 80069ac:	4413      	add	r3, r2
 80069ae:	445b      	add	r3, fp
 80069b0:	f8dd b004 	ldr.w	fp, [sp, #4]
 80069b4:	f8dd a008 	ldr.w	sl, [sp, #8]
 80069b8:	ea4f 3270 	mov.w	r2, r0, ror #13
 80069bc:	ea40 0c06 	orr.w	ip, r0, r6
 80069c0:	ea0c 0c0b 	and.w	ip, ip, fp
 80069c4:	ea82 02b0 	eor.w	r2, r2, r0, ror #2
 80069c8:	ea00 0b06 	and.w	fp, r0, r6
 80069cc:	ea4c 0c0b 	orr.w	ip, ip, fp
 80069d0:	ea82 52b0 	eor.w	r2, r2, r0, ror #22
 80069d4:	4462      	add	r2, ip
    for( i = 0; i < 64; i++ )
 80069d6:	f109 0901 	add.w	r9, r9, #1
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i], K[i] );
 80069da:	449a      	add	sl, r3
 80069dc:	441a      	add	r2, r3
    for( i = 0; i < 64; i++ )
 80069de:	f1b9 0f40 	cmp.w	r9, #64	@ 0x40
 80069e2:	9b01      	ldr	r3, [sp, #4]
 80069e4:	9302      	str	r3, [sp, #8]
 80069e6:	f101 0104 	add.w	r1, r1, #4
 80069ea:	46bb      	mov	fp, r7
 80069ec:	d118      	bne.n	8006a20 <mbedtls_internal_sha256_process+0xfc>
 80069ee:	e9cd 870a 	strd	r8, r7, [sp, #40]	@ 0x28
 80069f2:	e9cd a408 	strd	sl, r4, [sp, #32]
 80069f6:	e9cd 6306 	strd	r6, r3, [sp, #24]
 80069fa:	e9cd 2004 	strd	r2, r0, [sp, #16]
 80069fe:	f10e 0104 	add.w	r1, lr, #4
 8006a02:	ab04      	add	r3, sp, #16
 8006a04:	f10e 0224 	add.w	r2, lr, #36	@ 0x24
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
        ctx->state[i] += A[i];
 8006a08:	f851 0f04 	ldr.w	r0, [r1, #4]!
 8006a0c:	f853 4b04 	ldr.w	r4, [r3], #4
    for( i = 0; i < 8; i++ )
 8006a10:	4291      	cmp	r1, r2
        ctx->state[i] += A[i];
 8006a12:	4420      	add	r0, r4
 8006a14:	6008      	str	r0, [r1, #0]
    for( i = 0; i < 8; i++ )
 8006a16:	d1f7      	bne.n	8006a08 <mbedtls_internal_sha256_process+0xe4>

    return( 0 );
}
 8006a18:	2000      	movs	r0, #0
 8006a1a:	b04d      	add	sp, #308	@ 0x134
 8006a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a20:	9601      	str	r6, [sp, #4]
 8006a22:	4647      	mov	r7, r8
 8006a24:	4606      	mov	r6, r0
 8006a26:	46a0      	mov	r8, r4
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i], K[i] );
 8006a28:	4610      	mov	r0, r2
 8006a2a:	4654      	mov	r4, sl
 8006a2c:	e79d      	b.n	800696a <mbedtls_internal_sha256_process+0x46>
            R( i );
 8006a2e:	f855 3c08 	ldr.w	r3, [r5, #-8]
 8006a32:	f855 ac3c 	ldr.w	sl, [r5, #-60]
 8006a36:	f855 2c40 	ldr.w	r2, [r5, #-64]
 8006a3a:	ea4f 4cf3 	mov.w	ip, r3, ror #19
 8006a3e:	ea8c 4c73 	eor.w	ip, ip, r3, ror #17
 8006a42:	ea8c 2c93 	eor.w	ip, ip, r3, lsr #10
 8006a46:	f855 3c1c 	ldr.w	r3, [r5, #-28]
 8006a4a:	4413      	add	r3, r2
 8006a4c:	ea4f 42ba 	mov.w	r2, sl, ror #18
 8006a50:	ea82 12fa 	eor.w	r2, r2, sl, ror #7
 8006a54:	4463      	add	r3, ip
 8006a56:	ea82 02da 	eor.w	r2, r2, sl, lsr #3
 8006a5a:	4413      	add	r3, r2
 8006a5c:	e792      	b.n	8006984 <mbedtls_internal_sha256_process+0x60>
 8006a5e:	bf00      	nop
 8006a60:	08006dcc 	.word	0x08006dcc

08006a64 <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 8006a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a68:	4605      	mov	r5, r0
 8006a6a:	460e      	mov	r6, r1
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
 8006a6c:	4614      	mov	r4, r2
 8006a6e:	b37a      	cbz	r2, 8006ad0 <mbedtls_sha256_update_ret+0x6c>
        return( 0 );

    left = ctx->total[0] & 0x3F;
 8006a70:	6803      	ldr	r3, [r0, #0]
 8006a72:	f003 073f 	and.w	r7, r3, #63	@ 0x3f
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 8006a76:	189b      	adds	r3, r3, r2
 8006a78:	6003      	str	r3, [r0, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;
 8006a7a:	bf22      	ittt	cs
 8006a7c:	6843      	ldrcs	r3, [r0, #4]
 8006a7e:	3301      	addcs	r3, #1
 8006a80:	6043      	strcs	r3, [r0, #4]

    if( left && ilen >= fill )
 8006a82:	b19f      	cbz	r7, 8006aac <mbedtls_sha256_update_ret+0x48>
    fill = 64 - left;
 8006a84:	f1c7 0940 	rsb	r9, r7, #64	@ 0x40
    if( left && ilen >= fill )
 8006a88:	454a      	cmp	r2, r9
 8006a8a:	d30f      	bcc.n	8006aac <mbedtls_sha256_update_ret+0x48>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 8006a8c:	f100 0828 	add.w	r8, r0, #40	@ 0x28
 8006a90:	464a      	mov	r2, r9
 8006a92:	eb08 0007 	add.w	r0, r8, r7
 8006a96:	f000 f8b9 	bl	8006c0c <memcpy>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 8006a9a:	4641      	mov	r1, r8
 8006a9c:	4628      	mov	r0, r5
 8006a9e:	f7ff ff41 	bl	8006924 <mbedtls_internal_sha256_process>
 8006aa2:	b9b0      	cbnz	r0, 8006ad2 <mbedtls_sha256_update_ret+0x6e>
            return( ret );

        input += fill;
 8006aa4:	443c      	add	r4, r7
 8006aa6:	444e      	add	r6, r9
        ilen  -= fill;
 8006aa8:	3c40      	subs	r4, #64	@ 0x40
        left = 0;
 8006aaa:	4607      	mov	r7, r0
 8006aac:	4426      	add	r6, r4
 8006aae:	e004      	b.n	8006aba <mbedtls_sha256_update_ret+0x56>
    }

    while( ilen >= 64 )
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
 8006ab0:	4628      	mov	r0, r5
 8006ab2:	f7ff ff37 	bl	8006924 <mbedtls_internal_sha256_process>
 8006ab6:	b960      	cbnz	r0, 8006ad2 <mbedtls_sha256_update_ret+0x6e>
            return( ret );

        input += 64;
        ilen  -= 64;
 8006ab8:	3c40      	subs	r4, #64	@ 0x40
    while( ilen >= 64 )
 8006aba:	2c3f      	cmp	r4, #63	@ 0x3f
 8006abc:	eba6 0104 	sub.w	r1, r6, r4
 8006ac0:	d8f6      	bhi.n	8006ab0 <mbedtls_sha256_update_ret+0x4c>
    }

    if( ilen > 0 )
 8006ac2:	b12c      	cbz	r4, 8006ad0 <mbedtls_sha256_update_ret+0x6c>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 8006ac4:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8006ac8:	4622      	mov	r2, r4
 8006aca:	4438      	add	r0, r7
 8006acc:	f000 f89e 	bl	8006c0c <memcpy>
        return( 0 );
 8006ad0:	2000      	movs	r0, #0

    return( 0 );
}
 8006ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006ad6 <mbedtls_sha256_finish_ret>:
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 8006ad6:	6803      	ldr	r3, [r0, #0]
 8006ad8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f

    ctx->buffer[used++] = 0x80;
 8006adc:	1c5a      	adds	r2, r3, #1
 8006ade:	4403      	add	r3, r0
{
 8006ae0:	b570      	push	{r4, r5, r6, lr}

    if( used <= 56 )
 8006ae2:	2a38      	cmp	r2, #56	@ 0x38
{
 8006ae4:	460d      	mov	r5, r1
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 8006ae6:	f100 0628 	add.w	r6, r0, #40	@ 0x28
    ctx->buffer[used++] = 0x80;
 8006aea:	f04f 0180 	mov.w	r1, #128	@ 0x80
{
 8006aee:	4604      	mov	r4, r0
    ctx->buffer[used++] = 0x80;
 8006af0:	f883 1028 	strb.w	r1, [r3, #40]	@ 0x28
        memset( ctx->buffer + used, 0, 56 - used );
 8006af4:	eb06 0002 	add.w	r0, r6, r2
    if( used <= 56 )
 8006af8:	d861      	bhi.n	8006bbe <mbedtls_sha256_finish_ret+0xe8>
        memset( ctx->buffer + used, 0, 56 - used );
 8006afa:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8006afe:	2100      	movs	r1, #0
        memset( ctx->buffer + used, 0, 64 - used );

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
            return( ret );

        memset( ctx->buffer, 0, 56 );
 8006b00:	f000 f87c 	bl	8006bfc <memset>

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
 8006b04:	e9d4 3100 	ldrd	r3, r1, [r4]
    high = ( ctx->total[0] >> 29 )
 8006b08:	0f5a      	lsrs	r2, r3, #29
 8006b0a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );
 8006b0e:	00db      	lsls	r3, r3, #3
 8006b10:	ba12      	rev	r2, r2
 8006b12:	ba1b      	rev	r3, r3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 8006b14:	6622      	str	r2, [r4, #96]	@ 0x60
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 8006b16:	6663      	str	r3, [r4, #100]	@ 0x64

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 8006b18:	4631      	mov	r1, r6
 8006b1a:	4620      	mov	r0, r4
 8006b1c:	f7ff ff02 	bl	8006924 <mbedtls_internal_sha256_process>
 8006b20:	2800      	cmp	r0, #0
 8006b22:	d14b      	bne.n	8006bbc <mbedtls_sha256_finish_ret+0xe6>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
 8006b24:	7ae3      	ldrb	r3, [r4, #11]
 8006b26:	702b      	strb	r3, [r5, #0]
 8006b28:	8963      	ldrh	r3, [r4, #10]
 8006b2a:	706b      	strb	r3, [r5, #1]
 8006b2c:	68a3      	ldr	r3, [r4, #8]
 8006b2e:	0a1b      	lsrs	r3, r3, #8
 8006b30:	70ab      	strb	r3, [r5, #2]
 8006b32:	68a3      	ldr	r3, [r4, #8]
 8006b34:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 8006b36:	7be3      	ldrb	r3, [r4, #15]
 8006b38:	712b      	strb	r3, [r5, #4]
 8006b3a:	89e3      	ldrh	r3, [r4, #14]
 8006b3c:	716b      	strb	r3, [r5, #5]
 8006b3e:	68e3      	ldr	r3, [r4, #12]
 8006b40:	0a1b      	lsrs	r3, r3, #8
 8006b42:	71ab      	strb	r3, [r5, #6]
 8006b44:	68e3      	ldr	r3, [r4, #12]
 8006b46:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 8006b48:	7ce3      	ldrb	r3, [r4, #19]
 8006b4a:	722b      	strb	r3, [r5, #8]
 8006b4c:	8a63      	ldrh	r3, [r4, #18]
 8006b4e:	726b      	strb	r3, [r5, #9]
 8006b50:	6923      	ldr	r3, [r4, #16]
 8006b52:	0a1b      	lsrs	r3, r3, #8
 8006b54:	72ab      	strb	r3, [r5, #10]
 8006b56:	6923      	ldr	r3, [r4, #16]
 8006b58:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 8006b5a:	7de3      	ldrb	r3, [r4, #23]
 8006b5c:	732b      	strb	r3, [r5, #12]
 8006b5e:	8ae3      	ldrh	r3, [r4, #22]
 8006b60:	736b      	strb	r3, [r5, #13]
 8006b62:	6963      	ldr	r3, [r4, #20]
 8006b64:	0a1b      	lsrs	r3, r3, #8
 8006b66:	73ab      	strb	r3, [r5, #14]
 8006b68:	6963      	ldr	r3, [r4, #20]
 8006b6a:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 8006b6c:	7ee3      	ldrb	r3, [r4, #27]
 8006b6e:	742b      	strb	r3, [r5, #16]
 8006b70:	8b63      	ldrh	r3, [r4, #26]
 8006b72:	746b      	strb	r3, [r5, #17]
 8006b74:	69a3      	ldr	r3, [r4, #24]
 8006b76:	0a1b      	lsrs	r3, r3, #8
 8006b78:	74ab      	strb	r3, [r5, #18]
 8006b7a:	69a3      	ldr	r3, [r4, #24]
 8006b7c:	74eb      	strb	r3, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
 8006b7e:	7fe3      	ldrb	r3, [r4, #31]
 8006b80:	752b      	strb	r3, [r5, #20]
 8006b82:	8be3      	ldrh	r3, [r4, #30]
 8006b84:	756b      	strb	r3, [r5, #21]
 8006b86:	69e3      	ldr	r3, [r4, #28]
 8006b88:	0a1b      	lsrs	r3, r3, #8
 8006b8a:	75ab      	strb	r3, [r5, #22]
 8006b8c:	69e3      	ldr	r3, [r4, #28]
 8006b8e:	75eb      	strb	r3, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
 8006b90:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 8006b94:	762b      	strb	r3, [r5, #24]
 8006b96:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 8006b98:	766b      	strb	r3, [r5, #25]
 8006b9a:	6a23      	ldr	r3, [r4, #32]
 8006b9c:	0a1b      	lsrs	r3, r3, #8
 8006b9e:	76ab      	strb	r3, [r5, #26]
 8006ba0:	6a23      	ldr	r3, [r4, #32]
 8006ba2:	76eb      	strb	r3, [r5, #27]

    if( ctx->is224 == 0 )
 8006ba4:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8006ba6:	b94b      	cbnz	r3, 8006bbc <mbedtls_sha256_finish_ret+0xe6>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
 8006ba8:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
 8006bac:	772b      	strb	r3, [r5, #28]
 8006bae:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8006bb0:	776b      	strb	r3, [r5, #29]
 8006bb2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006bb4:	0a1b      	lsrs	r3, r3, #8
 8006bb6:	77ab      	strb	r3, [r5, #30]
 8006bb8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006bba:	77eb      	strb	r3, [r5, #31]

    return( 0 );
}
 8006bbc:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer + used, 0, 64 - used );
 8006bbe:	2100      	movs	r1, #0
 8006bc0:	f1c2 0240 	rsb	r2, r2, #64	@ 0x40
 8006bc4:	f000 f81a 	bl	8006bfc <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 8006bc8:	4631      	mov	r1, r6
 8006bca:	4620      	mov	r0, r4
 8006bcc:	f7ff feaa 	bl	8006924 <mbedtls_internal_sha256_process>
 8006bd0:	2800      	cmp	r0, #0
 8006bd2:	d1f3      	bne.n	8006bbc <mbedtls_sha256_finish_ret+0xe6>
        memset( ctx->buffer, 0, 56 );
 8006bd4:	4601      	mov	r1, r0
 8006bd6:	2238      	movs	r2, #56	@ 0x38
 8006bd8:	4630      	mov	r0, r6
 8006bda:	e791      	b.n	8006b00 <mbedtls_sha256_finish_ret+0x2a>

08006bdc <memcmp>:
 8006bdc:	b510      	push	{r4, lr}
 8006bde:	3901      	subs	r1, #1
 8006be0:	4402      	add	r2, r0
 8006be2:	4290      	cmp	r0, r2
 8006be4:	d101      	bne.n	8006bea <memcmp+0xe>
 8006be6:	2000      	movs	r0, #0
 8006be8:	e005      	b.n	8006bf6 <memcmp+0x1a>
 8006bea:	7803      	ldrb	r3, [r0, #0]
 8006bec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006bf0:	42a3      	cmp	r3, r4
 8006bf2:	d001      	beq.n	8006bf8 <memcmp+0x1c>
 8006bf4:	1b18      	subs	r0, r3, r4
 8006bf6:	bd10      	pop	{r4, pc}
 8006bf8:	3001      	adds	r0, #1
 8006bfa:	e7f2      	b.n	8006be2 <memcmp+0x6>

08006bfc <memset>:
 8006bfc:	4402      	add	r2, r0
 8006bfe:	4603      	mov	r3, r0
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d100      	bne.n	8006c06 <memset+0xa>
 8006c04:	4770      	bx	lr
 8006c06:	f803 1b01 	strb.w	r1, [r3], #1
 8006c0a:	e7f9      	b.n	8006c00 <memset+0x4>

08006c0c <memcpy>:
 8006c0c:	440a      	add	r2, r1
 8006c0e:	4291      	cmp	r1, r2
 8006c10:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006c14:	d100      	bne.n	8006c18 <memcpy+0xc>
 8006c16:	4770      	bx	lr
 8006c18:	b510      	push	{r4, lr}
 8006c1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c22:	4291      	cmp	r1, r2
 8006c24:	d1f9      	bne.n	8006c1a <memcpy+0xe>
 8006c26:	bd10      	pop	{r4, pc}

08006c28 <_init>:
 8006c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c2a:	bf00      	nop
 8006c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c2e:	bc08      	pop	{r3}
 8006c30:	469e      	mov	lr, r3
 8006c32:	4770      	bx	lr

08006c34 <_fini>:
 8006c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c36:	bf00      	nop
 8006c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c3a:	bc08      	pop	{r3}
 8006c3c:	469e      	mov	lr, r3
 8006c3e:	4770      	bx	lr
