
ml_libtest_CM0PLUS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08020000  08020000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000073c  080200c0  080200c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080207fc  080207fc  000017fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802087c  0802087c  0000200c  2**0
                  CONTENTS
  4 .ARM          00000000  0802087c  0802087c  0000200c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0802087c  0802087c  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802087c  0802087c  0000187c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08020880  08020880  00001880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20008000  08020884  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000800c  08020890  0000200c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000802c  08020890  0000202c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000033c8  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c5e  00000000  00000000  000053fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005a8  00000000  00000000  00006060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000423  00000000  00000000  00006608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000196c1  00000000  00000000  00006a2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004d92  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3a83  00000000  00000000  00024e7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c8901  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000012e4  00000000  00000000  000c8944  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000c9c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080200c0 <__do_global_dtors_aux>:
 80200c0:	b510      	push	{r4, lr}
 80200c2:	4c06      	ldr	r4, [pc, #24]	@ (80200dc <__do_global_dtors_aux+0x1c>)
 80200c4:	7823      	ldrb	r3, [r4, #0]
 80200c6:	2b00      	cmp	r3, #0
 80200c8:	d107      	bne.n	80200da <__do_global_dtors_aux+0x1a>
 80200ca:	4b05      	ldr	r3, [pc, #20]	@ (80200e0 <__do_global_dtors_aux+0x20>)
 80200cc:	2b00      	cmp	r3, #0
 80200ce:	d002      	beq.n	80200d6 <__do_global_dtors_aux+0x16>
 80200d0:	4804      	ldr	r0, [pc, #16]	@ (80200e4 <__do_global_dtors_aux+0x24>)
 80200d2:	e000      	b.n	80200d6 <__do_global_dtors_aux+0x16>
 80200d4:	bf00      	nop
 80200d6:	2301      	movs	r3, #1
 80200d8:	7023      	strb	r3, [r4, #0]
 80200da:	bd10      	pop	{r4, pc}
 80200dc:	2000800c 	.word	0x2000800c
 80200e0:	00000000 	.word	0x00000000
 80200e4:	080207e4 	.word	0x080207e4

080200e8 <frame_dummy>:
 80200e8:	4b04      	ldr	r3, [pc, #16]	@ (80200fc <frame_dummy+0x14>)
 80200ea:	b510      	push	{r4, lr}
 80200ec:	2b00      	cmp	r3, #0
 80200ee:	d003      	beq.n	80200f8 <frame_dummy+0x10>
 80200f0:	4903      	ldr	r1, [pc, #12]	@ (8020100 <frame_dummy+0x18>)
 80200f2:	4804      	ldr	r0, [pc, #16]	@ (8020104 <frame_dummy+0x1c>)
 80200f4:	e000      	b.n	80200f8 <frame_dummy+0x10>
 80200f6:	bf00      	nop
 80200f8:	bd10      	pop	{r4, pc}
 80200fa:	46c0      	nop			@ (mov r8, r8)
 80200fc:	00000000 	.word	0x00000000
 8020100:	20008010 	.word	0x20008010
 8020104:	080207e4 	.word	0x080207e4

08020108 <__udivsi3>:
 8020108:	2200      	movs	r2, #0
 802010a:	0843      	lsrs	r3, r0, #1
 802010c:	428b      	cmp	r3, r1
 802010e:	d374      	bcc.n	80201fa <__udivsi3+0xf2>
 8020110:	0903      	lsrs	r3, r0, #4
 8020112:	428b      	cmp	r3, r1
 8020114:	d35f      	bcc.n	80201d6 <__udivsi3+0xce>
 8020116:	0a03      	lsrs	r3, r0, #8
 8020118:	428b      	cmp	r3, r1
 802011a:	d344      	bcc.n	80201a6 <__udivsi3+0x9e>
 802011c:	0b03      	lsrs	r3, r0, #12
 802011e:	428b      	cmp	r3, r1
 8020120:	d328      	bcc.n	8020174 <__udivsi3+0x6c>
 8020122:	0c03      	lsrs	r3, r0, #16
 8020124:	428b      	cmp	r3, r1
 8020126:	d30d      	bcc.n	8020144 <__udivsi3+0x3c>
 8020128:	22ff      	movs	r2, #255	@ 0xff
 802012a:	0209      	lsls	r1, r1, #8
 802012c:	ba12      	rev	r2, r2
 802012e:	0c03      	lsrs	r3, r0, #16
 8020130:	428b      	cmp	r3, r1
 8020132:	d302      	bcc.n	802013a <__udivsi3+0x32>
 8020134:	1212      	asrs	r2, r2, #8
 8020136:	0209      	lsls	r1, r1, #8
 8020138:	d065      	beq.n	8020206 <__udivsi3+0xfe>
 802013a:	0b03      	lsrs	r3, r0, #12
 802013c:	428b      	cmp	r3, r1
 802013e:	d319      	bcc.n	8020174 <__udivsi3+0x6c>
 8020140:	e000      	b.n	8020144 <__udivsi3+0x3c>
 8020142:	0a09      	lsrs	r1, r1, #8
 8020144:	0bc3      	lsrs	r3, r0, #15
 8020146:	428b      	cmp	r3, r1
 8020148:	d301      	bcc.n	802014e <__udivsi3+0x46>
 802014a:	03cb      	lsls	r3, r1, #15
 802014c:	1ac0      	subs	r0, r0, r3
 802014e:	4152      	adcs	r2, r2
 8020150:	0b83      	lsrs	r3, r0, #14
 8020152:	428b      	cmp	r3, r1
 8020154:	d301      	bcc.n	802015a <__udivsi3+0x52>
 8020156:	038b      	lsls	r3, r1, #14
 8020158:	1ac0      	subs	r0, r0, r3
 802015a:	4152      	adcs	r2, r2
 802015c:	0b43      	lsrs	r3, r0, #13
 802015e:	428b      	cmp	r3, r1
 8020160:	d301      	bcc.n	8020166 <__udivsi3+0x5e>
 8020162:	034b      	lsls	r3, r1, #13
 8020164:	1ac0      	subs	r0, r0, r3
 8020166:	4152      	adcs	r2, r2
 8020168:	0b03      	lsrs	r3, r0, #12
 802016a:	428b      	cmp	r3, r1
 802016c:	d301      	bcc.n	8020172 <__udivsi3+0x6a>
 802016e:	030b      	lsls	r3, r1, #12
 8020170:	1ac0      	subs	r0, r0, r3
 8020172:	4152      	adcs	r2, r2
 8020174:	0ac3      	lsrs	r3, r0, #11
 8020176:	428b      	cmp	r3, r1
 8020178:	d301      	bcc.n	802017e <__udivsi3+0x76>
 802017a:	02cb      	lsls	r3, r1, #11
 802017c:	1ac0      	subs	r0, r0, r3
 802017e:	4152      	adcs	r2, r2
 8020180:	0a83      	lsrs	r3, r0, #10
 8020182:	428b      	cmp	r3, r1
 8020184:	d301      	bcc.n	802018a <__udivsi3+0x82>
 8020186:	028b      	lsls	r3, r1, #10
 8020188:	1ac0      	subs	r0, r0, r3
 802018a:	4152      	adcs	r2, r2
 802018c:	0a43      	lsrs	r3, r0, #9
 802018e:	428b      	cmp	r3, r1
 8020190:	d301      	bcc.n	8020196 <__udivsi3+0x8e>
 8020192:	024b      	lsls	r3, r1, #9
 8020194:	1ac0      	subs	r0, r0, r3
 8020196:	4152      	adcs	r2, r2
 8020198:	0a03      	lsrs	r3, r0, #8
 802019a:	428b      	cmp	r3, r1
 802019c:	d301      	bcc.n	80201a2 <__udivsi3+0x9a>
 802019e:	020b      	lsls	r3, r1, #8
 80201a0:	1ac0      	subs	r0, r0, r3
 80201a2:	4152      	adcs	r2, r2
 80201a4:	d2cd      	bcs.n	8020142 <__udivsi3+0x3a>
 80201a6:	09c3      	lsrs	r3, r0, #7
 80201a8:	428b      	cmp	r3, r1
 80201aa:	d301      	bcc.n	80201b0 <__udivsi3+0xa8>
 80201ac:	01cb      	lsls	r3, r1, #7
 80201ae:	1ac0      	subs	r0, r0, r3
 80201b0:	4152      	adcs	r2, r2
 80201b2:	0983      	lsrs	r3, r0, #6
 80201b4:	428b      	cmp	r3, r1
 80201b6:	d301      	bcc.n	80201bc <__udivsi3+0xb4>
 80201b8:	018b      	lsls	r3, r1, #6
 80201ba:	1ac0      	subs	r0, r0, r3
 80201bc:	4152      	adcs	r2, r2
 80201be:	0943      	lsrs	r3, r0, #5
 80201c0:	428b      	cmp	r3, r1
 80201c2:	d301      	bcc.n	80201c8 <__udivsi3+0xc0>
 80201c4:	014b      	lsls	r3, r1, #5
 80201c6:	1ac0      	subs	r0, r0, r3
 80201c8:	4152      	adcs	r2, r2
 80201ca:	0903      	lsrs	r3, r0, #4
 80201cc:	428b      	cmp	r3, r1
 80201ce:	d301      	bcc.n	80201d4 <__udivsi3+0xcc>
 80201d0:	010b      	lsls	r3, r1, #4
 80201d2:	1ac0      	subs	r0, r0, r3
 80201d4:	4152      	adcs	r2, r2
 80201d6:	08c3      	lsrs	r3, r0, #3
 80201d8:	428b      	cmp	r3, r1
 80201da:	d301      	bcc.n	80201e0 <__udivsi3+0xd8>
 80201dc:	00cb      	lsls	r3, r1, #3
 80201de:	1ac0      	subs	r0, r0, r3
 80201e0:	4152      	adcs	r2, r2
 80201e2:	0883      	lsrs	r3, r0, #2
 80201e4:	428b      	cmp	r3, r1
 80201e6:	d301      	bcc.n	80201ec <__udivsi3+0xe4>
 80201e8:	008b      	lsls	r3, r1, #2
 80201ea:	1ac0      	subs	r0, r0, r3
 80201ec:	4152      	adcs	r2, r2
 80201ee:	0843      	lsrs	r3, r0, #1
 80201f0:	428b      	cmp	r3, r1
 80201f2:	d301      	bcc.n	80201f8 <__udivsi3+0xf0>
 80201f4:	004b      	lsls	r3, r1, #1
 80201f6:	1ac0      	subs	r0, r0, r3
 80201f8:	4152      	adcs	r2, r2
 80201fa:	1a41      	subs	r1, r0, r1
 80201fc:	d200      	bcs.n	8020200 <__udivsi3+0xf8>
 80201fe:	4601      	mov	r1, r0
 8020200:	4152      	adcs	r2, r2
 8020202:	4610      	mov	r0, r2
 8020204:	4770      	bx	lr
 8020206:	e7ff      	b.n	8020208 <__udivsi3+0x100>
 8020208:	b501      	push	{r0, lr}
 802020a:	2000      	movs	r0, #0
 802020c:	f000 f806 	bl	802021c <__aeabi_idiv0>
 8020210:	bd02      	pop	{r1, pc}
 8020212:	46c0      	nop			@ (mov r8, r8)

08020214 <__aeabi_uidivmod>:
 8020214:	2900      	cmp	r1, #0
 8020216:	d0f7      	beq.n	8020208 <__udivsi3+0x100>
 8020218:	e776      	b.n	8020108 <__udivsi3>
 802021a:	4770      	bx	lr

0802021c <__aeabi_idiv0>:
 802021c:	4770      	bx	lr
 802021e:	46c0      	nop			@ (mov r8, r8)

08020220 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8020220:	b580      	push	{r7, lr}
 8020222:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8020224:	46c0      	nop			@ (mov r8, r8)
 8020226:	46bd      	mov	sp, r7
 8020228:	bd80      	pop	{r7, pc}

0802022a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 802022a:	b580      	push	{r7, lr}
 802022c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 802022e:	f000 f851 	bl	80202d4 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8020232:	f000 f802 	bl	802023a <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8020236:	46c0      	nop			@ (mov r8, r8)
 8020238:	e7fd      	b.n	8020236 <main+0xc>

0802023a <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 802023a:	b580      	push	{r7, lr}
 802023c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 802023e:	46c0      	nop			@ (mov r8, r8)
 8020240:	46bd      	mov	sp, r7
 8020242:	bd80      	pop	{r7, pc}

08020244 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8020244:	b580      	push	{r7, lr}
 8020246:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8020248:	46c0      	nop			@ (mov r8, r8)
 802024a:	46bd      	mov	sp, r7
 802024c:	bd80      	pop	{r7, pc}

0802024e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 802024e:	b580      	push	{r7, lr}
 8020250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8020252:	46c0      	nop			@ (mov r8, r8)
 8020254:	e7fd      	b.n	8020252 <NMI_Handler+0x4>

08020256 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8020256:	b580      	push	{r7, lr}
 8020258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 802025a:	46c0      	nop			@ (mov r8, r8)
 802025c:	e7fd      	b.n	802025a <HardFault_Handler+0x4>

0802025e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 802025e:	b580      	push	{r7, lr}
 8020260:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8020262:	46c0      	nop			@ (mov r8, r8)
 8020264:	46bd      	mov	sp, r7
 8020266:	bd80      	pop	{r7, pc}

08020268 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8020268:	b580      	push	{r7, lr}
 802026a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 802026c:	46c0      	nop			@ (mov r8, r8)
 802026e:	46bd      	mov	sp, r7
 8020270:	bd80      	pop	{r7, pc}

08020272 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8020272:	b580      	push	{r7, lr}
 8020274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8020276:	f000 f893 	bl	80203a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 802027a:	46c0      	nop			@ (mov r8, r8)
 802027c:	46bd      	mov	sp, r7
 802027e:	bd80      	pop	{r7, pc}

08020280 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8020280:	480d      	ldr	r0, [pc, #52]	@ (80202b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8020282:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8020284:	f7ff ffcc 	bl	8020220 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8020288:	480c      	ldr	r0, [pc, #48]	@ (80202bc <LoopForever+0x6>)
  ldr r1, =_edata
 802028a:	490d      	ldr	r1, [pc, #52]	@ (80202c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 802028c:	4a0d      	ldr	r2, [pc, #52]	@ (80202c4 <LoopForever+0xe>)
  movs r3, #0
 802028e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8020290:	e002      	b.n	8020298 <LoopCopyDataInit>

08020292 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8020292:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8020294:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8020296:	3304      	adds	r3, #4

08020298 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8020298:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 802029a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 802029c:	d3f9      	bcc.n	8020292 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 802029e:	4a0a      	ldr	r2, [pc, #40]	@ (80202c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80202a0:	4c0a      	ldr	r4, [pc, #40]	@ (80202cc <LoopForever+0x16>)
  movs r3, #0
 80202a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80202a4:	e001      	b.n	80202aa <LoopFillZerobss>

080202a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80202a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80202a8:	3204      	adds	r2, #4

080202aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80202aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80202ac:	d3fb      	bcc.n	80202a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80202ae:	f000 fa75 	bl	802079c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80202b2:	f7ff ffba 	bl	802022a <main>

080202b6 <LoopForever>:

LoopForever:
    b LoopForever
 80202b6:	e7fe      	b.n	80202b6 <LoopForever>
  ldr   r0, =_estack
 80202b8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80202bc:	20008000 	.word	0x20008000
  ldr r1, =_edata
 80202c0:	2000800c 	.word	0x2000800c
  ldr r2, =_sidata
 80202c4:	08020884 	.word	0x08020884
  ldr r2, =_sbss
 80202c8:	2000800c 	.word	0x2000800c
  ldr r4, =_ebss
 80202cc:	2000802c 	.word	0x2000802c

080202d0 <ADC_COMP_DAC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80202d0:	e7fe      	b.n	80202d0 <ADC_COMP_DAC_IRQHandler>
	...

080202d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80202d4:	b580      	push	{r7, lr}
 80202d6:	b082      	sub	sp, #8
 80202d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80202da:	1dfb      	adds	r3, r7, #7
 80202dc:	2200      	movs	r2, #0
 80202de:	701a      	strb	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
#endif

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
 80202e0:	f000 fa44 	bl	802076c <HAL_RCC_GetHCLK2Freq>
 80202e4:	0002      	movs	r2, r0
 80202e6:	4b09      	ldr	r3, [pc, #36]	@ (802030c <HAL_Init+0x38>)
 80202e8:	601a      	str	r2, [r3, #0]
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80202ea:	2000      	movs	r0, #0
 80202ec:	f000 f810 	bl	8020310 <HAL_InitTick>
 80202f0:	1e03      	subs	r3, r0, #0
 80202f2:	d003      	beq.n	80202fc <HAL_Init+0x28>
  {
    status = HAL_ERROR;
 80202f4:	1dfb      	adds	r3, r7, #7
 80202f6:	2201      	movs	r2, #1
 80202f8:	701a      	strb	r2, [r3, #0]
 80202fa:	e001      	b.n	8020300 <HAL_Init+0x2c>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80202fc:	f7ff ffa2 	bl	8020244 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8020300:	1dfb      	adds	r3, r7, #7
 8020302:	781b      	ldrb	r3, [r3, #0]
}
 8020304:	0018      	movs	r0, r3
 8020306:	46bd      	mov	sp, r7
 8020308:	b002      	add	sp, #8
 802030a:	bd80      	pop	{r7, pc}
 802030c:	20008000 	.word	0x20008000

08020310 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8020310:	b590      	push	{r4, r7, lr}
 8020312:	b085      	sub	sp, #20
 8020314:	af00      	add	r7, sp, #0
 8020316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8020318:	230f      	movs	r3, #15
 802031a:	18fb      	adds	r3, r7, r3
 802031c:	2200      	movs	r2, #0
 802031e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8020320:	4b1d      	ldr	r3, [pc, #116]	@ (8020398 <HAL_InitTick+0x88>)
 8020322:	781b      	ldrb	r3, [r3, #0]
 8020324:	2b00      	cmp	r3, #0
 8020326:	d02c      	beq.n	8020382 <HAL_InitTick+0x72>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8020328:	f000 fa20 	bl	802076c <HAL_RCC_GetHCLK2Freq>
 802032c:	0004      	movs	r4, r0
 802032e:	4b1a      	ldr	r3, [pc, #104]	@ (8020398 <HAL_InitTick+0x88>)
 8020330:	781b      	ldrb	r3, [r3, #0]
 8020332:	0019      	movs	r1, r3
 8020334:	23fa      	movs	r3, #250	@ 0xfa
 8020336:	0098      	lsls	r0, r3, #2
 8020338:	f7ff fee6 	bl	8020108 <__udivsi3>
 802033c:	0003      	movs	r3, r0
 802033e:	0019      	movs	r1, r3
 8020340:	0020      	movs	r0, r4
 8020342:	f7ff fee1 	bl	8020108 <__udivsi3>
 8020346:	0003      	movs	r3, r0
 8020348:	0018      	movs	r0, r3
 802034a:	f000 f8e2 	bl	8020512 <HAL_SYSTICK_Config>
 802034e:	1e03      	subs	r3, r0, #0
 8020350:	d112      	bne.n	8020378 <HAL_InitTick+0x68>
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8020352:	687b      	ldr	r3, [r7, #4]
 8020354:	2b03      	cmp	r3, #3
 8020356:	d80a      	bhi.n	802036e <HAL_InitTick+0x5e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8020358:	6879      	ldr	r1, [r7, #4]
 802035a:	2301      	movs	r3, #1
 802035c:	425b      	negs	r3, r3
 802035e:	2200      	movs	r2, #0
 8020360:	0018      	movs	r0, r3
 8020362:	f000 f8c1 	bl	80204e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8020366:	4b0d      	ldr	r3, [pc, #52]	@ (802039c <HAL_InitTick+0x8c>)
 8020368:	687a      	ldr	r2, [r7, #4]
 802036a:	601a      	str	r2, [r3, #0]
 802036c:	e00d      	b.n	802038a <HAL_InitTick+0x7a>
      }
      else
      {
        status = HAL_ERROR;
 802036e:	230f      	movs	r3, #15
 8020370:	18fb      	adds	r3, r7, r3
 8020372:	2201      	movs	r2, #1
 8020374:	701a      	strb	r2, [r3, #0]
 8020376:	e008      	b.n	802038a <HAL_InitTick+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
 8020378:	230f      	movs	r3, #15
 802037a:	18fb      	adds	r3, r7, r3
 802037c:	2201      	movs	r2, #1
 802037e:	701a      	strb	r2, [r3, #0]
 8020380:	e003      	b.n	802038a <HAL_InitTick+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 8020382:	230f      	movs	r3, #15
 8020384:	18fb      	adds	r3, r7, r3
 8020386:	2201      	movs	r2, #1
 8020388:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 802038a:	230f      	movs	r3, #15
 802038c:	18fb      	adds	r3, r7, r3
 802038e:	781b      	ldrb	r3, [r3, #0]
}
 8020390:	0018      	movs	r0, r3
 8020392:	46bd      	mov	sp, r7
 8020394:	b005      	add	sp, #20
 8020396:	bd90      	pop	{r4, r7, pc}
 8020398:	20008008 	.word	0x20008008
 802039c:	20008004 	.word	0x20008004

080203a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80203a0:	b580      	push	{r7, lr}
 80203a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80203a4:	4b05      	ldr	r3, [pc, #20]	@ (80203bc <HAL_IncTick+0x1c>)
 80203a6:	781b      	ldrb	r3, [r3, #0]
 80203a8:	001a      	movs	r2, r3
 80203aa:	4b05      	ldr	r3, [pc, #20]	@ (80203c0 <HAL_IncTick+0x20>)
 80203ac:	681b      	ldr	r3, [r3, #0]
 80203ae:	18d2      	adds	r2, r2, r3
 80203b0:	4b03      	ldr	r3, [pc, #12]	@ (80203c0 <HAL_IncTick+0x20>)
 80203b2:	601a      	str	r2, [r3, #0]
}
 80203b4:	46c0      	nop			@ (mov r8, r8)
 80203b6:	46bd      	mov	sp, r7
 80203b8:	bd80      	pop	{r7, pc}
 80203ba:	46c0      	nop			@ (mov r8, r8)
 80203bc:	20008008 	.word	0x20008008
 80203c0:	20008028 	.word	0x20008028

080203c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80203c4:	b590      	push	{r4, r7, lr}
 80203c6:	b083      	sub	sp, #12
 80203c8:	af00      	add	r7, sp, #0
 80203ca:	0002      	movs	r2, r0
 80203cc:	6039      	str	r1, [r7, #0]
 80203ce:	1dfb      	adds	r3, r7, #7
 80203d0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80203d2:	1dfb      	adds	r3, r7, #7
 80203d4:	781b      	ldrb	r3, [r3, #0]
 80203d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80203d8:	d828      	bhi.n	802042c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80203da:	4a2f      	ldr	r2, [pc, #188]	@ (8020498 <__NVIC_SetPriority+0xd4>)
 80203dc:	1dfb      	adds	r3, r7, #7
 80203de:	781b      	ldrb	r3, [r3, #0]
 80203e0:	b25b      	sxtb	r3, r3
 80203e2:	089b      	lsrs	r3, r3, #2
 80203e4:	33c0      	adds	r3, #192	@ 0xc0
 80203e6:	009b      	lsls	r3, r3, #2
 80203e8:	589b      	ldr	r3, [r3, r2]
 80203ea:	1dfa      	adds	r2, r7, #7
 80203ec:	7812      	ldrb	r2, [r2, #0]
 80203ee:	0011      	movs	r1, r2
 80203f0:	2203      	movs	r2, #3
 80203f2:	400a      	ands	r2, r1
 80203f4:	00d2      	lsls	r2, r2, #3
 80203f6:	21ff      	movs	r1, #255	@ 0xff
 80203f8:	4091      	lsls	r1, r2
 80203fa:	000a      	movs	r2, r1
 80203fc:	43d2      	mvns	r2, r2
 80203fe:	401a      	ands	r2, r3
 8020400:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8020402:	683b      	ldr	r3, [r7, #0]
 8020404:	019b      	lsls	r3, r3, #6
 8020406:	22ff      	movs	r2, #255	@ 0xff
 8020408:	401a      	ands	r2, r3
 802040a:	1dfb      	adds	r3, r7, #7
 802040c:	781b      	ldrb	r3, [r3, #0]
 802040e:	0018      	movs	r0, r3
 8020410:	2303      	movs	r3, #3
 8020412:	4003      	ands	r3, r0
 8020414:	00db      	lsls	r3, r3, #3
 8020416:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8020418:	481f      	ldr	r0, [pc, #124]	@ (8020498 <__NVIC_SetPriority+0xd4>)
 802041a:	1dfb      	adds	r3, r7, #7
 802041c:	781b      	ldrb	r3, [r3, #0]
 802041e:	b25b      	sxtb	r3, r3
 8020420:	089b      	lsrs	r3, r3, #2
 8020422:	430a      	orrs	r2, r1
 8020424:	33c0      	adds	r3, #192	@ 0xc0
 8020426:	009b      	lsls	r3, r3, #2
 8020428:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 802042a:	e031      	b.n	8020490 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 802042c:	4a1b      	ldr	r2, [pc, #108]	@ (802049c <__NVIC_SetPriority+0xd8>)
 802042e:	1dfb      	adds	r3, r7, #7
 8020430:	781b      	ldrb	r3, [r3, #0]
 8020432:	0019      	movs	r1, r3
 8020434:	230f      	movs	r3, #15
 8020436:	400b      	ands	r3, r1
 8020438:	3b08      	subs	r3, #8
 802043a:	089b      	lsrs	r3, r3, #2
 802043c:	3306      	adds	r3, #6
 802043e:	009b      	lsls	r3, r3, #2
 8020440:	18d3      	adds	r3, r2, r3
 8020442:	3304      	adds	r3, #4
 8020444:	681b      	ldr	r3, [r3, #0]
 8020446:	1dfa      	adds	r2, r7, #7
 8020448:	7812      	ldrb	r2, [r2, #0]
 802044a:	0011      	movs	r1, r2
 802044c:	2203      	movs	r2, #3
 802044e:	400a      	ands	r2, r1
 8020450:	00d2      	lsls	r2, r2, #3
 8020452:	21ff      	movs	r1, #255	@ 0xff
 8020454:	4091      	lsls	r1, r2
 8020456:	000a      	movs	r2, r1
 8020458:	43d2      	mvns	r2, r2
 802045a:	401a      	ands	r2, r3
 802045c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 802045e:	683b      	ldr	r3, [r7, #0]
 8020460:	019b      	lsls	r3, r3, #6
 8020462:	22ff      	movs	r2, #255	@ 0xff
 8020464:	401a      	ands	r2, r3
 8020466:	1dfb      	adds	r3, r7, #7
 8020468:	781b      	ldrb	r3, [r3, #0]
 802046a:	0018      	movs	r0, r3
 802046c:	2303      	movs	r3, #3
 802046e:	4003      	ands	r3, r0
 8020470:	00db      	lsls	r3, r3, #3
 8020472:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8020474:	4809      	ldr	r0, [pc, #36]	@ (802049c <__NVIC_SetPriority+0xd8>)
 8020476:	1dfb      	adds	r3, r7, #7
 8020478:	781b      	ldrb	r3, [r3, #0]
 802047a:	001c      	movs	r4, r3
 802047c:	230f      	movs	r3, #15
 802047e:	4023      	ands	r3, r4
 8020480:	3b08      	subs	r3, #8
 8020482:	089b      	lsrs	r3, r3, #2
 8020484:	430a      	orrs	r2, r1
 8020486:	3306      	adds	r3, #6
 8020488:	009b      	lsls	r3, r3, #2
 802048a:	18c3      	adds	r3, r0, r3
 802048c:	3304      	adds	r3, #4
 802048e:	601a      	str	r2, [r3, #0]
}
 8020490:	46c0      	nop			@ (mov r8, r8)
 8020492:	46bd      	mov	sp, r7
 8020494:	b003      	add	sp, #12
 8020496:	bd90      	pop	{r4, r7, pc}
 8020498:	e000e100 	.word	0xe000e100
 802049c:	e000ed00 	.word	0xe000ed00

080204a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80204a0:	b580      	push	{r7, lr}
 80204a2:	b082      	sub	sp, #8
 80204a4:	af00      	add	r7, sp, #0
 80204a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80204a8:	687b      	ldr	r3, [r7, #4]
 80204aa:	1e5a      	subs	r2, r3, #1
 80204ac:	2380      	movs	r3, #128	@ 0x80
 80204ae:	045b      	lsls	r3, r3, #17
 80204b0:	429a      	cmp	r2, r3
 80204b2:	d301      	bcc.n	80204b8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80204b4:	2301      	movs	r3, #1
 80204b6:	e010      	b.n	80204da <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80204b8:	4b0a      	ldr	r3, [pc, #40]	@ (80204e4 <SysTick_Config+0x44>)
 80204ba:	687a      	ldr	r2, [r7, #4]
 80204bc:	3a01      	subs	r2, #1
 80204be:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80204c0:	2301      	movs	r3, #1
 80204c2:	425b      	negs	r3, r3
 80204c4:	2103      	movs	r1, #3
 80204c6:	0018      	movs	r0, r3
 80204c8:	f7ff ff7c 	bl	80203c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80204cc:	4b05      	ldr	r3, [pc, #20]	@ (80204e4 <SysTick_Config+0x44>)
 80204ce:	2200      	movs	r2, #0
 80204d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80204d2:	4b04      	ldr	r3, [pc, #16]	@ (80204e4 <SysTick_Config+0x44>)
 80204d4:	2207      	movs	r2, #7
 80204d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80204d8:	2300      	movs	r3, #0
}
 80204da:	0018      	movs	r0, r3
 80204dc:	46bd      	mov	sp, r7
 80204de:	b002      	add	sp, #8
 80204e0:	bd80      	pop	{r7, pc}
 80204e2:	46c0      	nop			@ (mov r8, r8)
 80204e4:	e000e010 	.word	0xe000e010

080204e8 <HAL_NVIC_SetPriority>:
  *         with stm32wlxx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80204e8:	b580      	push	{r7, lr}
 80204ea:	b084      	sub	sp, #16
 80204ec:	af00      	add	r7, sp, #0
 80204ee:	60b9      	str	r1, [r7, #8]
 80204f0:	607a      	str	r2, [r7, #4]
 80204f2:	210f      	movs	r1, #15
 80204f4:	187b      	adds	r3, r7, r1
 80204f6:	1c02      	adds	r2, r0, #0
 80204f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80204fa:	68ba      	ldr	r2, [r7, #8]
 80204fc:	187b      	adds	r3, r7, r1
 80204fe:	781b      	ldrb	r3, [r3, #0]
 8020500:	b25b      	sxtb	r3, r3
 8020502:	0011      	movs	r1, r2
 8020504:	0018      	movs	r0, r3
 8020506:	f7ff ff5d 	bl	80203c4 <__NVIC_SetPriority>
}
 802050a:	46c0      	nop			@ (mov r8, r8)
 802050c:	46bd      	mov	sp, r7
 802050e:	b004      	add	sp, #16
 8020510:	bd80      	pop	{r7, pc}

08020512 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8020512:	b580      	push	{r7, lr}
 8020514:	b082      	sub	sp, #8
 8020516:	af00      	add	r7, sp, #0
 8020518:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 802051a:	687b      	ldr	r3, [r7, #4]
 802051c:	0018      	movs	r0, r3
 802051e:	f7ff ffbf 	bl	80204a0 <SysTick_Config>
 8020522:	0003      	movs	r3, r0
}
 8020524:	0018      	movs	r0, r3
 8020526:	46bd      	mov	sp, r7
 8020528:	b002      	add	sp, #8
 802052a:	bd80      	pop	{r7, pc}

0802052c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 802052c:	b580      	push	{r7, lr}
 802052e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8020530:	23b0      	movs	r3, #176	@ 0xb0
 8020532:	05db      	lsls	r3, r3, #23
 8020534:	681a      	ldr	r2, [r3, #0]
 8020536:	2380      	movs	r3, #128	@ 0x80
 8020538:	035b      	lsls	r3, r3, #13
 802053a:	401a      	ands	r2, r3
 802053c:	2380      	movs	r3, #128	@ 0x80
 802053e:	035b      	lsls	r3, r3, #13
 8020540:	429a      	cmp	r2, r3
 8020542:	d101      	bne.n	8020548 <LL_RCC_HSE_IsEnabledDiv2+0x1c>
 8020544:	2301      	movs	r3, #1
 8020546:	e000      	b.n	802054a <LL_RCC_HSE_IsEnabledDiv2+0x1e>
 8020548:	2300      	movs	r3, #0
}
 802054a:	0018      	movs	r0, r3
 802054c:	46bd      	mov	sp, r7
 802054e:	bd80      	pop	{r7, pc}

08020550 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8020550:	b580      	push	{r7, lr}
 8020552:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8020554:	23b0      	movs	r3, #176	@ 0xb0
 8020556:	05db      	lsls	r3, r3, #23
 8020558:	681b      	ldr	r3, [r3, #0]
 802055a:	2208      	movs	r2, #8
 802055c:	4013      	ands	r3, r2
 802055e:	2b08      	cmp	r3, #8
 8020560:	d101      	bne.n	8020566 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8020562:	2301      	movs	r3, #1
 8020564:	e000      	b.n	8020568 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8020566:	2300      	movs	r3, #0
}
 8020568:	0018      	movs	r0, r3
 802056a:	46bd      	mov	sp, r7
 802056c:	bd80      	pop	{r7, pc}

0802056e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 802056e:	b580      	push	{r7, lr}
 8020570:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8020572:	23b0      	movs	r3, #176	@ 0xb0
 8020574:	05db      	lsls	r3, r3, #23
 8020576:	681b      	ldr	r3, [r3, #0]
 8020578:	22f0      	movs	r2, #240	@ 0xf0
 802057a:	4013      	ands	r3, r2
}
 802057c:	0018      	movs	r0, r3
 802057e:	46bd      	mov	sp, r7
 8020580:	bd80      	pop	{r7, pc}

08020582 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8020582:	b580      	push	{r7, lr}
 8020584:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8020586:	23b0      	movs	r3, #176	@ 0xb0
 8020588:	05db      	lsls	r3, r3, #23
 802058a:	2294      	movs	r2, #148	@ 0x94
 802058c:	589a      	ldr	r2, [r3, r2]
 802058e:	23f0      	movs	r3, #240	@ 0xf0
 8020590:	011b      	lsls	r3, r3, #4
 8020592:	4013      	ands	r3, r2
}
 8020594:	0018      	movs	r0, r3
 8020596:	46bd      	mov	sp, r7
 8020598:	bd80      	pop	{r7, pc}

0802059a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 802059a:	b580      	push	{r7, lr}
 802059c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 802059e:	23b0      	movs	r3, #176	@ 0xb0
 80205a0:	05db      	lsls	r3, r3, #23
 80205a2:	689b      	ldr	r3, [r3, #8]
 80205a4:	220c      	movs	r2, #12
 80205a6:	4013      	ands	r3, r2
}
 80205a8:	0018      	movs	r0, r3
 80205aa:	46bd      	mov	sp, r7
 80205ac:	bd80      	pop	{r7, pc}

080205ae <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 80205ae:	b580      	push	{r7, lr}
 80205b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 80205b2:	23b0      	movs	r3, #176	@ 0xb0
 80205b4:	05da      	lsls	r2, r3, #23
 80205b6:	2384      	movs	r3, #132	@ 0x84
 80205b8:	005b      	lsls	r3, r3, #1
 80205ba:	58d3      	ldr	r3, [r2, r3]
 80205bc:	22f0      	movs	r2, #240	@ 0xf0
 80205be:	4013      	ands	r3, r2
}
 80205c0:	0018      	movs	r0, r3
 80205c2:	46bd      	mov	sp, r7
 80205c4:	bd80      	pop	{r7, pc}

080205c6 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80205c6:	b580      	push	{r7, lr}
 80205c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80205ca:	23b0      	movs	r3, #176	@ 0xb0
 80205cc:	05db      	lsls	r3, r3, #23
 80205ce:	68db      	ldr	r3, [r3, #12]
 80205d0:	0a1b      	lsrs	r3, r3, #8
 80205d2:	227f      	movs	r2, #127	@ 0x7f
 80205d4:	4013      	ands	r3, r2
}
 80205d6:	0018      	movs	r0, r3
 80205d8:	46bd      	mov	sp, r7
 80205da:	bd80      	pop	{r7, pc}

080205dc <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80205dc:	b580      	push	{r7, lr}
 80205de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80205e0:	23b0      	movs	r3, #176	@ 0xb0
 80205e2:	05db      	lsls	r3, r3, #23
 80205e4:	68db      	ldr	r3, [r3, #12]
 80205e6:	0f5b      	lsrs	r3, r3, #29
 80205e8:	075b      	lsls	r3, r3, #29
}
 80205ea:	0018      	movs	r0, r3
 80205ec:	46bd      	mov	sp, r7
 80205ee:	bd80      	pop	{r7, pc}

080205f0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80205f0:	b580      	push	{r7, lr}
 80205f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80205f4:	23b0      	movs	r3, #176	@ 0xb0
 80205f6:	05db      	lsls	r3, r3, #23
 80205f8:	68db      	ldr	r3, [r3, #12]
 80205fa:	2270      	movs	r2, #112	@ 0x70
 80205fc:	4013      	ands	r3, r2
}
 80205fe:	0018      	movs	r0, r3
 8020600:	46bd      	mov	sp, r7
 8020602:	bd80      	pop	{r7, pc}

08020604 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8020604:	b580      	push	{r7, lr}
 8020606:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8020608:	23b0      	movs	r3, #176	@ 0xb0
 802060a:	05db      	lsls	r3, r3, #23
 802060c:	68db      	ldr	r3, [r3, #12]
 802060e:	2203      	movs	r2, #3
 8020610:	4013      	ands	r3, r2
}
 8020612:	0018      	movs	r0, r3
 8020614:	46bd      	mov	sp, r7
 8020616:	bd80      	pop	{r7, pc}

08020618 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8020618:	b590      	push	{r4, r7, lr}
 802061a:	b087      	sub	sp, #28
 802061c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 802061e:	2300      	movs	r3, #0
 8020620:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8020622:	2300      	movs	r3, #0
 8020624:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8020626:	f7ff ffb8 	bl	802059a <LL_RCC_GetSysClkSource>
 802062a:	0003      	movs	r3, r0
 802062c:	60bb      	str	r3, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 802062e:	f7ff ffe9 	bl	8020604 <LL_RCC_PLL_GetMainSource>
 8020632:	0003      	movs	r3, r0
 8020634:	607b      	str	r3, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8020636:	68bb      	ldr	r3, [r7, #8]
 8020638:	2b00      	cmp	r3, #0
 802063a:	d005      	beq.n	8020648 <HAL_RCC_GetSysClockFreq+0x30>
 802063c:	68bb      	ldr	r3, [r7, #8]
 802063e:	2b0c      	cmp	r3, #12
 8020640:	d138      	bne.n	80206b4 <HAL_RCC_GetSysClockFreq+0x9c>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8020642:	687b      	ldr	r3, [r7, #4]
 8020644:	2b01      	cmp	r3, #1
 8020646:	d135      	bne.n	80206b4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8020648:	f7ff ff82 	bl	8020550 <LL_RCC_MSI_IsEnabledRangeSelect>
 802064c:	1e03      	subs	r3, r0, #0
 802064e:	d115      	bne.n	802067c <HAL_RCC_GetSysClockFreq+0x64>
 8020650:	f7ff ff7e 	bl	8020550 <LL_RCC_MSI_IsEnabledRangeSelect>
 8020654:	0003      	movs	r3, r0
 8020656:	2b01      	cmp	r3, #1
 8020658:	d106      	bne.n	8020668 <HAL_RCC_GetSysClockFreq+0x50>
 802065a:	f7ff ff88 	bl	802056e <LL_RCC_MSI_GetRange>
 802065e:	0003      	movs	r3, r0
 8020660:	0a1b      	lsrs	r3, r3, #8
 8020662:	220f      	movs	r2, #15
 8020664:	4013      	ands	r3, r2
 8020666:	e005      	b.n	8020674 <HAL_RCC_GetSysClockFreq+0x5c>
 8020668:	f7ff ff8b 	bl	8020582 <LL_RCC_MSI_GetRangeAfterStandby>
 802066c:	0003      	movs	r3, r0
 802066e:	0a1b      	lsrs	r3, r3, #8
 8020670:	220f      	movs	r2, #15
 8020672:	4013      	ands	r3, r2
 8020674:	4a3a      	ldr	r2, [pc, #232]	@ (8020760 <HAL_RCC_GetSysClockFreq+0x148>)
 8020676:	009b      	lsls	r3, r3, #2
 8020678:	589b      	ldr	r3, [r3, r2]
 802067a:	e014      	b.n	80206a6 <HAL_RCC_GetSysClockFreq+0x8e>
 802067c:	f7ff ff68 	bl	8020550 <LL_RCC_MSI_IsEnabledRangeSelect>
 8020680:	0003      	movs	r3, r0
 8020682:	2b01      	cmp	r3, #1
 8020684:	d106      	bne.n	8020694 <HAL_RCC_GetSysClockFreq+0x7c>
 8020686:	f7ff ff72 	bl	802056e <LL_RCC_MSI_GetRange>
 802068a:	0003      	movs	r3, r0
 802068c:	091b      	lsrs	r3, r3, #4
 802068e:	220f      	movs	r2, #15
 8020690:	4013      	ands	r3, r2
 8020692:	e005      	b.n	80206a0 <HAL_RCC_GetSysClockFreq+0x88>
 8020694:	f7ff ff75 	bl	8020582 <LL_RCC_MSI_GetRangeAfterStandby>
 8020698:	0003      	movs	r3, r0
 802069a:	091b      	lsrs	r3, r3, #4
 802069c:	220f      	movs	r2, #15
 802069e:	4013      	ands	r3, r2
 80206a0:	4a2f      	ldr	r2, [pc, #188]	@ (8020760 <HAL_RCC_GetSysClockFreq+0x148>)
 80206a2:	009b      	lsls	r3, r3, #2
 80206a4:	589b      	ldr	r3, [r3, r2]
 80206a6:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80206a8:	68bb      	ldr	r3, [r7, #8]
 80206aa:	2b00      	cmp	r3, #0
 80206ac:	d115      	bne.n	80206da <HAL_RCC_GetSysClockFreq+0xc2>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80206ae:	693b      	ldr	r3, [r7, #16]
 80206b0:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80206b2:	e012      	b.n	80206da <HAL_RCC_GetSysClockFreq+0xc2>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80206b4:	68bb      	ldr	r3, [r7, #8]
 80206b6:	2b04      	cmp	r3, #4
 80206b8:	d102      	bne.n	80206c0 <HAL_RCC_GetSysClockFreq+0xa8>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80206ba:	4b2a      	ldr	r3, [pc, #168]	@ (8020764 <HAL_RCC_GetSysClockFreq+0x14c>)
 80206bc:	617b      	str	r3, [r7, #20]
 80206be:	e00c      	b.n	80206da <HAL_RCC_GetSysClockFreq+0xc2>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80206c0:	68bb      	ldr	r3, [r7, #8]
 80206c2:	2b08      	cmp	r3, #8
 80206c4:	d109      	bne.n	80206da <HAL_RCC_GetSysClockFreq+0xc2>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80206c6:	f7ff ff31 	bl	802052c <LL_RCC_HSE_IsEnabledDiv2>
 80206ca:	0003      	movs	r3, r0
 80206cc:	2b01      	cmp	r3, #1
 80206ce:	d102      	bne.n	80206d6 <HAL_RCC_GetSysClockFreq+0xbe>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80206d0:	4b24      	ldr	r3, [pc, #144]	@ (8020764 <HAL_RCC_GetSysClockFreq+0x14c>)
 80206d2:	617b      	str	r3, [r7, #20]
 80206d4:	e001      	b.n	80206da <HAL_RCC_GetSysClockFreq+0xc2>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80206d6:	4b24      	ldr	r3, [pc, #144]	@ (8020768 <HAL_RCC_GetSysClockFreq+0x150>)
 80206d8:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80206da:	f7ff ff5e 	bl	802059a <LL_RCC_GetSysClkSource>
 80206de:	0003      	movs	r3, r0
 80206e0:	2b0c      	cmp	r3, #12
 80206e2:	d137      	bne.n	8020754 <HAL_RCC_GetSysClockFreq+0x13c>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80206e4:	f7ff ff8e 	bl	8020604 <LL_RCC_PLL_GetMainSource>
 80206e8:	0003      	movs	r3, r0
 80206ea:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 80206ec:	687b      	ldr	r3, [r7, #4]
 80206ee:	2b02      	cmp	r3, #2
 80206f0:	d003      	beq.n	80206fa <HAL_RCC_GetSysClockFreq+0xe2>
 80206f2:	687b      	ldr	r3, [r7, #4]
 80206f4:	2b03      	cmp	r3, #3
 80206f6:	d003      	beq.n	8020700 <HAL_RCC_GetSysClockFreq+0xe8>
 80206f8:	e00d      	b.n	8020716 <HAL_RCC_GetSysClockFreq+0xfe>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80206fa:	4b1a      	ldr	r3, [pc, #104]	@ (8020764 <HAL_RCC_GetSysClockFreq+0x14c>)
 80206fc:	60fb      	str	r3, [r7, #12]
        break;
 80206fe:	e00d      	b.n	802071c <HAL_RCC_GetSysClockFreq+0x104>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8020700:	f7ff ff14 	bl	802052c <LL_RCC_HSE_IsEnabledDiv2>
 8020704:	0003      	movs	r3, r0
 8020706:	2b01      	cmp	r3, #1
 8020708:	d102      	bne.n	8020710 <HAL_RCC_GetSysClockFreq+0xf8>
        {
          pllinputfreq = HSE_VALUE / 2U;
 802070a:	4b16      	ldr	r3, [pc, #88]	@ (8020764 <HAL_RCC_GetSysClockFreq+0x14c>)
 802070c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 802070e:	e005      	b.n	802071c <HAL_RCC_GetSysClockFreq+0x104>
          pllinputfreq = HSE_VALUE;
 8020710:	4b15      	ldr	r3, [pc, #84]	@ (8020768 <HAL_RCC_GetSysClockFreq+0x150>)
 8020712:	60fb      	str	r3, [r7, #12]
        break;
 8020714:	e002      	b.n	802071c <HAL_RCC_GetSysClockFreq+0x104>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8020716:	693b      	ldr	r3, [r7, #16]
 8020718:	60fb      	str	r3, [r7, #12]
        break;
 802071a:	46c0      	nop			@ (mov r8, r8)
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 802071c:	f7ff ff53 	bl	80205c6 <LL_RCC_PLL_GetN>
 8020720:	0002      	movs	r2, r0
 8020722:	68fb      	ldr	r3, [r7, #12]
 8020724:	4353      	muls	r3, r2
 8020726:	001c      	movs	r4, r3
 8020728:	f7ff ff62 	bl	80205f0 <LL_RCC_PLL_GetDivider>
 802072c:	0003      	movs	r3, r0
 802072e:	091b      	lsrs	r3, r3, #4
 8020730:	3301      	adds	r3, #1
 8020732:	0019      	movs	r1, r3
 8020734:	0020      	movs	r0, r4
 8020736:	f7ff fce7 	bl	8020108 <__udivsi3>
 802073a:	0003      	movs	r3, r0
 802073c:	001c      	movs	r4, r3
 802073e:	f7ff ff4d 	bl	80205dc <LL_RCC_PLL_GetR>
 8020742:	0003      	movs	r3, r0
 8020744:	0f5b      	lsrs	r3, r3, #29
 8020746:	3301      	adds	r3, #1
 8020748:	0019      	movs	r1, r3
 802074a:	0020      	movs	r0, r4
 802074c:	f7ff fcdc 	bl	8020108 <__udivsi3>
 8020750:	0003      	movs	r3, r0
 8020752:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8020754:	697b      	ldr	r3, [r7, #20]
}
 8020756:	0018      	movs	r0, r3
 8020758:	46bd      	mov	sp, r7
 802075a:	b007      	add	sp, #28
 802075c:	bd90      	pop	{r4, r7, pc}
 802075e:	46c0      	nop			@ (mov r8, r8)
 8020760:	0802083c 	.word	0x0802083c
 8020764:	00f42400 	.word	0x00f42400
 8020768:	01e84800 	.word	0x01e84800

0802076c <HAL_RCC_GetHCLK2Freq>:
/**
  * @brief  Return the HCLK2 frequency.
  * @retval HCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetHCLK2Freq(void)
{
 802076c:	b5b0      	push	{r4, r5, r7, lr}
 802076e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK2 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK2_FREQ(HAL_RCC_GetSysClockFreq(), LL_C2_RCC_GetAHBPrescaler())));
 8020770:	f7ff ff52 	bl	8020618 <HAL_RCC_GetSysClockFreq>
 8020774:	0004      	movs	r4, r0
 8020776:	f7ff ff1a 	bl	80205ae <LL_C2_RCC_GetAHBPrescaler>
 802077a:	0003      	movs	r3, r0
 802077c:	091b      	lsrs	r3, r3, #4
 802077e:	220f      	movs	r2, #15
 8020780:	401a      	ands	r2, r3
 8020782:	4b05      	ldr	r3, [pc, #20]	@ (8020798 <HAL_RCC_GetHCLK2Freq+0x2c>)
 8020784:	0092      	lsls	r2, r2, #2
 8020786:	58d3      	ldr	r3, [r2, r3]
 8020788:	0019      	movs	r1, r3
 802078a:	0020      	movs	r0, r4
 802078c:	f7ff fcbc 	bl	8020108 <__udivsi3>
 8020790:	0003      	movs	r3, r0
}
 8020792:	0018      	movs	r0, r3
 8020794:	46bd      	mov	sp, r7
 8020796:	bdb0      	pop	{r4, r5, r7, pc}
 8020798:	080207fc 	.word	0x080207fc

0802079c <__libc_init_array>:
 802079c:	b570      	push	{r4, r5, r6, lr}
 802079e:	2600      	movs	r6, #0
 80207a0:	4c0c      	ldr	r4, [pc, #48]	@ (80207d4 <__libc_init_array+0x38>)
 80207a2:	4d0d      	ldr	r5, [pc, #52]	@ (80207d8 <__libc_init_array+0x3c>)
 80207a4:	1b64      	subs	r4, r4, r5
 80207a6:	10a4      	asrs	r4, r4, #2
 80207a8:	42a6      	cmp	r6, r4
 80207aa:	d109      	bne.n	80207c0 <__libc_init_array+0x24>
 80207ac:	2600      	movs	r6, #0
 80207ae:	f000 f819 	bl	80207e4 <_init>
 80207b2:	4c0a      	ldr	r4, [pc, #40]	@ (80207dc <__libc_init_array+0x40>)
 80207b4:	4d0a      	ldr	r5, [pc, #40]	@ (80207e0 <__libc_init_array+0x44>)
 80207b6:	1b64      	subs	r4, r4, r5
 80207b8:	10a4      	asrs	r4, r4, #2
 80207ba:	42a6      	cmp	r6, r4
 80207bc:	d105      	bne.n	80207ca <__libc_init_array+0x2e>
 80207be:	bd70      	pop	{r4, r5, r6, pc}
 80207c0:	00b3      	lsls	r3, r6, #2
 80207c2:	58eb      	ldr	r3, [r5, r3]
 80207c4:	4798      	blx	r3
 80207c6:	3601      	adds	r6, #1
 80207c8:	e7ee      	b.n	80207a8 <__libc_init_array+0xc>
 80207ca:	00b3      	lsls	r3, r6, #2
 80207cc:	58eb      	ldr	r3, [r5, r3]
 80207ce:	4798      	blx	r3
 80207d0:	3601      	adds	r6, #1
 80207d2:	e7f2      	b.n	80207ba <__libc_init_array+0x1e>
 80207d4:	0802087c 	.word	0x0802087c
 80207d8:	0802087c 	.word	0x0802087c
 80207dc:	08020880 	.word	0x08020880
 80207e0:	0802087c 	.word	0x0802087c

080207e4 <_init>:
 80207e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80207e6:	46c0      	nop			@ (mov r8, r8)
 80207e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80207ea:	bc08      	pop	{r3}
 80207ec:	469e      	mov	lr, r3
 80207ee:	4770      	bx	lr

080207f0 <_fini>:
 80207f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80207f2:	46c0      	nop			@ (mov r8, r8)
 80207f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80207f6:	bc08      	pop	{r3}
 80207f8:	469e      	mov	lr, r3
 80207fa:	4770      	bx	lr
