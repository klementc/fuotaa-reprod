
ml_libtest_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007514  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005dc  08007658  08007658  00008658  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c34  08007c34  00009220  2**0
                  CONTENTS
  4 .ARM          00000008  08007c34  08007c34  00008c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c3c  08007c3c  00009220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c3c  08007c3c  00008c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007c40  08007c40  00008c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000220  20000000  08007c44  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006720  20000220  08007e64  00009220  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006940  08007e64  00009940  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00009220  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014900  00000000  00000000  0000924a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029fb  00000000  00000000  0001db4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001370  00000000  00000000  00020548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ef0  00000000  00000000  000218b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000210f1  00000000  00000000  000227a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012a10  00000000  00000000  00043899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c10aa  00000000  00000000  000562a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00117353  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065bc  00000000  00000000  00117398  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  0011d954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000220 	.word	0x20000220
 800015c:	00000000 	.word	0x00000000
 8000160:	0800763c 	.word	0x0800763c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000224 	.word	0x20000224
 800017c:	0800763c 	.word	0x0800763c

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_frsub>:
 8000b98:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b9c:	e002      	b.n	8000ba4 <__addsf3>
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_fsub>:
 8000ba0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ba4 <__addsf3>:
 8000ba4:	0042      	lsls	r2, r0, #1
 8000ba6:	bf1f      	itttt	ne
 8000ba8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bac:	ea92 0f03 	teqne	r2, r3
 8000bb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb8:	d06a      	beq.n	8000c90 <__addsf3+0xec>
 8000bba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bc2:	bfc1      	itttt	gt
 8000bc4:	18d2      	addgt	r2, r2, r3
 8000bc6:	4041      	eorgt	r1, r0
 8000bc8:	4048      	eorgt	r0, r1
 8000bca:	4041      	eorgt	r1, r0
 8000bcc:	bfb8      	it	lt
 8000bce:	425b      	neglt	r3, r3
 8000bd0:	2b19      	cmp	r3, #25
 8000bd2:	bf88      	it	hi
 8000bd4:	4770      	bxhi	lr
 8000bd6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bda:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bde:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bea:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bee:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4249      	negne	r1, r1
 8000bf6:	ea92 0f03 	teq	r2, r3
 8000bfa:	d03f      	beq.n	8000c7c <__addsf3+0xd8>
 8000bfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000c00:	fa41 fc03 	asr.w	ip, r1, r3
 8000c04:	eb10 000c 	adds.w	r0, r0, ip
 8000c08:	f1c3 0320 	rsb	r3, r3, #32
 8000c0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c10:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c14:	d502      	bpl.n	8000c1c <__addsf3+0x78>
 8000c16:	4249      	negs	r1, r1
 8000c18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c1c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c20:	d313      	bcc.n	8000c4a <__addsf3+0xa6>
 8000c22:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c26:	d306      	bcc.n	8000c36 <__addsf3+0x92>
 8000c28:	0840      	lsrs	r0, r0, #1
 8000c2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c2e:	f102 0201 	add.w	r2, r2, #1
 8000c32:	2afe      	cmp	r2, #254	@ 0xfe
 8000c34:	d251      	bcs.n	8000cda <__addsf3+0x136>
 8000c36:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c3e:	bf08      	it	eq
 8000c40:	f020 0001 	biceq.w	r0, r0, #1
 8000c44:	ea40 0003 	orr.w	r0, r0, r3
 8000c48:	4770      	bx	lr
 8000c4a:	0049      	lsls	r1, r1, #1
 8000c4c:	eb40 0000 	adc.w	r0, r0, r0
 8000c50:	3a01      	subs	r2, #1
 8000c52:	bf28      	it	cs
 8000c54:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c58:	d2ed      	bcs.n	8000c36 <__addsf3+0x92>
 8000c5a:	fab0 fc80 	clz	ip, r0
 8000c5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c62:	ebb2 020c 	subs.w	r2, r2, ip
 8000c66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c6a:	bfaa      	itet	ge
 8000c6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c70:	4252      	neglt	r2, r2
 8000c72:	4318      	orrge	r0, r3
 8000c74:	bfbc      	itt	lt
 8000c76:	40d0      	lsrlt	r0, r2
 8000c78:	4318      	orrlt	r0, r3
 8000c7a:	4770      	bx	lr
 8000c7c:	f092 0f00 	teq	r2, #0
 8000c80:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c84:	bf06      	itte	eq
 8000c86:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c8a:	3201      	addeq	r2, #1
 8000c8c:	3b01      	subne	r3, #1
 8000c8e:	e7b5      	b.n	8000bfc <__addsf3+0x58>
 8000c90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c98:	bf18      	it	ne
 8000c9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c9e:	d021      	beq.n	8000ce4 <__addsf3+0x140>
 8000ca0:	ea92 0f03 	teq	r2, r3
 8000ca4:	d004      	beq.n	8000cb0 <__addsf3+0x10c>
 8000ca6:	f092 0f00 	teq	r2, #0
 8000caa:	bf08      	it	eq
 8000cac:	4608      	moveq	r0, r1
 8000cae:	4770      	bx	lr
 8000cb0:	ea90 0f01 	teq	r0, r1
 8000cb4:	bf1c      	itt	ne
 8000cb6:	2000      	movne	r0, #0
 8000cb8:	4770      	bxne	lr
 8000cba:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cbe:	d104      	bne.n	8000cca <__addsf3+0x126>
 8000cc0:	0040      	lsls	r0, r0, #1
 8000cc2:	bf28      	it	cs
 8000cc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cc8:	4770      	bx	lr
 8000cca:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cce:	bf3c      	itt	cc
 8000cd0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bxcc	lr
 8000cd6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cda:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cde:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce2:	4770      	bx	lr
 8000ce4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce8:	bf16      	itet	ne
 8000cea:	4608      	movne	r0, r1
 8000cec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf0:	4601      	movne	r1, r0
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	bf06      	itte	eq
 8000cf6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cfa:	ea90 0f01 	teqeq	r0, r1
 8000cfe:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d02:	4770      	bx	lr

08000d04 <__aeabi_ui2f>:
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	e004      	b.n	8000d14 <__aeabi_i2f+0x8>
 8000d0a:	bf00      	nop

08000d0c <__aeabi_i2f>:
 8000d0c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d10:	bf48      	it	mi
 8000d12:	4240      	negmi	r0, r0
 8000d14:	ea5f 0c00 	movs.w	ip, r0
 8000d18:	bf08      	it	eq
 8000d1a:	4770      	bxeq	lr
 8000d1c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d20:	4601      	mov	r1, r0
 8000d22:	f04f 0000 	mov.w	r0, #0
 8000d26:	e01c      	b.n	8000d62 <__aeabi_l2f+0x2a>

08000d28 <__aeabi_ul2f>:
 8000d28:	ea50 0201 	orrs.w	r2, r0, r1
 8000d2c:	bf08      	it	eq
 8000d2e:	4770      	bxeq	lr
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e00a      	b.n	8000d4c <__aeabi_l2f+0x14>
 8000d36:	bf00      	nop

08000d38 <__aeabi_l2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__aeabi_l2f+0x14>
 8000d46:	4240      	negs	r0, r0
 8000d48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4c:	ea5f 0c01 	movs.w	ip, r1
 8000d50:	bf02      	ittt	eq
 8000d52:	4684      	moveq	ip, r0
 8000d54:	4601      	moveq	r1, r0
 8000d56:	2000      	moveq	r0, #0
 8000d58:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d5c:	bf08      	it	eq
 8000d5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d62:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d66:	fabc f28c 	clz	r2, ip
 8000d6a:	3a08      	subs	r2, #8
 8000d6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d70:	db10      	blt.n	8000d94 <__aeabi_l2f+0x5c>
 8000d72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d76:	4463      	add	r3, ip
 8000d78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d7c:	f1c2 0220 	rsb	r2, r2, #32
 8000d80:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d84:	fa20 f202 	lsr.w	r2, r0, r2
 8000d88:	eb43 0002 	adc.w	r0, r3, r2
 8000d8c:	bf08      	it	eq
 8000d8e:	f020 0001 	biceq.w	r0, r0, #1
 8000d92:	4770      	bx	lr
 8000d94:	f102 0220 	add.w	r2, r2, #32
 8000d98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d9c:	f1c2 0220 	rsb	r2, r2, #32
 8000da0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000da4:	fa21 f202 	lsr.w	r2, r1, r2
 8000da8:	eb43 0002 	adc.w	r0, r3, r2
 8000dac:	bf08      	it	eq
 8000dae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_f2uiz>:
 8000db4:	0042      	lsls	r2, r0, #1
 8000db6:	d20e      	bcs.n	8000dd6 <__aeabi_f2uiz+0x22>
 8000db8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000dbc:	d30b      	bcc.n	8000dd6 <__aeabi_f2uiz+0x22>
 8000dbe:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000dc2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000dc6:	d409      	bmi.n	8000ddc <__aeabi_f2uiz+0x28>
 8000dc8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000dcc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000dd0:	fa23 f002 	lsr.w	r0, r3, r2
 8000dd4:	4770      	bx	lr
 8000dd6:	f04f 0000 	mov.w	r0, #0
 8000dda:	4770      	bx	lr
 8000ddc:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000de0:	d101      	bne.n	8000de6 <__aeabi_f2uiz+0x32>
 8000de2:	0242      	lsls	r2, r0, #9
 8000de4:	d102      	bne.n	8000dec <__aeabi_f2uiz+0x38>
 8000de6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000dea:	4770      	bx	lr
 8000dec:	f04f 0000 	mov.w	r0, #0
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop

08000df4 <__aeabi_uldivmod>:
 8000df4:	b953      	cbnz	r3, 8000e0c <__aeabi_uldivmod+0x18>
 8000df6:	b94a      	cbnz	r2, 8000e0c <__aeabi_uldivmod+0x18>
 8000df8:	2900      	cmp	r1, #0
 8000dfa:	bf08      	it	eq
 8000dfc:	2800      	cmpeq	r0, #0
 8000dfe:	bf1c      	itt	ne
 8000e00:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000e04:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000e08:	f000 b96a 	b.w	80010e0 <__aeabi_idiv0>
 8000e0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e14:	f000 f806 	bl	8000e24 <__udivmoddi4>
 8000e18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e20:	b004      	add	sp, #16
 8000e22:	4770      	bx	lr

08000e24 <__udivmoddi4>:
 8000e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e28:	9d08      	ldr	r5, [sp, #32]
 8000e2a:	460c      	mov	r4, r1
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d14e      	bne.n	8000ece <__udivmoddi4+0xaa>
 8000e30:	4694      	mov	ip, r2
 8000e32:	458c      	cmp	ip, r1
 8000e34:	4686      	mov	lr, r0
 8000e36:	fab2 f282 	clz	r2, r2
 8000e3a:	d962      	bls.n	8000f02 <__udivmoddi4+0xde>
 8000e3c:	b14a      	cbz	r2, 8000e52 <__udivmoddi4+0x2e>
 8000e3e:	f1c2 0320 	rsb	r3, r2, #32
 8000e42:	4091      	lsls	r1, r2
 8000e44:	fa20 f303 	lsr.w	r3, r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	4319      	orrs	r1, r3
 8000e4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e56:	fa1f f68c 	uxth.w	r6, ip
 8000e5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e62:	fb07 1114 	mls	r1, r7, r4, r1
 8000e66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e6a:	fb04 f106 	mul.w	r1, r4, r6
 8000e6e:	4299      	cmp	r1, r3
 8000e70:	d90a      	bls.n	8000e88 <__udivmoddi4+0x64>
 8000e72:	eb1c 0303 	adds.w	r3, ip, r3
 8000e76:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000e7a:	f080 8112 	bcs.w	80010a2 <__udivmoddi4+0x27e>
 8000e7e:	4299      	cmp	r1, r3
 8000e80:	f240 810f 	bls.w	80010a2 <__udivmoddi4+0x27e>
 8000e84:	3c02      	subs	r4, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1a59      	subs	r1, r3, r1
 8000e8a:	fa1f f38e 	uxth.w	r3, lr
 8000e8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e92:	fb07 1110 	mls	r1, r7, r0, r1
 8000e96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e9a:	fb00 f606 	mul.w	r6, r0, r6
 8000e9e:	429e      	cmp	r6, r3
 8000ea0:	d90a      	bls.n	8000eb8 <__udivmoddi4+0x94>
 8000ea2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ea6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000eaa:	f080 80fc 	bcs.w	80010a6 <__udivmoddi4+0x282>
 8000eae:	429e      	cmp	r6, r3
 8000eb0:	f240 80f9 	bls.w	80010a6 <__udivmoddi4+0x282>
 8000eb4:	4463      	add	r3, ip
 8000eb6:	3802      	subs	r0, #2
 8000eb8:	1b9b      	subs	r3, r3, r6
 8000eba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	b11d      	cbz	r5, 8000eca <__udivmoddi4+0xa6>
 8000ec2:	40d3      	lsrs	r3, r2
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	e9c5 3200 	strd	r3, r2, [r5]
 8000eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ece:	428b      	cmp	r3, r1
 8000ed0:	d905      	bls.n	8000ede <__udivmoddi4+0xba>
 8000ed2:	b10d      	cbz	r5, 8000ed8 <__udivmoddi4+0xb4>
 8000ed4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4608      	mov	r0, r1
 8000edc:	e7f5      	b.n	8000eca <__udivmoddi4+0xa6>
 8000ede:	fab3 f183 	clz	r1, r3
 8000ee2:	2900      	cmp	r1, #0
 8000ee4:	d146      	bne.n	8000f74 <__udivmoddi4+0x150>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d302      	bcc.n	8000ef0 <__udivmoddi4+0xcc>
 8000eea:	4290      	cmp	r0, r2
 8000eec:	f0c0 80f0 	bcc.w	80010d0 <__udivmoddi4+0x2ac>
 8000ef0:	1a86      	subs	r6, r0, r2
 8000ef2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	2d00      	cmp	r5, #0
 8000efa:	d0e6      	beq.n	8000eca <__udivmoddi4+0xa6>
 8000efc:	e9c5 6300 	strd	r6, r3, [r5]
 8000f00:	e7e3      	b.n	8000eca <__udivmoddi4+0xa6>
 8000f02:	2a00      	cmp	r2, #0
 8000f04:	f040 8090 	bne.w	8001028 <__udivmoddi4+0x204>
 8000f08:	eba1 040c 	sub.w	r4, r1, ip
 8000f0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f10:	fa1f f78c 	uxth.w	r7, ip
 8000f14:	2101      	movs	r1, #1
 8000f16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000f1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000f22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f26:	fb07 f006 	mul.w	r0, r7, r6
 8000f2a:	4298      	cmp	r0, r3
 8000f2c:	d908      	bls.n	8000f40 <__udivmoddi4+0x11c>
 8000f2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f32:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000f36:	d202      	bcs.n	8000f3e <__udivmoddi4+0x11a>
 8000f38:	4298      	cmp	r0, r3
 8000f3a:	f200 80cd 	bhi.w	80010d8 <__udivmoddi4+0x2b4>
 8000f3e:	4626      	mov	r6, r4
 8000f40:	1a1c      	subs	r4, r3, r0
 8000f42:	fa1f f38e 	uxth.w	r3, lr
 8000f46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000f4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f52:	fb00 f707 	mul.w	r7, r0, r7
 8000f56:	429f      	cmp	r7, r3
 8000f58:	d908      	bls.n	8000f6c <__udivmoddi4+0x148>
 8000f5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f5e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000f62:	d202      	bcs.n	8000f6a <__udivmoddi4+0x146>
 8000f64:	429f      	cmp	r7, r3
 8000f66:	f200 80b0 	bhi.w	80010ca <__udivmoddi4+0x2a6>
 8000f6a:	4620      	mov	r0, r4
 8000f6c:	1bdb      	subs	r3, r3, r7
 8000f6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f72:	e7a5      	b.n	8000ec0 <__udivmoddi4+0x9c>
 8000f74:	f1c1 0620 	rsb	r6, r1, #32
 8000f78:	408b      	lsls	r3, r1
 8000f7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000f7e:	431f      	orrs	r7, r3
 8000f80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f84:	fa04 f301 	lsl.w	r3, r4, r1
 8000f88:	ea43 030c 	orr.w	r3, r3, ip
 8000f8c:	40f4      	lsrs	r4, r6
 8000f8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f92:	0c38      	lsrs	r0, r7, #16
 8000f94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f98:	fbb4 fef0 	udiv	lr, r4, r0
 8000f9c:	fa1f fc87 	uxth.w	ip, r7
 8000fa0:	fb00 441e 	mls	r4, r0, lr, r4
 8000fa4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fa8:	fb0e f90c 	mul.w	r9, lr, ip
 8000fac:	45a1      	cmp	r9, r4
 8000fae:	fa02 f201 	lsl.w	r2, r2, r1
 8000fb2:	d90a      	bls.n	8000fca <__udivmoddi4+0x1a6>
 8000fb4:	193c      	adds	r4, r7, r4
 8000fb6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000fba:	f080 8084 	bcs.w	80010c6 <__udivmoddi4+0x2a2>
 8000fbe:	45a1      	cmp	r9, r4
 8000fc0:	f240 8081 	bls.w	80010c6 <__udivmoddi4+0x2a2>
 8000fc4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fc8:	443c      	add	r4, r7
 8000fca:	eba4 0409 	sub.w	r4, r4, r9
 8000fce:	fa1f f983 	uxth.w	r9, r3
 8000fd2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fd6:	fb00 4413 	mls	r4, r0, r3, r4
 8000fda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fde:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fe2:	45a4      	cmp	ip, r4
 8000fe4:	d907      	bls.n	8000ff6 <__udivmoddi4+0x1d2>
 8000fe6:	193c      	adds	r4, r7, r4
 8000fe8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000fec:	d267      	bcs.n	80010be <__udivmoddi4+0x29a>
 8000fee:	45a4      	cmp	ip, r4
 8000ff0:	d965      	bls.n	80010be <__udivmoddi4+0x29a>
 8000ff2:	3b02      	subs	r3, #2
 8000ff4:	443c      	add	r4, r7
 8000ff6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ffa:	fba0 9302 	umull	r9, r3, r0, r2
 8000ffe:	eba4 040c 	sub.w	r4, r4, ip
 8001002:	429c      	cmp	r4, r3
 8001004:	46ce      	mov	lr, r9
 8001006:	469c      	mov	ip, r3
 8001008:	d351      	bcc.n	80010ae <__udivmoddi4+0x28a>
 800100a:	d04e      	beq.n	80010aa <__udivmoddi4+0x286>
 800100c:	b155      	cbz	r5, 8001024 <__udivmoddi4+0x200>
 800100e:	ebb8 030e 	subs.w	r3, r8, lr
 8001012:	eb64 040c 	sbc.w	r4, r4, ip
 8001016:	fa04 f606 	lsl.w	r6, r4, r6
 800101a:	40cb      	lsrs	r3, r1
 800101c:	431e      	orrs	r6, r3
 800101e:	40cc      	lsrs	r4, r1
 8001020:	e9c5 6400 	strd	r6, r4, [r5]
 8001024:	2100      	movs	r1, #0
 8001026:	e750      	b.n	8000eca <__udivmoddi4+0xa6>
 8001028:	f1c2 0320 	rsb	r3, r2, #32
 800102c:	fa20 f103 	lsr.w	r1, r0, r3
 8001030:	fa0c fc02 	lsl.w	ip, ip, r2
 8001034:	fa24 f303 	lsr.w	r3, r4, r3
 8001038:	4094      	lsls	r4, r2
 800103a:	430c      	orrs	r4, r1
 800103c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001040:	fa00 fe02 	lsl.w	lr, r0, r2
 8001044:	fa1f f78c 	uxth.w	r7, ip
 8001048:	fbb3 f0f8 	udiv	r0, r3, r8
 800104c:	fb08 3110 	mls	r1, r8, r0, r3
 8001050:	0c23      	lsrs	r3, r4, #16
 8001052:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001056:	fb00 f107 	mul.w	r1, r0, r7
 800105a:	4299      	cmp	r1, r3
 800105c:	d908      	bls.n	8001070 <__udivmoddi4+0x24c>
 800105e:	eb1c 0303 	adds.w	r3, ip, r3
 8001062:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8001066:	d22c      	bcs.n	80010c2 <__udivmoddi4+0x29e>
 8001068:	4299      	cmp	r1, r3
 800106a:	d92a      	bls.n	80010c2 <__udivmoddi4+0x29e>
 800106c:	3802      	subs	r0, #2
 800106e:	4463      	add	r3, ip
 8001070:	1a5b      	subs	r3, r3, r1
 8001072:	b2a4      	uxth	r4, r4
 8001074:	fbb3 f1f8 	udiv	r1, r3, r8
 8001078:	fb08 3311 	mls	r3, r8, r1, r3
 800107c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001080:	fb01 f307 	mul.w	r3, r1, r7
 8001084:	42a3      	cmp	r3, r4
 8001086:	d908      	bls.n	800109a <__udivmoddi4+0x276>
 8001088:	eb1c 0404 	adds.w	r4, ip, r4
 800108c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8001090:	d213      	bcs.n	80010ba <__udivmoddi4+0x296>
 8001092:	42a3      	cmp	r3, r4
 8001094:	d911      	bls.n	80010ba <__udivmoddi4+0x296>
 8001096:	3902      	subs	r1, #2
 8001098:	4464      	add	r4, ip
 800109a:	1ae4      	subs	r4, r4, r3
 800109c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80010a0:	e739      	b.n	8000f16 <__udivmoddi4+0xf2>
 80010a2:	4604      	mov	r4, r0
 80010a4:	e6f0      	b.n	8000e88 <__udivmoddi4+0x64>
 80010a6:	4608      	mov	r0, r1
 80010a8:	e706      	b.n	8000eb8 <__udivmoddi4+0x94>
 80010aa:	45c8      	cmp	r8, r9
 80010ac:	d2ae      	bcs.n	800100c <__udivmoddi4+0x1e8>
 80010ae:	ebb9 0e02 	subs.w	lr, r9, r2
 80010b2:	eb63 0c07 	sbc.w	ip, r3, r7
 80010b6:	3801      	subs	r0, #1
 80010b8:	e7a8      	b.n	800100c <__udivmoddi4+0x1e8>
 80010ba:	4631      	mov	r1, r6
 80010bc:	e7ed      	b.n	800109a <__udivmoddi4+0x276>
 80010be:	4603      	mov	r3, r0
 80010c0:	e799      	b.n	8000ff6 <__udivmoddi4+0x1d2>
 80010c2:	4630      	mov	r0, r6
 80010c4:	e7d4      	b.n	8001070 <__udivmoddi4+0x24c>
 80010c6:	46d6      	mov	lr, sl
 80010c8:	e77f      	b.n	8000fca <__udivmoddi4+0x1a6>
 80010ca:	4463      	add	r3, ip
 80010cc:	3802      	subs	r0, #2
 80010ce:	e74d      	b.n	8000f6c <__udivmoddi4+0x148>
 80010d0:	4606      	mov	r6, r0
 80010d2:	4623      	mov	r3, r4
 80010d4:	4608      	mov	r0, r1
 80010d6:	e70f      	b.n	8000ef8 <__udivmoddi4+0xd4>
 80010d8:	3e02      	subs	r6, #2
 80010da:	4463      	add	r3, ip
 80010dc:	e730      	b.n	8000f40 <__udivmoddi4+0x11c>
 80010de:	bf00      	nop

080010e0 <__aeabi_idiv0>:
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop

080010e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bc80      	pop	{r7}
 80010ee:	4770      	bx	lr

080010f0 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80010f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010fc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80010fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4313      	orrs	r3, r2
 8001106:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001108:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800110c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4013      	ands	r3, r2
 8001112:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001114:	68fb      	ldr	r3, [r7, #12]
}
 8001116:	bf00      	nop
 8001118:	3714      	adds	r7, #20
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr

08001120 <_Z8PushSizeP12memory_arenaj>:
static memory_arena MemoryScratch = {};
i8 arr[MEMORY_ARENA_SIZE];
i8 arr2[MEMORY_SCRATCH_SIZE];

inline void *PushSize(memory_arena *Arena, size_t SizeToReserve)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
	//printf("Arenasize %d used %d reserve %d\r\n", Arena->Size, Arena->Used, SizeToReserve);
    assert(Arena->Used + SizeToReserve <= Arena->Size);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	441a      	add	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	429a      	cmp	r2, r3
 8001138:	d905      	bls.n	8001146 <_Z8PushSizeP12memory_arenaj+0x26>
 800113a:	4b0c      	ldr	r3, [pc, #48]	@ (800116c <_Z8PushSizeP12memory_arenaj+0x4c>)
 800113c:	4a0c      	ldr	r2, [pc, #48]	@ (8001170 <_Z8PushSizeP12memory_arenaj+0x50>)
 800113e:	2138      	movs	r1, #56	@ 0x38
 8001140:	480c      	ldr	r0, [pc, #48]	@ (8001174 <_Z8PushSizeP12memory_arenaj+0x54>)
 8001142:	f003 fd51 	bl	8004be8 <__assert_func>
    void *Result = Arena->Base + Arena->Used;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	689a      	ldr	r2, [r3, #8]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	4413      	add	r3, r2
 8001152:	60fb      	str	r3, [r7, #12]
    Arena->Used += SizeToReserve;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	441a      	add	r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	601a      	str	r2, [r3, #0]
    return (void *)Result;
 8001160:	68fb      	ldr	r3, [r7, #12]
}
 8001162:	4618      	mov	r0, r3
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	08007658 	.word	0x08007658
 8001170:	08007684 	.word	0x08007684
 8001174:	080076ac 	.word	0x080076ac

08001178 <_Z10InitMemoryv>:

void InitMemory()
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
    MemoryArena.Base = (uint32_t*) arr;
 800117c:	4b0b      	ldr	r3, [pc, #44]	@ (80011ac <_Z10InitMemoryv+0x34>)
 800117e:	4a0c      	ldr	r2, [pc, #48]	@ (80011b0 <_Z10InitMemoryv+0x38>)
 8001180:	609a      	str	r2, [r3, #8]
    MemoryArena.Size = MEMORY_ARENA_SIZE;
 8001182:	4b0a      	ldr	r3, [pc, #40]	@ (80011ac <_Z10InitMemoryv+0x34>)
 8001184:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 8001188:	605a      	str	r2, [r3, #4]
    MemoryArena.Used = 0;
 800118a:	4b08      	ldr	r3, [pc, #32]	@ (80011ac <_Z10InitMemoryv+0x34>)
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]

    MemoryScratch.Base = (uint32_t*) arr2;
 8001190:	4b08      	ldr	r3, [pc, #32]	@ (80011b4 <_Z10InitMemoryv+0x3c>)
 8001192:	4a09      	ldr	r2, [pc, #36]	@ (80011b8 <_Z10InitMemoryv+0x40>)
 8001194:	609a      	str	r2, [r3, #8]
    MemoryScratch.Size = MEMORY_SCRATCH_SIZE;
 8001196:	4b07      	ldr	r3, [pc, #28]	@ (80011b4 <_Z10InitMemoryv+0x3c>)
 8001198:	2280      	movs	r2, #128	@ 0x80
 800119a:	605a      	str	r2, [r3, #4]
    MemoryScratch.Used = 0;
 800119c:	4b05      	ldr	r3, [pc, #20]	@ (80011b4 <_Z10InitMemoryv+0x3c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
}
 80011a2:	bf00      	nop
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bc80      	pop	{r7}
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	2000023c 	.word	0x2000023c
 80011b0:	20000254 	.word	0x20000254
 80011b4:	20000248 	.word	0x20000248
 80011b8:	20006654 	.word	0x20006654

080011bc <_Z12uniform_randv>:
f32 uniform_randf(){
    float num = (float)(rand()%1001) / 1000.0 - randLowVal;
    return num;
}

int8_t uniform_rand(){
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
    int8_t num = (rand()%1001);
 80011c2:	f003 fd2f 	bl	8004c24 <rand>
 80011c6:	4603      	mov	r3, r0
 80011c8:	4a09      	ldr	r2, [pc, #36]	@ (80011f0 <_Z12uniform_randv+0x34>)
 80011ca:	fb82 1203 	smull	r1, r2, r2, r3
 80011ce:	1211      	asrs	r1, r2, #8
 80011d0:	17da      	asrs	r2, r3, #31
 80011d2:	1a8a      	subs	r2, r1, r2
 80011d4:	f240 31e9 	movw	r1, #1001	@ 0x3e9
 80011d8:	fb01 f202 	mul.w	r2, r1, r2
 80011dc:	1a9a      	subs	r2, r3, r2
 80011de:	4613      	mov	r3, r2
 80011e0:	71fb      	strb	r3, [r7, #7]
    return num;
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	4178749f 	.word	0x4178749f

080011f4 <_ZN1MC1EPhmm>:
public:
    u8 *data;
    uint32_t rows;
    uint32_t cols;

    M(u8 *data, uint32_t rows, uint32_t cols) : data(data), rows(rows), cols(cols) {}
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
 8001200:	603b      	str	r3, [r7, #0]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	68ba      	ldr	r2, [r7, #8]
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	683a      	ldr	r2, [r7, #0]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	4618      	mov	r0, r3
 8001218:	3714      	adds	r7, #20
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr

08001220 <_ZN1M5zerosEmm>:
            o.data[i] = 1;
        }
        return o;
    }

    static M zeros(uint32_t rows, uint32_t cols)
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
    {
    	u8 *data = (u8 *)PushSize(&MemoryArena, rows * cols * sizeof(u8));
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	fb02 f303 	mul.w	r3, r2, r3
 8001234:	4619      	mov	r1, r3
 8001236:	4811      	ldr	r0, [pc, #68]	@ (800127c <_ZN1M5zerosEmm+0x5c>)
 8001238:	f7ff ff72 	bl	8001120 <_Z8PushSizeP12memory_arenaj>
 800123c:	6138      	str	r0, [r7, #16]
        M o(data, rows, cols);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	68ba      	ldr	r2, [r7, #8]
 8001242:	6939      	ldr	r1, [r7, #16]
 8001244:	68f8      	ldr	r0, [r7, #12]
 8001246:	f7ff ffd5 	bl	80011f4 <_ZN1MC1EPhmm>
        for (uint32_t i = 0; i < rows * cols; ++i)
 800124a:	2300      	movs	r3, #0
 800124c:	617b      	str	r3, [r7, #20]
 800124e:	e008      	b.n	8001262 <_ZN1M5zerosEmm+0x42>
        {
            o.data[i] = 0; //0.0f;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	4413      	add	r3, r2
 8001258:	2200      	movs	r2, #0
 800125a:	701a      	strb	r2, [r3, #0]
        for (uint32_t i = 0; i < rows * cols; ++i)
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	3301      	adds	r3, #1
 8001260:	617b      	str	r3, [r7, #20]
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	fb02 f303 	mul.w	r3, r2, r3
 800126a:	697a      	ldr	r2, [r7, #20]
 800126c:	429a      	cmp	r2, r3
 800126e:	d3ef      	bcc.n	8001250 <_ZN1M5zerosEmm+0x30>
        }
        return o;
 8001270:	bf00      	nop
    }
 8001272:	68f8      	ldr	r0, [r7, #12]
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	2000023c 	.word	0x2000023c

08001280 <_ZN1M12zerosScratchEmm>:

    static M zerosScratch(uint32_t rows, uint32_t cols)
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
    {
    	//printf("Scratch for size: %lu x %lu\r\n", rows, cols);
    	u8 *data = (u8 *)MemoryScratch.Base;;
 800128c:	4b10      	ldr	r3, [pc, #64]	@ (80012d0 <_ZN1M12zerosScratchEmm+0x50>)
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	613b      	str	r3, [r7, #16]
        M o(data, rows, cols);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	68ba      	ldr	r2, [r7, #8]
 8001296:	6939      	ldr	r1, [r7, #16]
 8001298:	68f8      	ldr	r0, [r7, #12]
 800129a:	f7ff ffab 	bl	80011f4 <_ZN1MC1EPhmm>
        for (uint32_t i = 0; i < rows * cols; ++i)
 800129e:	2300      	movs	r3, #0
 80012a0:	617b      	str	r3, [r7, #20]
 80012a2:	e008      	b.n	80012b6 <_ZN1M12zerosScratchEmm+0x36>
        {
            o.data[i] = 0; //0.0f;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	4413      	add	r3, r2
 80012ac:	2200      	movs	r2, #0
 80012ae:	701a      	strb	r2, [r3, #0]
        for (uint32_t i = 0; i < rows * cols; ++i)
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	3301      	adds	r3, #1
 80012b4:	617b      	str	r3, [r7, #20]
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	fb02 f303 	mul.w	r3, r2, r3
 80012be:	697a      	ldr	r2, [r7, #20]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d3ef      	bcc.n	80012a4 <_ZN1M12zerosScratchEmm+0x24>
        }
        return o;
 80012c4:	bf00      	nop
    }
 80012c6:	68f8      	ldr	r0, [r7, #12]
 80012c8:	3718      	adds	r7, #24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000248 	.word	0x20000248

080012d4 <_ZN1M4randEmm>:


    static M rand(uint32_t rows, uint32_t cols)
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
    {
    	u8 *data = (u8 *)PushSize(&MemoryArena, rows * cols * sizeof(u8));
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	fb02 f303 	mul.w	r3, r2, r3
 80012e8:	4619      	mov	r1, r3
 80012ea:	4813      	ldr	r0, [pc, #76]	@ (8001338 <_ZN1M4randEmm+0x64>)
 80012ec:	f7ff ff18 	bl	8001120 <_Z8PushSizeP12memory_arenaj>
 80012f0:	6138      	str	r0, [r7, #16]
        M o(data, rows, cols);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	68ba      	ldr	r2, [r7, #8]
 80012f6:	6939      	ldr	r1, [r7, #16]
 80012f8:	68f8      	ldr	r0, [r7, #12]
 80012fa:	f7ff ff7b 	bl	80011f4 <_ZN1MC1EPhmm>
        for (uint32_t i = 0; i < rows * cols; ++i)
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
 8001302:	e00c      	b.n	800131e <_ZN1M4randEmm+0x4a>
        {
            o.data[i] = uniform_rand();
 8001304:	f7ff ff5a 	bl	80011bc <_Z12uniform_randv>
 8001308:	4603      	mov	r3, r0
 800130a:	4619      	mov	r1, r3
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	4413      	add	r3, r2
 8001314:	b2ca      	uxtb	r2, r1
 8001316:	701a      	strb	r2, [r3, #0]
        for (uint32_t i = 0; i < rows * cols; ++i)
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	3301      	adds	r3, #1
 800131c:	617b      	str	r3, [r7, #20]
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	fb02 f303 	mul.w	r3, r2, r3
 8001326:	697a      	ldr	r2, [r7, #20]
 8001328:	429a      	cmp	r2, r3
 800132a:	d3eb      	bcc.n	8001304 <_ZN1M4randEmm+0x30>
        }
        return o;
 800132c:	bf00      	nop
    }
 800132e:	68f8      	ldr	r0, [r7, #12]
 8001330:	3718      	adds	r7, #24
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	2000023c 	.word	0x2000023c

0800133c <_ZN1M5printEv>:
    void shape()
    {
        printf("Shape: (%lu, %lu)\r\n", rows, cols);
    }

    void print()
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
    {
        //	this->shape();
        for (uint32_t i = 0; i < rows; ++i)
 8001344:	2300      	movs	r3, #0
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	e01f      	b.n	800138a <_ZN1M5printEv+0x4e>
        {
            for (uint32_t j = 0; j < cols; ++j)
 800134a:	2300      	movs	r3, #0
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	e011      	b.n	8001374 <_ZN1M5printEv+0x38>
            {
                printf("%u ", data[i * cols + j]);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	68f9      	ldr	r1, [r7, #12]
 800135a:	fb03 f101 	mul.w	r1, r3, r1
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	440b      	add	r3, r1
 8001362:	4413      	add	r3, r2
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	4619      	mov	r1, r3
 8001368:	480d      	ldr	r0, [pc, #52]	@ (80013a0 <_ZN1M5printEv+0x64>)
 800136a:	f004 f9c5 	bl	80056f8 <iprintf>
            for (uint32_t j = 0; j < cols; ++j)
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	3301      	adds	r3, #1
 8001372:	60bb      	str	r3, [r7, #8]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	68ba      	ldr	r2, [r7, #8]
 800137a:	429a      	cmp	r2, r3
 800137c:	d3e8      	bcc.n	8001350 <_ZN1M5printEv+0x14>
            }
            printf("\r\n");
 800137e:	4809      	ldr	r0, [pc, #36]	@ (80013a4 <_ZN1M5printEv+0x68>)
 8001380:	f004 fa22 	bl	80057c8 <puts>
        for (uint32_t i = 0; i < rows; ++i)
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	3301      	adds	r3, #1
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	429a      	cmp	r2, r3
 8001392:	d3da      	bcc.n	800134a <_ZN1M5printEv+0xe>
        }
    }
 8001394:	bf00      	nop
 8001396:	bf00      	nop
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	080076c0 	.word	0x080076c0
 80013a4:	080076c4 	.word	0x080076c4

080013a8 <_Z4Tanh1M>:
    }
    return Out;
}

M Tanh(M X)
{
 80013a8:	b590      	push	{r4, r7, lr}
 80013aa:	b087      	sub	sp, #28
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	4638      	mov	r0, r7
 80013b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    M Out = M::zerosScratch(X.rows, X.cols);
 80013b6:	6879      	ldr	r1, [r7, #4]
 80013b8:	68ba      	ldr	r2, [r7, #8]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff ff5f 	bl	8001280 <_ZN1M12zerosScratchEmm>
    for (uint32_t i = 0; i < X.rows * X.cols; ++i)
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]
 80013c6:	e016      	b.n	80013f6 <_Z4Tanh1M+0x4e>
    {
        Out.data[i] = tanh(X.data[i]);
 80013c8:	683a      	ldr	r2, [r7, #0]
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	4413      	add	r3, r2
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f000 fb10 	bl	80019f6 <_ZSt4tanhIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	68f9      	ldr	r1, [r7, #12]
 80013dc:	6808      	ldr	r0, [r1, #0]
 80013de:	6979      	ldr	r1, [r7, #20]
 80013e0:	1844      	adds	r4, r0, r1
 80013e2:	4610      	mov	r0, r2
 80013e4:	4619      	mov	r1, r3
 80013e6:	f7ff fbb7 	bl	8000b58 <__aeabi_d2uiz>
 80013ea:	4603      	mov	r3, r0
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	7023      	strb	r3, [r4, #0]
    for (uint32_t i = 0; i < X.rows * X.cols; ++i)
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	3301      	adds	r3, #1
 80013f4:	617b      	str	r3, [r7, #20]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	68ba      	ldr	r2, [r7, #8]
 80013fa:	fb02 f303 	mul.w	r3, r2, r3
 80013fe:	697a      	ldr	r2, [r7, #20]
 8001400:	429a      	cmp	r2, r3
 8001402:	d3e1      	bcc.n	80013c8 <_Z4Tanh1M+0x20>
    }
    return Out;
 8001404:	bf00      	nop
}
 8001406:	68f8      	ldr	r0, [r7, #12]
 8001408:	371c      	adds	r7, #28
 800140a:	46bd      	mov	sp, r7
 800140c:	bd90      	pop	{r4, r7, pc}
	...

08001410 <_ZN5Layer6createEmm>:

    M vdw;
    M vdb;

    // Factory function to create a new layer object
    static Layer *create(uint32_t input_size, uint32_t output_size)
 8001410:	b590      	push	{r4, r7, lr}
 8001412:	b089      	sub	sp, #36	@ 0x24
 8001414:	af00      	add	r7, sp, #0
 8001416:	6178      	str	r0, [r7, #20]
 8001418:	6139      	str	r1, [r7, #16]
    {
        // Allocate memory for the layer on the memory arena
        Layer *l = (Layer *)PushSize(&MemoryArena, sizeof(Layer));
 800141a:	2148      	movs	r1, #72	@ 0x48
 800141c:	482a      	ldr	r0, [pc, #168]	@ (80014c8 <_ZN5Layer6createEmm+0xb8>)
 800141e:	f7ff fe7f 	bl	8001120 <_Z8PushSizeP12memory_arenaj>
 8001422:	61f8      	str	r0, [r7, #28]

        // Initialize the weight and bias matrices with random values
        l->w = M::rand(input_size, output_size);
 8001424:	69fc      	ldr	r4, [r7, #28]
 8001426:	463b      	mov	r3, r7
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	6979      	ldr	r1, [r7, #20]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff ff51 	bl	80012d4 <_ZN1M4randEmm>
 8001432:	463b      	mov	r3, r7
 8001434:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001438:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        l->b = M::zeros(1, output_size);
 800143c:	69fc      	ldr	r4, [r7, #28]
 800143e:	463b      	mov	r3, r7
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	2101      	movs	r1, #1
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff feeb 	bl	8001220 <_ZN1M5zerosEmm>
 800144a:	f104 030c 	add.w	r3, r4, #12
 800144e:	463a      	mov	r2, r7
 8001450:	ca07      	ldmia	r2, {r0, r1, r2}
 8001452:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        // Initialize the gradient matrices to zero
        l->dw = M::zeros(input_size, output_size);
 8001456:	69fc      	ldr	r4, [r7, #28]
 8001458:	463b      	mov	r3, r7
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	6979      	ldr	r1, [r7, #20]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fede 	bl	8001220 <_ZN1M5zerosEmm>
 8001464:	f104 0318 	add.w	r3, r4, #24
 8001468:	463a      	mov	r2, r7
 800146a:	ca07      	ldmia	r2, {r0, r1, r2}
 800146c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        l->db = M::zeros(1, output_size);
 8001470:	69fc      	ldr	r4, [r7, #28]
 8001472:	463b      	mov	r3, r7
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	2101      	movs	r1, #1
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff fed1 	bl	8001220 <_ZN1M5zerosEmm>
 800147e:	f104 0324 	add.w	r3, r4, #36	@ 0x24
 8001482:	463a      	mov	r2, r7
 8001484:	ca07      	ldmia	r2, {r0, r1, r2}
 8001486:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        // // Initialize the momentum matrices to zero
        l->vdw = M::zeros(input_size, output_size);
 800148a:	69fc      	ldr	r4, [r7, #28]
 800148c:	463b      	mov	r3, r7
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	6979      	ldr	r1, [r7, #20]
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff fec4 	bl	8001220 <_ZN1M5zerosEmm>
 8001498:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 800149c:	463a      	mov	r2, r7
 800149e:	ca07      	ldmia	r2, {r0, r1, r2}
 80014a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        l->vdb = M::zeros(1, output_size);
 80014a4:	69fc      	ldr	r4, [r7, #28]
 80014a6:	463b      	mov	r3, r7
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	2101      	movs	r1, #1
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff feb7 	bl	8001220 <_ZN1M5zerosEmm>
 80014b2:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 80014b6:	463a      	mov	r2, r7
 80014b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80014ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        return l;
 80014be:	69fb      	ldr	r3, [r7, #28]
    }
 80014c0:	4618      	mov	r0, r3
 80014c2:	3724      	adds	r7, #36	@ 0x24
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd90      	pop	{r4, r7, pc}
 80014c8:	2000023c 	.word	0x2000023c

080014cc <_ZN5Layer7forwardE1M>:

    // Forward propagation function
    M forward(M x)
 80014cc:	b082      	sub	sp, #8
 80014ce:	b590      	push	{r4, r7, lr}
 80014d0:	b087      	sub	sp, #28
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
 80014d6:	6039      	str	r1, [r7, #0]
 80014d8:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80014dc:	e881 000c 	stmia.w	r1, {r2, r3}
    {
        // Check that the input matrix has the correct number of columns, this saves us from stupid bugs.
    	//printf("X.cols: %lu, w.rows: %lu\r\n", x.cols, w.rows);
        assert(x.cols == w.rows);
 80014e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d006      	beq.n	80014f8 <_ZN5Layer7forwardE1M+0x2c>
 80014ea:	4b31      	ldr	r3, [pc, #196]	@ (80015b0 <_ZN5Layer7forwardE1M+0xe4>)
 80014ec:	4a31      	ldr	r2, [pc, #196]	@ (80015b4 <_ZN5Layer7forwardE1M+0xe8>)
 80014ee:	f240 21e9 	movw	r1, #745	@ 0x2e9
 80014f2:	4831      	ldr	r0, [pc, #196]	@ (80015b8 <_ZN5Layer7forwardE1M+0xec>)
 80014f4:	f003 fb78 	bl	8004be8 <__assert_func>
        M Out = M::zerosScratch(x.rows, w.cols);
 80014f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	689a      	ldr	r2, [r3, #8]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff febd 	bl	8001280 <_ZN1M12zerosScratchEmm>
        for (uint32_t i = 0; i < w.cols; ++i)
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
 800150a:	e044      	b.n	8001596 <_ZN5Layer7forwardE1M+0xca>
        {
            f32 accum = 0;
 800150c:	f04f 0300 	mov.w	r3, #0
 8001510:	613b      	str	r3, [r7, #16]
            for (uint32_t j = 0; j < x.cols; ++j)
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	e01e      	b.n	8001556 <_ZN5Layer7forwardE1M+0x8a>
            {
                accum += x.data[j] * w.data[j * w.cols + i];
 8001518:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	4413      	add	r3, r2
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	68f9      	ldr	r1, [r7, #12]
 800152c:	fb03 f101 	mul.w	r1, r3, r1
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	440b      	add	r3, r1
 8001534:	4413      	add	r3, r2
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	fb00 f303 	mul.w	r3, r0, r3
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff fbe5 	bl	8000d0c <__aeabi_i2f>
 8001542:	4603      	mov	r3, r0
 8001544:	4619      	mov	r1, r3
 8001546:	6938      	ldr	r0, [r7, #16]
 8001548:	f7ff fb2c 	bl	8000ba4 <__addsf3>
 800154c:	4603      	mov	r3, r0
 800154e:	613b      	str	r3, [r7, #16]
            for (uint32_t j = 0; j < x.cols; ++j)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	3301      	adds	r3, #1
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001558:	68fa      	ldr	r2, [r7, #12]
 800155a:	429a      	cmp	r2, r3
 800155c:	d3dc      	bcc.n	8001518 <_ZN5Layer7forwardE1M+0x4c>
            }
            Out.data[i] = accum + b.data[i];
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	68da      	ldr	r2, [r3, #12]
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	4413      	add	r3, r2
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff fbcf 	bl	8000d0c <__aeabi_i2f>
 800156e:	4603      	mov	r3, r0
 8001570:	6939      	ldr	r1, [r7, #16]
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff fb16 	bl	8000ba4 <__addsf3>
 8001578:	4603      	mov	r3, r0
 800157a:	4619      	mov	r1, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	18d4      	adds	r4, r2, r3
 8001584:	4608      	mov	r0, r1
 8001586:	f7ff fc15 	bl	8000db4 <__aeabi_f2uiz>
 800158a:	4603      	mov	r3, r0
 800158c:	b2db      	uxtb	r3, r3
 800158e:	7023      	strb	r3, [r4, #0]
        for (uint32_t i = 0; i < w.cols; ++i)
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	3301      	adds	r3, #1
 8001594:	617b      	str	r3, [r7, #20]
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	697a      	ldr	r2, [r7, #20]
 800159c:	429a      	cmp	r2, r3
 800159e:	d3b5      	bcc.n	800150c <_ZN5Layer7forwardE1M+0x40>
        }
        return Out;
 80015a0:	bf00      	nop
    }
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	371c      	adds	r7, #28
 80015a6:	46bd      	mov	sp, r7
 80015a8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80015ac:	b002      	add	sp, #8
 80015ae:	4770      	bx	lr
 80015b0:	080076c8 	.word	0x080076c8
 80015b4:	080076dc 	.word	0x080076dc
 80015b8:	080076ac 	.word	0x080076ac

080015bc <_ZN5Layer5printEv>:
            db.data[i] = grads.data[i];
        }

    }

    void print()
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
    {
    	printf("Weights matrix: %lu x %lu\r\n", w.rows, w.cols);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6859      	ldr	r1, [r3, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	461a      	mov	r2, r3
 80015ce:	480c      	ldr	r0, [pc, #48]	@ (8001600 <_ZN5Layer5printEv+0x44>)
 80015d0:	f004 f892 	bl	80056f8 <iprintf>
    	w.print();
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff feb0 	bl	800133c <_ZN1M5printEv>
    	printf("Bias matrix: %lu x%lu\r\n", b.rows, b.cols);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6919      	ldr	r1, [r3, #16]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	695b      	ldr	r3, [r3, #20]
 80015e4:	461a      	mov	r2, r3
 80015e6:	4807      	ldr	r0, [pc, #28]	@ (8001604 <_ZN5Layer5printEv+0x48>)
 80015e8:	f004 f886 	bl	80056f8 <iprintf>
    	b.print();
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	330c      	adds	r3, #12
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff fea3 	bl	800133c <_ZN1M5printEv>
    }
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	080076f0 	.word	0x080076f0
 8001604:	0800770c 	.word	0x0800770c

08001608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08e      	sub	sp, #56	@ 0x38
 800160c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800160e:	f000 fd35 	bl	800207c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001612:	f000 f8c7 	bl	80017a4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001616:	f000 f94f 	bl	80018b8 <_ZL12MX_GPIO_Initv>
  MX_TIM16_Init();
 800161a:	f000 f921 	bl	8001860 <_ZL13MX_TIM16_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_BLUE);
 800161e:	2000      	movs	r0, #0
 8001620:	f000 fb8e 	bl	8001d40 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8001624:	2001      	movs	r0, #1
 8001626:	f000 fb8b 	bl	8001d40 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800162a:	2002      	movs	r0, #2
 800162c:	f000 fb88 	bl	8001d40 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8001630:	2101      	movs	r1, #1
 8001632:	2000      	movs	r0, #0
 8001634:	f000 fbbe 	bl	8001db4 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 8001638:	2101      	movs	r1, #1
 800163a:	2001      	movs	r0, #1
 800163c:	f000 fbba 	bl	8001db4 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 8001640:	2101      	movs	r1, #1
 8001642:	2002      	movs	r0, #2
 8001644:	f000 fbb6 	bl	8001db4 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8001648:	4b4d      	ldr	r3, [pc, #308]	@ (8001780 <main+0x178>)
 800164a:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800164e:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8001650:	4b4b      	ldr	r3, [pc, #300]	@ (8001780 <main+0x178>)
 8001652:	2200      	movs	r2, #0
 8001654:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8001656:	4b4a      	ldr	r3, [pc, #296]	@ (8001780 <main+0x178>)
 8001658:	2200      	movs	r2, #0
 800165a:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800165c:	4b48      	ldr	r3, [pc, #288]	@ (8001780 <main+0x178>)
 800165e:	2200      	movs	r2, #0
 8001660:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8001662:	4b47      	ldr	r3, [pc, #284]	@ (8001780 <main+0x178>)
 8001664:	2200      	movs	r2, #0
 8001666:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8001668:	4945      	ldr	r1, [pc, #276]	@ (8001780 <main+0x178>)
 800166a:	2000      	movs	r0, #0
 800166c:	f000 fc44 	bl	8001ef8 <BSP_COM_Init>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	bf14      	ite	ne
 8001676:	2301      	movne	r3, #1
 8001678:	2300      	moveq	r3, #0
 800167a:	b2db      	uxtb	r3, r3
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <main+0x7c>
  {
    Error_Handler();
 8001680:	f000 f9b3 	bl	80019ea <Error_Handler>
  }

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 8001684:	2001      	movs	r0, #1
 8001686:	f001 f88d 	bl	80027a4 <HAL_PWREx_ReleaseCore>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  InitMemory();
 800168a:	f7ff fd75 	bl	8001178 <_Z10InitMemoryv>
  l1 = Layer::create(1, SIZE_HIDDEN_LAYER);
 800168e:	2140      	movs	r1, #64	@ 0x40
 8001690:	2001      	movs	r0, #1
 8001692:	f7ff febd 	bl	8001410 <_ZN5Layer6createEmm>
 8001696:	4603      	mov	r3, r0
 8001698:	4a3a      	ldr	r2, [pc, #232]	@ (8001784 <main+0x17c>)
 800169a:	6013      	str	r3, [r2, #0]
  l1->print();
 800169c:	4b39      	ldr	r3, [pc, #228]	@ (8001784 <main+0x17c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff ff8b 	bl	80015bc <_ZN5Layer5printEv>
  l2 = Layer::create(SIZE_HIDDEN_LAYER,SIZE_HIDDEN_LAYER);
 80016a6:	2140      	movs	r1, #64	@ 0x40
 80016a8:	2040      	movs	r0, #64	@ 0x40
 80016aa:	f7ff feb1 	bl	8001410 <_ZN5Layer6createEmm>
 80016ae:	4603      	mov	r3, r0
 80016b0:	4a35      	ldr	r2, [pc, #212]	@ (8001788 <main+0x180>)
 80016b2:	6013      	str	r3, [r2, #0]
  l2->print();
 80016b4:	4b34      	ldr	r3, [pc, #208]	@ (8001788 <main+0x180>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff ff7f 	bl	80015bc <_ZN5Layer5printEv>
  l3 = Layer::create(SIZE_HIDDEN_LAYER,1);
 80016be:	2101      	movs	r1, #1
 80016c0:	2040      	movs	r0, #64	@ 0x40
 80016c2:	f7ff fea5 	bl	8001410 <_ZN5Layer6createEmm>
 80016c6:	4603      	mov	r3, r0
 80016c8:	4a30      	ldr	r2, [pc, #192]	@ (800178c <main+0x184>)
 80016ca:	6013      	str	r3, [r2, #0]
  l3->print();
 80016cc:	4b2f      	ldr	r3, [pc, #188]	@ (800178c <main+0x184>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ff73 	bl	80015bc <_ZN5Layer5printEv>

  uint32_t startts, endts;
  uint8_t data[] = {1};
 80016d6:	2301      	movs	r3, #1
 80016d8:	773b      	strb	r3, [r7, #28]
  M input = M(data, 1, 1);
 80016da:	f107 011c 	add.w	r1, r7, #28
 80016de:	f107 0010 	add.w	r0, r7, #16
 80016e2:	2301      	movs	r3, #1
 80016e4:	2201      	movs	r2, #1
 80016e6:	f7ff fd85 	bl	80011f4 <_ZN1MC1EPhmm>

  printf("Starting\r\n");
 80016ea:	4829      	ldr	r0, [pc, #164]	@ (8001790 <main+0x188>)
 80016ec:	f004 f86c 	bl	80057c8 <puts>
  startts = HAL_GetTick();
 80016f0:	f000 fd30 	bl	8002154 <HAL_GetTick>
 80016f4:	6278      	str	r0, [r7, #36]	@ 0x24

  int nb_iter = 1000;
 80016f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016fa:	623b      	str	r3, [r7, #32]
  for(int i=0;i<nb_iter;i++) {
 80016fc:	2300      	movs	r3, #0
 80016fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001700:	e023      	b.n	800174a <main+0x142>
	  HAL_TIM_Base_Start(&htim16);
 8001702:	4824      	ldr	r0, [pc, #144]	@ (8001794 <main+0x18c>)
 8001704:	f002 f9c4 	bl	8003a90 <HAL_TIM_Base_Start>
	  uint16_t timer_val = __HAL_TIM_GET_COUNTER(&htim16);
 8001708:	4b22      	ldr	r3, [pc, #136]	@ (8001794 <main+0x18c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800170e:	83fb      	strh	r3, [r7, #30]
	  auto r = predict(input);
 8001710:	1d38      	adds	r0, r7, #4
 8001712:	f107 0310 	add.w	r3, r7, #16
 8001716:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001718:	f000 f8d6 	bl	80018c8 <_Z7predict1M>
	  timer_val = __HAL_TIM_GET_COUNTER(&htim16)-timer_val;
 800171c:	4b1d      	ldr	r3, [pc, #116]	@ (8001794 <main+0x18c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001722:	b29a      	uxth	r2, r3
 8001724:	8bfb      	ldrh	r3, [r7, #30]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	83fb      	strh	r3, [r7, #30]
	  endts = HAL_GetTick();
 800172a:	f000 fd13 	bl	8002154 <HAL_GetTick>
 800172e:	62f8      	str	r0, [r7, #44]	@ 0x2c
	  r.print();
 8001730:	1d3b      	adds	r3, r7, #4
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff fe02 	bl	800133c <_ZN1M5printEv>
	  printf("Prediction %d took %u us\r\n", i, timer_val);
 8001738:	8bfb      	ldrh	r3, [r7, #30]
 800173a:	461a      	mov	r2, r3
 800173c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800173e:	4816      	ldr	r0, [pc, #88]	@ (8001798 <main+0x190>)
 8001740:	f003 ffda 	bl	80056f8 <iprintf>
  for(int i=0;i<nb_iter;i++) {
 8001744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001746:	3301      	adds	r3, #1
 8001748:	62bb      	str	r3, [r7, #40]	@ 0x28
 800174a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800174c:	6a3b      	ldr	r3, [r7, #32]
 800174e:	429a      	cmp	r2, r3
 8001750:	dbd7      	blt.n	8001702 <main+0xfa>
  }
  printf("\r\nFinished %d iter in %lu - %lu = %lu s\r\n", nb_iter, endts, startts, (endts-startts)/1000);
 8001752:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	4a10      	ldr	r2, [pc, #64]	@ (800179c <main+0x194>)
 800175a:	fba2 2303 	umull	r2, r3, r2, r3
 800175e:	099b      	lsrs	r3, r3, #6
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001764:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001766:	6a39      	ldr	r1, [r7, #32]
 8001768:	480d      	ldr	r0, [pc, #52]	@ (80017a0 <main+0x198>)
 800176a:	f003 ffc5 	bl	80056f8 <iprintf>

  /* Enter LP RUN Mode */
  SystemClock_Decrease();
 800176e:	f000 f8fb 	bl	8001968 <_Z20SystemClock_Decreasev>
  HAL_PWREx_HoldCore(PWR_CORE_CPU2);
 8001772:	2001      	movs	r0, #1
 8001774:	f001 f80c 	bl	8002790 <HAL_PWREx_HoldCore>
  HAL_PWREx_EnableLowPowerRunMode();
 8001778:	f001 f81e 	bl	80027b8 <HAL_PWREx_EnableLowPowerRunMode>
  while (1)
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <main+0x174>
 8001780:	200066d4 	.word	0x200066d4
 8001784:	20006730 	.word	0x20006730
 8001788:	20006734 	.word	0x20006734
 800178c:	20006738 	.word	0x20006738
 8001790:	08007724 	.word	0x08007724
 8001794:	200066e4 	.word	0x200066e4
 8001798:	08007730 	.word	0x08007730
 800179c:	10624dd3 	.word	0x10624dd3
 80017a0:	0800774c 	.word	0x0800774c

080017a4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b09a      	sub	sp, #104	@ 0x68
 80017a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017aa:	f107 0320 	add.w	r3, r7, #32
 80017ae:	2248      	movs	r2, #72	@ 0x48
 80017b0:	2100      	movs	r1, #0
 80017b2:	4618      	mov	r0, r3
 80017b4:	f004 f8e8 	bl	8005988 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017b8:	1d3b      	adds	r3, r7, #4
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	605a      	str	r2, [r3, #4]
 80017c0:	609a      	str	r2, [r3, #8]
 80017c2:	60da      	str	r2, [r3, #12]
 80017c4:	611a      	str	r2, [r3, #16]
 80017c6:	615a      	str	r2, [r3, #20]
 80017c8:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017ca:	4b24      	ldr	r3, [pc, #144]	@ (800185c <_Z18SystemClock_Configv+0xb8>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80017d2:	4a22      	ldr	r2, [pc, #136]	@ (800185c <_Z18SystemClock_Configv+0xb8>)
 80017d4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017d8:	6013      	str	r3, [r2, #0]
 80017da:	4b20      	ldr	r3, [pc, #128]	@ (800185c <_Z18SystemClock_Configv+0xb8>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80017e2:	603b      	str	r3, [r7, #0]
 80017e4:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80017e6:	2320      	movs	r3, #32
 80017e8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80017ea:	2301      	movs	r3, #1
 80017ec:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80017ee:	2300      	movs	r3, #0
 80017f0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80017f2:	23b0      	movs	r3, #176	@ 0xb0
 80017f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017f6:	2300      	movs	r3, #0
 80017f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017fa:	f107 0320 	add.w	r3, r7, #32
 80017fe:	4618      	mov	r0, r3
 8001800:	f001 faa0 	bl	8002d44 <HAL_RCC_OscConfig>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	bf14      	ite	ne
 800180a:	2301      	movne	r3, #1
 800180c:	2300      	moveq	r3, #0
 800180e:	b2db      	uxtb	r3, r3
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <_Z18SystemClock_Configv+0x74>
  {
    Error_Handler();
 8001814:	f000 f8e9 	bl	80019ea <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 8001818:	236f      	movs	r3, #111	@ 0x6f
 800181a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800181c:	2300      	movs	r3, #0
 800181e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001820:	2300      	movs	r3, #0
 8001822:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001824:	2300      	movs	r3, #0
 8001826:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800182c:	2300      	movs	r3, #0
 800182e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001830:	2300      	movs	r3, #0
 8001832:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001834:	1d3b      	adds	r3, r7, #4
 8001836:	2102      	movs	r1, #2
 8001838:	4618      	mov	r0, r3
 800183a:	f001 fe05 	bl	8003448 <HAL_RCC_ClockConfig>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	bf14      	ite	ne
 8001844:	2301      	movne	r3, #1
 8001846:	2300      	moveq	r3, #0
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <_Z18SystemClock_Configv+0xae>
  {
    Error_Handler();
 800184e:	f000 f8cc 	bl	80019ea <Error_Handler>
  }
}
 8001852:	bf00      	nop
 8001854:	3768      	adds	r7, #104	@ 0x68
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	58000400 	.word	0x58000400

08001860 <_ZL13MX_TIM16_Initv>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001864:	4b12      	ldr	r3, [pc, #72]	@ (80018b0 <_ZL13MX_TIM16_Initv+0x50>)
 8001866:	4a13      	ldr	r2, [pc, #76]	@ (80018b4 <_ZL13MX_TIM16_Initv+0x54>)
 8001868:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 48-1;
 800186a:	4b11      	ldr	r3, [pc, #68]	@ (80018b0 <_ZL13MX_TIM16_Initv+0x50>)
 800186c:	222f      	movs	r2, #47	@ 0x2f
 800186e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001870:	4b0f      	ldr	r3, [pc, #60]	@ (80018b0 <_ZL13MX_TIM16_Initv+0x50>)
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001876:	4b0e      	ldr	r3, [pc, #56]	@ (80018b0 <_ZL13MX_TIM16_Initv+0x50>)
 8001878:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800187c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800187e:	4b0c      	ldr	r3, [pc, #48]	@ (80018b0 <_ZL13MX_TIM16_Initv+0x50>)
 8001880:	2200      	movs	r2, #0
 8001882:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001884:	4b0a      	ldr	r3, [pc, #40]	@ (80018b0 <_ZL13MX_TIM16_Initv+0x50>)
 8001886:	2200      	movs	r2, #0
 8001888:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800188a:	4b09      	ldr	r3, [pc, #36]	@ (80018b0 <_ZL13MX_TIM16_Initv+0x50>)
 800188c:	2200      	movs	r2, #0
 800188e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001890:	4807      	ldr	r0, [pc, #28]	@ (80018b0 <_ZL13MX_TIM16_Initv+0x50>)
 8001892:	f002 f8a5 	bl	80039e0 <HAL_TIM_Base_Init>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	bf14      	ite	ne
 800189c:	2301      	movne	r3, #1
 800189e:	2300      	moveq	r3, #0
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <_ZL13MX_TIM16_Initv+0x4a>
  {
    Error_Handler();
 80018a6:	f000 f8a0 	bl	80019ea <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	200066e4 	.word	0x200066e4
 80018b4:	40014400 	.word	0x40014400

080018b8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018bc:	2004      	movs	r0, #4
 80018be:	f7ff fc17 	bl	80010f0 <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
	...

080018c8 <_Z7predict1M>:

/* USER CODE BEGIN 4 */
M predict(M input){
 80018c8:	b590      	push	{r4, r7, lr}
 80018ca:	b095      	sub	sp, #84	@ 0x54
 80018cc:	af02      	add	r7, sp, #8
 80018ce:	61f8      	str	r0, [r7, #28]
 80018d0:	f107 0010 	add.w	r0, r7, #16
 80018d4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    M a = Tanh(l1->forward(input));
 80018d8:	4b20      	ldr	r3, [pc, #128]	@ (800195c <_Z7predict1M+0x94>)
 80018da:	6819      	ldr	r1, [r3, #0]
 80018dc:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	9300      	str	r3, [sp, #0]
 80018e4:	f107 0310 	add.w	r3, r7, #16
 80018e8:	cb0c      	ldmia	r3, {r2, r3}
 80018ea:	f7ff fdef 	bl	80014cc <_ZN5Layer7forwardE1M>
 80018ee:	69f8      	ldr	r0, [r7, #28]
 80018f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018f6:	f7ff fd57 	bl	80013a8 <_Z4Tanh1M>
    a = Tanh(l2->forward(a));
 80018fa:	4b19      	ldr	r3, [pc, #100]	@ (8001960 <_Z7predict1M+0x98>)
 80018fc:	6819      	ldr	r1, [r3, #0]
 80018fe:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	689a      	ldr	r2, [r3, #8]
 8001906:	9200      	str	r2, [sp, #0]
 8001908:	cb0c      	ldmia	r3, {r2, r3}
 800190a:	f7ff fddf 	bl	80014cc <_ZN5Layer7forwardE1M>
 800190e:	69fc      	ldr	r4, [r7, #28]
 8001910:	4638      	mov	r0, r7
 8001912:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001916:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001918:	f7ff fd46 	bl	80013a8 <_Z4Tanh1M>
 800191c:	463b      	mov	r3, r7
 800191e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001922:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    a = Tanh(l3->forward(a));
 8001926:	4b0f      	ldr	r3, [pc, #60]	@ (8001964 <_Z7predict1M+0x9c>)
 8001928:	6819      	ldr	r1, [r3, #0]
 800192a:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	689a      	ldr	r2, [r3, #8]
 8001932:	9200      	str	r2, [sp, #0]
 8001934:	cb0c      	ldmia	r3, {r2, r3}
 8001936:	f7ff fdc9 	bl	80014cc <_ZN5Layer7forwardE1M>
 800193a:	69fc      	ldr	r4, [r7, #28]
 800193c:	4638      	mov	r0, r7
 800193e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001942:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001944:	f7ff fd30 	bl	80013a8 <_Z4Tanh1M>
 8001948:	463b      	mov	r3, r7
 800194a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800194e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    return a;
 8001952:	bf00      	nop
}
 8001954:	69f8      	ldr	r0, [r7, #28]
 8001956:	374c      	adds	r7, #76	@ 0x4c
 8001958:	46bd      	mov	sp, r7
 800195a:	bd90      	pop	{r4, r7, pc}
 800195c:	20006730 	.word	0x20006730
 8001960:	20006734 	.word	0x20006734
 8001964:	20006738 	.word	0x20006738

08001968 <_Z20SystemClock_Decreasev>:
  *         to go down to 2MHz
  * @param  None
  * @retval None
  */
void SystemClock_Decrease(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b09a      	sub	sp, #104	@ 0x68
 800196c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800196e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	605a      	str	r2, [r3, #4]
 8001978:	609a      	str	r2, [r3, #8]
 800197a:	60da      	str	r2, [r3, #12]
 800197c:	611a      	str	r2, [r3, #16]
 800197e:	615a      	str	r2, [r3, #20]
 8001980:	619a      	str	r2, [r3, #24]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001982:	1d3b      	adds	r3, r7, #4
 8001984:	2248      	movs	r2, #72	@ 0x48
 8001986:	2100      	movs	r1, #0
 8001988:	4618      	mov	r0, r3
 800198a:	f003 fffd 	bl	8005988 <memset>

  /* Select MSI as system clock source */
  /* Note: Keep AHB and APB prescaler settings from previous structure initialization */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK;
 800198e:	2301      	movs	r3, #1
 8001990:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001992:	2300      	movs	r3, #0
 8001994:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001996:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800199a:	2100      	movs	r1, #0
 800199c:	4618      	mov	r0, r3
 800199e:	f001 fd53 	bl	8003448 <HAL_RCC_ClockConfig>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	bf14      	ite	ne
 80019a8:	2301      	movne	r3, #1
 80019aa:	2300      	moveq	r3, #0
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <_Z20SystemClock_Decreasev+0x4e>
  {
    /* Initialization Error */
    while (1);
 80019b2:	bf00      	nop
 80019b4:	e7fd      	b.n	80019b2 <_Z20SystemClock_Decreasev+0x4a>
  }

  /* Disable PLL to reduce power consumption since MSI is used from that point */
  /* Change MSI frequency */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80019b6:	2320      	movs	r3, #32
 80019b8:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80019ba:	2301      	movs	r3, #1
 80019bc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80019be:	2350      	movs	r3, #80	@ 0x50
 80019c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_OFF;
 80019c2:	2301      	movs	r3, #1
 80019c4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019c6:	1d3b      	adds	r3, r7, #4
 80019c8:	4618      	mov	r0, r3
 80019ca:	f001 f9bb 	bl	8002d44 <HAL_RCC_OscConfig>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	bf14      	ite	ne
 80019d4:	2301      	movne	r3, #1
 80019d6:	2300      	moveq	r3, #0
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <_Z20SystemClock_Decreasev+0x7a>
  {
    /* Initialization Error */
    while (1);
 80019de:	bf00      	nop
 80019e0:	e7fd      	b.n	80019de <_Z20SystemClock_Decreasev+0x76>
  }
}
 80019e2:	bf00      	nop
 80019e4:	3768      	adds	r7, #104	@ 0x68
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019ee:	b672      	cpsid	i
}
 80019f0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019f2:	bf00      	nop
 80019f4:	e7fd      	b.n	80019f2 <Error_Handler+0x8>

080019f6 <_ZSt4tanhIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                    double>::__type
    tanh(_Tp __x)
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	4603      	mov	r3, r0
 80019fe:	71fb      	strb	r3, [r7, #7]
    { return __builtin_tanh(__x); }
 8001a00:	79fb      	ldrb	r3, [r7, #7]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7fe fd56 	bl	80004b4 <__aeabi_ui2d>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	4610      	mov	r0, r2
 8001a0e:	4619      	mov	r1, r3
 8001a10:	f002 fe10 	bl	8004634 <tanh>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4610      	mov	r0, r2
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b085      	sub	sp, #20
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001a2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a2e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a30:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001a3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a3e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4013      	ands	r3, r2
 8001a44:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a46:	68fb      	ldr	r3, [r7, #12]
}
 8001a48:	bf00      	nop
 8001a4a:	3714      	adds	r7, #20
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bc80      	pop	{r7}
 8001a50:	4770      	bx	lr

08001a52 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a56:	bf00      	nop
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bc80      	pop	{r7}
 8001a5c:	4770      	bx	lr
	...

08001a60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a05      	ldr	r2, [pc, #20]	@ (8001a84 <HAL_TIM_Base_MspInit+0x24>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d103      	bne.n	8001a7a <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001a72:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001a76:	f7ff ffd4 	bl	8001a22 <LL_APB2_GRP1_EnableClock>

  /* USER CODE END TIM16_MspInit 1 */

  }

}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40014400 	.word	0x40014400

08001a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a8c:	bf00      	nop
 8001a8e:	e7fd      	b.n	8001a8c <NMI_Handler+0x4>

08001a90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a94:	bf00      	nop
 8001a96:	e7fd      	b.n	8001a94 <HardFault_Handler+0x4>

08001a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a9c:	bf00      	nop
 8001a9e:	e7fd      	b.n	8001a9c <MemManage_Handler+0x4>

08001aa0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aa4:	bf00      	nop
 8001aa6:	e7fd      	b.n	8001aa4 <BusFault_Handler+0x4>

08001aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aac:	bf00      	nop
 8001aae:	e7fd      	b.n	8001aac <UsageFault_Handler+0x4>

08001ab0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr

08001abc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr

08001ac8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr

08001ad4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ad8:	f000 fb2a 	bl	8002130 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001adc:	bf00      	nop
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_SW1);
 8001ae4:	2000      	movs	r0, #0
 8001ae6:	f000 f9eb 	bl	8001ec0 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}

08001aee <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_SW2);
 8001af2:	2001      	movs	r0, #1
 8001af4:	f000 f9e4 	bl	8001ec0 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001af8:	bf00      	nop
 8001afa:	bd80      	pop	{r7, pc}

08001afc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_SW3);
 8001b00:	2002      	movs	r0, #2
 8001b02:	f000 f9dd 	bl	8001ec0 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	af00      	add	r7, sp, #0
  return 1;
 8001b0e:	2301      	movs	r3, #1
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr

08001b18 <_kill>:

int _kill(int pid, int sig)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b22:	f003 ff83 	bl	8005a2c <__errno>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2216      	movs	r2, #22
 8001b2a:	601a      	str	r2, [r3, #0]
  return -1;
 8001b2c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <_exit>:

void _exit (int status)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b40:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f7ff ffe7 	bl	8001b18 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b4a:	bf00      	nop
 8001b4c:	e7fd      	b.n	8001b4a <_exit+0x12>

08001b4e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b086      	sub	sp, #24
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	60f8      	str	r0, [r7, #12]
 8001b56:	60b9      	str	r1, [r7, #8]
 8001b58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	617b      	str	r3, [r7, #20]
 8001b5e:	e00a      	b.n	8001b76 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b60:	f3af 8000 	nop.w
 8001b64:	4601      	mov	r1, r0
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	1c5a      	adds	r2, r3, #1
 8001b6a:	60ba      	str	r2, [r7, #8]
 8001b6c:	b2ca      	uxtb	r2, r1
 8001b6e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	3301      	adds	r3, #1
 8001b74:	617b      	str	r3, [r7, #20]
 8001b76:	697a      	ldr	r2, [r7, #20]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	dbf0      	blt.n	8001b60 <_read+0x12>
  }

  return len;
 8001b7e:	687b      	ldr	r3, [r7, #4]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]
 8001b98:	e009      	b.n	8001bae <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	1c5a      	adds	r2, r3, #1
 8001b9e:	60ba      	str	r2, [r7, #8]
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f000 fa0a 	bl	8001fbc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	3301      	adds	r3, #1
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	697a      	ldr	r2, [r7, #20]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	dbf1      	blt.n	8001b9a <_write+0x12>
  }
  return len;
 8001bb6:	687b      	ldr	r3, [r7, #4]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <_close>:

int _close(int file)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bc8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bc80      	pop	{r7}
 8001bd4:	4770      	bx	lr

08001bd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
 8001bde:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001be6:	605a      	str	r2, [r3, #4]
  return 0;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr

08001bf4 <_isatty>:

int _isatty(int file)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bfc:	2301      	movs	r3, #1
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr

08001c08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3714      	adds	r7, #20
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr

08001c20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c28:	4a14      	ldr	r2, [pc, #80]	@ (8001c7c <_sbrk+0x5c>)
 8001c2a:	4b15      	ldr	r3, [pc, #84]	@ (8001c80 <_sbrk+0x60>)
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c34:	4b13      	ldr	r3, [pc, #76]	@ (8001c84 <_sbrk+0x64>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d102      	bne.n	8001c42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c3c:	4b11      	ldr	r3, [pc, #68]	@ (8001c84 <_sbrk+0x64>)
 8001c3e:	4a12      	ldr	r2, [pc, #72]	@ (8001c88 <_sbrk+0x68>)
 8001c40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c42:	4b10      	ldr	r3, [pc, #64]	@ (8001c84 <_sbrk+0x64>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4413      	add	r3, r2
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d207      	bcs.n	8001c60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c50:	f003 feec 	bl	8005a2c <__errno>
 8001c54:	4603      	mov	r3, r0
 8001c56:	220c      	movs	r2, #12
 8001c58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c5e:	e009      	b.n	8001c74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c60:	4b08      	ldr	r3, [pc, #32]	@ (8001c84 <_sbrk+0x64>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c66:	4b07      	ldr	r3, [pc, #28]	@ (8001c84 <_sbrk+0x64>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	4a05      	ldr	r2, [pc, #20]	@ (8001c84 <_sbrk+0x64>)
 8001c70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c72:	68fb      	ldr	r3, [r7, #12]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3718      	adds	r7, #24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	20008000 	.word	0x20008000
 8001c80:	00000400 	.word	0x00000400
 8001c84:	2000673c 	.word	0x2000673c
 8001c88:	20006940 	.word	0x20006940

08001c8c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c8c:	480d      	ldr	r0, [pc, #52]	@ (8001cc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c8e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c90:	f7ff fa28 	bl	80010e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c94:	480c      	ldr	r0, [pc, #48]	@ (8001cc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c96:	490d      	ldr	r1, [pc, #52]	@ (8001ccc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c98:	4a0d      	ldr	r2, [pc, #52]	@ (8001cd0 <LoopForever+0xe>)
  movs r3, #0
 8001c9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c9c:	e002      	b.n	8001ca4 <LoopCopyDataInit>

08001c9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ca0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ca2:	3304      	adds	r3, #4

08001ca4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ca4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ca6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ca8:	d3f9      	bcc.n	8001c9e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001caa:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cac:	4c0a      	ldr	r4, [pc, #40]	@ (8001cd8 <LoopForever+0x16>)
  movs r3, #0
 8001cae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cb0:	e001      	b.n	8001cb6 <LoopFillZerobss>

08001cb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cb4:	3204      	adds	r2, #4

08001cb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cb8:	d3fb      	bcc.n	8001cb2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001cba:	f003 febd 	bl	8005a38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cbe:	f7ff fca3 	bl	8001608 <main>

08001cc2 <LoopForever>:

LoopForever:
    b LoopForever
 8001cc2:	e7fe      	b.n	8001cc2 <LoopForever>
  ldr   r0, =_estack
 8001cc4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001cc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ccc:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 8001cd0:	08007c44 	.word	0x08007c44
  ldr r2, =_sbss
 8001cd4:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8001cd8:	20006940 	.word	0x20006940

08001cdc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cdc:	e7fe      	b.n	8001cdc <ADC_IRQHandler>

08001cde <LL_AHB2_GRP1_EnableClock>:
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b085      	sub	sp, #20
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001ce6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001cec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001cf6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cfa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d02:	68fb      	ldr	r3, [r7, #12]
}
 8001d04:	bf00      	nop
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bc80      	pop	{r7}
 8001d0c:	4770      	bx	lr

08001d0e <LL_APB1_GRP2_EnableClock>:
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b085      	sub	sp, #20
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001d16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d1a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d1c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	65cb      	str	r3, [r1, #92]	@ 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001d26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d2a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d32:	68fb      	ldr	r3, [r7, #12]
}
 8001d34:	bf00      	nop
 8001d36:	3714      	adds	r7, #20
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc80      	pop	{r7}
 8001d3c:	4770      	bx	lr
	...

08001d40 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b088      	sub	sp, #32
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8001d4a:	f107 030c 	add.w	r3, r7, #12
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	605a      	str	r2, [r3, #4]
 8001d54:	609a      	str	r2, [r3, #8]
 8001d56:	60da      	str	r2, [r3, #12]
 8001d58:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001d5a:	2002      	movs	r0, #2
 8001d5c:	f7ff ffbf 	bl	8001cde <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 8001d60:	79fb      	ldrb	r3, [r7, #7]
 8001d62:	4a12      	ldr	r2, [pc, #72]	@ (8001dac <BSP_LED_Init+0x6c>)
 8001d64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d68:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d72:	2302      	movs	r3, #2
 8001d74:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	4a0d      	ldr	r2, [pc, #52]	@ (8001db0 <BSP_LED_Init+0x70>)
 8001d7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d7e:	f107 020c 	add.w	r2, r7, #12
 8001d82:	4611      	mov	r1, r2
 8001d84:	4618      	mov	r0, r3
 8001d86:	f000 fb55 	bl	8002434 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001d8a:	79fb      	ldrb	r3, [r7, #7]
 8001d8c:	4a08      	ldr	r2, [pc, #32]	@ (8001db0 <BSP_LED_Init+0x70>)
 8001d8e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001d92:	79fb      	ldrb	r3, [r7, #7]
 8001d94:	4a05      	ldr	r2, [pc, #20]	@ (8001dac <BSP_LED_Init+0x6c>)
 8001d96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	f000 fca9 	bl	80026f4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3720      	adds	r7, #32
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	08007834 	.word	0x08007834
 8001db0:	20000004 	.word	0x20000004

08001db4 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b088      	sub	sp, #32
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	460a      	mov	r2, r1
 8001dbe:	71fb      	strb	r3, [r7, #7]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure = {0};
 8001dc4:	f107 030c 	add.w	r3, r7, #12
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	60da      	str	r2, [r3, #12]
 8001dd2:	611a      	str	r2, [r3, #16]
  static BSP_EXTI_LineCallback button_callback[BUTTONn] = {BUTTON_SW1_EXTI_Callback, BUTTON_SW2_EXTI_Callback, BUTTON_SW3_EXTI_Callback};
  static uint32_t button_interrupt_priority[BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY, BSP_BUTTON_USER_IT_PRIORITY, BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t button_exti_line[BUTTONn] = {BUTTON_SW1_EXTI_LINE, BUTTON_SW2_EXTI_LINE, BUTTON_SW3_EXTI_LINE};

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001dd4:	79fb      	ldrb	r3, [r7, #7]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d103      	bne.n	8001de2 <BSP_PB_Init+0x2e>
 8001dda:	2001      	movs	r0, #1
 8001ddc:	f7ff ff7f 	bl	8001cde <LL_AHB2_GRP1_EnableClock>
 8001de0:	e00c      	b.n	8001dfc <BSP_PB_Init+0x48>
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d103      	bne.n	8001df0 <BSP_PB_Init+0x3c>
 8001de8:	2001      	movs	r0, #1
 8001dea:	f7ff ff78 	bl	8001cde <LL_AHB2_GRP1_EnableClock>
 8001dee:	e005      	b.n	8001dfc <BSP_PB_Init+0x48>
 8001df0:	79fb      	ldrb	r3, [r7, #7]
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d102      	bne.n	8001dfc <BSP_PB_Init+0x48>
 8001df6:	2004      	movs	r0, #4
 8001df8:	f7ff ff71 	bl	8001cde <LL_AHB2_GRP1_EnableClock>
  
  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	4a29      	ldr	r2, [pc, #164]	@ (8001ea4 <BSP_PB_Init+0xf0>)
 8001e00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e04:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001e06:	2301      	movs	r3, #1
 8001e08:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001e0e:	79bb      	ldrb	r3, [r7, #6]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d10c      	bne.n	8001e2e <BSP_PB_Init+0x7a>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001e14:	2300      	movs	r3, #0
 8001e16:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001e18:	79fb      	ldrb	r3, [r7, #7]
 8001e1a:	4a23      	ldr	r2, [pc, #140]	@ (8001ea8 <BSP_PB_Init+0xf4>)
 8001e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e20:	f107 020c 	add.w	r2, r7, #12
 8001e24:	4611      	mov	r1, r2
 8001e26:	4618      	mov	r0, r3
 8001e28:	f000 fb04 	bl	8002434 <HAL_GPIO_Init>
 8001e2c:	e035      	b.n	8001e9a <BSP_PB_Init+0xe6>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 8001e2e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001e32:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001e34:	79fb      	ldrb	r3, [r7, #7]
 8001e36:	4a1c      	ldr	r2, [pc, #112]	@ (8001ea8 <BSP_PB_Init+0xf4>)
 8001e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e3c:	f107 020c 	add.w	r2, r7, #12
 8001e40:	4611      	mov	r1, r2
 8001e42:	4618      	mov	r0, r3
 8001e44:	f000 faf6 	bl	8002434 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], button_exti_line[Button]);
 8001e48:	79fb      	ldrb	r3, [r7, #7]
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	4a17      	ldr	r2, [pc, #92]	@ (8001eac <BSP_PB_Init+0xf8>)
 8001e4e:	441a      	add	r2, r3
 8001e50:	79fb      	ldrb	r3, [r7, #7]
 8001e52:	4917      	ldr	r1, [pc, #92]	@ (8001eb0 <BSP_PB_Init+0xfc>)
 8001e54:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4610      	mov	r0, r2
 8001e5c:	f000 faa8 	bl	80023b0 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, button_callback[Button]);
 8001e60:	79fb      	ldrb	r3, [r7, #7]
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	4a11      	ldr	r2, [pc, #68]	@ (8001eac <BSP_PB_Init+0xf8>)
 8001e66:	1898      	adds	r0, r3, r2
 8001e68:	79fb      	ldrb	r3, [r7, #7]
 8001e6a:	4a12      	ldr	r2, [pc, #72]	@ (8001eb4 <BSP_PB_Init+0x100>)
 8001e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e70:	461a      	mov	r2, r3
 8001e72:	2100      	movs	r1, #0
 8001e74:	f000 fa83 	bl	800237e <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), button_interrupt_priority[Button], 0x00);
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	4a0f      	ldr	r2, [pc, #60]	@ (8001eb8 <BSP_PB_Init+0x104>)
 8001e7c:	56d0      	ldrsb	r0, [r2, r3]
 8001e7e:	79fb      	ldrb	r3, [r7, #7]
 8001e80:	4a0e      	ldr	r2, [pc, #56]	@ (8001ebc <BSP_PB_Init+0x108>)
 8001e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e86:	2200      	movs	r2, #0
 8001e88:	4619      	mov	r1, r3
 8001e8a:	f000 fa44 	bl	8002316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	4a09      	ldr	r2, [pc, #36]	@ (8001eb8 <BSP_PB_Init+0x104>)
 8001e92:	56d3      	ldrsb	r3, [r2, r3]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f000 fa58 	bl	800234a <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3720      	adds	r7, #32
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	0800783c 	.word	0x0800783c
 8001ea8:	20000010 	.word	0x20000010
 8001eac:	20006740 	.word	0x20006740
 8001eb0:	08007848 	.word	0x08007848
 8001eb4:	20000020 	.word	0x20000020
 8001eb8:	08007844 	.word	0x08007844
 8001ebc:	2000002c 	.word	0x2000002c

08001ec0 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001eca:	79fb      	ldrb	r3, [r7, #7]
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	4a04      	ldr	r2, [pc, #16]	@ (8001ee0 <BSP_PB_IRQHandler+0x20>)
 8001ed0:	4413      	add	r3, r2
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f000 fa7f 	bl	80023d6 <HAL_EXTI_IRQHandler>
}
 8001ed8:	bf00      	nop
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	20006740 	.word	0x20006740

08001ee4 <BSP_PB_Callback>:
  *           @arg BUTTON_SW2
  *           @arg BUTTON_SW3
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr

08001ef8 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	6039      	str	r1, [r7, #0]
 8001f02:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001f04:	2300      	movs	r3, #0
 8001f06:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d903      	bls.n	8001f16 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001f0e:	f06f 0301 	mvn.w	r3, #1
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	e018      	b.n	8001f48 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001f16:	79fb      	ldrb	r3, [r7, #7]
 8001f18:	2294      	movs	r2, #148	@ 0x94
 8001f1a:	fb02 f303 	mul.w	r3, r2, r3
 8001f1e:	4a0d      	ldr	r2, [pc, #52]	@ (8001f54 <BSP_COM_Init+0x5c>)
 8001f20:	4413      	add	r3, r2
 8001f22:	4618      	mov	r0, r3
 8001f24:	f000 f87b 	bl	800201e <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001f28:	79fb      	ldrb	r3, [r7, #7]
 8001f2a:	2294      	movs	r2, #148	@ 0x94
 8001f2c:	fb02 f303 	mul.w	r3, r2, r3
 8001f30:	4a08      	ldr	r2, [pc, #32]	@ (8001f54 <BSP_COM_Init+0x5c>)
 8001f32:	4413      	add	r3, r2
 8001f34:	6839      	ldr	r1, [r7, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f000 f80e 	bl	8001f58 <MX_LPUART1_Init>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d002      	beq.n	8001f48 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8001f42:	f06f 0303 	mvn.w	r3, #3
 8001f46:	e000      	b.n	8001f4a <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8001f48:	68fb      	ldr	r3, [r7, #12]
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20006758 	.word	0x20006758

08001f58 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001f62:	4b15      	ldr	r3, [pc, #84]	@ (8001fb8 <MX_LPUART1_Init+0x60>)
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	220c      	movs	r2, #12
 8001f76:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	895b      	ldrh	r3, [r3, #10]
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685a      	ldr	r2, [r3, #4]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	891b      	ldrh	r3, [r3, #8]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	899b      	ldrh	r3, [r3, #12]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001fa4:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f001 fe39 	bl	8003c1e <HAL_UART_Init>
 8001fac:	4603      	mov	r3, r0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	2000001c 	.word	0x2000001c

08001fbc <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001fc4:	4b09      	ldr	r3, [pc, #36]	@ (8001fec <__io_putchar+0x30>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	2394      	movs	r3, #148	@ 0x94
 8001fcc:	fb02 f303 	mul.w	r3, r2, r3
 8001fd0:	4a07      	ldr	r2, [pc, #28]	@ (8001ff0 <__io_putchar+0x34>)
 8001fd2:	1898      	adds	r0, r3, r2
 8001fd4:	1d39      	adds	r1, r7, #4
 8001fd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f001 fe78 	bl	8003cd0 <HAL_UART_Transmit>
  return ch;
 8001fe0:	687b      	ldr	r3, [r7, #4]
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	200067ec 	.word	0x200067ec
 8001ff0:	20006758 	.word	0x20006758

08001ff4 <BUTTON_SW1_EXTI_Callback>:
/**
  * @brief  Button SW1 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW1_EXTI_Callback(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW1);
 8001ff8:	2000      	movs	r0, #0
 8001ffa:	f7ff ff73 	bl	8001ee4 <BSP_PB_Callback>
}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}

08002002 <BUTTON_SW2_EXTI_Callback>:
/**
  * @brief  Button SW2 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW2_EXTI_Callback(void)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW2);
 8002006:	2001      	movs	r0, #1
 8002008:	f7ff ff6c 	bl	8001ee4 <BSP_PB_Callback>
}
 800200c:	bf00      	nop
 800200e:	bd80      	pop	{r7, pc}

08002010 <BUTTON_SW3_EXTI_Callback>:
/**
  * @brief  Button SW3 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW3_EXTI_Callback(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW3);
 8002014:	2002      	movs	r0, #2
 8002016:	f7ff ff65 	bl	8001ee4 <BSP_PB_Callback>
}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}

0800201e <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b088      	sub	sp, #32
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8002026:	2001      	movs	r0, #1
 8002028:	f7ff fe59 	bl	8001cde <LL_AHB2_GRP1_EnableClock>
  COM1_RX_GPIO_CLK_ENABLE();
 800202c:	2001      	movs	r0, #1
 800202e:	f7ff fe56 	bl	8001cde <LL_AHB2_GRP1_EnableClock>

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8002032:	2001      	movs	r0, #1
 8002034:	f7ff fe6b 	bl	8001d0e <LL_APB1_GRP2_EnableClock>

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8002038:	2304      	movs	r3, #4
 800203a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800203c:	2302      	movs	r3, #2
 800203e:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002040:	2302      	movs	r3, #2
 8002042:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002044:	2301      	movs	r3, #1
 8002046:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8002048:	2308      	movs	r3, #8
 800204a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 800204c:	f107 030c 	add.w	r3, r7, #12
 8002050:	4619      	mov	r1, r3
 8002052:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002056:	f000 f9ed 	bl	8002434 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 800205a:	2308      	movs	r3, #8
 800205c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800205e:	2302      	movs	r3, #2
 8002060:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8002062:	2308      	movs	r3, #8
 8002064:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8002066:	f107 030c 	add.w	r3, r7, #12
 800206a:	4619      	mov	r1, r3
 800206c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002070:	f000 f9e0 	bl	8002434 <HAL_GPIO_Init>
}
 8002074:	bf00      	nop
 8002076:	3720      	adds	r7, #32
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002082:	2300      	movs	r3, #0
 8002084:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002086:	2003      	movs	r0, #3
 8002088:	f000 f93a 	bl	8002300 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800208c:	f001 fbbe 	bl	800380c <HAL_RCC_GetHCLKFreq>
 8002090:	4603      	mov	r3, r0
 8002092:	4a09      	ldr	r2, [pc, #36]	@ (80020b8 <HAL_Init+0x3c>)
 8002094:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002096:	2000      	movs	r0, #0
 8002098:	f000 f810 	bl	80020bc <HAL_InitTick>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d002      	beq.n	80020a8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	71fb      	strb	r3, [r7, #7]
 80020a6:	e001      	b.n	80020ac <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80020a8:	f7ff fcd3 	bl	8001a52 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80020ac:	79fb      	ldrb	r3, [r7, #7]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20000000 	.word	0x20000000

080020bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80020c4:	2300      	movs	r3, #0
 80020c6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80020c8:	4b17      	ldr	r3, [pc, #92]	@ (8002128 <HAL_InitTick+0x6c>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d024      	beq.n	800211a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80020d0:	f001 fb9c 	bl	800380c <HAL_RCC_GetHCLKFreq>
 80020d4:	4602      	mov	r2, r0
 80020d6:	4b14      	ldr	r3, [pc, #80]	@ (8002128 <HAL_InitTick+0x6c>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	4619      	mov	r1, r3
 80020dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020e0:	fbb3 f3f1 	udiv	r3, r3, r1
 80020e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e8:	4618      	mov	r0, r3
 80020ea:	f000 f93c 	bl	8002366 <HAL_SYSTICK_Config>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d10f      	bne.n	8002114 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b0f      	cmp	r3, #15
 80020f8:	d809      	bhi.n	800210e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020fa:	2200      	movs	r2, #0
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002102:	f000 f908 	bl	8002316 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002106:	4a09      	ldr	r2, [pc, #36]	@ (800212c <HAL_InitTick+0x70>)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6013      	str	r3, [r2, #0]
 800210c:	e007      	b.n	800211e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	73fb      	strb	r3, [r7, #15]
 8002112:	e004      	b.n	800211e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	73fb      	strb	r3, [r7, #15]
 8002118:	e001      	b.n	800211e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800211e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002120:	4618      	mov	r0, r3
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	2000003c 	.word	0x2000003c
 800212c:	20000038 	.word	0x20000038

08002130 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002134:	4b05      	ldr	r3, [pc, #20]	@ (800214c <HAL_IncTick+0x1c>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	461a      	mov	r2, r3
 800213a:	4b05      	ldr	r3, [pc, #20]	@ (8002150 <HAL_IncTick+0x20>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4413      	add	r3, r2
 8002140:	4a03      	ldr	r2, [pc, #12]	@ (8002150 <HAL_IncTick+0x20>)
 8002142:	6013      	str	r3, [r2, #0]
}
 8002144:	bf00      	nop
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr
 800214c:	2000003c 	.word	0x2000003c
 8002150:	200067f0 	.word	0x200067f0

08002154 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  return uwTick;
 8002158:	4b02      	ldr	r3, [pc, #8]	@ (8002164 <HAL_GetTick+0x10>)
 800215a:	681b      	ldr	r3, [r3, #0]
}
 800215c:	4618      	mov	r0, r3
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr
 8002164:	200067f0 	.word	0x200067f0

08002168 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002178:	4b0c      	ldr	r3, [pc, #48]	@ (80021ac <__NVIC_SetPriorityGrouping+0x44>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800217e:	68ba      	ldr	r2, [r7, #8]
 8002180:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002184:	4013      	ands	r3, r2
 8002186:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002190:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002194:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002198:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800219a:	4a04      	ldr	r2, [pc, #16]	@ (80021ac <__NVIC_SetPriorityGrouping+0x44>)
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	60d3      	str	r3, [r2, #12]
}
 80021a0:	bf00      	nop
 80021a2:	3714      	adds	r7, #20
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bc80      	pop	{r7}
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021b4:	4b04      	ldr	r3, [pc, #16]	@ (80021c8 <__NVIC_GetPriorityGrouping+0x18>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	0a1b      	lsrs	r3, r3, #8
 80021ba:	f003 0307 	and.w	r3, r3, #7
}
 80021be:	4618      	mov	r0, r3
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bc80      	pop	{r7}
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	db0b      	blt.n	80021f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021de:	79fb      	ldrb	r3, [r7, #7]
 80021e0:	f003 021f 	and.w	r2, r3, #31
 80021e4:	4906      	ldr	r1, [pc, #24]	@ (8002200 <__NVIC_EnableIRQ+0x34>)
 80021e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ea:	095b      	lsrs	r3, r3, #5
 80021ec:	2001      	movs	r0, #1
 80021ee:	fa00 f202 	lsl.w	r2, r0, r2
 80021f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr
 8002200:	e000e100 	.word	0xe000e100

08002204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	6039      	str	r1, [r7, #0]
 800220e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002214:	2b00      	cmp	r3, #0
 8002216:	db0a      	blt.n	800222e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	b2da      	uxtb	r2, r3
 800221c:	490c      	ldr	r1, [pc, #48]	@ (8002250 <__NVIC_SetPriority+0x4c>)
 800221e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002222:	0112      	lsls	r2, r2, #4
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	440b      	add	r3, r1
 8002228:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800222c:	e00a      	b.n	8002244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	b2da      	uxtb	r2, r3
 8002232:	4908      	ldr	r1, [pc, #32]	@ (8002254 <__NVIC_SetPriority+0x50>)
 8002234:	79fb      	ldrb	r3, [r7, #7]
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	3b04      	subs	r3, #4
 800223c:	0112      	lsls	r2, r2, #4
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	440b      	add	r3, r1
 8002242:	761a      	strb	r2, [r3, #24]
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	bc80      	pop	{r7}
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	e000e100 	.word	0xe000e100
 8002254:	e000ed00 	.word	0xe000ed00

08002258 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002258:	b480      	push	{r7}
 800225a:	b089      	sub	sp, #36	@ 0x24
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	f1c3 0307 	rsb	r3, r3, #7
 8002272:	2b04      	cmp	r3, #4
 8002274:	bf28      	it	cs
 8002276:	2304      	movcs	r3, #4
 8002278:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	3304      	adds	r3, #4
 800227e:	2b06      	cmp	r3, #6
 8002280:	d902      	bls.n	8002288 <NVIC_EncodePriority+0x30>
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	3b03      	subs	r3, #3
 8002286:	e000      	b.n	800228a <NVIC_EncodePriority+0x32>
 8002288:	2300      	movs	r3, #0
 800228a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800228c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	43da      	mvns	r2, r3
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	401a      	ands	r2, r3
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022a0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	fa01 f303 	lsl.w	r3, r1, r3
 80022aa:	43d9      	mvns	r1, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b0:	4313      	orrs	r3, r2
         );
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3724      	adds	r7, #36	@ 0x24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr

080022bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3b01      	subs	r3, #1
 80022c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022cc:	d301      	bcc.n	80022d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ce:	2301      	movs	r3, #1
 80022d0:	e00f      	b.n	80022f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022d2:	4a0a      	ldr	r2, [pc, #40]	@ (80022fc <SysTick_Config+0x40>)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3b01      	subs	r3, #1
 80022d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022da:	210f      	movs	r1, #15
 80022dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80022e0:	f7ff ff90 	bl	8002204 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022e4:	4b05      	ldr	r3, [pc, #20]	@ (80022fc <SysTick_Config+0x40>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ea:	4b04      	ldr	r3, [pc, #16]	@ (80022fc <SysTick_Config+0x40>)
 80022ec:	2207      	movs	r2, #7
 80022ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	e000e010 	.word	0xe000e010

08002300 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f7ff ff2d 	bl	8002168 <__NVIC_SetPriorityGrouping>
}
 800230e:	bf00      	nop
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b086      	sub	sp, #24
 800231a:	af00      	add	r7, sp, #0
 800231c:	4603      	mov	r3, r0
 800231e:	60b9      	str	r1, [r7, #8]
 8002320:	607a      	str	r2, [r7, #4]
 8002322:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002324:	f7ff ff44 	bl	80021b0 <__NVIC_GetPriorityGrouping>
 8002328:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	68b9      	ldr	r1, [r7, #8]
 800232e:	6978      	ldr	r0, [r7, #20]
 8002330:	f7ff ff92 	bl	8002258 <NVIC_EncodePriority>
 8002334:	4602      	mov	r2, r0
 8002336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800233a:	4611      	mov	r1, r2
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff ff61 	bl	8002204 <__NVIC_SetPriority>
}
 8002342:	bf00      	nop
 8002344:	3718      	adds	r7, #24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b082      	sub	sp, #8
 800234e:	af00      	add	r7, sp, #0
 8002350:	4603      	mov	r3, r0
 8002352:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff ff37 	bl	80021cc <__NVIC_EnableIRQ>
}
 800235e:	bf00      	nop
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b082      	sub	sp, #8
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7ff ffa4 	bl	80022bc <SysTick_Config>
 8002374:	4603      	mov	r3, r0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800237e:	b480      	push	{r7}
 8002380:	b087      	sub	sp, #28
 8002382:	af00      	add	r7, sp, #0
 8002384:	60f8      	str	r0, [r7, #12]
 8002386:	460b      	mov	r3, r1
 8002388:	607a      	str	r2, [r7, #4]
 800238a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800238c:	2300      	movs	r3, #0
 800238e:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8002390:	7afb      	ldrb	r3, [r7, #11]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d103      	bne.n	800239e <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	605a      	str	r2, [r3, #4]
      break;
 800239c:	e002      	b.n	80023a4 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	75fb      	strb	r3, [r7, #23]
      break;
 80023a2:	bf00      	nop
  }

  return status;
 80023a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	371c      	adds	r7, #28
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bc80      	pop	{r7}
 80023ae:	4770      	bx	lr

080023b0 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e003      	b.n	80023cc <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80023ca:	2300      	movs	r3, #0
  }
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bc80      	pop	{r7}
 80023d4:	4770      	bx	lr

080023d6 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b086      	sub	sp, #24
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	0c1b      	lsrs	r3, r3, #16
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 031f 	and.w	r3, r3, #31
 80023f2:	2201      	movs	r2, #1
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	015b      	lsls	r3, r3, #5
 80023fe:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
 8002402:	f603 030c 	addw	r3, r3, #2060	@ 0x80c
 8002406:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	4013      	ands	r3, r2
 8002410:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d009      	beq.n	800242c <HAL_EXTI_IRQHandler+0x56>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d002      	beq.n	800242c <HAL_EXTI_IRQHandler+0x56>
    {
      hexti->PendingCallback();
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	4798      	blx	r3
    }
  }
}
 800242c:	bf00      	nop
 800242e:	3718      	adds	r7, #24
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002434:	b480      	push	{r7}
 8002436:	b087      	sub	sp, #28
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800243e:	2300      	movs	r3, #0
 8002440:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002442:	e140      	b.n	80026c6 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	2101      	movs	r1, #1
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	fa01 f303 	lsl.w	r3, r1, r3
 8002450:	4013      	ands	r3, r2
 8002452:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 8132 	beq.w	80026c0 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f003 0303 	and.w	r3, r3, #3
 8002464:	2b01      	cmp	r3, #1
 8002466:	d005      	beq.n	8002474 <HAL_GPIO_Init+0x40>
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f003 0303 	and.w	r3, r3, #3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d130      	bne.n	80024d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	2203      	movs	r2, #3
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	43db      	mvns	r3, r3
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	4013      	ands	r3, r2
 800248a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	68da      	ldr	r2, [r3, #12]
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	4313      	orrs	r3, r2
 800249c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024aa:	2201      	movs	r2, #1
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	43db      	mvns	r3, r3
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	4013      	ands	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	091b      	lsrs	r3, r3, #4
 80024c0:	f003 0201 	and.w	r2, r3, #1
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f003 0303 	and.w	r3, r3, #3
 80024de:	2b03      	cmp	r3, #3
 80024e0:	d017      	beq.n	8002512 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	2203      	movs	r2, #3
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	43db      	mvns	r3, r3
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	4013      	ands	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	689a      	ldr	r2, [r3, #8]
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	4313      	orrs	r3, r2
 800250a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d123      	bne.n	8002566 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	08da      	lsrs	r2, r3, #3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	3208      	adds	r2, #8
 8002526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800252a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	220f      	movs	r2, #15
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	43db      	mvns	r3, r3
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	4013      	ands	r3, r2
 8002540:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	691a      	ldr	r2, [r3, #16]
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	4313      	orrs	r3, r2
 8002556:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	08da      	lsrs	r2, r3, #3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3208      	adds	r2, #8
 8002560:	6939      	ldr	r1, [r7, #16]
 8002562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	2203      	movs	r2, #3
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	43db      	mvns	r3, r3
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	4013      	ands	r3, r2
 800257c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f003 0203 	and.w	r2, r3, #3
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	4313      	orrs	r3, r2
 8002592:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f000 808c 	beq.w	80026c0 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80025a8:	4a4e      	ldr	r2, [pc, #312]	@ (80026e4 <HAL_GPIO_Init+0x2b0>)
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	089b      	lsrs	r3, r3, #2
 80025ae:	3302      	adds	r3, #2
 80025b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	f003 0303 	and.w	r3, r3, #3
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	2207      	movs	r2, #7
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	43db      	mvns	r3, r3
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	4013      	ands	r3, r2
 80025ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80025d2:	d00d      	beq.n	80025f0 <HAL_GPIO_Init+0x1bc>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a44      	ldr	r2, [pc, #272]	@ (80026e8 <HAL_GPIO_Init+0x2b4>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d007      	beq.n	80025ec <HAL_GPIO_Init+0x1b8>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a43      	ldr	r2, [pc, #268]	@ (80026ec <HAL_GPIO_Init+0x2b8>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d101      	bne.n	80025e8 <HAL_GPIO_Init+0x1b4>
 80025e4:	2302      	movs	r3, #2
 80025e6:	e004      	b.n	80025f2 <HAL_GPIO_Init+0x1be>
 80025e8:	2307      	movs	r3, #7
 80025ea:	e002      	b.n	80025f2 <HAL_GPIO_Init+0x1be>
 80025ec:	2301      	movs	r3, #1
 80025ee:	e000      	b.n	80025f2 <HAL_GPIO_Init+0x1be>
 80025f0:	2300      	movs	r3, #0
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	f002 0203 	and.w	r2, r2, #3
 80025f8:	0092      	lsls	r2, r2, #2
 80025fa:	4093      	lsls	r3, r2
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	4313      	orrs	r3, r2
 8002600:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002602:	4938      	ldr	r1, [pc, #224]	@ (80026e4 <HAL_GPIO_Init+0x2b0>)
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	089b      	lsrs	r3, r3, #2
 8002608:	3302      	adds	r3, #2
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002610:	4b37      	ldr	r3, [pc, #220]	@ (80026f0 <HAL_GPIO_Init+0x2bc>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	43db      	mvns	r3, r3
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	4013      	ands	r3, r2
 800261e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d003      	beq.n	8002634 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	4313      	orrs	r3, r2
 8002632:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002634:	4a2e      	ldr	r2, [pc, #184]	@ (80026f0 <HAL_GPIO_Init+0x2bc>)
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800263a:	4b2d      	ldr	r3, [pc, #180]	@ (80026f0 <HAL_GPIO_Init+0x2bc>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	43db      	mvns	r3, r3
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	4013      	ands	r3, r2
 8002648:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d003      	beq.n	800265e <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	4313      	orrs	r3, r2
 800265c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800265e:	4a24      	ldr	r2, [pc, #144]	@ (80026f0 <HAL_GPIO_Init+0x2bc>)
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8002664:	4b22      	ldr	r3, [pc, #136]	@ (80026f0 <HAL_GPIO_Init+0x2bc>)
 8002666:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800266a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	43db      	mvns	r3, r3
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	4013      	ands	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	4313      	orrs	r3, r2
 8002688:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800268a:	4a19      	ldr	r2, [pc, #100]	@ (80026f0 <HAL_GPIO_Init+0x2bc>)
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8002692:	4b17      	ldr	r3, [pc, #92]	@ (80026f0 <HAL_GPIO_Init+0x2bc>)
 8002694:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002698:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	43db      	mvns	r3, r3
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	4013      	ands	r3, r2
 80026a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d003      	beq.n	80026b8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80026b8:	4a0d      	ldr	r2, [pc, #52]	@ (80026f0 <HAL_GPIO_Init+0x2bc>)
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	3301      	adds	r3, #1
 80026c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	fa22 f303 	lsr.w	r3, r2, r3
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f47f aeb7 	bne.w	8002444 <HAL_GPIO_Init+0x10>
  }
}
 80026d6:	bf00      	nop
 80026d8:	bf00      	nop
 80026da:	371c      	adds	r7, #28
 80026dc:	46bd      	mov	sp, r7
 80026de:	bc80      	pop	{r7}
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	40010000 	.word	0x40010000
 80026e8:	48000400 	.word	0x48000400
 80026ec:	48000800 	.word	0x48000800
 80026f0:	58000800 	.word	0x58000800

080026f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	460b      	mov	r3, r1
 80026fe:	807b      	strh	r3, [r7, #2]
 8002700:	4613      	mov	r3, r2
 8002702:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002704:	787b      	ldrb	r3, [r7, #1]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d003      	beq.n	8002712 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800270a:	887a      	ldrh	r2, [r7, #2]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002710:	e002      	b.n	8002718 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002712:	887a      	ldrh	r2, [r7, #2]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	bc80      	pop	{r7}
 8002720:	4770      	bx	lr
	...

08002724 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002728:	4b04      	ldr	r3, [pc, #16]	@ (800273c <HAL_PWR_EnableBkUpAccess+0x18>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a03      	ldr	r2, [pc, #12]	@ (800273c <HAL_PWR_EnableBkUpAccess+0x18>)
 800272e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002732:	6013      	str	r3, [r2, #0]
}
 8002734:	bf00      	nop
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr
 800273c:	58000400 	.word	0x58000400

08002740 <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8002744:	4b04      	ldr	r3, [pc, #16]	@ (8002758 <LL_PWR_EnableBootC2+0x18>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	4a03      	ldr	r2, [pc, #12]	@ (8002758 <LL_PWR_EnableBootC2+0x18>)
 800274a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800274e:	60d3      	str	r3, [r2, #12]
}
 8002750:	bf00      	nop
 8002752:	46bd      	mov	sp, r7
 8002754:	bc80      	pop	{r7}
 8002756:	4770      	bx	lr
 8002758:	58000400 	.word	0x58000400

0800275c <LL_PWR_DisableBootC2>:
  *         modes.
  * @rmtoll CR4          C2BOOT        LL_PWR_DisableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableBootC2(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8002760:	4b04      	ldr	r3, [pc, #16]	@ (8002774 <LL_PWR_DisableBootC2+0x18>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	4a03      	ldr	r2, [pc, #12]	@ (8002774 <LL_PWR_DisableBootC2+0x18>)
 8002766:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800276a:	60d3      	str	r3, [r2, #12]
}
 800276c:	bf00      	nop
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr
 8002774:	58000400 	.word	0x58000400

08002778 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800277c:	4b03      	ldr	r3, [pc, #12]	@ (800278c <HAL_PWREx_GetVoltageRange+0x14>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8002784:	4618      	mov	r0, r3
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr
 800278c:	58000400 	.word	0x58000400

08002790 <HAL_PWREx_HoldCore>:
  *             @arg PWR_CORE_CPU2: Hold CPU2.
  * @note   Hold CPU2 with CPU1 as master by default.
  * @retval None
  */
void HAL_PWREx_HoldCore(uint32_t CPU)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_DisableBootC2();
 8002798:	f7ff ffe0 	bl	800275c <LL_PWR_DisableBootC2>
}
 800279c:	bf00      	nop
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 80027ac:	f7ff ffc8 	bl	8002740 <LL_PWR_EnableBootC2>
}
 80027b0:	bf00      	nop
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80027bc:	4b04      	ldr	r3, [pc, #16]	@ (80027d0 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a03      	ldr	r2, [pc, #12]	@ (80027d0 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80027c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027c6:	6013      	str	r3, [r2, #0]
}
 80027c8:	bf00      	nop
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr
 80027d0:	58000400 	.word	0x58000400

080027d4 <LL_PWR_IsEnabledBkUpAccess>:
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80027d8:	4b06      	ldr	r3, [pc, #24]	@ (80027f4 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027e4:	d101      	bne.n	80027ea <LL_PWR_IsEnabledBkUpAccess+0x16>
 80027e6:	2301      	movs	r3, #1
 80027e8:	e000      	b.n	80027ec <LL_PWR_IsEnabledBkUpAccess+0x18>
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr
 80027f4:	58000400 	.word	0x58000400

080027f8 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80027fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002806:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800280a:	6013      	str	r3, [r2, #0]
}
 800280c:	bf00      	nop
 800280e:	46bd      	mov	sp, r7
 8002810:	bc80      	pop	{r7}
 8002812:	4770      	bx	lr

08002814 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002818:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002822:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002826:	6013      	str	r3, [r2, #0]
}
 8002828:	bf00      	nop
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr

08002830 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002834:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800283e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002842:	d101      	bne.n	8002848 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002844:	2301      	movs	r3, #1
 8002846:	e000      	b.n	800284a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	46bd      	mov	sp, r7
 800284e:	bc80      	pop	{r7}
 8002850:	4770      	bx	lr

08002852 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8002852:	b480      	push	{r7}
 8002854:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002856:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002860:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002864:	6013      	str	r3, [r2, #0]
}
 8002866:	bf00      	nop
 8002868:	46bd      	mov	sp, r7
 800286a:	bc80      	pop	{r7}
 800286c:	4770      	bx	lr

0800286e <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800286e:	b480      	push	{r7}
 8002870:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002872:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800287c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002880:	6013      	str	r3, [r2, #0]
}
 8002882:	bf00      	nop
 8002884:	46bd      	mov	sp, r7
 8002886:	bc80      	pop	{r7}
 8002888:	4770      	bx	lr

0800288a <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800288a:	b480      	push	{r7}
 800288c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800288e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002898:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800289c:	d101      	bne.n	80028a2 <LL_RCC_HSE_IsReady+0x18>
 800289e:	2301      	movs	r3, #1
 80028a0:	e000      	b.n	80028a4 <LL_RCC_HSE_IsReady+0x1a>
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr

080028ac <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80028b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028be:	6013      	str	r3, [r2, #0]
}
 80028c0:	bf00      	nop
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr

080028c8 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80028cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028d6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80028da:	6013      	str	r3, [r2, #0]
}
 80028dc:	bf00      	nop
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr

080028e4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80028e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028f6:	d101      	bne.n	80028fc <LL_RCC_HSI_IsReady+0x18>
 80028f8:	2301      	movs	r3, #1
 80028fa:	e000      	b.n	80028fe <LL_RCC_HSI_IsReady+0x1a>
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	46bd      	mov	sp, r7
 8002902:	bc80      	pop	{r7}
 8002904:	4770      	bx	lr

08002906 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800290e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	061b      	lsls	r3, r3, #24
 800291c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002920:	4313      	orrs	r3, r2
 8002922:	604b      	str	r3, [r1, #4]
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	bc80      	pop	{r7}
 800292c:	4770      	bx	lr

0800292e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800292e:	b480      	push	{r7}
 8002930:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002932:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002936:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b02      	cmp	r3, #2
 8002940:	d101      	bne.n	8002946 <LL_RCC_LSE_IsReady+0x18>
 8002942:	2301      	movs	r3, #1
 8002944:	e000      	b.n	8002948 <LL_RCC_LSE_IsReady+0x1a>
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	46bd      	mov	sp, r7
 800294c:	bc80      	pop	{r7}
 800294e:	4770      	bx	lr

08002950 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002954:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002958:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800295c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002960:	f043 0301 	orr.w	r3, r3, #1
 8002964:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002968:	bf00      	nop
 800296a:	46bd      	mov	sp, r7
 800296c:	bc80      	pop	{r7}
 800296e:	4770      	bx	lr

08002970 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002974:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002978:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800297c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002980:	f023 0301 	bic.w	r3, r3, #1
 8002984:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002988:	bf00      	nop
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr

08002990 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002994:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002998:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d101      	bne.n	80029a8 <LL_RCC_LSI_IsReady+0x18>
 80029a4:	2301      	movs	r3, #1
 80029a6:	e000      	b.n	80029aa <LL_RCC_LSI_IsReady+0x1a>
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	4770      	bx	lr

080029b2 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80029b2:	b480      	push	{r7}
 80029b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80029b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029c0:	f043 0301 	orr.w	r3, r3, #1
 80029c4:	6013      	str	r3, [r2, #0]
}
 80029c6:	bf00      	nop
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bc80      	pop	{r7}
 80029cc:	4770      	bx	lr

080029ce <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80029ce:	b480      	push	{r7}
 80029d0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80029d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029dc:	f023 0301 	bic.w	r3, r3, #1
 80029e0:	6013      	str	r3, [r2, #0]
}
 80029e2:	bf00      	nop
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bc80      	pop	{r7}
 80029e8:	4770      	bx	lr

080029ea <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80029ea:	b480      	push	{r7}
 80029ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80029ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d101      	bne.n	8002a00 <LL_RCC_MSI_IsReady+0x16>
 80029fc:	2301      	movs	r3, #1
 80029fe:	e000      	b.n	8002a02 <LL_RCC_MSI_IsReady+0x18>
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bc80      	pop	{r7}
 8002a08:	4770      	bx	lr

08002a0a <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002a0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0308 	and.w	r3, r3, #8
 8002a18:	2b08      	cmp	r3, #8
 8002a1a:	d101      	bne.n	8002a20 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e000      	b.n	8002a22 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bc80      	pop	{r7}
 8002a28:	4770      	bx	lr

08002a2a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002a2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr

08002a40 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002a44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a4c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bc80      	pop	{r7}
 8002a56:	4770      	bx	lr

08002a58 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002a60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	021b      	lsls	r3, r3, #8
 8002a6e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a72:	4313      	orrs	r3, r2
 8002a74:	604b      	str	r3, [r1, #4]
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc80      	pop	{r7}
 8002a7e:	4770      	bx	lr

08002a80 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002a88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f023 0203 	bic.w	r2, r3, #3
 8002a92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	608b      	str	r3, [r1, #8]
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bc80      	pop	{r7}
 8002aa4:	4770      	bx	lr

08002aa6 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002aaa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f003 030c 	and.w	r3, r3, #12
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bc80      	pop	{r7}
 8002aba:	4770      	bx	lr

08002abc <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002ac4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ace:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	608b      	str	r3, [r1, #8]
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bc80      	pop	{r7}
 8002ae0:	4770      	bx	lr

08002ae2 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b083      	sub	sp, #12
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002aea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002aee:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002af2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002af6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr

08002b0c <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002b14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b18:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002b1c:	f023 020f 	bic.w	r2, r3, #15
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	091b      	lsrs	r3, r3, #4
 8002b24:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bc80      	pop	{r7}
 8002b36:	4770      	bx	lr

08002b38 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002b40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b4a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	608b      	str	r3, [r1, #8]
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bc80      	pop	{r7}
 8002b5c:	4770      	bx	lr

08002b5e <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002b66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b70:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	608b      	str	r3, [r1, #8]
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr

08002b84 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002b88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bc80      	pop	{r7}
 8002b98:	4770      	bx	lr

08002b9a <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002b9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ba2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002ba6:	011b      	lsls	r3, r3, #4
 8002ba8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bc80      	pop	{r7}
 8002bb2:	4770      	bx	lr

08002bb4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002bb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bc80      	pop	{r7}
 8002bc8:	4770      	bx	lr

08002bca <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002bce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr

08002be0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002be4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002bee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bf2:	6013      	str	r3, [r2, #0]
}
 8002bf4:	bf00      	nop
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr

08002bfc <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002c00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c0e:	6013      	str	r3, [r2, #0]
}
 8002c10:	bf00      	nop
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc80      	pop	{r7}
 8002c16:	4770      	bx	lr

08002c18 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002c1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c2a:	d101      	bne.n	8002c30 <LL_RCC_PLL_IsReady+0x18>
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e000      	b.n	8002c32 <LL_RCC_PLL_IsReady+0x1a>
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bc80      	pop	{r7}
 8002c38:	4770      	bx	lr

08002c3a <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002c3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	0a1b      	lsrs	r3, r3, #8
 8002c46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bc80      	pop	{r7}
 8002c50:	4770      	bx	lr

08002c52 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002c52:	b480      	push	{r7}
 8002c54:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002c56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bc80      	pop	{r7}
 8002c66:	4770      	bx	lr

08002c68 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002c6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bc80      	pop	{r7}
 8002c7c:	4770      	bx	lr

08002c7e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002c82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	f003 0303 	and.w	r3, r3, #3
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bc80      	pop	{r7}
 8002c92:	4770      	bx	lr

08002c94 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002c98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ca2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ca6:	d101      	bne.n	8002cac <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e000      	b.n	8002cae <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bc80      	pop	{r7}
 8002cb4:	4770      	bx	lr

08002cb6 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002cba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cbe:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cc6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002cca:	d101      	bne.n	8002cd0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e000      	b.n	8002cd2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bc80      	pop	{r7}
 8002cd8:	4770      	bx	lr

08002cda <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002cde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ce2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002ce6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cee:	d101      	bne.n	8002cf4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e000      	b.n	8002cf6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bc80      	pop	{r7}
 8002cfc:	4770      	bx	lr

08002cfe <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002d02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002d10:	d101      	bne.n	8002d16 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bc80      	pop	{r7}
 8002d1e:	4770      	bx	lr

08002d20 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002d24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d2e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002d32:	d101      	bne.n	8002d38 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002d34:	2301      	movs	r3, #1
 8002d36:	e000      	b.n	8002d3a <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bc80      	pop	{r7}
 8002d40:	4770      	bx	lr
	...

08002d44 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b088      	sub	sp, #32
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e36f      	b.n	8003436 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d56:	f7ff fea6 	bl	8002aa6 <LL_RCC_GetSysClkSource>
 8002d5a:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d5c:	f7ff ff8f 	bl	8002c7e <LL_RCC_PLL_GetMainSource>
 8002d60:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0320 	and.w	r3, r3, #32
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f000 80c4 	beq.w	8002ef8 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d005      	beq.n	8002d82 <HAL_RCC_OscConfig+0x3e>
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	2b0c      	cmp	r3, #12
 8002d7a:	d176      	bne.n	8002e6a <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d173      	bne.n	8002e6a <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e353      	b.n	8003436 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0308 	and.w	r3, r3, #8
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d005      	beq.n	8002dac <HAL_RCC_OscConfig+0x68>
 8002da0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002daa:	e006      	b.n	8002dba <HAL_RCC_OscConfig+0x76>
 8002dac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002db0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002db4:	091b      	lsrs	r3, r3, #4
 8002db6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d222      	bcs.n	8002e04 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f000 fd5a 	bl	800387c <RCC_SetFlashLatencyFromMSIRange>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e331      	b.n	8003436 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ddc:	f043 0308 	orr.w	r3, r3, #8
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002df0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002df4:	4313      	orrs	r3, r2
 8002df6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff fe2b 	bl	8002a58 <LL_RCC_MSI_SetCalibTrimming>
 8002e02:	e021      	b.n	8002e48 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e0e:	f043 0308 	orr.w	r3, r3, #8
 8002e12:	6013      	str	r3, [r2, #0]
 8002e14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e22:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e26:	4313      	orrs	r3, r2
 8002e28:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff fe12 	bl	8002a58 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f000 fd1f 	bl	800387c <RCC_SetFlashLatencyFromMSIRange>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e2f6      	b.n	8003436 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002e48:	f000 fce0 	bl	800380c <HAL_RCC_GetHCLKFreq>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	4aa7      	ldr	r2, [pc, #668]	@ (80030ec <HAL_RCC_OscConfig+0x3a8>)
 8002e50:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8002e52:	4ba7      	ldr	r3, [pc, #668]	@ (80030f0 <HAL_RCC_OscConfig+0x3ac>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff f930 	bl	80020bc <HAL_InitTick>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002e60:	7cfb      	ldrb	r3, [r7, #19]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d047      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8002e66:	7cfb      	ldrb	r3, [r7, #19]
 8002e68:	e2e5      	b.n	8003436 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d02c      	beq.n	8002ecc <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e72:	f7ff fd9e 	bl	80029b2 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e76:	f7ff f96d 	bl	8002154 <HAL_GetTick>
 8002e7a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e7e:	f7ff f969 	bl	8002154 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e2d2      	b.n	8003436 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002e90:	f7ff fdab 	bl	80029ea <LL_RCC_MSI_IsReady>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d0f1      	beq.n	8002e7e <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ea4:	f043 0308 	orr.w	r3, r3, #8
 8002ea8:	6013      	str	r3, [r2, #0]
 8002eaa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff fdc7 	bl	8002a58 <LL_RCC_MSI_SetCalibTrimming>
 8002eca:	e015      	b.n	8002ef8 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ecc:	f7ff fd7f 	bl	80029ce <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ed0:	f7ff f940 	bl	8002154 <HAL_GetTick>
 8002ed4:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ed8:	f7ff f93c 	bl	8002154 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e2a5      	b.n	8003436 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002eea:	f7ff fd7e 	bl	80029ea <LL_RCC_MSI_IsReady>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1f1      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x194>
 8002ef4:	e000      	b.n	8002ef8 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002ef6:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d058      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	2b08      	cmp	r3, #8
 8002f08:	d005      	beq.n	8002f16 <HAL_RCC_OscConfig+0x1d2>
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	2b0c      	cmp	r3, #12
 8002f0e:	d108      	bne.n	8002f22 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	2b03      	cmp	r3, #3
 8002f14:	d105      	bne.n	8002f22 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d14b      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e289      	b.n	8003436 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002f22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f34:	4313      	orrs	r3, r2
 8002f36:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f40:	d102      	bne.n	8002f48 <HAL_RCC_OscConfig+0x204>
 8002f42:	f7ff fc86 	bl	8002852 <LL_RCC_HSE_Enable>
 8002f46:	e00d      	b.n	8002f64 <HAL_RCC_OscConfig+0x220>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8002f50:	d104      	bne.n	8002f5c <HAL_RCC_OscConfig+0x218>
 8002f52:	f7ff fc51 	bl	80027f8 <LL_RCC_HSE_EnableTcxo>
 8002f56:	f7ff fc7c 	bl	8002852 <LL_RCC_HSE_Enable>
 8002f5a:	e003      	b.n	8002f64 <HAL_RCC_OscConfig+0x220>
 8002f5c:	f7ff fc87 	bl	800286e <LL_RCC_HSE_Disable>
 8002f60:	f7ff fc58 	bl	8002814 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d012      	beq.n	8002f92 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f6c:	f7ff f8f2 	bl	8002154 <HAL_GetTick>
 8002f70:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f74:	f7ff f8ee 	bl	8002154 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b64      	cmp	r3, #100	@ 0x64
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e257      	b.n	8003436 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002f86:	f7ff fc80 	bl	800288a <LL_RCC_HSE_IsReady>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d0f1      	beq.n	8002f74 <HAL_RCC_OscConfig+0x230>
 8002f90:	e011      	b.n	8002fb6 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f92:	f7ff f8df 	bl	8002154 <HAL_GetTick>
 8002f96:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002f98:	e008      	b.n	8002fac <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f9a:	f7ff f8db 	bl	8002154 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b64      	cmp	r3, #100	@ 0x64
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e244      	b.n	8003436 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002fac:	f7ff fc6d 	bl	800288a <LL_RCC_HSE_IsReady>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1f1      	bne.n	8002f9a <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d046      	beq.n	8003050 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	2b04      	cmp	r3, #4
 8002fc6:	d005      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x290>
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	2b0c      	cmp	r3, #12
 8002fcc:	d10e      	bne.n	8002fec <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d10b      	bne.n	8002fec <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e22a      	b.n	8003436 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	695b      	ldr	r3, [r3, #20]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff fc8e 	bl	8002906 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002fea:	e031      	b.n	8003050 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d019      	beq.n	8003028 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ff4:	f7ff fc5a 	bl	80028ac <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff8:	f7ff f8ac 	bl	8002154 <HAL_GetTick>
 8002ffc:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003000:	f7ff f8a8 	bl	8002154 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e211      	b.n	8003436 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003012:	f7ff fc67 	bl	80028e4 <LL_RCC_HSI_IsReady>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d0f1      	beq.n	8003000 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	4618      	mov	r0, r3
 8003022:	f7ff fc70 	bl	8002906 <LL_RCC_HSI_SetCalibTrimming>
 8003026:	e013      	b.n	8003050 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003028:	f7ff fc4e 	bl	80028c8 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302c:	f7ff f892 	bl	8002154 <HAL_GetTick>
 8003030:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003034:	f7ff f88e 	bl	8002154 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e1f7      	b.n	8003436 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003046:	f7ff fc4d 	bl	80028e4 <LL_RCC_HSI_IsReady>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1f1      	bne.n	8003034 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0308 	and.w	r3, r3, #8
 8003058:	2b00      	cmp	r3, #0
 800305a:	d06e      	beq.n	800313a <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d056      	beq.n	8003112 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8003064:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003068:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800306c:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	69da      	ldr	r2, [r3, #28]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f003 0310 	and.w	r3, r3, #16
 8003078:	429a      	cmp	r2, r3
 800307a:	d031      	beq.n	80030e0 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d006      	beq.n	8003094 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e1d0      	b.n	8003436 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d013      	beq.n	80030c6 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 800309e:	f7ff fc67 	bl	8002970 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80030a2:	f7ff f857 	bl	8002154 <HAL_GetTick>
 80030a6:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80030a8:	e008      	b.n	80030bc <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030aa:	f7ff f853 	bl	8002154 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b11      	cmp	r3, #17
 80030b6:	d901      	bls.n	80030bc <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e1bc      	b.n	8003436 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80030bc:	f7ff fc68 	bl	8002990 <LL_RCC_LSI_IsReady>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1f1      	bne.n	80030aa <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80030c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030ce:	f023 0210 	bic.w	r2, r3, #16
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	69db      	ldr	r3, [r3, #28]
 80030d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030da:	4313      	orrs	r3, r2
 80030dc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030e0:	f7ff fc36 	bl	8002950 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030e4:	f7ff f836 	bl	8002154 <HAL_GetTick>
 80030e8:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80030ea:	e00c      	b.n	8003106 <HAL_RCC_OscConfig+0x3c2>
 80030ec:	20000000 	.word	0x20000000
 80030f0:	20000038 	.word	0x20000038
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030f4:	f7ff f82e 	bl	8002154 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b11      	cmp	r3, #17
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e197      	b.n	8003436 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8003106:	f7ff fc43 	bl	8002990 <LL_RCC_LSI_IsReady>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d0f1      	beq.n	80030f4 <HAL_RCC_OscConfig+0x3b0>
 8003110:	e013      	b.n	800313a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003112:	f7ff fc2d 	bl	8002970 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003116:	f7ff f81d 	bl	8002154 <HAL_GetTick>
 800311a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 800311c:	e008      	b.n	8003130 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800311e:	f7ff f819 	bl	8002154 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b11      	cmp	r3, #17
 800312a:	d901      	bls.n	8003130 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e182      	b.n	8003436 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8003130:	f7ff fc2e 	bl	8002990 <LL_RCC_LSI_IsReady>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1f1      	bne.n	800311e <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0304 	and.w	r3, r3, #4
 8003142:	2b00      	cmp	r3, #0
 8003144:	f000 80d8 	beq.w	80032f8 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003148:	f7ff fb44 	bl	80027d4 <LL_PWR_IsEnabledBkUpAccess>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d113      	bne.n	800317a <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003152:	f7ff fae7 	bl	8002724 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003156:	f7fe fffd 	bl	8002154 <HAL_GetTick>
 800315a:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800315c:	e008      	b.n	8003170 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800315e:	f7fe fff9 	bl	8002154 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e162      	b.n	8003436 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003170:	f7ff fb30 	bl	80027d4 <LL_PWR_IsEnabledBkUpAccess>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d0f1      	beq.n	800315e <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d07b      	beq.n	800327a <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	2b85      	cmp	r3, #133	@ 0x85
 8003188:	d003      	beq.n	8003192 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	2b05      	cmp	r3, #5
 8003190:	d109      	bne.n	80031a6 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003192:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800319a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800319e:	f043 0304 	orr.w	r3, r3, #4
 80031a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031a6:	f7fe ffd5 	bl	8002154 <HAL_GetTick>
 80031aa:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80031ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031b8:	f043 0301 	orr.w	r3, r3, #1
 80031bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80031c0:	e00a      	b.n	80031d8 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031c2:	f7fe ffc7 	bl	8002154 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d901      	bls.n	80031d8 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e12e      	b.n	8003436 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80031d8:	f7ff fba9 	bl	800292e <LL_RCC_LSE_IsReady>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d0ef      	beq.n	80031c2 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	2b81      	cmp	r3, #129	@ 0x81
 80031e8:	d003      	beq.n	80031f2 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	2b85      	cmp	r3, #133	@ 0x85
 80031f0:	d121      	bne.n	8003236 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f2:	f7fe ffaf 	bl	8002154 <HAL_GetTick>
 80031f6:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80031f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003200:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003204:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003208:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800320c:	e00a      	b.n	8003224 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800320e:	f7fe ffa1 	bl	8002154 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	f241 3288 	movw	r2, #5000	@ 0x1388
 800321c:	4293      	cmp	r3, r2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e108      	b.n	8003436 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003224:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003228:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800322c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003230:	2b00      	cmp	r3, #0
 8003232:	d0ec      	beq.n	800320e <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003234:	e060      	b.n	80032f8 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003236:	f7fe ff8d 	bl	8002154 <HAL_GetTick>
 800323a:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800323c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003240:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003244:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003248:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800324c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003250:	e00a      	b.n	8003268 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003252:	f7fe ff7f 	bl	8002154 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003260:	4293      	cmp	r3, r2
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e0e6      	b.n	8003436 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003268:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800326c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003270:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1ec      	bne.n	8003252 <HAL_RCC_OscConfig+0x50e>
 8003278:	e03e      	b.n	80032f8 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800327a:	f7fe ff6b 	bl	8002154 <HAL_GetTick>
 800327e:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003280:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003284:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003288:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800328c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003290:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003294:	e00a      	b.n	80032ac <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003296:	f7fe ff5d 	bl	8002154 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d901      	bls.n	80032ac <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e0c4      	b.n	8003436 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80032ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1ec      	bne.n	8003296 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032bc:	f7fe ff4a 	bl	8002154 <HAL_GetTick>
 80032c0:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80032c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80032ce:	f023 0301 	bic.w	r3, r3, #1
 80032d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80032d6:	e00a      	b.n	80032ee <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d8:	f7fe ff3c 	bl	8002154 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e0a3      	b.n	8003436 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 80032ee:	f7ff fb1e 	bl	800292e <LL_RCC_LSE_IsReady>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1ef      	bne.n	80032d8 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 8099 	beq.w	8003434 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	2b0c      	cmp	r3, #12
 8003306:	d06c      	beq.n	80033e2 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800330c:	2b02      	cmp	r3, #2
 800330e:	d14b      	bne.n	80033a8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003310:	f7ff fc74 	bl	8002bfc <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003314:	f7fe ff1e 	bl	8002154 <HAL_GetTick>
 8003318:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800331c:	f7fe ff1a 	bl	8002154 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b0a      	cmp	r3, #10
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e083      	b.n	8003436 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800332e:	f7ff fc73 	bl	8002c18 <LL_RCC_PLL_IsReady>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1f1      	bne.n	800331c <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003338:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800333c:	68da      	ldr	r2, [r3, #12]
 800333e:	4b40      	ldr	r3, [pc, #256]	@ (8003440 <HAL_RCC_OscConfig+0x6fc>)
 8003340:	4013      	ands	r3, r2
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800334a:	4311      	orrs	r1, r2
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003350:	0212      	lsls	r2, r2, #8
 8003352:	4311      	orrs	r1, r2
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003358:	4311      	orrs	r1, r2
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800335e:	4311      	orrs	r1, r2
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003364:	430a      	orrs	r2, r1
 8003366:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800336a:	4313      	orrs	r3, r2
 800336c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800336e:	f7ff fc37 	bl	8002be0 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003372:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800337c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003380:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003382:	f7fe fee7 	bl	8002154 <HAL_GetTick>
 8003386:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8003388:	e008      	b.n	800339c <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800338a:	f7fe fee3 	bl	8002154 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b0a      	cmp	r3, #10
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e04c      	b.n	8003436 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 800339c:	f7ff fc3c 	bl	8002c18 <LL_RCC_PLL_IsReady>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d0f1      	beq.n	800338a <HAL_RCC_OscConfig+0x646>
 80033a6:	e045      	b.n	8003434 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033a8:	f7ff fc28 	bl	8002bfc <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ac:	f7fe fed2 	bl	8002154 <HAL_GetTick>
 80033b0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033b4:	f7fe fece 	bl	8002154 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b0a      	cmp	r3, #10
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e037      	b.n	8003436 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80033c6:	f7ff fc27 	bl	8002c18 <LL_RCC_PLL_IsReady>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1f1      	bne.n	80033b4 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80033d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033d4:	68da      	ldr	r2, [r3, #12]
 80033d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80033da:	4b1a      	ldr	r3, [pc, #104]	@ (8003444 <HAL_RCC_OscConfig+0x700>)
 80033dc:	4013      	ands	r3, r2
 80033de:	60cb      	str	r3, [r1, #12]
 80033e0:	e028      	b.n	8003434 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d101      	bne.n	80033ee <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e023      	b.n	8003436 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	f003 0203 	and.w	r2, r3, #3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003400:	429a      	cmp	r2, r3
 8003402:	d115      	bne.n	8003430 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800340e:	429a      	cmp	r2, r3
 8003410:	d10e      	bne.n	8003430 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800341c:	021b      	lsls	r3, r3, #8
 800341e:	429a      	cmp	r2, r3
 8003420:	d106      	bne.n	8003430 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800342c:	429a      	cmp	r2, r3
 800342e:	d001      	beq.n	8003434 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e000      	b.n	8003436 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3720      	adds	r7, #32
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	11c1808c 	.word	0x11c1808c
 8003444:	eefefffc 	.word	0xeefefffc

08003448 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d101      	bne.n	800345c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e12c      	b.n	80036b6 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800345c:	4b98      	ldr	r3, [pc, #608]	@ (80036c0 <HAL_RCC_ClockConfig+0x278>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0307 	and.w	r3, r3, #7
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	429a      	cmp	r2, r3
 8003468:	d91b      	bls.n	80034a2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800346a:	4b95      	ldr	r3, [pc, #596]	@ (80036c0 <HAL_RCC_ClockConfig+0x278>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f023 0207 	bic.w	r2, r3, #7
 8003472:	4993      	ldr	r1, [pc, #588]	@ (80036c0 <HAL_RCC_ClockConfig+0x278>)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	4313      	orrs	r3, r2
 8003478:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800347a:	f7fe fe6b 	bl	8002154 <HAL_GetTick>
 800347e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003480:	e008      	b.n	8003494 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003482:	f7fe fe67 	bl	8002154 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	2b02      	cmp	r3, #2
 800348e:	d901      	bls.n	8003494 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e110      	b.n	80036b6 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003494:	4b8a      	ldr	r3, [pc, #552]	@ (80036c0 <HAL_RCC_ClockConfig+0x278>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0307 	and.w	r3, r3, #7
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d1ef      	bne.n	8003482 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d016      	beq.n	80034dc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7ff fb02 	bl	8002abc <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80034b8:	f7fe fe4c 	bl	8002154 <HAL_GetTick>
 80034bc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80034c0:	f7fe fe48 	bl	8002154 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e0f1      	b.n	80036b6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80034d2:	f7ff fbdf 	bl	8002c94 <LL_RCC_IsActiveFlag_HPRE>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0f1      	beq.n	80034c0 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0320 	and.w	r3, r3, #32
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d016      	beq.n	8003516 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff faf8 	bl	8002ae2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80034f2:	f7fe fe2f 	bl	8002154 <HAL_GetTick>
 80034f6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80034f8:	e008      	b.n	800350c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80034fa:	f7fe fe2b 	bl	8002154 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d901      	bls.n	800350c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e0d4      	b.n	80036b6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800350c:	f7ff fbd3 	bl	8002cb6 <LL_RCC_IsActiveFlag_C2HPRE>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d0f1      	beq.n	80034fa <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800351e:	2b00      	cmp	r3, #0
 8003520:	d016      	beq.n	8003550 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	4618      	mov	r0, r3
 8003528:	f7ff faf0 	bl	8002b0c <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800352c:	f7fe fe12 	bl	8002154 <HAL_GetTick>
 8003530:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003532:	e008      	b.n	8003546 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003534:	f7fe fe0e 	bl	8002154 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e0b7      	b.n	80036b6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003546:	f7ff fbc8 	bl	8002cda <LL_RCC_IsActiveFlag_SHDHPRE>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d0f1      	beq.n	8003534 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b00      	cmp	r3, #0
 800355a:	d016      	beq.n	800358a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	4618      	mov	r0, r3
 8003562:	f7ff fae9 	bl	8002b38 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003566:	f7fe fdf5 	bl	8002154 <HAL_GetTick>
 800356a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800356c:	e008      	b.n	8003580 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800356e:	f7fe fdf1 	bl	8002154 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d901      	bls.n	8003580 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e09a      	b.n	80036b6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003580:	f7ff fbbd 	bl	8002cfe <LL_RCC_IsActiveFlag_PPRE1>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d0f1      	beq.n	800356e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	2b00      	cmp	r3, #0
 8003594:	d017      	beq.n	80035c6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff fade 	bl	8002b5e <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80035a2:	f7fe fdd7 	bl	8002154 <HAL_GetTick>
 80035a6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80035a8:	e008      	b.n	80035bc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80035aa:	f7fe fdd3 	bl	8002154 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e07c      	b.n	80036b6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80035bc:	f7ff fbb0 	bl	8002d20 <LL_RCC_IsActiveFlag_PPRE2>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0f1      	beq.n	80035aa <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d043      	beq.n	800365a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d106      	bne.n	80035e8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80035da:	f7ff f956 	bl	800288a <LL_RCC_HSE_IsReady>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d11e      	bne.n	8003622 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e066      	b.n	80036b6 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	2b03      	cmp	r3, #3
 80035ee:	d106      	bne.n	80035fe <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80035f0:	f7ff fb12 	bl	8002c18 <LL_RCC_PLL_IsReady>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d113      	bne.n	8003622 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e05b      	b.n	80036b6 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d106      	bne.n	8003614 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003606:	f7ff f9f0 	bl	80029ea <LL_RCC_MSI_IsReady>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d108      	bne.n	8003622 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e050      	b.n	80036b6 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003614:	f7ff f966 	bl	80028e4 <LL_RCC_HSI_IsReady>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e049      	b.n	80036b6 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	4618      	mov	r0, r3
 8003628:	f7ff fa2a 	bl	8002a80 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800362c:	f7fe fd92 	bl	8002154 <HAL_GetTick>
 8003630:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003632:	e00a      	b.n	800364a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003634:	f7fe fd8e 	bl	8002154 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003642:	4293      	cmp	r3, r2
 8003644:	d901      	bls.n	800364a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e035      	b.n	80036b6 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800364a:	f7ff fa2c 	bl	8002aa6 <LL_RCC_GetSysClkSource>
 800364e:	4602      	mov	r2, r0
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	429a      	cmp	r2, r3
 8003658:	d1ec      	bne.n	8003634 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800365a:	4b19      	ldr	r3, [pc, #100]	@ (80036c0 <HAL_RCC_ClockConfig+0x278>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0307 	and.w	r3, r3, #7
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	429a      	cmp	r2, r3
 8003666:	d21b      	bcs.n	80036a0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003668:	4b15      	ldr	r3, [pc, #84]	@ (80036c0 <HAL_RCC_ClockConfig+0x278>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f023 0207 	bic.w	r2, r3, #7
 8003670:	4913      	ldr	r1, [pc, #76]	@ (80036c0 <HAL_RCC_ClockConfig+0x278>)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	4313      	orrs	r3, r2
 8003676:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003678:	f7fe fd6c 	bl	8002154 <HAL_GetTick>
 800367c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800367e:	e008      	b.n	8003692 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003680:	f7fe fd68 	bl	8002154 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e011      	b.n	80036b6 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003692:	4b0b      	ldr	r3, [pc, #44]	@ (80036c0 <HAL_RCC_ClockConfig+0x278>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0307 	and.w	r3, r3, #7
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	429a      	cmp	r2, r3
 800369e:	d1ef      	bne.n	8003680 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80036a0:	f000 f8b4 	bl	800380c <HAL_RCC_GetHCLKFreq>
 80036a4:	4603      	mov	r3, r0
 80036a6:	4a07      	ldr	r2, [pc, #28]	@ (80036c4 <HAL_RCC_ClockConfig+0x27c>)
 80036a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80036aa:	4b07      	ldr	r3, [pc, #28]	@ (80036c8 <HAL_RCC_ClockConfig+0x280>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fe fd04 	bl	80020bc <HAL_InitTick>
 80036b4:	4603      	mov	r3, r0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	58004000 	.word	0x58004000
 80036c4:	20000000 	.word	0x20000000
 80036c8:	20000038 	.word	0x20000038

080036cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036cc:	b590      	push	{r4, r7, lr}
 80036ce:	b087      	sub	sp, #28
 80036d0:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80036d2:	2300      	movs	r3, #0
 80036d4:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80036d6:	2300      	movs	r3, #0
 80036d8:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036da:	f7ff f9e4 	bl	8002aa6 <LL_RCC_GetSysClkSource>
 80036de:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036e0:	f7ff facd 	bl	8002c7e <LL_RCC_PLL_GetMainSource>
 80036e4:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d005      	beq.n	80036f8 <HAL_RCC_GetSysClockFreq+0x2c>
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	2b0c      	cmp	r3, #12
 80036f0:	d139      	bne.n	8003766 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d136      	bne.n	8003766 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80036f8:	f7ff f987 	bl	8002a0a <LL_RCC_MSI_IsEnabledRangeSelect>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d115      	bne.n	800372e <HAL_RCC_GetSysClockFreq+0x62>
 8003702:	f7ff f982 	bl	8002a0a <LL_RCC_MSI_IsEnabledRangeSelect>
 8003706:	4603      	mov	r3, r0
 8003708:	2b01      	cmp	r3, #1
 800370a:	d106      	bne.n	800371a <HAL_RCC_GetSysClockFreq+0x4e>
 800370c:	f7ff f98d 	bl	8002a2a <LL_RCC_MSI_GetRange>
 8003710:	4603      	mov	r3, r0
 8003712:	0a1b      	lsrs	r3, r3, #8
 8003714:	f003 030f 	and.w	r3, r3, #15
 8003718:	e005      	b.n	8003726 <HAL_RCC_GetSysClockFreq+0x5a>
 800371a:	f7ff f991 	bl	8002a40 <LL_RCC_MSI_GetRangeAfterStandby>
 800371e:	4603      	mov	r3, r0
 8003720:	0a1b      	lsrs	r3, r3, #8
 8003722:	f003 030f 	and.w	r3, r3, #15
 8003726:	4a36      	ldr	r2, [pc, #216]	@ (8003800 <HAL_RCC_GetSysClockFreq+0x134>)
 8003728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800372c:	e014      	b.n	8003758 <HAL_RCC_GetSysClockFreq+0x8c>
 800372e:	f7ff f96c 	bl	8002a0a <LL_RCC_MSI_IsEnabledRangeSelect>
 8003732:	4603      	mov	r3, r0
 8003734:	2b01      	cmp	r3, #1
 8003736:	d106      	bne.n	8003746 <HAL_RCC_GetSysClockFreq+0x7a>
 8003738:	f7ff f977 	bl	8002a2a <LL_RCC_MSI_GetRange>
 800373c:	4603      	mov	r3, r0
 800373e:	091b      	lsrs	r3, r3, #4
 8003740:	f003 030f 	and.w	r3, r3, #15
 8003744:	e005      	b.n	8003752 <HAL_RCC_GetSysClockFreq+0x86>
 8003746:	f7ff f97b 	bl	8002a40 <LL_RCC_MSI_GetRangeAfterStandby>
 800374a:	4603      	mov	r3, r0
 800374c:	091b      	lsrs	r3, r3, #4
 800374e:	f003 030f 	and.w	r3, r3, #15
 8003752:	4a2b      	ldr	r2, [pc, #172]	@ (8003800 <HAL_RCC_GetSysClockFreq+0x134>)
 8003754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003758:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d115      	bne.n	800378c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003764:	e012      	b.n	800378c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	2b04      	cmp	r3, #4
 800376a:	d102      	bne.n	8003772 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800376c:	4b25      	ldr	r3, [pc, #148]	@ (8003804 <HAL_RCC_GetSysClockFreq+0x138>)
 800376e:	617b      	str	r3, [r7, #20]
 8003770:	e00c      	b.n	800378c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	2b08      	cmp	r3, #8
 8003776:	d109      	bne.n	800378c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003778:	f7ff f85a 	bl	8002830 <LL_RCC_HSE_IsEnabledDiv2>
 800377c:	4603      	mov	r3, r0
 800377e:	2b01      	cmp	r3, #1
 8003780:	d102      	bne.n	8003788 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003782:	4b20      	ldr	r3, [pc, #128]	@ (8003804 <HAL_RCC_GetSysClockFreq+0x138>)
 8003784:	617b      	str	r3, [r7, #20]
 8003786:	e001      	b.n	800378c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003788:	4b1f      	ldr	r3, [pc, #124]	@ (8003808 <HAL_RCC_GetSysClockFreq+0x13c>)
 800378a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800378c:	f7ff f98b 	bl	8002aa6 <LL_RCC_GetSysClkSource>
 8003790:	4603      	mov	r3, r0
 8003792:	2b0c      	cmp	r3, #12
 8003794:	d12f      	bne.n	80037f6 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003796:	f7ff fa72 	bl	8002c7e <LL_RCC_PLL_GetMainSource>
 800379a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d003      	beq.n	80037aa <HAL_RCC_GetSysClockFreq+0xde>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2b03      	cmp	r3, #3
 80037a6:	d003      	beq.n	80037b0 <HAL_RCC_GetSysClockFreq+0xe4>
 80037a8:	e00d      	b.n	80037c6 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80037aa:	4b16      	ldr	r3, [pc, #88]	@ (8003804 <HAL_RCC_GetSysClockFreq+0x138>)
 80037ac:	60fb      	str	r3, [r7, #12]
        break;
 80037ae:	e00d      	b.n	80037cc <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80037b0:	f7ff f83e 	bl	8002830 <LL_RCC_HSE_IsEnabledDiv2>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d102      	bne.n	80037c0 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80037ba:	4b12      	ldr	r3, [pc, #72]	@ (8003804 <HAL_RCC_GetSysClockFreq+0x138>)
 80037bc:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80037be:	e005      	b.n	80037cc <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80037c0:	4b11      	ldr	r3, [pc, #68]	@ (8003808 <HAL_RCC_GetSysClockFreq+0x13c>)
 80037c2:	60fb      	str	r3, [r7, #12]
        break;
 80037c4:	e002      	b.n	80037cc <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	60fb      	str	r3, [r7, #12]
        break;
 80037ca:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80037cc:	f7ff fa35 	bl	8002c3a <LL_RCC_PLL_GetN>
 80037d0:	4602      	mov	r2, r0
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	fb03 f402 	mul.w	r4, r3, r2
 80037d8:	f7ff fa46 	bl	8002c68 <LL_RCC_PLL_GetDivider>
 80037dc:	4603      	mov	r3, r0
 80037de:	091b      	lsrs	r3, r3, #4
 80037e0:	3301      	adds	r3, #1
 80037e2:	fbb4 f4f3 	udiv	r4, r4, r3
 80037e6:	f7ff fa34 	bl	8002c52 <LL_RCC_PLL_GetR>
 80037ea:	4603      	mov	r3, r0
 80037ec:	0f5b      	lsrs	r3, r3, #29
 80037ee:	3301      	adds	r3, #1
 80037f0:	fbb4 f3f3 	udiv	r3, r4, r3
 80037f4:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80037f6:	697b      	ldr	r3, [r7, #20]
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	371c      	adds	r7, #28
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd90      	pop	{r4, r7, pc}
 8003800:	080077f4 	.word	0x080077f4
 8003804:	00f42400 	.word	0x00f42400
 8003808:	01e84800 	.word	0x01e84800

0800380c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800380c:	b598      	push	{r3, r4, r7, lr}
 800380e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003810:	f7ff ff5c 	bl	80036cc <HAL_RCC_GetSysClockFreq>
 8003814:	4604      	mov	r4, r0
 8003816:	f7ff f9b5 	bl	8002b84 <LL_RCC_GetAHBPrescaler>
 800381a:	4603      	mov	r3, r0
 800381c:	091b      	lsrs	r3, r3, #4
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	4a03      	ldr	r2, [pc, #12]	@ (8003830 <HAL_RCC_GetHCLKFreq+0x24>)
 8003824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003828:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800382c:	4618      	mov	r0, r3
 800382e:	bd98      	pop	{r3, r4, r7, pc}
 8003830:	08007794 	.word	0x08007794

08003834 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003834:	b598      	push	{r3, r4, r7, lr}
 8003836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003838:	f7ff ffe8 	bl	800380c <HAL_RCC_GetHCLKFreq>
 800383c:	4604      	mov	r4, r0
 800383e:	f7ff f9b9 	bl	8002bb4 <LL_RCC_GetAPB1Prescaler>
 8003842:	4603      	mov	r3, r0
 8003844:	0a1b      	lsrs	r3, r3, #8
 8003846:	4a03      	ldr	r2, [pc, #12]	@ (8003854 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800384c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003850:	4618      	mov	r0, r3
 8003852:	bd98      	pop	{r3, r4, r7, pc}
 8003854:	080077d4 	.word	0x080077d4

08003858 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003858:	b598      	push	{r3, r4, r7, lr}
 800385a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800385c:	f7ff ffd6 	bl	800380c <HAL_RCC_GetHCLKFreq>
 8003860:	4604      	mov	r4, r0
 8003862:	f7ff f9b2 	bl	8002bca <LL_RCC_GetAPB2Prescaler>
 8003866:	4603      	mov	r3, r0
 8003868:	0adb      	lsrs	r3, r3, #11
 800386a:	4a03      	ldr	r2, [pc, #12]	@ (8003878 <HAL_RCC_GetPCLK2Freq+0x20>)
 800386c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003870:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003874:	4618      	mov	r0, r3
 8003876:	bd98      	pop	{r3, r4, r7, pc}
 8003878:	080077d4 	.word	0x080077d4

0800387c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800387c:	b590      	push	{r4, r7, lr}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	091b      	lsrs	r3, r3, #4
 8003888:	f003 030f 	and.w	r3, r3, #15
 800388c:	4a10      	ldr	r2, [pc, #64]	@ (80038d0 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800388e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003892:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003894:	f7ff f981 	bl	8002b9a <LL_RCC_GetAHB3Prescaler>
 8003898:	4603      	mov	r3, r0
 800389a:	091b      	lsrs	r3, r3, #4
 800389c:	f003 030f 	and.w	r3, r3, #15
 80038a0:	4a0c      	ldr	r2, [pc, #48]	@ (80038d4 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80038a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ac:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	4a09      	ldr	r2, [pc, #36]	@ (80038d8 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80038b2:	fba2 2303 	umull	r2, r3, r2, r3
 80038b6:	0c9c      	lsrs	r4, r3, #18
 80038b8:	f7fe ff5e 	bl	8002778 <HAL_PWREx_GetVoltageRange>
 80038bc:	4603      	mov	r3, r0
 80038be:	4619      	mov	r1, r3
 80038c0:	4620      	mov	r0, r4
 80038c2:	f000 f80b 	bl	80038dc <RCC_SetFlashLatency>
 80038c6:	4603      	mov	r3, r0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3714      	adds	r7, #20
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd90      	pop	{r4, r7, pc}
 80038d0:	080077f4 	.word	0x080077f4
 80038d4:	08007794 	.word	0x08007794
 80038d8:	431bde83 	.word	0x431bde83

080038dc <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b08e      	sub	sp, #56	@ 0x38
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80038e6:	4a3a      	ldr	r2, [pc, #232]	@ (80039d0 <RCC_SetFlashLatency+0xf4>)
 80038e8:	f107 0320 	add.w	r3, r7, #32
 80038ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80038f0:	6018      	str	r0, [r3, #0]
 80038f2:	3304      	adds	r3, #4
 80038f4:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80038f6:	4a37      	ldr	r2, [pc, #220]	@ (80039d4 <RCC_SetFlashLatency+0xf8>)
 80038f8:	f107 0318 	add.w	r3, r7, #24
 80038fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003900:	6018      	str	r0, [r3, #0]
 8003902:	3304      	adds	r3, #4
 8003904:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8003906:	4a34      	ldr	r2, [pc, #208]	@ (80039d8 <RCC_SetFlashLatency+0xfc>)
 8003908:	f107 030c 	add.w	r3, r7, #12
 800390c:	ca07      	ldmia	r2, {r0, r1, r2}
 800390e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003912:	2300      	movs	r3, #0
 8003914:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800391c:	d11b      	bne.n	8003956 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800391e:	2300      	movs	r3, #0
 8003920:	633b      	str	r3, [r7, #48]	@ 0x30
 8003922:	e014      	b.n	800394e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	3338      	adds	r3, #56	@ 0x38
 800392a:	443b      	add	r3, r7
 800392c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003930:	461a      	mov	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4293      	cmp	r3, r2
 8003936:	d807      	bhi.n	8003948 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	3338      	adds	r3, #56	@ 0x38
 800393e:	443b      	add	r3, r7
 8003940:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003944:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003946:	e021      	b.n	800398c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800394a:	3301      	adds	r3, #1
 800394c:	633b      	str	r3, [r7, #48]	@ 0x30
 800394e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003950:	2b02      	cmp	r3, #2
 8003952:	d9e7      	bls.n	8003924 <RCC_SetFlashLatency+0x48>
 8003954:	e01a      	b.n	800398c <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003956:	2300      	movs	r3, #0
 8003958:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800395a:	e014      	b.n	8003986 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800395c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	3338      	adds	r3, #56	@ 0x38
 8003962:	443b      	add	r3, r7
 8003964:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003968:	461a      	mov	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4293      	cmp	r3, r2
 800396e:	d807      	bhi.n	8003980 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	3338      	adds	r3, #56	@ 0x38
 8003976:	443b      	add	r3, r7
 8003978:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800397c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800397e:	e005      	b.n	800398c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003982:	3301      	adds	r3, #1
 8003984:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003988:	2b02      	cmp	r3, #2
 800398a:	d9e7      	bls.n	800395c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800398c:	4b13      	ldr	r3, [pc, #76]	@ (80039dc <RCC_SetFlashLatency+0x100>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f023 0207 	bic.w	r2, r3, #7
 8003994:	4911      	ldr	r1, [pc, #68]	@ (80039dc <RCC_SetFlashLatency+0x100>)
 8003996:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003998:	4313      	orrs	r3, r2
 800399a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800399c:	f7fe fbda 	bl	8002154 <HAL_GetTick>
 80039a0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80039a2:	e008      	b.n	80039b6 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80039a4:	f7fe fbd6 	bl	8002154 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d901      	bls.n	80039b6 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e007      	b.n	80039c6 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80039b6:	4b09      	ldr	r3, [pc, #36]	@ (80039dc <RCC_SetFlashLatency+0x100>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0307 	and.w	r3, r3, #7
 80039be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d1ef      	bne.n	80039a4 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3738      	adds	r7, #56	@ 0x38
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	08007778 	.word	0x08007778
 80039d4:	08007780 	.word	0x08007780
 80039d8:	08007788 	.word	0x08007788
 80039dc:	58004000 	.word	0x58004000

080039e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e049      	b.n	8003a86 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d106      	bne.n	8003a0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f7fe f82a 	bl	8001a60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2202      	movs	r2, #2
 8003a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	3304      	adds	r3, #4
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	4610      	mov	r0, r2
 8003a20:	f000 f87a 	bl	8003b18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
	...

08003a90 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d001      	beq.n	8003aa8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e02e      	b.n	8003b06 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2202      	movs	r2, #2
 8003aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a16      	ldr	r2, [pc, #88]	@ (8003b10 <HAL_TIM_Base_Start+0x80>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d004      	beq.n	8003ac4 <HAL_TIM_Base_Start+0x34>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ac2:	d115      	bne.n	8003af0 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689a      	ldr	r2, [r3, #8]
 8003aca:	4b12      	ldr	r3, [pc, #72]	@ (8003b14 <HAL_TIM_Base_Start+0x84>)
 8003acc:	4013      	ands	r3, r2
 8003ace:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2b06      	cmp	r3, #6
 8003ad4:	d015      	beq.n	8003b02 <HAL_TIM_Base_Start+0x72>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003adc:	d011      	beq.n	8003b02 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f042 0201 	orr.w	r2, r2, #1
 8003aec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aee:	e008      	b.n	8003b02 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f042 0201 	orr.w	r2, r2, #1
 8003afe:	601a      	str	r2, [r3, #0]
 8003b00:	e000      	b.n	8003b04 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b02:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3714      	adds	r7, #20
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bc80      	pop	{r7}
 8003b0e:	4770      	bx	lr
 8003b10:	40012c00 	.word	0x40012c00
 8003b14:	00010007 	.word	0x00010007

08003b18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a29      	ldr	r2, [pc, #164]	@ (8003bd0 <TIM_Base_SetConfig+0xb8>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d003      	beq.n	8003b38 <TIM_Base_SetConfig+0x20>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b36:	d108      	bne.n	8003b4a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a20      	ldr	r2, [pc, #128]	@ (8003bd0 <TIM_Base_SetConfig+0xb8>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d00b      	beq.n	8003b6a <TIM_Base_SetConfig+0x52>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b58:	d007      	beq.n	8003b6a <TIM_Base_SetConfig+0x52>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a1d      	ldr	r2, [pc, #116]	@ (8003bd4 <TIM_Base_SetConfig+0xbc>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d003      	beq.n	8003b6a <TIM_Base_SetConfig+0x52>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a1c      	ldr	r2, [pc, #112]	@ (8003bd8 <TIM_Base_SetConfig+0xc0>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d108      	bne.n	8003b7c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	689a      	ldr	r2, [r3, #8]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a0b      	ldr	r2, [pc, #44]	@ (8003bd0 <TIM_Base_SetConfig+0xb8>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d007      	beq.n	8003bb8 <TIM_Base_SetConfig+0xa0>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a0a      	ldr	r2, [pc, #40]	@ (8003bd4 <TIM_Base_SetConfig+0xbc>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d003      	beq.n	8003bb8 <TIM_Base_SetConfig+0xa0>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a09      	ldr	r2, [pc, #36]	@ (8003bd8 <TIM_Base_SetConfig+0xc0>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d103      	bne.n	8003bc0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	691a      	ldr	r2, [r3, #16]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	615a      	str	r2, [r3, #20]
}
 8003bc6:	bf00      	nop
 8003bc8:	3714      	adds	r7, #20
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bc80      	pop	{r7}
 8003bce:	4770      	bx	lr
 8003bd0:	40012c00 	.word	0x40012c00
 8003bd4:	40014400 	.word	0x40014400
 8003bd8:	40014800 	.word	0x40014800

08003bdc <LL_RCC_GetUSARTClockSource>:
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8003be4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003be8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	401a      	ands	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	041b      	lsls	r3, r3, #16
 8003bf4:	4313      	orrs	r3, r2
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bc80      	pop	{r7}
 8003bfe:	4770      	bx	lr

08003c00 <LL_RCC_GetLPUARTClockSource>:
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003c08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c0c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4013      	ands	r3, r2
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bc80      	pop	{r7}
 8003c1c:	4770      	bx	lr

08003c1e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b082      	sub	sp, #8
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d101      	bne.n	8003c30 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e042      	b.n	8003cb6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d106      	bne.n	8003c48 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f83b 	bl	8003cbe <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2224      	movs	r2, #36	@ 0x24
 8003c4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f022 0201 	bic.w	r2, r2, #1
 8003c5e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 f8bb 	bl	8003ddc <UART_SetConfig>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d101      	bne.n	8003c70 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e022      	b.n	8003cb6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d002      	beq.n	8003c7e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 fb23 	bl	80042c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c8c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c9c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f042 0201 	orr.w	r2, r2, #1
 8003cac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 fba9 	bl	8004406 <UART_CheckIdleState>
 8003cb4:	4603      	mov	r3, r0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3708      	adds	r7, #8
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b083      	sub	sp, #12
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8003cc6:	bf00      	nop
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bc80      	pop	{r7}
 8003cce:	4770      	bx	lr

08003cd0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b08a      	sub	sp, #40	@ 0x28
 8003cd4:	af02      	add	r7, sp, #8
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	603b      	str	r3, [r7, #0]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ce6:	2b20      	cmp	r3, #32
 8003ce8:	d173      	bne.n	8003dd2 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d002      	beq.n	8003cf6 <HAL_UART_Transmit+0x26>
 8003cf0:	88fb      	ldrh	r3, [r7, #6]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e06c      	b.n	8003dd4 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2221      	movs	r2, #33	@ 0x21
 8003d06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d0a:	f7fe fa23 	bl	8002154 <HAL_GetTick>
 8003d0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	88fa      	ldrh	r2, [r7, #6]
 8003d14:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	88fa      	ldrh	r2, [r7, #6]
 8003d1c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d28:	d108      	bne.n	8003d3c <HAL_UART_Transmit+0x6c>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d104      	bne.n	8003d3c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003d32:	2300      	movs	r3, #0
 8003d34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	61bb      	str	r3, [r7, #24]
 8003d3a:	e003      	b.n	8003d44 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d40:	2300      	movs	r3, #0
 8003d42:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d44:	e02c      	b.n	8003da0 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	9300      	str	r3, [sp, #0]
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	2180      	movs	r1, #128	@ 0x80
 8003d50:	68f8      	ldr	r0, [r7, #12]
 8003d52:	f000 fba6 	bl	80044a2 <UART_WaitOnFlagUntilTimeout>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d001      	beq.n	8003d60 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e039      	b.n	8003dd4 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10b      	bne.n	8003d7e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	881b      	ldrh	r3, [r3, #0]
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d74:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	3302      	adds	r3, #2
 8003d7a:	61bb      	str	r3, [r7, #24]
 8003d7c:	e007      	b.n	8003d8e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	781a      	ldrb	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	3b01      	subs	r3, #1
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1cc      	bne.n	8003d46 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	9300      	str	r3, [sp, #0]
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	2200      	movs	r2, #0
 8003db4:	2140      	movs	r1, #64	@ 0x40
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f000 fb73 	bl	80044a2 <UART_WaitOnFlagUntilTimeout>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e006      	b.n	8003dd4 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	e000      	b.n	8003dd4 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8003dd2:	2302      	movs	r3, #2
  }
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3720      	adds	r7, #32
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ddc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003de0:	b08c      	sub	sp, #48	@ 0x30
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003de6:	2300      	movs	r3, #0
 8003de8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	689a      	ldr	r2, [r3, #8]
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	431a      	orrs	r2, r3
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	69db      	ldr	r3, [r3, #28]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	4b94      	ldr	r3, [pc, #592]	@ (800405c <UART_SetConfig+0x280>)
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	6812      	ldr	r2, [r2, #0]
 8003e12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e14:	430b      	orrs	r3, r1
 8003e16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	68da      	ldr	r2, [r3, #12]
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a89      	ldr	r2, [pc, #548]	@ (8004060 <UART_SetConfig+0x284>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d004      	beq.n	8003e48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e44:	4313      	orrs	r3, r2
 8003e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003e52:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	6812      	ldr	r2, [r2, #0]
 8003e5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e5c:	430b      	orrs	r3, r1
 8003e5e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e66:	f023 010f 	bic.w	r1, r3, #15
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	430a      	orrs	r2, r1
 8003e74:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a7a      	ldr	r2, [pc, #488]	@ (8004064 <UART_SetConfig+0x288>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d127      	bne.n	8003ed0 <UART_SetConfig+0xf4>
 8003e80:	2003      	movs	r0, #3
 8003e82:	f7ff feab 	bl	8003bdc <LL_RCC_GetUSARTClockSource>
 8003e86:	4603      	mov	r3, r0
 8003e88:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8003e8c:	2b03      	cmp	r3, #3
 8003e8e:	d81b      	bhi.n	8003ec8 <UART_SetConfig+0xec>
 8003e90:	a201      	add	r2, pc, #4	@ (adr r2, 8003e98 <UART_SetConfig+0xbc>)
 8003e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e96:	bf00      	nop
 8003e98:	08003ea9 	.word	0x08003ea9
 8003e9c:	08003eb9 	.word	0x08003eb9
 8003ea0:	08003eb1 	.word	0x08003eb1
 8003ea4:	08003ec1 	.word	0x08003ec1
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003eae:	e080      	b.n	8003fb2 <UART_SetConfig+0x1d6>
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003eb6:	e07c      	b.n	8003fb2 <UART_SetConfig+0x1d6>
 8003eb8:	2304      	movs	r3, #4
 8003eba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ebe:	e078      	b.n	8003fb2 <UART_SetConfig+0x1d6>
 8003ec0:	2308      	movs	r3, #8
 8003ec2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ec6:	e074      	b.n	8003fb2 <UART_SetConfig+0x1d6>
 8003ec8:	2310      	movs	r3, #16
 8003eca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ece:	e070      	b.n	8003fb2 <UART_SetConfig+0x1d6>
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a64      	ldr	r2, [pc, #400]	@ (8004068 <UART_SetConfig+0x28c>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d138      	bne.n	8003f4c <UART_SetConfig+0x170>
 8003eda:	200c      	movs	r0, #12
 8003edc:	f7ff fe7e 	bl	8003bdc <LL_RCC_GetUSARTClockSource>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8003ee6:	2b0c      	cmp	r3, #12
 8003ee8:	d82c      	bhi.n	8003f44 <UART_SetConfig+0x168>
 8003eea:	a201      	add	r2, pc, #4	@ (adr r2, 8003ef0 <UART_SetConfig+0x114>)
 8003eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef0:	08003f25 	.word	0x08003f25
 8003ef4:	08003f45 	.word	0x08003f45
 8003ef8:	08003f45 	.word	0x08003f45
 8003efc:	08003f45 	.word	0x08003f45
 8003f00:	08003f35 	.word	0x08003f35
 8003f04:	08003f45 	.word	0x08003f45
 8003f08:	08003f45 	.word	0x08003f45
 8003f0c:	08003f45 	.word	0x08003f45
 8003f10:	08003f2d 	.word	0x08003f2d
 8003f14:	08003f45 	.word	0x08003f45
 8003f18:	08003f45 	.word	0x08003f45
 8003f1c:	08003f45 	.word	0x08003f45
 8003f20:	08003f3d 	.word	0x08003f3d
 8003f24:	2300      	movs	r3, #0
 8003f26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f2a:	e042      	b.n	8003fb2 <UART_SetConfig+0x1d6>
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f32:	e03e      	b.n	8003fb2 <UART_SetConfig+0x1d6>
 8003f34:	2304      	movs	r3, #4
 8003f36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f3a:	e03a      	b.n	8003fb2 <UART_SetConfig+0x1d6>
 8003f3c:	2308      	movs	r3, #8
 8003f3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f42:	e036      	b.n	8003fb2 <UART_SetConfig+0x1d6>
 8003f44:	2310      	movs	r3, #16
 8003f46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f4a:	e032      	b.n	8003fb2 <UART_SetConfig+0x1d6>
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a43      	ldr	r2, [pc, #268]	@ (8004060 <UART_SetConfig+0x284>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d12a      	bne.n	8003fac <UART_SetConfig+0x1d0>
 8003f56:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8003f5a:	f7ff fe51 	bl	8003c00 <LL_RCC_GetLPUARTClockSource>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f64:	d01a      	beq.n	8003f9c <UART_SetConfig+0x1c0>
 8003f66:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f6a:	d81b      	bhi.n	8003fa4 <UART_SetConfig+0x1c8>
 8003f6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f70:	d00c      	beq.n	8003f8c <UART_SetConfig+0x1b0>
 8003f72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f76:	d815      	bhi.n	8003fa4 <UART_SetConfig+0x1c8>
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d003      	beq.n	8003f84 <UART_SetConfig+0x1a8>
 8003f7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f80:	d008      	beq.n	8003f94 <UART_SetConfig+0x1b8>
 8003f82:	e00f      	b.n	8003fa4 <UART_SetConfig+0x1c8>
 8003f84:	2300      	movs	r3, #0
 8003f86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f8a:	e012      	b.n	8003fb2 <UART_SetConfig+0x1d6>
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f92:	e00e      	b.n	8003fb2 <UART_SetConfig+0x1d6>
 8003f94:	2304      	movs	r3, #4
 8003f96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f9a:	e00a      	b.n	8003fb2 <UART_SetConfig+0x1d6>
 8003f9c:	2308      	movs	r3, #8
 8003f9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fa2:	e006      	b.n	8003fb2 <UART_SetConfig+0x1d6>
 8003fa4:	2310      	movs	r3, #16
 8003fa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003faa:	e002      	b.n	8003fb2 <UART_SetConfig+0x1d6>
 8003fac:	2310      	movs	r3, #16
 8003fae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a2a      	ldr	r2, [pc, #168]	@ (8004060 <UART_SetConfig+0x284>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	f040 80a4 	bne.w	8004106 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003fbe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003fc2:	2b08      	cmp	r3, #8
 8003fc4:	d823      	bhi.n	800400e <UART_SetConfig+0x232>
 8003fc6:	a201      	add	r2, pc, #4	@ (adr r2, 8003fcc <UART_SetConfig+0x1f0>)
 8003fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fcc:	08003ff1 	.word	0x08003ff1
 8003fd0:	0800400f 	.word	0x0800400f
 8003fd4:	08003ff9 	.word	0x08003ff9
 8003fd8:	0800400f 	.word	0x0800400f
 8003fdc:	08003fff 	.word	0x08003fff
 8003fe0:	0800400f 	.word	0x0800400f
 8003fe4:	0800400f 	.word	0x0800400f
 8003fe8:	0800400f 	.word	0x0800400f
 8003fec:	08004007 	.word	0x08004007
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ff0:	f7ff fc20 	bl	8003834 <HAL_RCC_GetPCLK1Freq>
 8003ff4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ff6:	e010      	b.n	800401a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ff8:	4b1c      	ldr	r3, [pc, #112]	@ (800406c <UART_SetConfig+0x290>)
 8003ffa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003ffc:	e00d      	b.n	800401a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ffe:	f7ff fb65 	bl	80036cc <HAL_RCC_GetSysClockFreq>
 8004002:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004004:	e009      	b.n	800401a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004006:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800400a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800400c:	e005      	b.n	800401a <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800400e:	2300      	movs	r3, #0
 8004010:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004018:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800401a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800401c:	2b00      	cmp	r3, #0
 800401e:	f000 8137 	beq.w	8004290 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004026:	4a12      	ldr	r2, [pc, #72]	@ (8004070 <UART_SetConfig+0x294>)
 8004028:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800402c:	461a      	mov	r2, r3
 800402e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004030:	fbb3 f3f2 	udiv	r3, r3, r2
 8004034:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	685a      	ldr	r2, [r3, #4]
 800403a:	4613      	mov	r3, r2
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	4413      	add	r3, r2
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	429a      	cmp	r2, r3
 8004044:	d305      	bcc.n	8004052 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	429a      	cmp	r2, r3
 8004050:	d910      	bls.n	8004074 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004058:	e11a      	b.n	8004290 <UART_SetConfig+0x4b4>
 800405a:	bf00      	nop
 800405c:	cfff69f3 	.word	0xcfff69f3
 8004060:	40008000 	.word	0x40008000
 8004064:	40013800 	.word	0x40013800
 8004068:	40004400 	.word	0x40004400
 800406c:	00f42400 	.word	0x00f42400
 8004070:	08007854 	.word	0x08007854
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004076:	2200      	movs	r2, #0
 8004078:	60bb      	str	r3, [r7, #8]
 800407a:	60fa      	str	r2, [r7, #12]
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004080:	4a8e      	ldr	r2, [pc, #568]	@ (80042bc <UART_SetConfig+0x4e0>)
 8004082:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004086:	b29b      	uxth	r3, r3
 8004088:	2200      	movs	r2, #0
 800408a:	603b      	str	r3, [r7, #0]
 800408c:	607a      	str	r2, [r7, #4]
 800408e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004092:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004096:	f7fc fead 	bl	8000df4 <__aeabi_uldivmod>
 800409a:	4602      	mov	r2, r0
 800409c:	460b      	mov	r3, r1
 800409e:	4610      	mov	r0, r2
 80040a0:	4619      	mov	r1, r3
 80040a2:	f04f 0200 	mov.w	r2, #0
 80040a6:	f04f 0300 	mov.w	r3, #0
 80040aa:	020b      	lsls	r3, r1, #8
 80040ac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80040b0:	0202      	lsls	r2, r0, #8
 80040b2:	6979      	ldr	r1, [r7, #20]
 80040b4:	6849      	ldr	r1, [r1, #4]
 80040b6:	0849      	lsrs	r1, r1, #1
 80040b8:	2000      	movs	r0, #0
 80040ba:	460c      	mov	r4, r1
 80040bc:	4605      	mov	r5, r0
 80040be:	eb12 0804 	adds.w	r8, r2, r4
 80040c2:	eb43 0905 	adc.w	r9, r3, r5
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	469a      	mov	sl, r3
 80040ce:	4693      	mov	fp, r2
 80040d0:	4652      	mov	r2, sl
 80040d2:	465b      	mov	r3, fp
 80040d4:	4640      	mov	r0, r8
 80040d6:	4649      	mov	r1, r9
 80040d8:	f7fc fe8c 	bl	8000df4 <__aeabi_uldivmod>
 80040dc:	4602      	mov	r2, r0
 80040de:	460b      	mov	r3, r1
 80040e0:	4613      	mov	r3, r2
 80040e2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80040e4:	6a3b      	ldr	r3, [r7, #32]
 80040e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040ea:	d308      	bcc.n	80040fe <UART_SetConfig+0x322>
 80040ec:	6a3b      	ldr	r3, [r7, #32]
 80040ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040f2:	d204      	bcs.n	80040fe <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	6a3a      	ldr	r2, [r7, #32]
 80040fa:	60da      	str	r2, [r3, #12]
 80040fc:	e0c8      	b.n	8004290 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004104:	e0c4      	b.n	8004290 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	69db      	ldr	r3, [r3, #28]
 800410a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800410e:	d167      	bne.n	80041e0 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8004110:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004114:	2b08      	cmp	r3, #8
 8004116:	d828      	bhi.n	800416a <UART_SetConfig+0x38e>
 8004118:	a201      	add	r2, pc, #4	@ (adr r2, 8004120 <UART_SetConfig+0x344>)
 800411a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800411e:	bf00      	nop
 8004120:	08004145 	.word	0x08004145
 8004124:	0800414d 	.word	0x0800414d
 8004128:	08004155 	.word	0x08004155
 800412c:	0800416b 	.word	0x0800416b
 8004130:	0800415b 	.word	0x0800415b
 8004134:	0800416b 	.word	0x0800416b
 8004138:	0800416b 	.word	0x0800416b
 800413c:	0800416b 	.word	0x0800416b
 8004140:	08004163 	.word	0x08004163
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004144:	f7ff fb76 	bl	8003834 <HAL_RCC_GetPCLK1Freq>
 8004148:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800414a:	e014      	b.n	8004176 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800414c:	f7ff fb84 	bl	8003858 <HAL_RCC_GetPCLK2Freq>
 8004150:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004152:	e010      	b.n	8004176 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004154:	4b5a      	ldr	r3, [pc, #360]	@ (80042c0 <UART_SetConfig+0x4e4>)
 8004156:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004158:	e00d      	b.n	8004176 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800415a:	f7ff fab7 	bl	80036cc <HAL_RCC_GetSysClockFreq>
 800415e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004160:	e009      	b.n	8004176 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004162:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004166:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004168:	e005      	b.n	8004176 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800416a:	2300      	movs	r3, #0
 800416c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004174:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004178:	2b00      	cmp	r3, #0
 800417a:	f000 8089 	beq.w	8004290 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004182:	4a4e      	ldr	r2, [pc, #312]	@ (80042bc <UART_SetConfig+0x4e0>)
 8004184:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004188:	461a      	mov	r2, r3
 800418a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004190:	005a      	lsls	r2, r3, #1
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	085b      	lsrs	r3, r3, #1
 8004198:	441a      	add	r2, r3
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041a4:	6a3b      	ldr	r3, [r7, #32]
 80041a6:	2b0f      	cmp	r3, #15
 80041a8:	d916      	bls.n	80041d8 <UART_SetConfig+0x3fc>
 80041aa:	6a3b      	ldr	r3, [r7, #32]
 80041ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041b0:	d212      	bcs.n	80041d8 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041b2:	6a3b      	ldr	r3, [r7, #32]
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	f023 030f 	bic.w	r3, r3, #15
 80041ba:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041bc:	6a3b      	ldr	r3, [r7, #32]
 80041be:	085b      	lsrs	r3, r3, #1
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	f003 0307 	and.w	r3, r3, #7
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	8bfb      	ldrh	r3, [r7, #30]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	8bfa      	ldrh	r2, [r7, #30]
 80041d4:	60da      	str	r2, [r3, #12]
 80041d6:	e05b      	b.n	8004290 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80041de:	e057      	b.n	8004290 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041e0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80041e4:	2b08      	cmp	r3, #8
 80041e6:	d828      	bhi.n	800423a <UART_SetConfig+0x45e>
 80041e8:	a201      	add	r2, pc, #4	@ (adr r2, 80041f0 <UART_SetConfig+0x414>)
 80041ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ee:	bf00      	nop
 80041f0:	08004215 	.word	0x08004215
 80041f4:	0800421d 	.word	0x0800421d
 80041f8:	08004225 	.word	0x08004225
 80041fc:	0800423b 	.word	0x0800423b
 8004200:	0800422b 	.word	0x0800422b
 8004204:	0800423b 	.word	0x0800423b
 8004208:	0800423b 	.word	0x0800423b
 800420c:	0800423b 	.word	0x0800423b
 8004210:	08004233 	.word	0x08004233
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004214:	f7ff fb0e 	bl	8003834 <HAL_RCC_GetPCLK1Freq>
 8004218:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800421a:	e014      	b.n	8004246 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800421c:	f7ff fb1c 	bl	8003858 <HAL_RCC_GetPCLK2Freq>
 8004220:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004222:	e010      	b.n	8004246 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004224:	4b26      	ldr	r3, [pc, #152]	@ (80042c0 <UART_SetConfig+0x4e4>)
 8004226:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004228:	e00d      	b.n	8004246 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800422a:	f7ff fa4f 	bl	80036cc <HAL_RCC_GetSysClockFreq>
 800422e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004230:	e009      	b.n	8004246 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004232:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004236:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004238:	e005      	b.n	8004246 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800423a:	2300      	movs	r3, #0
 800423c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004244:	bf00      	nop
    }

    if (pclk != 0U)
 8004246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004248:	2b00      	cmp	r3, #0
 800424a:	d021      	beq.n	8004290 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004250:	4a1a      	ldr	r2, [pc, #104]	@ (80042bc <UART_SetConfig+0x4e0>)
 8004252:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004256:	461a      	mov	r2, r3
 8004258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425a:	fbb3 f2f2 	udiv	r2, r3, r2
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	085b      	lsrs	r3, r3, #1
 8004264:	441a      	add	r2, r3
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	fbb2 f3f3 	udiv	r3, r2, r3
 800426e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004270:	6a3b      	ldr	r3, [r7, #32]
 8004272:	2b0f      	cmp	r3, #15
 8004274:	d909      	bls.n	800428a <UART_SetConfig+0x4ae>
 8004276:	6a3b      	ldr	r3, [r7, #32]
 8004278:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800427c:	d205      	bcs.n	800428a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800427e:	6a3b      	ldr	r3, [r7, #32]
 8004280:	b29a      	uxth	r2, r3
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	60da      	str	r2, [r3, #12]
 8004288:	e002      	b.n	8004290 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	2201      	movs	r2, #1
 8004294:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	2201      	movs	r2, #1
 800429c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	2200      	movs	r2, #0
 80042a4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	2200      	movs	r2, #0
 80042aa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80042ac:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3730      	adds	r7, #48	@ 0x30
 80042b4:	46bd      	mov	sp, r7
 80042b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042ba:	bf00      	nop
 80042bc:	08007854 	.word	0x08007854
 80042c0:	00f42400 	.word	0x00f42400

080042c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042d0:	f003 0301 	and.w	r3, r3, #1
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00a      	beq.n	80042ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	430a      	orrs	r2, r1
 80042ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00a      	beq.n	8004310 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	430a      	orrs	r2, r1
 800430e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004314:	f003 0304 	and.w	r3, r3, #4
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00a      	beq.n	8004332 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	430a      	orrs	r2, r1
 8004330:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004336:	f003 0308 	and.w	r3, r3, #8
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00a      	beq.n	8004354 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	430a      	orrs	r2, r1
 8004352:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004358:	f003 0310 	and.w	r3, r3, #16
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00a      	beq.n	8004376 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	430a      	orrs	r2, r1
 8004374:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800437a:	f003 0320 	and.w	r3, r3, #32
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00a      	beq.n	8004398 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	430a      	orrs	r2, r1
 8004396:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800439c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d01a      	beq.n	80043da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	430a      	orrs	r2, r1
 80043b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043c2:	d10a      	bne.n	80043da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	430a      	orrs	r2, r1
 80043d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00a      	beq.n	80043fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	430a      	orrs	r2, r1
 80043fa:	605a      	str	r2, [r3, #4]
  }
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	bc80      	pop	{r7}
 8004404:	4770      	bx	lr

08004406 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b086      	sub	sp, #24
 800440a:	af02      	add	r7, sp, #8
 800440c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004416:	f7fd fe9d 	bl	8002154 <HAL_GetTick>
 800441a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0308 	and.w	r3, r3, #8
 8004426:	2b08      	cmp	r3, #8
 8004428:	d10e      	bne.n	8004448 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800442a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800442e:	9300      	str	r3, [sp, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 f832 	bl	80044a2 <UART_WaitOnFlagUntilTimeout>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d001      	beq.n	8004448 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e028      	b.n	800449a <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0304 	and.w	r3, r3, #4
 8004452:	2b04      	cmp	r3, #4
 8004454:	d10e      	bne.n	8004474 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004456:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800445a:	9300      	str	r3, [sp, #0]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 f81c 	bl	80044a2 <UART_WaitOnFlagUntilTimeout>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d001      	beq.n	8004474 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e012      	b.n	800449a <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2220      	movs	r2, #32
 8004478:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2220      	movs	r2, #32
 8004480:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b09c      	sub	sp, #112	@ 0x70
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	60f8      	str	r0, [r7, #12]
 80044aa:	60b9      	str	r1, [r7, #8]
 80044ac:	603b      	str	r3, [r7, #0]
 80044ae:	4613      	mov	r3, r2
 80044b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044b2:	e0a9      	b.n	8004608 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80044ba:	f000 80a5 	beq.w	8004608 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044be:	f7fd fe49 	bl	8002154 <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d302      	bcc.n	80044d4 <UART_WaitOnFlagUntilTimeout+0x32>
 80044ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d140      	bne.n	8004556 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044dc:	e853 3f00 	ldrex	r3, [r3]
 80044e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80044e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044e4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80044e8:	667b      	str	r3, [r7, #100]	@ 0x64
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	461a      	mov	r2, r3
 80044f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80044f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044f4:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80044f8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80044fa:	e841 2300 	strex	r3, r2, [r1]
 80044fe:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8004500:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1e6      	bne.n	80044d4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	3308      	adds	r3, #8
 800450c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004510:	e853 3f00 	ldrex	r3, [r3]
 8004514:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004518:	f023 0301 	bic.w	r3, r3, #1
 800451c:	663b      	str	r3, [r7, #96]	@ 0x60
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	3308      	adds	r3, #8
 8004524:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004526:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004528:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800452c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800452e:	e841 2300 	strex	r3, r2, [r1]
 8004532:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004534:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1e5      	bne.n	8004506 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2220      	movs	r2, #32
 800453e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2220      	movs	r2, #32
 8004546:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e069      	b.n	800462a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0304 	and.w	r3, r3, #4
 8004560:	2b00      	cmp	r3, #0
 8004562:	d051      	beq.n	8004608 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	69db      	ldr	r3, [r3, #28]
 800456a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800456e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004572:	d149      	bne.n	8004608 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800457c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004586:	e853 3f00 	ldrex	r3, [r3]
 800458a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800458c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800458e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004592:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	461a      	mov	r2, r3
 800459a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800459c:	637b      	str	r3, [r7, #52]	@ 0x34
 800459e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80045a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80045a4:	e841 2300 	strex	r3, r2, [r1]
 80045a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80045aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1e6      	bne.n	800457e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	3308      	adds	r3, #8
 80045b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	e853 3f00 	ldrex	r3, [r3]
 80045be:	613b      	str	r3, [r7, #16]
   return(result);
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	f023 0301 	bic.w	r3, r3, #1
 80045c6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	3308      	adds	r3, #8
 80045ce:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80045d0:	623a      	str	r2, [r7, #32]
 80045d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d4:	69f9      	ldr	r1, [r7, #28]
 80045d6:	6a3a      	ldr	r2, [r7, #32]
 80045d8:	e841 2300 	strex	r3, r2, [r1]
 80045dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1e5      	bne.n	80045b0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2220      	movs	r2, #32
 80045e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2220      	movs	r2, #32
 80045f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2220      	movs	r2, #32
 80045f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e010      	b.n	800462a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	69da      	ldr	r2, [r3, #28]
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	4013      	ands	r3, r2
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	429a      	cmp	r2, r3
 8004616:	bf0c      	ite	eq
 8004618:	2301      	moveq	r3, #1
 800461a:	2300      	movne	r3, #0
 800461c:	b2db      	uxtb	r3, r3
 800461e:	461a      	mov	r2, r3
 8004620:	79fb      	ldrb	r3, [r7, #7]
 8004622:	429a      	cmp	r2, r3
 8004624:	f43f af46 	beq.w	80044b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3770      	adds	r7, #112	@ 0x70
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
	...

08004634 <tanh>:
 8004634:	4a41      	ldr	r2, [pc, #260]	@ (800473c <tanh+0x108>)
 8004636:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800463a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800463e:	4293      	cmp	r3, r2
 8004640:	4606      	mov	r6, r0
 8004642:	460f      	mov	r7, r1
 8004644:	460c      	mov	r4, r1
 8004646:	d917      	bls.n	8004678 <tanh+0x44>
 8004648:	4b3d      	ldr	r3, [pc, #244]	@ (8004740 <tanh+0x10c>)
 800464a:	2900      	cmp	r1, #0
 800464c:	4632      	mov	r2, r6
 800464e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004652:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004656:	463b      	mov	r3, r7
 8004658:	db07      	blt.n	800466a <tanh+0x36>
 800465a:	f7fc f8cf 	bl	80007fc <__aeabi_ddiv>
 800465e:	4622      	mov	r2, r4
 8004660:	462b      	mov	r3, r5
 8004662:	f7fb fdeb 	bl	800023c <__adddf3>
 8004666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800466a:	f7fc f8c7 	bl	80007fc <__aeabi_ddiv>
 800466e:	4622      	mov	r2, r4
 8004670:	462b      	mov	r3, r5
 8004672:	f7fb fde1 	bl	8000238 <__aeabi_dsub>
 8004676:	e7f6      	b.n	8004666 <tanh+0x32>
 8004678:	4a32      	ldr	r2, [pc, #200]	@ (8004744 <tanh+0x110>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d856      	bhi.n	800472c <tanh+0xf8>
 800467e:	f1b3 5f72 	cmp.w	r3, #1015021568	@ 0x3c800000
 8004682:	d20b      	bcs.n	800469c <tanh+0x68>
 8004684:	460b      	mov	r3, r1
 8004686:	492e      	ldr	r1, [pc, #184]	@ (8004740 <tanh+0x10c>)
 8004688:	4602      	mov	r2, r0
 800468a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800468e:	f7fb fdd5 	bl	800023c <__adddf3>
 8004692:	4632      	mov	r2, r6
 8004694:	463b      	mov	r3, r7
 8004696:	f7fb ff87 	bl	80005a8 <__aeabi_dmul>
 800469a:	e7e4      	b.n	8004666 <tanh+0x32>
 800469c:	4a2a      	ldr	r2, [pc, #168]	@ (8004748 <tanh+0x114>)
 800469e:	4d2b      	ldr	r5, [pc, #172]	@ (800474c <tanh+0x118>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d91f      	bls.n	80046e4 <tanh+0xb0>
 80046a4:	f000 fa9c 	bl	8004be0 <fabs>
 80046a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80046ac:	f7fb ff7c 	bl	80005a8 <__aeabi_dmul>
 80046b0:	f000 f852 	bl	8004758 <expm1>
 80046b4:	460b      	mov	r3, r1
 80046b6:	4922      	ldr	r1, [pc, #136]	@ (8004740 <tanh+0x10c>)
 80046b8:	4602      	mov	r2, r0
 80046ba:	e9d1 6700 	ldrd	r6, r7, [r1]
 80046be:	e9d5 8900 	ldrd	r8, r9, [r5]
 80046c2:	e9d5 0100 	ldrd	r0, r1, [r5]
 80046c6:	f7fb fdb9 	bl	800023c <__adddf3>
 80046ca:	4602      	mov	r2, r0
 80046cc:	460b      	mov	r3, r1
 80046ce:	4640      	mov	r0, r8
 80046d0:	4649      	mov	r1, r9
 80046d2:	f7fc f893 	bl	80007fc <__aeabi_ddiv>
 80046d6:	4602      	mov	r2, r0
 80046d8:	460b      	mov	r3, r1
 80046da:	4630      	mov	r0, r6
 80046dc:	4639      	mov	r1, r7
 80046de:	f7fb fdab 	bl	8000238 <__aeabi_dsub>
 80046e2:	e01b      	b.n	800471c <tanh+0xe8>
 80046e4:	e9d5 6700 	ldrd	r6, r7, [r5]
 80046e8:	f000 fa7a 	bl	8004be0 <fabs>
 80046ec:	4602      	mov	r2, r0
 80046ee:	460b      	mov	r3, r1
 80046f0:	4630      	mov	r0, r6
 80046f2:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 80046f6:	f7fb ff57 	bl	80005a8 <__aeabi_dmul>
 80046fa:	f000 f82d 	bl	8004758 <expm1>
 80046fe:	4602      	mov	r2, r0
 8004700:	460b      	mov	r3, r1
 8004702:	4606      	mov	r6, r0
 8004704:	f101 4700 	add.w	r7, r1, #2147483648	@ 0x80000000
 8004708:	e9d5 0100 	ldrd	r0, r1, [r5]
 800470c:	f7fb fd96 	bl	800023c <__adddf3>
 8004710:	4602      	mov	r2, r0
 8004712:	460b      	mov	r3, r1
 8004714:	4630      	mov	r0, r6
 8004716:	4639      	mov	r1, r7
 8004718:	f7fc f870 	bl	80007fc <__aeabi_ddiv>
 800471c:	2c00      	cmp	r4, #0
 800471e:	bfbf      	itttt	lt
 8004720:	4602      	movlt	r2, r0
 8004722:	f101 4300 	addlt.w	r3, r1, #2147483648	@ 0x80000000
 8004726:	4610      	movlt	r0, r2
 8004728:	4619      	movlt	r1, r3
 800472a:	e79c      	b.n	8004666 <tanh+0x32>
 800472c:	4b04      	ldr	r3, [pc, #16]	@ (8004740 <tanh+0x10c>)
 800472e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004732:	4b07      	ldr	r3, [pc, #28]	@ (8004750 <tanh+0x11c>)
 8004734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004738:	e7d1      	b.n	80046de <tanh+0xaa>
 800473a:	bf00      	nop
 800473c:	7fefffff 	.word	0x7fefffff
 8004740:	20000050 	.word	0x20000050
 8004744:	4035ffff 	.word	0x4035ffff
 8004748:	3fefffff 	.word	0x3fefffff
 800474c:	20000048 	.word	0x20000048
 8004750:	20000040 	.word	0x20000040
 8004754:	00000000 	.word	0x00000000

08004758 <expm1>:
 8004758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800475c:	4dca      	ldr	r5, [pc, #808]	@ (8004a88 <expm1+0x330>)
 800475e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004762:	42ab      	cmp	r3, r5
 8004764:	b085      	sub	sp, #20
 8004766:	4682      	mov	sl, r0
 8004768:	468b      	mov	fp, r1
 800476a:	f001 4400 	and.w	r4, r1, #2147483648	@ 0x80000000
 800476e:	d936      	bls.n	80047de <expm1+0x86>
 8004770:	4dc6      	ldr	r5, [pc, #792]	@ (8004a8c <expm1+0x334>)
 8004772:	42ab      	cmp	r3, r5
 8004774:	d91d      	bls.n	80047b2 <expm1+0x5a>
 8004776:	4dc6      	ldr	r5, [pc, #792]	@ (8004a90 <expm1+0x338>)
 8004778:	42ab      	cmp	r3, r5
 800477a:	d90e      	bls.n	800479a <expm1+0x42>
 800477c:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8004780:	4302      	orrs	r2, r0
 8004782:	d004      	beq.n	800478e <expm1+0x36>
 8004784:	4602      	mov	r2, r0
 8004786:	460b      	mov	r3, r1
 8004788:	f7fb fd58 	bl	800023c <__adddf3>
 800478c:	e1ae      	b.n	8004aec <expm1+0x394>
 800478e:	bb0c      	cbnz	r4, 80047d4 <expm1+0x7c>
 8004790:	4650      	mov	r0, sl
 8004792:	4659      	mov	r1, fp
 8004794:	b005      	add	sp, #20
 8004796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800479a:	a3a3      	add	r3, pc, #652	@ (adr r3, 8004a28 <expm1+0x2d0>)
 800479c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a0:	f7fc f992 	bl	8000ac8 <__aeabi_dcmpgt>
 80047a4:	b128      	cbz	r0, 80047b2 <expm1+0x5a>
 80047a6:	2000      	movs	r0, #0
 80047a8:	b005      	add	sp, #20
 80047aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ae:	f000 ba12 	b.w	8004bd6 <__math_oflow>
 80047b2:	2c00      	cmp	r4, #0
 80047b4:	f000 80bf 	beq.w	8004936 <expm1+0x1de>
 80047b8:	a39d      	add	r3, pc, #628	@ (adr r3, 8004a30 <expm1+0x2d8>)
 80047ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047be:	4650      	mov	r0, sl
 80047c0:	4659      	mov	r1, fp
 80047c2:	f7fb fd3b 	bl	800023c <__adddf3>
 80047c6:	2200      	movs	r2, #0
 80047c8:	2300      	movs	r3, #0
 80047ca:	f7fc f95f 	bl	8000a8c <__aeabi_dcmplt>
 80047ce:	2800      	cmp	r0, #0
 80047d0:	f000 80dc 	beq.w	800498c <expm1+0x234>
 80047d4:	f8df b2bc 	ldr.w	fp, [pc, #700]	@ 8004a94 <expm1+0x33c>
 80047d8:	f04f 0a00 	mov.w	sl, #0
 80047dc:	e7d8      	b.n	8004790 <expm1+0x38>
 80047de:	4aae      	ldr	r2, [pc, #696]	@ (8004a98 <expm1+0x340>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	f240 80e9 	bls.w	80049b8 <expm1+0x260>
 80047e6:	4aad      	ldr	r2, [pc, #692]	@ (8004a9c <expm1+0x344>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	f200 80db 	bhi.w	80049a4 <expm1+0x24c>
 80047ee:	a392      	add	r3, pc, #584	@ (adr r3, 8004a38 <expm1+0x2e0>)
 80047f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f4:	2c00      	cmp	r4, #0
 80047f6:	f040 8093 	bne.w	8004920 <expm1+0x1c8>
 80047fa:	f7fb fd1d 	bl	8000238 <__aeabi_dsub>
 80047fe:	f20f 2940 	addw	r9, pc, #576	@ 0x240
 8004802:	e9d9 8900 	ldrd	r8, r9, [r9]
 8004806:	4606      	mov	r6, r0
 8004808:	460f      	mov	r7, r1
 800480a:	2401      	movs	r4, #1
 800480c:	4642      	mov	r2, r8
 800480e:	464b      	mov	r3, r9
 8004810:	4630      	mov	r0, r6
 8004812:	4639      	mov	r1, r7
 8004814:	f7fb fd10 	bl	8000238 <__aeabi_dsub>
 8004818:	4602      	mov	r2, r0
 800481a:	460b      	mov	r3, r1
 800481c:	4682      	mov	sl, r0
 800481e:	468b      	mov	fp, r1
 8004820:	4630      	mov	r0, r6
 8004822:	4639      	mov	r1, r7
 8004824:	f7fb fd08 	bl	8000238 <__aeabi_dsub>
 8004828:	4642      	mov	r2, r8
 800482a:	464b      	mov	r3, r9
 800482c:	f7fb fd04 	bl	8000238 <__aeabi_dsub>
 8004830:	e9cd 0100 	strd	r0, r1, [sp]
 8004834:	4b9a      	ldr	r3, [pc, #616]	@ (8004aa0 <expm1+0x348>)
 8004836:	2200      	movs	r2, #0
 8004838:	4650      	mov	r0, sl
 800483a:	4659      	mov	r1, fp
 800483c:	f7fb feb4 	bl	80005a8 <__aeabi_dmul>
 8004840:	4606      	mov	r6, r0
 8004842:	460f      	mov	r7, r1
 8004844:	4602      	mov	r2, r0
 8004846:	460b      	mov	r3, r1
 8004848:	4650      	mov	r0, sl
 800484a:	4659      	mov	r1, fp
 800484c:	f7fb feac 	bl	80005a8 <__aeabi_dmul>
 8004850:	a37d      	add	r3, pc, #500	@ (adr r3, 8004a48 <expm1+0x2f0>)
 8004852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004856:	4680      	mov	r8, r0
 8004858:	4689      	mov	r9, r1
 800485a:	f7fb fea5 	bl	80005a8 <__aeabi_dmul>
 800485e:	a37c      	add	r3, pc, #496	@ (adr r3, 8004a50 <expm1+0x2f8>)
 8004860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004864:	f7fb fcea 	bl	800023c <__adddf3>
 8004868:	4642      	mov	r2, r8
 800486a:	464b      	mov	r3, r9
 800486c:	f7fb fe9c 	bl	80005a8 <__aeabi_dmul>
 8004870:	a379      	add	r3, pc, #484	@ (adr r3, 8004a58 <expm1+0x300>)
 8004872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004876:	f7fb fcdf 	bl	8000238 <__aeabi_dsub>
 800487a:	4642      	mov	r2, r8
 800487c:	464b      	mov	r3, r9
 800487e:	f7fb fe93 	bl	80005a8 <__aeabi_dmul>
 8004882:	a377      	add	r3, pc, #476	@ (adr r3, 8004a60 <expm1+0x308>)
 8004884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004888:	f7fb fcd8 	bl	800023c <__adddf3>
 800488c:	4642      	mov	r2, r8
 800488e:	464b      	mov	r3, r9
 8004890:	f7fb fe8a 	bl	80005a8 <__aeabi_dmul>
 8004894:	a374      	add	r3, pc, #464	@ (adr r3, 8004a68 <expm1+0x310>)
 8004896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489a:	f7fb fccd 	bl	8000238 <__aeabi_dsub>
 800489e:	4642      	mov	r2, r8
 80048a0:	464b      	mov	r3, r9
 80048a2:	f7fb fe81 	bl	80005a8 <__aeabi_dmul>
 80048a6:	4b7f      	ldr	r3, [pc, #508]	@ (8004aa4 <expm1+0x34c>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	f7fb fcc7 	bl	800023c <__adddf3>
 80048ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80048b2:	4602      	mov	r2, r0
 80048b4:	460b      	mov	r3, r1
 80048b6:	4630      	mov	r0, r6
 80048b8:	4639      	mov	r1, r7
 80048ba:	f7fb fe75 	bl	80005a8 <__aeabi_dmul>
 80048be:	4602      	mov	r2, r0
 80048c0:	460b      	mov	r3, r1
 80048c2:	2000      	movs	r0, #0
 80048c4:	4978      	ldr	r1, [pc, #480]	@ (8004aa8 <expm1+0x350>)
 80048c6:	f7fb fcb7 	bl	8000238 <__aeabi_dsub>
 80048ca:	4602      	mov	r2, r0
 80048cc:	460b      	mov	r3, r1
 80048ce:	4606      	mov	r6, r0
 80048d0:	460f      	mov	r7, r1
 80048d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048d6:	f7fb fcaf 	bl	8000238 <__aeabi_dsub>
 80048da:	4632      	mov	r2, r6
 80048dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80048e0:	463b      	mov	r3, r7
 80048e2:	4650      	mov	r0, sl
 80048e4:	4659      	mov	r1, fp
 80048e6:	f7fb fe5f 	bl	80005a8 <__aeabi_dmul>
 80048ea:	4602      	mov	r2, r0
 80048ec:	460b      	mov	r3, r1
 80048ee:	2000      	movs	r0, #0
 80048f0:	496e      	ldr	r1, [pc, #440]	@ (8004aac <expm1+0x354>)
 80048f2:	f7fb fca1 	bl	8000238 <__aeabi_dsub>
 80048f6:	4602      	mov	r2, r0
 80048f8:	460b      	mov	r3, r1
 80048fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048fe:	f7fb ff7d 	bl	80007fc <__aeabi_ddiv>
 8004902:	4642      	mov	r2, r8
 8004904:	464b      	mov	r3, r9
 8004906:	f7fb fe4f 	bl	80005a8 <__aeabi_dmul>
 800490a:	4602      	mov	r2, r0
 800490c:	460b      	mov	r3, r1
 800490e:	2c00      	cmp	r4, #0
 8004910:	d167      	bne.n	80049e2 <expm1+0x28a>
 8004912:	4650      	mov	r0, sl
 8004914:	4659      	mov	r1, fp
 8004916:	f7fb fe47 	bl	80005a8 <__aeabi_dmul>
 800491a:	4642      	mov	r2, r8
 800491c:	464b      	mov	r3, r9
 800491e:	e055      	b.n	80049cc <expm1+0x274>
 8004920:	f7fb fc8c 	bl	800023c <__adddf3>
 8004924:	f20f 1948 	addw	r9, pc, #328	@ 0x148
 8004928:	e9d9 8900 	ldrd	r8, r9, [r9]
 800492c:	4606      	mov	r6, r0
 800492e:	460f      	mov	r7, r1
 8004930:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004934:	e76a      	b.n	800480c <expm1+0xb4>
 8004936:	a350      	add	r3, pc, #320	@ (adr r3, 8004a78 <expm1+0x320>)
 8004938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800493c:	4650      	mov	r0, sl
 800493e:	4659      	mov	r1, fp
 8004940:	f7fb fe32 	bl	80005a8 <__aeabi_dmul>
 8004944:	4602      	mov	r2, r0
 8004946:	460b      	mov	r3, r1
 8004948:	4955      	ldr	r1, [pc, #340]	@ (8004aa0 <expm1+0x348>)
 800494a:	2000      	movs	r0, #0
 800494c:	f7fb fc76 	bl	800023c <__adddf3>
 8004950:	f7fc f8da 	bl	8000b08 <__aeabi_d2iz>
 8004954:	4604      	mov	r4, r0
 8004956:	f7fb fdbd 	bl	80004d4 <__aeabi_i2d>
 800495a:	a337      	add	r3, pc, #220	@ (adr r3, 8004a38 <expm1+0x2e0>)
 800495c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004960:	4680      	mov	r8, r0
 8004962:	4689      	mov	r9, r1
 8004964:	f7fb fe20 	bl	80005a8 <__aeabi_dmul>
 8004968:	4602      	mov	r2, r0
 800496a:	460b      	mov	r3, r1
 800496c:	4650      	mov	r0, sl
 800496e:	4659      	mov	r1, fp
 8004970:	f7fb fc62 	bl	8000238 <__aeabi_dsub>
 8004974:	a332      	add	r3, pc, #200	@ (adr r3, 8004a40 <expm1+0x2e8>)
 8004976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497a:	4606      	mov	r6, r0
 800497c:	460f      	mov	r7, r1
 800497e:	4640      	mov	r0, r8
 8004980:	4649      	mov	r1, r9
 8004982:	f7fb fe11 	bl	80005a8 <__aeabi_dmul>
 8004986:	4680      	mov	r8, r0
 8004988:	4689      	mov	r9, r1
 800498a:	e73f      	b.n	800480c <expm1+0xb4>
 800498c:	a33a      	add	r3, pc, #232	@ (adr r3, 8004a78 <expm1+0x320>)
 800498e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004992:	4650      	mov	r0, sl
 8004994:	4659      	mov	r1, fp
 8004996:	f7fb fe07 	bl	80005a8 <__aeabi_dmul>
 800499a:	4602      	mov	r2, r0
 800499c:	460b      	mov	r3, r1
 800499e:	4944      	ldr	r1, [pc, #272]	@ (8004ab0 <expm1+0x358>)
 80049a0:	2000      	movs	r0, #0
 80049a2:	e7d3      	b.n	800494c <expm1+0x1f4>
 80049a4:	a334      	add	r3, pc, #208	@ (adr r3, 8004a78 <expm1+0x320>)
 80049a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049aa:	f7fb fdfd 	bl	80005a8 <__aeabi_dmul>
 80049ae:	4602      	mov	r2, r0
 80049b0:	460b      	mov	r3, r1
 80049b2:	2c00      	cmp	r4, #0
 80049b4:	d1f3      	bne.n	800499e <expm1+0x246>
 80049b6:	e7c7      	b.n	8004948 <expm1+0x1f0>
 80049b8:	4a3e      	ldr	r2, [pc, #248]	@ (8004ab4 <expm1+0x35c>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d80f      	bhi.n	80049de <expm1+0x286>
 80049be:	a330      	add	r3, pc, #192	@ (adr r3, 8004a80 <expm1+0x328>)
 80049c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c4:	f7fb fc3a 	bl	800023c <__adddf3>
 80049c8:	4602      	mov	r2, r0
 80049ca:	460b      	mov	r3, r1
 80049cc:	f7fb fc34 	bl	8000238 <__aeabi_dsub>
 80049d0:	4602      	mov	r2, r0
 80049d2:	460b      	mov	r3, r1
 80049d4:	4650      	mov	r0, sl
 80049d6:	4659      	mov	r1, fp
 80049d8:	f7fb fc2e 	bl	8000238 <__aeabi_dsub>
 80049dc:	e086      	b.n	8004aec <expm1+0x394>
 80049de:	2400      	movs	r4, #0
 80049e0:	e728      	b.n	8004834 <expm1+0xdc>
 80049e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80049e6:	f7fb fc27 	bl	8000238 <__aeabi_dsub>
 80049ea:	4652      	mov	r2, sl
 80049ec:	465b      	mov	r3, fp
 80049ee:	f7fb fddb 	bl	80005a8 <__aeabi_dmul>
 80049f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80049f6:	f7fb fc1f 	bl	8000238 <__aeabi_dsub>
 80049fa:	464b      	mov	r3, r9
 80049fc:	4642      	mov	r2, r8
 80049fe:	f7fb fc1b 	bl	8000238 <__aeabi_dsub>
 8004a02:	1c63      	adds	r3, r4, #1
 8004a04:	4606      	mov	r6, r0
 8004a06:	460f      	mov	r7, r1
 8004a08:	d156      	bne.n	8004ab8 <expm1+0x360>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	4650      	mov	r0, sl
 8004a10:	4659      	mov	r1, fp
 8004a12:	f7fb fc11 	bl	8000238 <__aeabi_dsub>
 8004a16:	4b22      	ldr	r3, [pc, #136]	@ (8004aa0 <expm1+0x348>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f7fb fdc5 	bl	80005a8 <__aeabi_dmul>
 8004a1e:	4b20      	ldr	r3, [pc, #128]	@ (8004aa0 <expm1+0x348>)
 8004a20:	2200      	movs	r2, #0
 8004a22:	e7d9      	b.n	80049d8 <expm1+0x280>
 8004a24:	f3af 8000 	nop.w
 8004a28:	fefa39ef 	.word	0xfefa39ef
 8004a2c:	40862e42 	.word	0x40862e42
 8004a30:	c2f8f359 	.word	0xc2f8f359
 8004a34:	01a56e1f 	.word	0x01a56e1f
 8004a38:	fee00000 	.word	0xfee00000
 8004a3c:	3fe62e42 	.word	0x3fe62e42
 8004a40:	35793c76 	.word	0x35793c76
 8004a44:	3dea39ef 	.word	0x3dea39ef
 8004a48:	6e09c32d 	.word	0x6e09c32d
 8004a4c:	be8afdb7 	.word	0xbe8afdb7
 8004a50:	86e65239 	.word	0x86e65239
 8004a54:	3ed0cfca 	.word	0x3ed0cfca
 8004a58:	9eaadbb7 	.word	0x9eaadbb7
 8004a5c:	3f14ce19 	.word	0x3f14ce19
 8004a60:	19fe5585 	.word	0x19fe5585
 8004a64:	3f5a01a0 	.word	0x3f5a01a0
 8004a68:	111110f4 	.word	0x111110f4
 8004a6c:	3fa11111 	.word	0x3fa11111
 8004a70:	35793c76 	.word	0x35793c76
 8004a74:	bdea39ef 	.word	0xbdea39ef
 8004a78:	652b82fe 	.word	0x652b82fe
 8004a7c:	3ff71547 	.word	0x3ff71547
 8004a80:	8800759c 	.word	0x8800759c
 8004a84:	7e37e43c 	.word	0x7e37e43c
 8004a88:	40436879 	.word	0x40436879
 8004a8c:	40862e41 	.word	0x40862e41
 8004a90:	7fefffff 	.word	0x7fefffff
 8004a94:	bff00000 	.word	0xbff00000
 8004a98:	3fd62e42 	.word	0x3fd62e42
 8004a9c:	3ff0a2b1 	.word	0x3ff0a2b1
 8004aa0:	3fe00000 	.word	0x3fe00000
 8004aa4:	3ff00000 	.word	0x3ff00000
 8004aa8:	40080000 	.word	0x40080000
 8004aac:	40180000 	.word	0x40180000
 8004ab0:	bfe00000 	.word	0xbfe00000
 8004ab4:	3c8fffff 	.word	0x3c8fffff
 8004ab8:	2c01      	cmp	r4, #1
 8004aba:	d127      	bne.n	8004b0c <expm1+0x3b4>
 8004abc:	4b34      	ldr	r3, [pc, #208]	@ (8004b90 <expm1+0x438>)
 8004abe:	2200      	movs	r2, #0
 8004ac0:	4650      	mov	r0, sl
 8004ac2:	4659      	mov	r1, fp
 8004ac4:	f7fb ffe2 	bl	8000a8c <__aeabi_dcmplt>
 8004ac8:	b198      	cbz	r0, 8004af2 <expm1+0x39a>
 8004aca:	4b32      	ldr	r3, [pc, #200]	@ (8004b94 <expm1+0x43c>)
 8004acc:	2200      	movs	r2, #0
 8004ace:	4650      	mov	r0, sl
 8004ad0:	4659      	mov	r1, fp
 8004ad2:	f7fb fbb3 	bl	800023c <__adddf3>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	460b      	mov	r3, r1
 8004ada:	4630      	mov	r0, r6
 8004adc:	4639      	mov	r1, r7
 8004ade:	f7fb fbab 	bl	8000238 <__aeabi_dsub>
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8004ae8:	f7fb fd5e 	bl	80005a8 <__aeabi_dmul>
 8004aec:	4682      	mov	sl, r0
 8004aee:	468b      	mov	fp, r1
 8004af0:	e64e      	b.n	8004790 <expm1+0x38>
 8004af2:	4632      	mov	r2, r6
 8004af4:	463b      	mov	r3, r7
 8004af6:	4650      	mov	r0, sl
 8004af8:	4659      	mov	r1, fp
 8004afa:	f7fb fb9d 	bl	8000238 <__aeabi_dsub>
 8004afe:	4602      	mov	r2, r0
 8004b00:	460b      	mov	r3, r1
 8004b02:	f7fb fb9b 	bl	800023c <__adddf3>
 8004b06:	4b24      	ldr	r3, [pc, #144]	@ (8004b98 <expm1+0x440>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	e63d      	b.n	8004788 <expm1+0x30>
 8004b0c:	1c63      	adds	r3, r4, #1
 8004b0e:	2b39      	cmp	r3, #57	@ 0x39
 8004b10:	ea4f 5504 	mov.w	r5, r4, lsl #20
 8004b14:	d90e      	bls.n	8004b34 <expm1+0x3dc>
 8004b16:	4652      	mov	r2, sl
 8004b18:	465b      	mov	r3, fp
 8004b1a:	f7fb fb8d 	bl	8000238 <__aeabi_dsub>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	460b      	mov	r3, r1
 8004b22:	2000      	movs	r0, #0
 8004b24:	491c      	ldr	r1, [pc, #112]	@ (8004b98 <expm1+0x440>)
 8004b26:	f7fb fb87 	bl	8000238 <__aeabi_dsub>
 8004b2a:	186b      	adds	r3, r5, r1
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	2200      	movs	r2, #0
 8004b30:	4b19      	ldr	r3, [pc, #100]	@ (8004b98 <expm1+0x440>)
 8004b32:	e751      	b.n	80049d8 <expm1+0x280>
 8004b34:	2c13      	cmp	r4, #19
 8004b36:	f04f 0200 	mov.w	r2, #0
 8004b3a:	dc17      	bgt.n	8004b6c <expm1+0x414>
 8004b3c:	f44f 1600 	mov.w	r6, #2097152	@ 0x200000
 8004b40:	fa46 f404 	asr.w	r4, r6, r4
 8004b44:	f1c4 537f 	rsb	r3, r4, #1069547520	@ 0x3fc00000
 8004b48:	f503 1340 	add.w	r3, r3, #3145728	@ 0x300000
 8004b4c:	4616      	mov	r6, r2
 8004b4e:	461f      	mov	r7, r3
 8004b50:	4652      	mov	r2, sl
 8004b52:	465b      	mov	r3, fp
 8004b54:	f7fb fb70 	bl	8000238 <__aeabi_dsub>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	4630      	mov	r0, r6
 8004b5e:	4639      	mov	r1, r7
 8004b60:	f7fb fb6a 	bl	8000238 <__aeabi_dsub>
 8004b64:	4682      	mov	sl, r0
 8004b66:	eb05 0b01 	add.w	fp, r5, r1
 8004b6a:	e611      	b.n	8004790 <expm1+0x38>
 8004b6c:	f5c4 747f 	rsb	r4, r4, #1020	@ 0x3fc
 8004b70:	3403      	adds	r4, #3
 8004b72:	0523      	lsls	r3, r4, #20
 8004b74:	f7fb fb62 	bl	800023c <__adddf3>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	4650      	mov	r0, sl
 8004b7e:	4659      	mov	r1, fp
 8004b80:	f7fb fb5a 	bl	8000238 <__aeabi_dsub>
 8004b84:	4b04      	ldr	r3, [pc, #16]	@ (8004b98 <expm1+0x440>)
 8004b86:	2200      	movs	r2, #0
 8004b88:	f7fb fb58 	bl	800023c <__adddf3>
 8004b8c:	e7ea      	b.n	8004b64 <expm1+0x40c>
 8004b8e:	bf00      	nop
 8004b90:	bfd00000 	.word	0xbfd00000
 8004b94:	3fe00000 	.word	0x3fe00000
 8004b98:	3ff00000 	.word	0x3ff00000

08004b9c <with_errno>:
 8004b9c:	b570      	push	{r4, r5, r6, lr}
 8004b9e:	4604      	mov	r4, r0
 8004ba0:	460d      	mov	r5, r1
 8004ba2:	4616      	mov	r6, r2
 8004ba4:	f000 ff42 	bl	8005a2c <__errno>
 8004ba8:	4629      	mov	r1, r5
 8004baa:	6006      	str	r6, [r0, #0]
 8004bac:	4620      	mov	r0, r4
 8004bae:	bd70      	pop	{r4, r5, r6, pc}

08004bb0 <xflow>:
 8004bb0:	b513      	push	{r0, r1, r4, lr}
 8004bb2:	4604      	mov	r4, r0
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	4610      	mov	r0, r2
 8004bb8:	b10c      	cbz	r4, 8004bbe <xflow+0xe>
 8004bba:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8004bbe:	e9cd 2300 	strd	r2, r3, [sp]
 8004bc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004bc6:	f7fb fcef 	bl	80005a8 <__aeabi_dmul>
 8004bca:	2222      	movs	r2, #34	@ 0x22
 8004bcc:	b002      	add	sp, #8
 8004bce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bd2:	f7ff bfe3 	b.w	8004b9c <with_errno>

08004bd6 <__math_oflow>:
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8004bdc:	f7ff bfe8 	b.w	8004bb0 <xflow>

08004be0 <fabs>:
 8004be0:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004be4:	4619      	mov	r1, r3
 8004be6:	4770      	bx	lr

08004be8 <__assert_func>:
 8004be8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004bea:	4614      	mov	r4, r2
 8004bec:	461a      	mov	r2, r3
 8004bee:	4b09      	ldr	r3, [pc, #36]	@ (8004c14 <__assert_func+0x2c>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4605      	mov	r5, r0
 8004bf4:	68d8      	ldr	r0, [r3, #12]
 8004bf6:	b954      	cbnz	r4, 8004c0e <__assert_func+0x26>
 8004bf8:	4b07      	ldr	r3, [pc, #28]	@ (8004c18 <__assert_func+0x30>)
 8004bfa:	461c      	mov	r4, r3
 8004bfc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004c00:	9100      	str	r1, [sp, #0]
 8004c02:	462b      	mov	r3, r5
 8004c04:	4905      	ldr	r1, [pc, #20]	@ (8004c1c <__assert_func+0x34>)
 8004c06:	f000 fd47 	bl	8005698 <fiprintf>
 8004c0a:	f000 ff3c 	bl	8005a86 <abort>
 8004c0e:	4b04      	ldr	r3, [pc, #16]	@ (8004c20 <__assert_func+0x38>)
 8004c10:	e7f4      	b.n	8004bfc <__assert_func+0x14>
 8004c12:	bf00      	nop
 8004c14:	20000064 	.word	0x20000064
 8004c18:	080078a7 	.word	0x080078a7
 8004c1c:	08007879 	.word	0x08007879
 8004c20:	0800786c 	.word	0x0800786c

08004c24 <rand>:
 8004c24:	4b16      	ldr	r3, [pc, #88]	@ (8004c80 <rand+0x5c>)
 8004c26:	b510      	push	{r4, lr}
 8004c28:	681c      	ldr	r4, [r3, #0]
 8004c2a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004c2c:	b9b3      	cbnz	r3, 8004c5c <rand+0x38>
 8004c2e:	2018      	movs	r0, #24
 8004c30:	f001 fdcc 	bl	80067cc <malloc>
 8004c34:	4602      	mov	r2, r0
 8004c36:	6320      	str	r0, [r4, #48]	@ 0x30
 8004c38:	b920      	cbnz	r0, 8004c44 <rand+0x20>
 8004c3a:	4b12      	ldr	r3, [pc, #72]	@ (8004c84 <rand+0x60>)
 8004c3c:	4812      	ldr	r0, [pc, #72]	@ (8004c88 <rand+0x64>)
 8004c3e:	2152      	movs	r1, #82	@ 0x52
 8004c40:	f7ff ffd2 	bl	8004be8 <__assert_func>
 8004c44:	4911      	ldr	r1, [pc, #68]	@ (8004c8c <rand+0x68>)
 8004c46:	4b12      	ldr	r3, [pc, #72]	@ (8004c90 <rand+0x6c>)
 8004c48:	e9c0 1300 	strd	r1, r3, [r0]
 8004c4c:	4b11      	ldr	r3, [pc, #68]	@ (8004c94 <rand+0x70>)
 8004c4e:	6083      	str	r3, [r0, #8]
 8004c50:	230b      	movs	r3, #11
 8004c52:	8183      	strh	r3, [r0, #12]
 8004c54:	2100      	movs	r1, #0
 8004c56:	2001      	movs	r0, #1
 8004c58:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004c5c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004c5e:	480e      	ldr	r0, [pc, #56]	@ (8004c98 <rand+0x74>)
 8004c60:	690b      	ldr	r3, [r1, #16]
 8004c62:	694c      	ldr	r4, [r1, #20]
 8004c64:	4a0d      	ldr	r2, [pc, #52]	@ (8004c9c <rand+0x78>)
 8004c66:	4358      	muls	r0, r3
 8004c68:	fb02 0004 	mla	r0, r2, r4, r0
 8004c6c:	fba3 3202 	umull	r3, r2, r3, r2
 8004c70:	3301      	adds	r3, #1
 8004c72:	eb40 0002 	adc.w	r0, r0, r2
 8004c76:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8004c7a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004c7e:	bd10      	pop	{r4, pc}
 8004c80:	20000064 	.word	0x20000064
 8004c84:	080078a8 	.word	0x080078a8
 8004c88:	080078bf 	.word	0x080078bf
 8004c8c:	abcd330e 	.word	0xabcd330e
 8004c90:	e66d1234 	.word	0xe66d1234
 8004c94:	0005deec 	.word	0x0005deec
 8004c98:	5851f42d 	.word	0x5851f42d
 8004c9c:	4c957f2d 	.word	0x4c957f2d

08004ca0 <__cvt>:
 8004ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ca4:	b088      	sub	sp, #32
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	461d      	mov	r5, r3
 8004caa:	4614      	mov	r4, r2
 8004cac:	bfbc      	itt	lt
 8004cae:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004cb2:	4614      	movlt	r4, r2
 8004cb4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004cb6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004cb8:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004cbc:	bfb6      	itet	lt
 8004cbe:	461d      	movlt	r5, r3
 8004cc0:	2300      	movge	r3, #0
 8004cc2:	232d      	movlt	r3, #45	@ 0x2d
 8004cc4:	7013      	strb	r3, [r2, #0]
 8004cc6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004cc8:	f023 0820 	bic.w	r8, r3, #32
 8004ccc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004cd0:	d005      	beq.n	8004cde <__cvt+0x3e>
 8004cd2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004cd6:	d100      	bne.n	8004cda <__cvt+0x3a>
 8004cd8:	3601      	adds	r6, #1
 8004cda:	2302      	movs	r3, #2
 8004cdc:	e000      	b.n	8004ce0 <__cvt+0x40>
 8004cde:	2303      	movs	r3, #3
 8004ce0:	aa07      	add	r2, sp, #28
 8004ce2:	9204      	str	r2, [sp, #16]
 8004ce4:	aa06      	add	r2, sp, #24
 8004ce6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004cea:	e9cd 3600 	strd	r3, r6, [sp]
 8004cee:	4622      	mov	r2, r4
 8004cf0:	462b      	mov	r3, r5
 8004cf2:	f000 ff59 	bl	8005ba8 <_dtoa_r>
 8004cf6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004cfa:	4607      	mov	r7, r0
 8004cfc:	d119      	bne.n	8004d32 <__cvt+0x92>
 8004cfe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004d00:	07db      	lsls	r3, r3, #31
 8004d02:	d50e      	bpl.n	8004d22 <__cvt+0x82>
 8004d04:	eb00 0906 	add.w	r9, r0, r6
 8004d08:	2200      	movs	r2, #0
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	4620      	mov	r0, r4
 8004d0e:	4629      	mov	r1, r5
 8004d10:	f7fb feb2 	bl	8000a78 <__aeabi_dcmpeq>
 8004d14:	b108      	cbz	r0, 8004d1a <__cvt+0x7a>
 8004d16:	f8cd 901c 	str.w	r9, [sp, #28]
 8004d1a:	2230      	movs	r2, #48	@ 0x30
 8004d1c:	9b07      	ldr	r3, [sp, #28]
 8004d1e:	454b      	cmp	r3, r9
 8004d20:	d31e      	bcc.n	8004d60 <__cvt+0xc0>
 8004d22:	9b07      	ldr	r3, [sp, #28]
 8004d24:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004d26:	1bdb      	subs	r3, r3, r7
 8004d28:	4638      	mov	r0, r7
 8004d2a:	6013      	str	r3, [r2, #0]
 8004d2c:	b008      	add	sp, #32
 8004d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d32:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004d36:	eb00 0906 	add.w	r9, r0, r6
 8004d3a:	d1e5      	bne.n	8004d08 <__cvt+0x68>
 8004d3c:	7803      	ldrb	r3, [r0, #0]
 8004d3e:	2b30      	cmp	r3, #48	@ 0x30
 8004d40:	d10a      	bne.n	8004d58 <__cvt+0xb8>
 8004d42:	2200      	movs	r2, #0
 8004d44:	2300      	movs	r3, #0
 8004d46:	4620      	mov	r0, r4
 8004d48:	4629      	mov	r1, r5
 8004d4a:	f7fb fe95 	bl	8000a78 <__aeabi_dcmpeq>
 8004d4e:	b918      	cbnz	r0, 8004d58 <__cvt+0xb8>
 8004d50:	f1c6 0601 	rsb	r6, r6, #1
 8004d54:	f8ca 6000 	str.w	r6, [sl]
 8004d58:	f8da 3000 	ldr.w	r3, [sl]
 8004d5c:	4499      	add	r9, r3
 8004d5e:	e7d3      	b.n	8004d08 <__cvt+0x68>
 8004d60:	1c59      	adds	r1, r3, #1
 8004d62:	9107      	str	r1, [sp, #28]
 8004d64:	701a      	strb	r2, [r3, #0]
 8004d66:	e7d9      	b.n	8004d1c <__cvt+0x7c>

08004d68 <__exponent>:
 8004d68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d6a:	2900      	cmp	r1, #0
 8004d6c:	bfba      	itte	lt
 8004d6e:	4249      	neglt	r1, r1
 8004d70:	232d      	movlt	r3, #45	@ 0x2d
 8004d72:	232b      	movge	r3, #43	@ 0x2b
 8004d74:	2909      	cmp	r1, #9
 8004d76:	7002      	strb	r2, [r0, #0]
 8004d78:	7043      	strb	r3, [r0, #1]
 8004d7a:	dd29      	ble.n	8004dd0 <__exponent+0x68>
 8004d7c:	f10d 0307 	add.w	r3, sp, #7
 8004d80:	461d      	mov	r5, r3
 8004d82:	270a      	movs	r7, #10
 8004d84:	461a      	mov	r2, r3
 8004d86:	fbb1 f6f7 	udiv	r6, r1, r7
 8004d8a:	fb07 1416 	mls	r4, r7, r6, r1
 8004d8e:	3430      	adds	r4, #48	@ 0x30
 8004d90:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004d94:	460c      	mov	r4, r1
 8004d96:	2c63      	cmp	r4, #99	@ 0x63
 8004d98:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8004d9c:	4631      	mov	r1, r6
 8004d9e:	dcf1      	bgt.n	8004d84 <__exponent+0x1c>
 8004da0:	3130      	adds	r1, #48	@ 0x30
 8004da2:	1e94      	subs	r4, r2, #2
 8004da4:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004da8:	1c41      	adds	r1, r0, #1
 8004daa:	4623      	mov	r3, r4
 8004dac:	42ab      	cmp	r3, r5
 8004dae:	d30a      	bcc.n	8004dc6 <__exponent+0x5e>
 8004db0:	f10d 0309 	add.w	r3, sp, #9
 8004db4:	1a9b      	subs	r3, r3, r2
 8004db6:	42ac      	cmp	r4, r5
 8004db8:	bf88      	it	hi
 8004dba:	2300      	movhi	r3, #0
 8004dbc:	3302      	adds	r3, #2
 8004dbe:	4403      	add	r3, r0
 8004dc0:	1a18      	subs	r0, r3, r0
 8004dc2:	b003      	add	sp, #12
 8004dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dc6:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004dca:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004dce:	e7ed      	b.n	8004dac <__exponent+0x44>
 8004dd0:	2330      	movs	r3, #48	@ 0x30
 8004dd2:	3130      	adds	r1, #48	@ 0x30
 8004dd4:	7083      	strb	r3, [r0, #2]
 8004dd6:	70c1      	strb	r1, [r0, #3]
 8004dd8:	1d03      	adds	r3, r0, #4
 8004dda:	e7f1      	b.n	8004dc0 <__exponent+0x58>

08004ddc <_printf_float>:
 8004ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004de0:	b091      	sub	sp, #68	@ 0x44
 8004de2:	460c      	mov	r4, r1
 8004de4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004de8:	4616      	mov	r6, r2
 8004dea:	461f      	mov	r7, r3
 8004dec:	4605      	mov	r5, r0
 8004dee:	f000 fdd3 	bl	8005998 <_localeconv_r>
 8004df2:	6803      	ldr	r3, [r0, #0]
 8004df4:	9308      	str	r3, [sp, #32]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7fb fa12 	bl	8000220 <strlen>
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	930e      	str	r3, [sp, #56]	@ 0x38
 8004e00:	f8d8 3000 	ldr.w	r3, [r8]
 8004e04:	9009      	str	r0, [sp, #36]	@ 0x24
 8004e06:	3307      	adds	r3, #7
 8004e08:	f023 0307 	bic.w	r3, r3, #7
 8004e0c:	f103 0208 	add.w	r2, r3, #8
 8004e10:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004e14:	f8d4 b000 	ldr.w	fp, [r4]
 8004e18:	f8c8 2000 	str.w	r2, [r8]
 8004e1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004e20:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004e24:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004e26:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004e2a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004e2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004e32:	4b9d      	ldr	r3, [pc, #628]	@ (80050a8 <_printf_float+0x2cc>)
 8004e34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004e38:	f7fb fe50 	bl	8000adc <__aeabi_dcmpun>
 8004e3c:	bb70      	cbnz	r0, 8004e9c <_printf_float+0xc0>
 8004e3e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004e42:	4b99      	ldr	r3, [pc, #612]	@ (80050a8 <_printf_float+0x2cc>)
 8004e44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004e48:	f7fb fe2a 	bl	8000aa0 <__aeabi_dcmple>
 8004e4c:	bb30      	cbnz	r0, 8004e9c <_printf_float+0xc0>
 8004e4e:	2200      	movs	r2, #0
 8004e50:	2300      	movs	r3, #0
 8004e52:	4640      	mov	r0, r8
 8004e54:	4649      	mov	r1, r9
 8004e56:	f7fb fe19 	bl	8000a8c <__aeabi_dcmplt>
 8004e5a:	b110      	cbz	r0, 8004e62 <_printf_float+0x86>
 8004e5c:	232d      	movs	r3, #45	@ 0x2d
 8004e5e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e62:	4a92      	ldr	r2, [pc, #584]	@ (80050ac <_printf_float+0x2d0>)
 8004e64:	4b92      	ldr	r3, [pc, #584]	@ (80050b0 <_printf_float+0x2d4>)
 8004e66:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004e6a:	bf94      	ite	ls
 8004e6c:	4690      	movls	r8, r2
 8004e6e:	4698      	movhi	r8, r3
 8004e70:	2303      	movs	r3, #3
 8004e72:	6123      	str	r3, [r4, #16]
 8004e74:	f02b 0304 	bic.w	r3, fp, #4
 8004e78:	6023      	str	r3, [r4, #0]
 8004e7a:	f04f 0900 	mov.w	r9, #0
 8004e7e:	9700      	str	r7, [sp, #0]
 8004e80:	4633      	mov	r3, r6
 8004e82:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004e84:	4621      	mov	r1, r4
 8004e86:	4628      	mov	r0, r5
 8004e88:	f000 f9d4 	bl	8005234 <_printf_common>
 8004e8c:	3001      	adds	r0, #1
 8004e8e:	f040 808f 	bne.w	8004fb0 <_printf_float+0x1d4>
 8004e92:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004e96:	b011      	add	sp, #68	@ 0x44
 8004e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e9c:	4642      	mov	r2, r8
 8004e9e:	464b      	mov	r3, r9
 8004ea0:	4640      	mov	r0, r8
 8004ea2:	4649      	mov	r1, r9
 8004ea4:	f7fb fe1a 	bl	8000adc <__aeabi_dcmpun>
 8004ea8:	b140      	cbz	r0, 8004ebc <_printf_float+0xe0>
 8004eaa:	464b      	mov	r3, r9
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	bfbc      	itt	lt
 8004eb0:	232d      	movlt	r3, #45	@ 0x2d
 8004eb2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004eb6:	4a7f      	ldr	r2, [pc, #508]	@ (80050b4 <_printf_float+0x2d8>)
 8004eb8:	4b7f      	ldr	r3, [pc, #508]	@ (80050b8 <_printf_float+0x2dc>)
 8004eba:	e7d4      	b.n	8004e66 <_printf_float+0x8a>
 8004ebc:	6863      	ldr	r3, [r4, #4]
 8004ebe:	1c5a      	adds	r2, r3, #1
 8004ec0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004ec4:	d13f      	bne.n	8004f46 <_printf_float+0x16a>
 8004ec6:	2306      	movs	r3, #6
 8004ec8:	6063      	str	r3, [r4, #4]
 8004eca:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004ece:	2200      	movs	r2, #0
 8004ed0:	6023      	str	r3, [r4, #0]
 8004ed2:	9206      	str	r2, [sp, #24]
 8004ed4:	aa0e      	add	r2, sp, #56	@ 0x38
 8004ed6:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004eda:	aa0d      	add	r2, sp, #52	@ 0x34
 8004edc:	9203      	str	r2, [sp, #12]
 8004ede:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004ee2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004ee6:	6863      	ldr	r3, [r4, #4]
 8004ee8:	9300      	str	r3, [sp, #0]
 8004eea:	4642      	mov	r2, r8
 8004eec:	464b      	mov	r3, r9
 8004eee:	4628      	mov	r0, r5
 8004ef0:	910a      	str	r1, [sp, #40]	@ 0x28
 8004ef2:	f7ff fed5 	bl	8004ca0 <__cvt>
 8004ef6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004ef8:	2947      	cmp	r1, #71	@ 0x47
 8004efa:	4680      	mov	r8, r0
 8004efc:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004efe:	d128      	bne.n	8004f52 <_printf_float+0x176>
 8004f00:	1cc8      	adds	r0, r1, #3
 8004f02:	db02      	blt.n	8004f0a <_printf_float+0x12e>
 8004f04:	6863      	ldr	r3, [r4, #4]
 8004f06:	4299      	cmp	r1, r3
 8004f08:	dd40      	ble.n	8004f8c <_printf_float+0x1b0>
 8004f0a:	f1aa 0a02 	sub.w	sl, sl, #2
 8004f0e:	fa5f fa8a 	uxtb.w	sl, sl
 8004f12:	3901      	subs	r1, #1
 8004f14:	4652      	mov	r2, sl
 8004f16:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004f1a:	910d      	str	r1, [sp, #52]	@ 0x34
 8004f1c:	f7ff ff24 	bl	8004d68 <__exponent>
 8004f20:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004f22:	1813      	adds	r3, r2, r0
 8004f24:	2a01      	cmp	r2, #1
 8004f26:	4681      	mov	r9, r0
 8004f28:	6123      	str	r3, [r4, #16]
 8004f2a:	dc02      	bgt.n	8004f32 <_printf_float+0x156>
 8004f2c:	6822      	ldr	r2, [r4, #0]
 8004f2e:	07d2      	lsls	r2, r2, #31
 8004f30:	d501      	bpl.n	8004f36 <_printf_float+0x15a>
 8004f32:	3301      	adds	r3, #1
 8004f34:	6123      	str	r3, [r4, #16]
 8004f36:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d09f      	beq.n	8004e7e <_printf_float+0xa2>
 8004f3e:	232d      	movs	r3, #45	@ 0x2d
 8004f40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f44:	e79b      	b.n	8004e7e <_printf_float+0xa2>
 8004f46:	2947      	cmp	r1, #71	@ 0x47
 8004f48:	d1bf      	bne.n	8004eca <_printf_float+0xee>
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1bd      	bne.n	8004eca <_printf_float+0xee>
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e7ba      	b.n	8004ec8 <_printf_float+0xec>
 8004f52:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004f56:	d9dc      	bls.n	8004f12 <_printf_float+0x136>
 8004f58:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004f5c:	d118      	bne.n	8004f90 <_printf_float+0x1b4>
 8004f5e:	2900      	cmp	r1, #0
 8004f60:	6863      	ldr	r3, [r4, #4]
 8004f62:	dd0b      	ble.n	8004f7c <_printf_float+0x1a0>
 8004f64:	6121      	str	r1, [r4, #16]
 8004f66:	b913      	cbnz	r3, 8004f6e <_printf_float+0x192>
 8004f68:	6822      	ldr	r2, [r4, #0]
 8004f6a:	07d0      	lsls	r0, r2, #31
 8004f6c:	d502      	bpl.n	8004f74 <_printf_float+0x198>
 8004f6e:	3301      	adds	r3, #1
 8004f70:	440b      	add	r3, r1
 8004f72:	6123      	str	r3, [r4, #16]
 8004f74:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004f76:	f04f 0900 	mov.w	r9, #0
 8004f7a:	e7dc      	b.n	8004f36 <_printf_float+0x15a>
 8004f7c:	b913      	cbnz	r3, 8004f84 <_printf_float+0x1a8>
 8004f7e:	6822      	ldr	r2, [r4, #0]
 8004f80:	07d2      	lsls	r2, r2, #31
 8004f82:	d501      	bpl.n	8004f88 <_printf_float+0x1ac>
 8004f84:	3302      	adds	r3, #2
 8004f86:	e7f4      	b.n	8004f72 <_printf_float+0x196>
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e7f2      	b.n	8004f72 <_printf_float+0x196>
 8004f8c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004f90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004f92:	4299      	cmp	r1, r3
 8004f94:	db05      	blt.n	8004fa2 <_printf_float+0x1c6>
 8004f96:	6823      	ldr	r3, [r4, #0]
 8004f98:	6121      	str	r1, [r4, #16]
 8004f9a:	07d8      	lsls	r0, r3, #31
 8004f9c:	d5ea      	bpl.n	8004f74 <_printf_float+0x198>
 8004f9e:	1c4b      	adds	r3, r1, #1
 8004fa0:	e7e7      	b.n	8004f72 <_printf_float+0x196>
 8004fa2:	2900      	cmp	r1, #0
 8004fa4:	bfd4      	ite	le
 8004fa6:	f1c1 0202 	rsble	r2, r1, #2
 8004faa:	2201      	movgt	r2, #1
 8004fac:	4413      	add	r3, r2
 8004fae:	e7e0      	b.n	8004f72 <_printf_float+0x196>
 8004fb0:	6823      	ldr	r3, [r4, #0]
 8004fb2:	055a      	lsls	r2, r3, #21
 8004fb4:	d407      	bmi.n	8004fc6 <_printf_float+0x1ea>
 8004fb6:	6923      	ldr	r3, [r4, #16]
 8004fb8:	4642      	mov	r2, r8
 8004fba:	4631      	mov	r1, r6
 8004fbc:	4628      	mov	r0, r5
 8004fbe:	47b8      	blx	r7
 8004fc0:	3001      	adds	r0, #1
 8004fc2:	d12b      	bne.n	800501c <_printf_float+0x240>
 8004fc4:	e765      	b.n	8004e92 <_printf_float+0xb6>
 8004fc6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004fca:	f240 80dd 	bls.w	8005188 <_printf_float+0x3ac>
 8004fce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	f7fb fd4f 	bl	8000a78 <__aeabi_dcmpeq>
 8004fda:	2800      	cmp	r0, #0
 8004fdc:	d033      	beq.n	8005046 <_printf_float+0x26a>
 8004fde:	4a37      	ldr	r2, [pc, #220]	@ (80050bc <_printf_float+0x2e0>)
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	4631      	mov	r1, r6
 8004fe4:	4628      	mov	r0, r5
 8004fe6:	47b8      	blx	r7
 8004fe8:	3001      	adds	r0, #1
 8004fea:	f43f af52 	beq.w	8004e92 <_printf_float+0xb6>
 8004fee:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004ff2:	4543      	cmp	r3, r8
 8004ff4:	db02      	blt.n	8004ffc <_printf_float+0x220>
 8004ff6:	6823      	ldr	r3, [r4, #0]
 8004ff8:	07d8      	lsls	r0, r3, #31
 8004ffa:	d50f      	bpl.n	800501c <_printf_float+0x240>
 8004ffc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005000:	4631      	mov	r1, r6
 8005002:	4628      	mov	r0, r5
 8005004:	47b8      	blx	r7
 8005006:	3001      	adds	r0, #1
 8005008:	f43f af43 	beq.w	8004e92 <_printf_float+0xb6>
 800500c:	f04f 0900 	mov.w	r9, #0
 8005010:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8005014:	f104 0a1a 	add.w	sl, r4, #26
 8005018:	45c8      	cmp	r8, r9
 800501a:	dc09      	bgt.n	8005030 <_printf_float+0x254>
 800501c:	6823      	ldr	r3, [r4, #0]
 800501e:	079b      	lsls	r3, r3, #30
 8005020:	f100 8103 	bmi.w	800522a <_printf_float+0x44e>
 8005024:	68e0      	ldr	r0, [r4, #12]
 8005026:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005028:	4298      	cmp	r0, r3
 800502a:	bfb8      	it	lt
 800502c:	4618      	movlt	r0, r3
 800502e:	e732      	b.n	8004e96 <_printf_float+0xba>
 8005030:	2301      	movs	r3, #1
 8005032:	4652      	mov	r2, sl
 8005034:	4631      	mov	r1, r6
 8005036:	4628      	mov	r0, r5
 8005038:	47b8      	blx	r7
 800503a:	3001      	adds	r0, #1
 800503c:	f43f af29 	beq.w	8004e92 <_printf_float+0xb6>
 8005040:	f109 0901 	add.w	r9, r9, #1
 8005044:	e7e8      	b.n	8005018 <_printf_float+0x23c>
 8005046:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005048:	2b00      	cmp	r3, #0
 800504a:	dc39      	bgt.n	80050c0 <_printf_float+0x2e4>
 800504c:	4a1b      	ldr	r2, [pc, #108]	@ (80050bc <_printf_float+0x2e0>)
 800504e:	2301      	movs	r3, #1
 8005050:	4631      	mov	r1, r6
 8005052:	4628      	mov	r0, r5
 8005054:	47b8      	blx	r7
 8005056:	3001      	adds	r0, #1
 8005058:	f43f af1b 	beq.w	8004e92 <_printf_float+0xb6>
 800505c:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005060:	ea59 0303 	orrs.w	r3, r9, r3
 8005064:	d102      	bne.n	800506c <_printf_float+0x290>
 8005066:	6823      	ldr	r3, [r4, #0]
 8005068:	07d9      	lsls	r1, r3, #31
 800506a:	d5d7      	bpl.n	800501c <_printf_float+0x240>
 800506c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005070:	4631      	mov	r1, r6
 8005072:	4628      	mov	r0, r5
 8005074:	47b8      	blx	r7
 8005076:	3001      	adds	r0, #1
 8005078:	f43f af0b 	beq.w	8004e92 <_printf_float+0xb6>
 800507c:	f04f 0a00 	mov.w	sl, #0
 8005080:	f104 0b1a 	add.w	fp, r4, #26
 8005084:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005086:	425b      	negs	r3, r3
 8005088:	4553      	cmp	r3, sl
 800508a:	dc01      	bgt.n	8005090 <_printf_float+0x2b4>
 800508c:	464b      	mov	r3, r9
 800508e:	e793      	b.n	8004fb8 <_printf_float+0x1dc>
 8005090:	2301      	movs	r3, #1
 8005092:	465a      	mov	r2, fp
 8005094:	4631      	mov	r1, r6
 8005096:	4628      	mov	r0, r5
 8005098:	47b8      	blx	r7
 800509a:	3001      	adds	r0, #1
 800509c:	f43f aef9 	beq.w	8004e92 <_printf_float+0xb6>
 80050a0:	f10a 0a01 	add.w	sl, sl, #1
 80050a4:	e7ee      	b.n	8005084 <_printf_float+0x2a8>
 80050a6:	bf00      	nop
 80050a8:	7fefffff 	.word	0x7fefffff
 80050ac:	08007917 	.word	0x08007917
 80050b0:	0800791b 	.word	0x0800791b
 80050b4:	0800791f 	.word	0x0800791f
 80050b8:	08007923 	.word	0x08007923
 80050bc:	08007927 	.word	0x08007927
 80050c0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80050c2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80050c6:	4553      	cmp	r3, sl
 80050c8:	bfa8      	it	ge
 80050ca:	4653      	movge	r3, sl
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	4699      	mov	r9, r3
 80050d0:	dc36      	bgt.n	8005140 <_printf_float+0x364>
 80050d2:	f04f 0b00 	mov.w	fp, #0
 80050d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80050da:	f104 021a 	add.w	r2, r4, #26
 80050de:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80050e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80050e2:	eba3 0309 	sub.w	r3, r3, r9
 80050e6:	455b      	cmp	r3, fp
 80050e8:	dc31      	bgt.n	800514e <_printf_float+0x372>
 80050ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80050ec:	459a      	cmp	sl, r3
 80050ee:	dc3a      	bgt.n	8005166 <_printf_float+0x38a>
 80050f0:	6823      	ldr	r3, [r4, #0]
 80050f2:	07da      	lsls	r2, r3, #31
 80050f4:	d437      	bmi.n	8005166 <_printf_float+0x38a>
 80050f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80050f8:	ebaa 0903 	sub.w	r9, sl, r3
 80050fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80050fe:	ebaa 0303 	sub.w	r3, sl, r3
 8005102:	4599      	cmp	r9, r3
 8005104:	bfa8      	it	ge
 8005106:	4699      	movge	r9, r3
 8005108:	f1b9 0f00 	cmp.w	r9, #0
 800510c:	dc33      	bgt.n	8005176 <_printf_float+0x39a>
 800510e:	f04f 0800 	mov.w	r8, #0
 8005112:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005116:	f104 0b1a 	add.w	fp, r4, #26
 800511a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800511c:	ebaa 0303 	sub.w	r3, sl, r3
 8005120:	eba3 0309 	sub.w	r3, r3, r9
 8005124:	4543      	cmp	r3, r8
 8005126:	f77f af79 	ble.w	800501c <_printf_float+0x240>
 800512a:	2301      	movs	r3, #1
 800512c:	465a      	mov	r2, fp
 800512e:	4631      	mov	r1, r6
 8005130:	4628      	mov	r0, r5
 8005132:	47b8      	blx	r7
 8005134:	3001      	adds	r0, #1
 8005136:	f43f aeac 	beq.w	8004e92 <_printf_float+0xb6>
 800513a:	f108 0801 	add.w	r8, r8, #1
 800513e:	e7ec      	b.n	800511a <_printf_float+0x33e>
 8005140:	4642      	mov	r2, r8
 8005142:	4631      	mov	r1, r6
 8005144:	4628      	mov	r0, r5
 8005146:	47b8      	blx	r7
 8005148:	3001      	adds	r0, #1
 800514a:	d1c2      	bne.n	80050d2 <_printf_float+0x2f6>
 800514c:	e6a1      	b.n	8004e92 <_printf_float+0xb6>
 800514e:	2301      	movs	r3, #1
 8005150:	4631      	mov	r1, r6
 8005152:	4628      	mov	r0, r5
 8005154:	920a      	str	r2, [sp, #40]	@ 0x28
 8005156:	47b8      	blx	r7
 8005158:	3001      	adds	r0, #1
 800515a:	f43f ae9a 	beq.w	8004e92 <_printf_float+0xb6>
 800515e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005160:	f10b 0b01 	add.w	fp, fp, #1
 8005164:	e7bb      	b.n	80050de <_printf_float+0x302>
 8005166:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800516a:	4631      	mov	r1, r6
 800516c:	4628      	mov	r0, r5
 800516e:	47b8      	blx	r7
 8005170:	3001      	adds	r0, #1
 8005172:	d1c0      	bne.n	80050f6 <_printf_float+0x31a>
 8005174:	e68d      	b.n	8004e92 <_printf_float+0xb6>
 8005176:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005178:	464b      	mov	r3, r9
 800517a:	4442      	add	r2, r8
 800517c:	4631      	mov	r1, r6
 800517e:	4628      	mov	r0, r5
 8005180:	47b8      	blx	r7
 8005182:	3001      	adds	r0, #1
 8005184:	d1c3      	bne.n	800510e <_printf_float+0x332>
 8005186:	e684      	b.n	8004e92 <_printf_float+0xb6>
 8005188:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800518c:	f1ba 0f01 	cmp.w	sl, #1
 8005190:	dc01      	bgt.n	8005196 <_printf_float+0x3ba>
 8005192:	07db      	lsls	r3, r3, #31
 8005194:	d536      	bpl.n	8005204 <_printf_float+0x428>
 8005196:	2301      	movs	r3, #1
 8005198:	4642      	mov	r2, r8
 800519a:	4631      	mov	r1, r6
 800519c:	4628      	mov	r0, r5
 800519e:	47b8      	blx	r7
 80051a0:	3001      	adds	r0, #1
 80051a2:	f43f ae76 	beq.w	8004e92 <_printf_float+0xb6>
 80051a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80051aa:	4631      	mov	r1, r6
 80051ac:	4628      	mov	r0, r5
 80051ae:	47b8      	blx	r7
 80051b0:	3001      	adds	r0, #1
 80051b2:	f43f ae6e 	beq.w	8004e92 <_printf_float+0xb6>
 80051b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80051ba:	2200      	movs	r2, #0
 80051bc:	2300      	movs	r3, #0
 80051be:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80051c2:	f7fb fc59 	bl	8000a78 <__aeabi_dcmpeq>
 80051c6:	b9c0      	cbnz	r0, 80051fa <_printf_float+0x41e>
 80051c8:	4653      	mov	r3, sl
 80051ca:	f108 0201 	add.w	r2, r8, #1
 80051ce:	4631      	mov	r1, r6
 80051d0:	4628      	mov	r0, r5
 80051d2:	47b8      	blx	r7
 80051d4:	3001      	adds	r0, #1
 80051d6:	d10c      	bne.n	80051f2 <_printf_float+0x416>
 80051d8:	e65b      	b.n	8004e92 <_printf_float+0xb6>
 80051da:	2301      	movs	r3, #1
 80051dc:	465a      	mov	r2, fp
 80051de:	4631      	mov	r1, r6
 80051e0:	4628      	mov	r0, r5
 80051e2:	47b8      	blx	r7
 80051e4:	3001      	adds	r0, #1
 80051e6:	f43f ae54 	beq.w	8004e92 <_printf_float+0xb6>
 80051ea:	f108 0801 	add.w	r8, r8, #1
 80051ee:	45d0      	cmp	r8, sl
 80051f0:	dbf3      	blt.n	80051da <_printf_float+0x3fe>
 80051f2:	464b      	mov	r3, r9
 80051f4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80051f8:	e6df      	b.n	8004fba <_printf_float+0x1de>
 80051fa:	f04f 0800 	mov.w	r8, #0
 80051fe:	f104 0b1a 	add.w	fp, r4, #26
 8005202:	e7f4      	b.n	80051ee <_printf_float+0x412>
 8005204:	2301      	movs	r3, #1
 8005206:	4642      	mov	r2, r8
 8005208:	e7e1      	b.n	80051ce <_printf_float+0x3f2>
 800520a:	2301      	movs	r3, #1
 800520c:	464a      	mov	r2, r9
 800520e:	4631      	mov	r1, r6
 8005210:	4628      	mov	r0, r5
 8005212:	47b8      	blx	r7
 8005214:	3001      	adds	r0, #1
 8005216:	f43f ae3c 	beq.w	8004e92 <_printf_float+0xb6>
 800521a:	f108 0801 	add.w	r8, r8, #1
 800521e:	68e3      	ldr	r3, [r4, #12]
 8005220:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005222:	1a5b      	subs	r3, r3, r1
 8005224:	4543      	cmp	r3, r8
 8005226:	dcf0      	bgt.n	800520a <_printf_float+0x42e>
 8005228:	e6fc      	b.n	8005024 <_printf_float+0x248>
 800522a:	f04f 0800 	mov.w	r8, #0
 800522e:	f104 0919 	add.w	r9, r4, #25
 8005232:	e7f4      	b.n	800521e <_printf_float+0x442>

08005234 <_printf_common>:
 8005234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005238:	4616      	mov	r6, r2
 800523a:	4698      	mov	r8, r3
 800523c:	688a      	ldr	r2, [r1, #8]
 800523e:	690b      	ldr	r3, [r1, #16]
 8005240:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005244:	4293      	cmp	r3, r2
 8005246:	bfb8      	it	lt
 8005248:	4613      	movlt	r3, r2
 800524a:	6033      	str	r3, [r6, #0]
 800524c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005250:	4607      	mov	r7, r0
 8005252:	460c      	mov	r4, r1
 8005254:	b10a      	cbz	r2, 800525a <_printf_common+0x26>
 8005256:	3301      	adds	r3, #1
 8005258:	6033      	str	r3, [r6, #0]
 800525a:	6823      	ldr	r3, [r4, #0]
 800525c:	0699      	lsls	r1, r3, #26
 800525e:	bf42      	ittt	mi
 8005260:	6833      	ldrmi	r3, [r6, #0]
 8005262:	3302      	addmi	r3, #2
 8005264:	6033      	strmi	r3, [r6, #0]
 8005266:	6825      	ldr	r5, [r4, #0]
 8005268:	f015 0506 	ands.w	r5, r5, #6
 800526c:	d106      	bne.n	800527c <_printf_common+0x48>
 800526e:	f104 0a19 	add.w	sl, r4, #25
 8005272:	68e3      	ldr	r3, [r4, #12]
 8005274:	6832      	ldr	r2, [r6, #0]
 8005276:	1a9b      	subs	r3, r3, r2
 8005278:	42ab      	cmp	r3, r5
 800527a:	dc26      	bgt.n	80052ca <_printf_common+0x96>
 800527c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005280:	6822      	ldr	r2, [r4, #0]
 8005282:	3b00      	subs	r3, #0
 8005284:	bf18      	it	ne
 8005286:	2301      	movne	r3, #1
 8005288:	0692      	lsls	r2, r2, #26
 800528a:	d42b      	bmi.n	80052e4 <_printf_common+0xb0>
 800528c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005290:	4641      	mov	r1, r8
 8005292:	4638      	mov	r0, r7
 8005294:	47c8      	blx	r9
 8005296:	3001      	adds	r0, #1
 8005298:	d01e      	beq.n	80052d8 <_printf_common+0xa4>
 800529a:	6823      	ldr	r3, [r4, #0]
 800529c:	6922      	ldr	r2, [r4, #16]
 800529e:	f003 0306 	and.w	r3, r3, #6
 80052a2:	2b04      	cmp	r3, #4
 80052a4:	bf02      	ittt	eq
 80052a6:	68e5      	ldreq	r5, [r4, #12]
 80052a8:	6833      	ldreq	r3, [r6, #0]
 80052aa:	1aed      	subeq	r5, r5, r3
 80052ac:	68a3      	ldr	r3, [r4, #8]
 80052ae:	bf0c      	ite	eq
 80052b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052b4:	2500      	movne	r5, #0
 80052b6:	4293      	cmp	r3, r2
 80052b8:	bfc4      	itt	gt
 80052ba:	1a9b      	subgt	r3, r3, r2
 80052bc:	18ed      	addgt	r5, r5, r3
 80052be:	2600      	movs	r6, #0
 80052c0:	341a      	adds	r4, #26
 80052c2:	42b5      	cmp	r5, r6
 80052c4:	d11a      	bne.n	80052fc <_printf_common+0xc8>
 80052c6:	2000      	movs	r0, #0
 80052c8:	e008      	b.n	80052dc <_printf_common+0xa8>
 80052ca:	2301      	movs	r3, #1
 80052cc:	4652      	mov	r2, sl
 80052ce:	4641      	mov	r1, r8
 80052d0:	4638      	mov	r0, r7
 80052d2:	47c8      	blx	r9
 80052d4:	3001      	adds	r0, #1
 80052d6:	d103      	bne.n	80052e0 <_printf_common+0xac>
 80052d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80052dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052e0:	3501      	adds	r5, #1
 80052e2:	e7c6      	b.n	8005272 <_printf_common+0x3e>
 80052e4:	18e1      	adds	r1, r4, r3
 80052e6:	1c5a      	adds	r2, r3, #1
 80052e8:	2030      	movs	r0, #48	@ 0x30
 80052ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80052ee:	4422      	add	r2, r4
 80052f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80052f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80052f8:	3302      	adds	r3, #2
 80052fa:	e7c7      	b.n	800528c <_printf_common+0x58>
 80052fc:	2301      	movs	r3, #1
 80052fe:	4622      	mov	r2, r4
 8005300:	4641      	mov	r1, r8
 8005302:	4638      	mov	r0, r7
 8005304:	47c8      	blx	r9
 8005306:	3001      	adds	r0, #1
 8005308:	d0e6      	beq.n	80052d8 <_printf_common+0xa4>
 800530a:	3601      	adds	r6, #1
 800530c:	e7d9      	b.n	80052c2 <_printf_common+0x8e>
	...

08005310 <_printf_i>:
 8005310:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005314:	7e0f      	ldrb	r7, [r1, #24]
 8005316:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005318:	2f78      	cmp	r7, #120	@ 0x78
 800531a:	4691      	mov	r9, r2
 800531c:	4680      	mov	r8, r0
 800531e:	460c      	mov	r4, r1
 8005320:	469a      	mov	sl, r3
 8005322:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005326:	d807      	bhi.n	8005338 <_printf_i+0x28>
 8005328:	2f62      	cmp	r7, #98	@ 0x62
 800532a:	d80a      	bhi.n	8005342 <_printf_i+0x32>
 800532c:	2f00      	cmp	r7, #0
 800532e:	f000 80d2 	beq.w	80054d6 <_printf_i+0x1c6>
 8005332:	2f58      	cmp	r7, #88	@ 0x58
 8005334:	f000 80b9 	beq.w	80054aa <_printf_i+0x19a>
 8005338:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800533c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005340:	e03a      	b.n	80053b8 <_printf_i+0xa8>
 8005342:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005346:	2b15      	cmp	r3, #21
 8005348:	d8f6      	bhi.n	8005338 <_printf_i+0x28>
 800534a:	a101      	add	r1, pc, #4	@ (adr r1, 8005350 <_printf_i+0x40>)
 800534c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005350:	080053a9 	.word	0x080053a9
 8005354:	080053bd 	.word	0x080053bd
 8005358:	08005339 	.word	0x08005339
 800535c:	08005339 	.word	0x08005339
 8005360:	08005339 	.word	0x08005339
 8005364:	08005339 	.word	0x08005339
 8005368:	080053bd 	.word	0x080053bd
 800536c:	08005339 	.word	0x08005339
 8005370:	08005339 	.word	0x08005339
 8005374:	08005339 	.word	0x08005339
 8005378:	08005339 	.word	0x08005339
 800537c:	080054bd 	.word	0x080054bd
 8005380:	080053e7 	.word	0x080053e7
 8005384:	08005477 	.word	0x08005477
 8005388:	08005339 	.word	0x08005339
 800538c:	08005339 	.word	0x08005339
 8005390:	080054df 	.word	0x080054df
 8005394:	08005339 	.word	0x08005339
 8005398:	080053e7 	.word	0x080053e7
 800539c:	08005339 	.word	0x08005339
 80053a0:	08005339 	.word	0x08005339
 80053a4:	0800547f 	.word	0x0800547f
 80053a8:	6833      	ldr	r3, [r6, #0]
 80053aa:	1d1a      	adds	r2, r3, #4
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	6032      	str	r2, [r6, #0]
 80053b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80053b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80053b8:	2301      	movs	r3, #1
 80053ba:	e09d      	b.n	80054f8 <_printf_i+0x1e8>
 80053bc:	6833      	ldr	r3, [r6, #0]
 80053be:	6820      	ldr	r0, [r4, #0]
 80053c0:	1d19      	adds	r1, r3, #4
 80053c2:	6031      	str	r1, [r6, #0]
 80053c4:	0606      	lsls	r6, r0, #24
 80053c6:	d501      	bpl.n	80053cc <_printf_i+0xbc>
 80053c8:	681d      	ldr	r5, [r3, #0]
 80053ca:	e003      	b.n	80053d4 <_printf_i+0xc4>
 80053cc:	0645      	lsls	r5, r0, #25
 80053ce:	d5fb      	bpl.n	80053c8 <_printf_i+0xb8>
 80053d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80053d4:	2d00      	cmp	r5, #0
 80053d6:	da03      	bge.n	80053e0 <_printf_i+0xd0>
 80053d8:	232d      	movs	r3, #45	@ 0x2d
 80053da:	426d      	negs	r5, r5
 80053dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053e0:	4859      	ldr	r0, [pc, #356]	@ (8005548 <_printf_i+0x238>)
 80053e2:	230a      	movs	r3, #10
 80053e4:	e011      	b.n	800540a <_printf_i+0xfa>
 80053e6:	6821      	ldr	r1, [r4, #0]
 80053e8:	6833      	ldr	r3, [r6, #0]
 80053ea:	0608      	lsls	r0, r1, #24
 80053ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80053f0:	d402      	bmi.n	80053f8 <_printf_i+0xe8>
 80053f2:	0649      	lsls	r1, r1, #25
 80053f4:	bf48      	it	mi
 80053f6:	b2ad      	uxthmi	r5, r5
 80053f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80053fa:	4853      	ldr	r0, [pc, #332]	@ (8005548 <_printf_i+0x238>)
 80053fc:	6033      	str	r3, [r6, #0]
 80053fe:	bf14      	ite	ne
 8005400:	230a      	movne	r3, #10
 8005402:	2308      	moveq	r3, #8
 8005404:	2100      	movs	r1, #0
 8005406:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800540a:	6866      	ldr	r6, [r4, #4]
 800540c:	60a6      	str	r6, [r4, #8]
 800540e:	2e00      	cmp	r6, #0
 8005410:	bfa2      	ittt	ge
 8005412:	6821      	ldrge	r1, [r4, #0]
 8005414:	f021 0104 	bicge.w	r1, r1, #4
 8005418:	6021      	strge	r1, [r4, #0]
 800541a:	b90d      	cbnz	r5, 8005420 <_printf_i+0x110>
 800541c:	2e00      	cmp	r6, #0
 800541e:	d04b      	beq.n	80054b8 <_printf_i+0x1a8>
 8005420:	4616      	mov	r6, r2
 8005422:	fbb5 f1f3 	udiv	r1, r5, r3
 8005426:	fb03 5711 	mls	r7, r3, r1, r5
 800542a:	5dc7      	ldrb	r7, [r0, r7]
 800542c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005430:	462f      	mov	r7, r5
 8005432:	42bb      	cmp	r3, r7
 8005434:	460d      	mov	r5, r1
 8005436:	d9f4      	bls.n	8005422 <_printf_i+0x112>
 8005438:	2b08      	cmp	r3, #8
 800543a:	d10b      	bne.n	8005454 <_printf_i+0x144>
 800543c:	6823      	ldr	r3, [r4, #0]
 800543e:	07df      	lsls	r7, r3, #31
 8005440:	d508      	bpl.n	8005454 <_printf_i+0x144>
 8005442:	6923      	ldr	r3, [r4, #16]
 8005444:	6861      	ldr	r1, [r4, #4]
 8005446:	4299      	cmp	r1, r3
 8005448:	bfde      	ittt	le
 800544a:	2330      	movle	r3, #48	@ 0x30
 800544c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005450:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005454:	1b92      	subs	r2, r2, r6
 8005456:	6122      	str	r2, [r4, #16]
 8005458:	f8cd a000 	str.w	sl, [sp]
 800545c:	464b      	mov	r3, r9
 800545e:	aa03      	add	r2, sp, #12
 8005460:	4621      	mov	r1, r4
 8005462:	4640      	mov	r0, r8
 8005464:	f7ff fee6 	bl	8005234 <_printf_common>
 8005468:	3001      	adds	r0, #1
 800546a:	d14a      	bne.n	8005502 <_printf_i+0x1f2>
 800546c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005470:	b004      	add	sp, #16
 8005472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005476:	6823      	ldr	r3, [r4, #0]
 8005478:	f043 0320 	orr.w	r3, r3, #32
 800547c:	6023      	str	r3, [r4, #0]
 800547e:	4833      	ldr	r0, [pc, #204]	@ (800554c <_printf_i+0x23c>)
 8005480:	2778      	movs	r7, #120	@ 0x78
 8005482:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005486:	6823      	ldr	r3, [r4, #0]
 8005488:	6831      	ldr	r1, [r6, #0]
 800548a:	061f      	lsls	r7, r3, #24
 800548c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005490:	d402      	bmi.n	8005498 <_printf_i+0x188>
 8005492:	065f      	lsls	r7, r3, #25
 8005494:	bf48      	it	mi
 8005496:	b2ad      	uxthmi	r5, r5
 8005498:	6031      	str	r1, [r6, #0]
 800549a:	07d9      	lsls	r1, r3, #31
 800549c:	bf44      	itt	mi
 800549e:	f043 0320 	orrmi.w	r3, r3, #32
 80054a2:	6023      	strmi	r3, [r4, #0]
 80054a4:	b11d      	cbz	r5, 80054ae <_printf_i+0x19e>
 80054a6:	2310      	movs	r3, #16
 80054a8:	e7ac      	b.n	8005404 <_printf_i+0xf4>
 80054aa:	4827      	ldr	r0, [pc, #156]	@ (8005548 <_printf_i+0x238>)
 80054ac:	e7e9      	b.n	8005482 <_printf_i+0x172>
 80054ae:	6823      	ldr	r3, [r4, #0]
 80054b0:	f023 0320 	bic.w	r3, r3, #32
 80054b4:	6023      	str	r3, [r4, #0]
 80054b6:	e7f6      	b.n	80054a6 <_printf_i+0x196>
 80054b8:	4616      	mov	r6, r2
 80054ba:	e7bd      	b.n	8005438 <_printf_i+0x128>
 80054bc:	6833      	ldr	r3, [r6, #0]
 80054be:	6825      	ldr	r5, [r4, #0]
 80054c0:	6961      	ldr	r1, [r4, #20]
 80054c2:	1d18      	adds	r0, r3, #4
 80054c4:	6030      	str	r0, [r6, #0]
 80054c6:	062e      	lsls	r6, r5, #24
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	d501      	bpl.n	80054d0 <_printf_i+0x1c0>
 80054cc:	6019      	str	r1, [r3, #0]
 80054ce:	e002      	b.n	80054d6 <_printf_i+0x1c6>
 80054d0:	0668      	lsls	r0, r5, #25
 80054d2:	d5fb      	bpl.n	80054cc <_printf_i+0x1bc>
 80054d4:	8019      	strh	r1, [r3, #0]
 80054d6:	2300      	movs	r3, #0
 80054d8:	6123      	str	r3, [r4, #16]
 80054da:	4616      	mov	r6, r2
 80054dc:	e7bc      	b.n	8005458 <_printf_i+0x148>
 80054de:	6833      	ldr	r3, [r6, #0]
 80054e0:	1d1a      	adds	r2, r3, #4
 80054e2:	6032      	str	r2, [r6, #0]
 80054e4:	681e      	ldr	r6, [r3, #0]
 80054e6:	6862      	ldr	r2, [r4, #4]
 80054e8:	2100      	movs	r1, #0
 80054ea:	4630      	mov	r0, r6
 80054ec:	f7fa fe48 	bl	8000180 <memchr>
 80054f0:	b108      	cbz	r0, 80054f6 <_printf_i+0x1e6>
 80054f2:	1b80      	subs	r0, r0, r6
 80054f4:	6060      	str	r0, [r4, #4]
 80054f6:	6863      	ldr	r3, [r4, #4]
 80054f8:	6123      	str	r3, [r4, #16]
 80054fa:	2300      	movs	r3, #0
 80054fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005500:	e7aa      	b.n	8005458 <_printf_i+0x148>
 8005502:	6923      	ldr	r3, [r4, #16]
 8005504:	4632      	mov	r2, r6
 8005506:	4649      	mov	r1, r9
 8005508:	4640      	mov	r0, r8
 800550a:	47d0      	blx	sl
 800550c:	3001      	adds	r0, #1
 800550e:	d0ad      	beq.n	800546c <_printf_i+0x15c>
 8005510:	6823      	ldr	r3, [r4, #0]
 8005512:	079b      	lsls	r3, r3, #30
 8005514:	d413      	bmi.n	800553e <_printf_i+0x22e>
 8005516:	68e0      	ldr	r0, [r4, #12]
 8005518:	9b03      	ldr	r3, [sp, #12]
 800551a:	4298      	cmp	r0, r3
 800551c:	bfb8      	it	lt
 800551e:	4618      	movlt	r0, r3
 8005520:	e7a6      	b.n	8005470 <_printf_i+0x160>
 8005522:	2301      	movs	r3, #1
 8005524:	4632      	mov	r2, r6
 8005526:	4649      	mov	r1, r9
 8005528:	4640      	mov	r0, r8
 800552a:	47d0      	blx	sl
 800552c:	3001      	adds	r0, #1
 800552e:	d09d      	beq.n	800546c <_printf_i+0x15c>
 8005530:	3501      	adds	r5, #1
 8005532:	68e3      	ldr	r3, [r4, #12]
 8005534:	9903      	ldr	r1, [sp, #12]
 8005536:	1a5b      	subs	r3, r3, r1
 8005538:	42ab      	cmp	r3, r5
 800553a:	dcf2      	bgt.n	8005522 <_printf_i+0x212>
 800553c:	e7eb      	b.n	8005516 <_printf_i+0x206>
 800553e:	2500      	movs	r5, #0
 8005540:	f104 0619 	add.w	r6, r4, #25
 8005544:	e7f5      	b.n	8005532 <_printf_i+0x222>
 8005546:	bf00      	nop
 8005548:	08007929 	.word	0x08007929
 800554c:	0800793a 	.word	0x0800793a

08005550 <std>:
 8005550:	2300      	movs	r3, #0
 8005552:	b510      	push	{r4, lr}
 8005554:	4604      	mov	r4, r0
 8005556:	e9c0 3300 	strd	r3, r3, [r0]
 800555a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800555e:	6083      	str	r3, [r0, #8]
 8005560:	8181      	strh	r1, [r0, #12]
 8005562:	6643      	str	r3, [r0, #100]	@ 0x64
 8005564:	81c2      	strh	r2, [r0, #14]
 8005566:	6183      	str	r3, [r0, #24]
 8005568:	4619      	mov	r1, r3
 800556a:	2208      	movs	r2, #8
 800556c:	305c      	adds	r0, #92	@ 0x5c
 800556e:	f000 fa0b 	bl	8005988 <memset>
 8005572:	4b0d      	ldr	r3, [pc, #52]	@ (80055a8 <std+0x58>)
 8005574:	6263      	str	r3, [r4, #36]	@ 0x24
 8005576:	4b0d      	ldr	r3, [pc, #52]	@ (80055ac <std+0x5c>)
 8005578:	62a3      	str	r3, [r4, #40]	@ 0x28
 800557a:	4b0d      	ldr	r3, [pc, #52]	@ (80055b0 <std+0x60>)
 800557c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800557e:	4b0d      	ldr	r3, [pc, #52]	@ (80055b4 <std+0x64>)
 8005580:	6323      	str	r3, [r4, #48]	@ 0x30
 8005582:	4b0d      	ldr	r3, [pc, #52]	@ (80055b8 <std+0x68>)
 8005584:	6224      	str	r4, [r4, #32]
 8005586:	429c      	cmp	r4, r3
 8005588:	d006      	beq.n	8005598 <std+0x48>
 800558a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800558e:	4294      	cmp	r4, r2
 8005590:	d002      	beq.n	8005598 <std+0x48>
 8005592:	33d0      	adds	r3, #208	@ 0xd0
 8005594:	429c      	cmp	r4, r3
 8005596:	d105      	bne.n	80055a4 <std+0x54>
 8005598:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800559c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055a0:	f000 ba6e 	b.w	8005a80 <__retarget_lock_init_recursive>
 80055a4:	bd10      	pop	{r4, pc}
 80055a6:	bf00      	nop
 80055a8:	080057d9 	.word	0x080057d9
 80055ac:	080057fb 	.word	0x080057fb
 80055b0:	08005833 	.word	0x08005833
 80055b4:	08005857 	.word	0x08005857
 80055b8:	200067f4 	.word	0x200067f4

080055bc <stdio_exit_handler>:
 80055bc:	4a02      	ldr	r2, [pc, #8]	@ (80055c8 <stdio_exit_handler+0xc>)
 80055be:	4903      	ldr	r1, [pc, #12]	@ (80055cc <stdio_exit_handler+0x10>)
 80055c0:	4803      	ldr	r0, [pc, #12]	@ (80055d0 <stdio_exit_handler+0x14>)
 80055c2:	f000 b87b 	b.w	80056bc <_fwalk_sglue>
 80055c6:	bf00      	nop
 80055c8:	20000058 	.word	0x20000058
 80055cc:	080073b9 	.word	0x080073b9
 80055d0:	20000068 	.word	0x20000068

080055d4 <cleanup_stdio>:
 80055d4:	6841      	ldr	r1, [r0, #4]
 80055d6:	4b0c      	ldr	r3, [pc, #48]	@ (8005608 <cleanup_stdio+0x34>)
 80055d8:	4299      	cmp	r1, r3
 80055da:	b510      	push	{r4, lr}
 80055dc:	4604      	mov	r4, r0
 80055de:	d001      	beq.n	80055e4 <cleanup_stdio+0x10>
 80055e0:	f001 feea 	bl	80073b8 <_fflush_r>
 80055e4:	68a1      	ldr	r1, [r4, #8]
 80055e6:	4b09      	ldr	r3, [pc, #36]	@ (800560c <cleanup_stdio+0x38>)
 80055e8:	4299      	cmp	r1, r3
 80055ea:	d002      	beq.n	80055f2 <cleanup_stdio+0x1e>
 80055ec:	4620      	mov	r0, r4
 80055ee:	f001 fee3 	bl	80073b8 <_fflush_r>
 80055f2:	68e1      	ldr	r1, [r4, #12]
 80055f4:	4b06      	ldr	r3, [pc, #24]	@ (8005610 <cleanup_stdio+0x3c>)
 80055f6:	4299      	cmp	r1, r3
 80055f8:	d004      	beq.n	8005604 <cleanup_stdio+0x30>
 80055fa:	4620      	mov	r0, r4
 80055fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005600:	f001 beda 	b.w	80073b8 <_fflush_r>
 8005604:	bd10      	pop	{r4, pc}
 8005606:	bf00      	nop
 8005608:	200067f4 	.word	0x200067f4
 800560c:	2000685c 	.word	0x2000685c
 8005610:	200068c4 	.word	0x200068c4

08005614 <global_stdio_init.part.0>:
 8005614:	b510      	push	{r4, lr}
 8005616:	4b0b      	ldr	r3, [pc, #44]	@ (8005644 <global_stdio_init.part.0+0x30>)
 8005618:	4c0b      	ldr	r4, [pc, #44]	@ (8005648 <global_stdio_init.part.0+0x34>)
 800561a:	4a0c      	ldr	r2, [pc, #48]	@ (800564c <global_stdio_init.part.0+0x38>)
 800561c:	601a      	str	r2, [r3, #0]
 800561e:	4620      	mov	r0, r4
 8005620:	2200      	movs	r2, #0
 8005622:	2104      	movs	r1, #4
 8005624:	f7ff ff94 	bl	8005550 <std>
 8005628:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800562c:	2201      	movs	r2, #1
 800562e:	2109      	movs	r1, #9
 8005630:	f7ff ff8e 	bl	8005550 <std>
 8005634:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005638:	2202      	movs	r2, #2
 800563a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800563e:	2112      	movs	r1, #18
 8005640:	f7ff bf86 	b.w	8005550 <std>
 8005644:	2000692c 	.word	0x2000692c
 8005648:	200067f4 	.word	0x200067f4
 800564c:	080055bd 	.word	0x080055bd

08005650 <__sfp_lock_acquire>:
 8005650:	4801      	ldr	r0, [pc, #4]	@ (8005658 <__sfp_lock_acquire+0x8>)
 8005652:	f000 ba16 	b.w	8005a82 <__retarget_lock_acquire_recursive>
 8005656:	bf00      	nop
 8005658:	20006935 	.word	0x20006935

0800565c <__sfp_lock_release>:
 800565c:	4801      	ldr	r0, [pc, #4]	@ (8005664 <__sfp_lock_release+0x8>)
 800565e:	f000 ba11 	b.w	8005a84 <__retarget_lock_release_recursive>
 8005662:	bf00      	nop
 8005664:	20006935 	.word	0x20006935

08005668 <__sinit>:
 8005668:	b510      	push	{r4, lr}
 800566a:	4604      	mov	r4, r0
 800566c:	f7ff fff0 	bl	8005650 <__sfp_lock_acquire>
 8005670:	6a23      	ldr	r3, [r4, #32]
 8005672:	b11b      	cbz	r3, 800567c <__sinit+0x14>
 8005674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005678:	f7ff bff0 	b.w	800565c <__sfp_lock_release>
 800567c:	4b04      	ldr	r3, [pc, #16]	@ (8005690 <__sinit+0x28>)
 800567e:	6223      	str	r3, [r4, #32]
 8005680:	4b04      	ldr	r3, [pc, #16]	@ (8005694 <__sinit+0x2c>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d1f5      	bne.n	8005674 <__sinit+0xc>
 8005688:	f7ff ffc4 	bl	8005614 <global_stdio_init.part.0>
 800568c:	e7f2      	b.n	8005674 <__sinit+0xc>
 800568e:	bf00      	nop
 8005690:	080055d5 	.word	0x080055d5
 8005694:	2000692c 	.word	0x2000692c

08005698 <fiprintf>:
 8005698:	b40e      	push	{r1, r2, r3}
 800569a:	b503      	push	{r0, r1, lr}
 800569c:	4601      	mov	r1, r0
 800569e:	ab03      	add	r3, sp, #12
 80056a0:	4805      	ldr	r0, [pc, #20]	@ (80056b8 <fiprintf+0x20>)
 80056a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80056a6:	6800      	ldr	r0, [r0, #0]
 80056a8:	9301      	str	r3, [sp, #4]
 80056aa:	f001 fced 	bl	8007088 <_vfiprintf_r>
 80056ae:	b002      	add	sp, #8
 80056b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80056b4:	b003      	add	sp, #12
 80056b6:	4770      	bx	lr
 80056b8:	20000064 	.word	0x20000064

080056bc <_fwalk_sglue>:
 80056bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056c0:	4607      	mov	r7, r0
 80056c2:	4688      	mov	r8, r1
 80056c4:	4614      	mov	r4, r2
 80056c6:	2600      	movs	r6, #0
 80056c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80056cc:	f1b9 0901 	subs.w	r9, r9, #1
 80056d0:	d505      	bpl.n	80056de <_fwalk_sglue+0x22>
 80056d2:	6824      	ldr	r4, [r4, #0]
 80056d4:	2c00      	cmp	r4, #0
 80056d6:	d1f7      	bne.n	80056c8 <_fwalk_sglue+0xc>
 80056d8:	4630      	mov	r0, r6
 80056da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056de:	89ab      	ldrh	r3, [r5, #12]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d907      	bls.n	80056f4 <_fwalk_sglue+0x38>
 80056e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80056e8:	3301      	adds	r3, #1
 80056ea:	d003      	beq.n	80056f4 <_fwalk_sglue+0x38>
 80056ec:	4629      	mov	r1, r5
 80056ee:	4638      	mov	r0, r7
 80056f0:	47c0      	blx	r8
 80056f2:	4306      	orrs	r6, r0
 80056f4:	3568      	adds	r5, #104	@ 0x68
 80056f6:	e7e9      	b.n	80056cc <_fwalk_sglue+0x10>

080056f8 <iprintf>:
 80056f8:	b40f      	push	{r0, r1, r2, r3}
 80056fa:	b507      	push	{r0, r1, r2, lr}
 80056fc:	4906      	ldr	r1, [pc, #24]	@ (8005718 <iprintf+0x20>)
 80056fe:	ab04      	add	r3, sp, #16
 8005700:	6808      	ldr	r0, [r1, #0]
 8005702:	f853 2b04 	ldr.w	r2, [r3], #4
 8005706:	6881      	ldr	r1, [r0, #8]
 8005708:	9301      	str	r3, [sp, #4]
 800570a:	f001 fcbd 	bl	8007088 <_vfiprintf_r>
 800570e:	b003      	add	sp, #12
 8005710:	f85d eb04 	ldr.w	lr, [sp], #4
 8005714:	b004      	add	sp, #16
 8005716:	4770      	bx	lr
 8005718:	20000064 	.word	0x20000064

0800571c <_puts_r>:
 800571c:	6a03      	ldr	r3, [r0, #32]
 800571e:	b570      	push	{r4, r5, r6, lr}
 8005720:	6884      	ldr	r4, [r0, #8]
 8005722:	4605      	mov	r5, r0
 8005724:	460e      	mov	r6, r1
 8005726:	b90b      	cbnz	r3, 800572c <_puts_r+0x10>
 8005728:	f7ff ff9e 	bl	8005668 <__sinit>
 800572c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800572e:	07db      	lsls	r3, r3, #31
 8005730:	d405      	bmi.n	800573e <_puts_r+0x22>
 8005732:	89a3      	ldrh	r3, [r4, #12]
 8005734:	0598      	lsls	r0, r3, #22
 8005736:	d402      	bmi.n	800573e <_puts_r+0x22>
 8005738:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800573a:	f000 f9a2 	bl	8005a82 <__retarget_lock_acquire_recursive>
 800573e:	89a3      	ldrh	r3, [r4, #12]
 8005740:	0719      	lsls	r1, r3, #28
 8005742:	d502      	bpl.n	800574a <_puts_r+0x2e>
 8005744:	6923      	ldr	r3, [r4, #16]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d135      	bne.n	80057b6 <_puts_r+0x9a>
 800574a:	4621      	mov	r1, r4
 800574c:	4628      	mov	r0, r5
 800574e:	f000 f8c5 	bl	80058dc <__swsetup_r>
 8005752:	b380      	cbz	r0, 80057b6 <_puts_r+0x9a>
 8005754:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8005758:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800575a:	07da      	lsls	r2, r3, #31
 800575c:	d405      	bmi.n	800576a <_puts_r+0x4e>
 800575e:	89a3      	ldrh	r3, [r4, #12]
 8005760:	059b      	lsls	r3, r3, #22
 8005762:	d402      	bmi.n	800576a <_puts_r+0x4e>
 8005764:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005766:	f000 f98d 	bl	8005a84 <__retarget_lock_release_recursive>
 800576a:	4628      	mov	r0, r5
 800576c:	bd70      	pop	{r4, r5, r6, pc}
 800576e:	2b00      	cmp	r3, #0
 8005770:	da04      	bge.n	800577c <_puts_r+0x60>
 8005772:	69a2      	ldr	r2, [r4, #24]
 8005774:	429a      	cmp	r2, r3
 8005776:	dc17      	bgt.n	80057a8 <_puts_r+0x8c>
 8005778:	290a      	cmp	r1, #10
 800577a:	d015      	beq.n	80057a8 <_puts_r+0x8c>
 800577c:	6823      	ldr	r3, [r4, #0]
 800577e:	1c5a      	adds	r2, r3, #1
 8005780:	6022      	str	r2, [r4, #0]
 8005782:	7019      	strb	r1, [r3, #0]
 8005784:	68a3      	ldr	r3, [r4, #8]
 8005786:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800578a:	3b01      	subs	r3, #1
 800578c:	60a3      	str	r3, [r4, #8]
 800578e:	2900      	cmp	r1, #0
 8005790:	d1ed      	bne.n	800576e <_puts_r+0x52>
 8005792:	2b00      	cmp	r3, #0
 8005794:	da11      	bge.n	80057ba <_puts_r+0x9e>
 8005796:	4622      	mov	r2, r4
 8005798:	210a      	movs	r1, #10
 800579a:	4628      	mov	r0, r5
 800579c:	f000 f85f 	bl	800585e <__swbuf_r>
 80057a0:	3001      	adds	r0, #1
 80057a2:	d0d7      	beq.n	8005754 <_puts_r+0x38>
 80057a4:	250a      	movs	r5, #10
 80057a6:	e7d7      	b.n	8005758 <_puts_r+0x3c>
 80057a8:	4622      	mov	r2, r4
 80057aa:	4628      	mov	r0, r5
 80057ac:	f000 f857 	bl	800585e <__swbuf_r>
 80057b0:	3001      	adds	r0, #1
 80057b2:	d1e7      	bne.n	8005784 <_puts_r+0x68>
 80057b4:	e7ce      	b.n	8005754 <_puts_r+0x38>
 80057b6:	3e01      	subs	r6, #1
 80057b8:	e7e4      	b.n	8005784 <_puts_r+0x68>
 80057ba:	6823      	ldr	r3, [r4, #0]
 80057bc:	1c5a      	adds	r2, r3, #1
 80057be:	6022      	str	r2, [r4, #0]
 80057c0:	220a      	movs	r2, #10
 80057c2:	701a      	strb	r2, [r3, #0]
 80057c4:	e7ee      	b.n	80057a4 <_puts_r+0x88>
	...

080057c8 <puts>:
 80057c8:	4b02      	ldr	r3, [pc, #8]	@ (80057d4 <puts+0xc>)
 80057ca:	4601      	mov	r1, r0
 80057cc:	6818      	ldr	r0, [r3, #0]
 80057ce:	f7ff bfa5 	b.w	800571c <_puts_r>
 80057d2:	bf00      	nop
 80057d4:	20000064 	.word	0x20000064

080057d8 <__sread>:
 80057d8:	b510      	push	{r4, lr}
 80057da:	460c      	mov	r4, r1
 80057dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057e0:	f000 f900 	bl	80059e4 <_read_r>
 80057e4:	2800      	cmp	r0, #0
 80057e6:	bfab      	itete	ge
 80057e8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80057ea:	89a3      	ldrhlt	r3, [r4, #12]
 80057ec:	181b      	addge	r3, r3, r0
 80057ee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80057f2:	bfac      	ite	ge
 80057f4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80057f6:	81a3      	strhlt	r3, [r4, #12]
 80057f8:	bd10      	pop	{r4, pc}

080057fa <__swrite>:
 80057fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057fe:	461f      	mov	r7, r3
 8005800:	898b      	ldrh	r3, [r1, #12]
 8005802:	05db      	lsls	r3, r3, #23
 8005804:	4605      	mov	r5, r0
 8005806:	460c      	mov	r4, r1
 8005808:	4616      	mov	r6, r2
 800580a:	d505      	bpl.n	8005818 <__swrite+0x1e>
 800580c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005810:	2302      	movs	r3, #2
 8005812:	2200      	movs	r2, #0
 8005814:	f000 f8d4 	bl	80059c0 <_lseek_r>
 8005818:	89a3      	ldrh	r3, [r4, #12]
 800581a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800581e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005822:	81a3      	strh	r3, [r4, #12]
 8005824:	4632      	mov	r2, r6
 8005826:	463b      	mov	r3, r7
 8005828:	4628      	mov	r0, r5
 800582a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800582e:	f000 b8eb 	b.w	8005a08 <_write_r>

08005832 <__sseek>:
 8005832:	b510      	push	{r4, lr}
 8005834:	460c      	mov	r4, r1
 8005836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800583a:	f000 f8c1 	bl	80059c0 <_lseek_r>
 800583e:	1c43      	adds	r3, r0, #1
 8005840:	89a3      	ldrh	r3, [r4, #12]
 8005842:	bf15      	itete	ne
 8005844:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005846:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800584a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800584e:	81a3      	strheq	r3, [r4, #12]
 8005850:	bf18      	it	ne
 8005852:	81a3      	strhne	r3, [r4, #12]
 8005854:	bd10      	pop	{r4, pc}

08005856 <__sclose>:
 8005856:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800585a:	f000 b8a1 	b.w	80059a0 <_close_r>

0800585e <__swbuf_r>:
 800585e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005860:	460e      	mov	r6, r1
 8005862:	4614      	mov	r4, r2
 8005864:	4605      	mov	r5, r0
 8005866:	b118      	cbz	r0, 8005870 <__swbuf_r+0x12>
 8005868:	6a03      	ldr	r3, [r0, #32]
 800586a:	b90b      	cbnz	r3, 8005870 <__swbuf_r+0x12>
 800586c:	f7ff fefc 	bl	8005668 <__sinit>
 8005870:	69a3      	ldr	r3, [r4, #24]
 8005872:	60a3      	str	r3, [r4, #8]
 8005874:	89a3      	ldrh	r3, [r4, #12]
 8005876:	071a      	lsls	r2, r3, #28
 8005878:	d501      	bpl.n	800587e <__swbuf_r+0x20>
 800587a:	6923      	ldr	r3, [r4, #16]
 800587c:	b943      	cbnz	r3, 8005890 <__swbuf_r+0x32>
 800587e:	4621      	mov	r1, r4
 8005880:	4628      	mov	r0, r5
 8005882:	f000 f82b 	bl	80058dc <__swsetup_r>
 8005886:	b118      	cbz	r0, 8005890 <__swbuf_r+0x32>
 8005888:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800588c:	4638      	mov	r0, r7
 800588e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005890:	6823      	ldr	r3, [r4, #0]
 8005892:	6922      	ldr	r2, [r4, #16]
 8005894:	1a98      	subs	r0, r3, r2
 8005896:	6963      	ldr	r3, [r4, #20]
 8005898:	b2f6      	uxtb	r6, r6
 800589a:	4283      	cmp	r3, r0
 800589c:	4637      	mov	r7, r6
 800589e:	dc05      	bgt.n	80058ac <__swbuf_r+0x4e>
 80058a0:	4621      	mov	r1, r4
 80058a2:	4628      	mov	r0, r5
 80058a4:	f001 fd88 	bl	80073b8 <_fflush_r>
 80058a8:	2800      	cmp	r0, #0
 80058aa:	d1ed      	bne.n	8005888 <__swbuf_r+0x2a>
 80058ac:	68a3      	ldr	r3, [r4, #8]
 80058ae:	3b01      	subs	r3, #1
 80058b0:	60a3      	str	r3, [r4, #8]
 80058b2:	6823      	ldr	r3, [r4, #0]
 80058b4:	1c5a      	adds	r2, r3, #1
 80058b6:	6022      	str	r2, [r4, #0]
 80058b8:	701e      	strb	r6, [r3, #0]
 80058ba:	6962      	ldr	r2, [r4, #20]
 80058bc:	1c43      	adds	r3, r0, #1
 80058be:	429a      	cmp	r2, r3
 80058c0:	d004      	beq.n	80058cc <__swbuf_r+0x6e>
 80058c2:	89a3      	ldrh	r3, [r4, #12]
 80058c4:	07db      	lsls	r3, r3, #31
 80058c6:	d5e1      	bpl.n	800588c <__swbuf_r+0x2e>
 80058c8:	2e0a      	cmp	r6, #10
 80058ca:	d1df      	bne.n	800588c <__swbuf_r+0x2e>
 80058cc:	4621      	mov	r1, r4
 80058ce:	4628      	mov	r0, r5
 80058d0:	f001 fd72 	bl	80073b8 <_fflush_r>
 80058d4:	2800      	cmp	r0, #0
 80058d6:	d0d9      	beq.n	800588c <__swbuf_r+0x2e>
 80058d8:	e7d6      	b.n	8005888 <__swbuf_r+0x2a>
	...

080058dc <__swsetup_r>:
 80058dc:	b538      	push	{r3, r4, r5, lr}
 80058de:	4b29      	ldr	r3, [pc, #164]	@ (8005984 <__swsetup_r+0xa8>)
 80058e0:	4605      	mov	r5, r0
 80058e2:	6818      	ldr	r0, [r3, #0]
 80058e4:	460c      	mov	r4, r1
 80058e6:	b118      	cbz	r0, 80058f0 <__swsetup_r+0x14>
 80058e8:	6a03      	ldr	r3, [r0, #32]
 80058ea:	b90b      	cbnz	r3, 80058f0 <__swsetup_r+0x14>
 80058ec:	f7ff febc 	bl	8005668 <__sinit>
 80058f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058f4:	0719      	lsls	r1, r3, #28
 80058f6:	d422      	bmi.n	800593e <__swsetup_r+0x62>
 80058f8:	06da      	lsls	r2, r3, #27
 80058fa:	d407      	bmi.n	800590c <__swsetup_r+0x30>
 80058fc:	2209      	movs	r2, #9
 80058fe:	602a      	str	r2, [r5, #0]
 8005900:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005904:	81a3      	strh	r3, [r4, #12]
 8005906:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800590a:	e033      	b.n	8005974 <__swsetup_r+0x98>
 800590c:	0758      	lsls	r0, r3, #29
 800590e:	d512      	bpl.n	8005936 <__swsetup_r+0x5a>
 8005910:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005912:	b141      	cbz	r1, 8005926 <__swsetup_r+0x4a>
 8005914:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005918:	4299      	cmp	r1, r3
 800591a:	d002      	beq.n	8005922 <__swsetup_r+0x46>
 800591c:	4628      	mov	r0, r5
 800591e:	f000 ff0b 	bl	8006738 <_free_r>
 8005922:	2300      	movs	r3, #0
 8005924:	6363      	str	r3, [r4, #52]	@ 0x34
 8005926:	89a3      	ldrh	r3, [r4, #12]
 8005928:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800592c:	81a3      	strh	r3, [r4, #12]
 800592e:	2300      	movs	r3, #0
 8005930:	6063      	str	r3, [r4, #4]
 8005932:	6923      	ldr	r3, [r4, #16]
 8005934:	6023      	str	r3, [r4, #0]
 8005936:	89a3      	ldrh	r3, [r4, #12]
 8005938:	f043 0308 	orr.w	r3, r3, #8
 800593c:	81a3      	strh	r3, [r4, #12]
 800593e:	6923      	ldr	r3, [r4, #16]
 8005940:	b94b      	cbnz	r3, 8005956 <__swsetup_r+0x7a>
 8005942:	89a3      	ldrh	r3, [r4, #12]
 8005944:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005948:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800594c:	d003      	beq.n	8005956 <__swsetup_r+0x7a>
 800594e:	4621      	mov	r1, r4
 8005950:	4628      	mov	r0, r5
 8005952:	f001 fd7f 	bl	8007454 <__smakebuf_r>
 8005956:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800595a:	f013 0201 	ands.w	r2, r3, #1
 800595e:	d00a      	beq.n	8005976 <__swsetup_r+0x9a>
 8005960:	2200      	movs	r2, #0
 8005962:	60a2      	str	r2, [r4, #8]
 8005964:	6962      	ldr	r2, [r4, #20]
 8005966:	4252      	negs	r2, r2
 8005968:	61a2      	str	r2, [r4, #24]
 800596a:	6922      	ldr	r2, [r4, #16]
 800596c:	b942      	cbnz	r2, 8005980 <__swsetup_r+0xa4>
 800596e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005972:	d1c5      	bne.n	8005900 <__swsetup_r+0x24>
 8005974:	bd38      	pop	{r3, r4, r5, pc}
 8005976:	0799      	lsls	r1, r3, #30
 8005978:	bf58      	it	pl
 800597a:	6962      	ldrpl	r2, [r4, #20]
 800597c:	60a2      	str	r2, [r4, #8]
 800597e:	e7f4      	b.n	800596a <__swsetup_r+0x8e>
 8005980:	2000      	movs	r0, #0
 8005982:	e7f7      	b.n	8005974 <__swsetup_r+0x98>
 8005984:	20000064 	.word	0x20000064

08005988 <memset>:
 8005988:	4402      	add	r2, r0
 800598a:	4603      	mov	r3, r0
 800598c:	4293      	cmp	r3, r2
 800598e:	d100      	bne.n	8005992 <memset+0xa>
 8005990:	4770      	bx	lr
 8005992:	f803 1b01 	strb.w	r1, [r3], #1
 8005996:	e7f9      	b.n	800598c <memset+0x4>

08005998 <_localeconv_r>:
 8005998:	4800      	ldr	r0, [pc, #0]	@ (800599c <_localeconv_r+0x4>)
 800599a:	4770      	bx	lr
 800599c:	200001a4 	.word	0x200001a4

080059a0 <_close_r>:
 80059a0:	b538      	push	{r3, r4, r5, lr}
 80059a2:	4d06      	ldr	r5, [pc, #24]	@ (80059bc <_close_r+0x1c>)
 80059a4:	2300      	movs	r3, #0
 80059a6:	4604      	mov	r4, r0
 80059a8:	4608      	mov	r0, r1
 80059aa:	602b      	str	r3, [r5, #0]
 80059ac:	f7fc f908 	bl	8001bc0 <_close>
 80059b0:	1c43      	adds	r3, r0, #1
 80059b2:	d102      	bne.n	80059ba <_close_r+0x1a>
 80059b4:	682b      	ldr	r3, [r5, #0]
 80059b6:	b103      	cbz	r3, 80059ba <_close_r+0x1a>
 80059b8:	6023      	str	r3, [r4, #0]
 80059ba:	bd38      	pop	{r3, r4, r5, pc}
 80059bc:	20006930 	.word	0x20006930

080059c0 <_lseek_r>:
 80059c0:	b538      	push	{r3, r4, r5, lr}
 80059c2:	4d07      	ldr	r5, [pc, #28]	@ (80059e0 <_lseek_r+0x20>)
 80059c4:	4604      	mov	r4, r0
 80059c6:	4608      	mov	r0, r1
 80059c8:	4611      	mov	r1, r2
 80059ca:	2200      	movs	r2, #0
 80059cc:	602a      	str	r2, [r5, #0]
 80059ce:	461a      	mov	r2, r3
 80059d0:	f7fc f91a 	bl	8001c08 <_lseek>
 80059d4:	1c43      	adds	r3, r0, #1
 80059d6:	d102      	bne.n	80059de <_lseek_r+0x1e>
 80059d8:	682b      	ldr	r3, [r5, #0]
 80059da:	b103      	cbz	r3, 80059de <_lseek_r+0x1e>
 80059dc:	6023      	str	r3, [r4, #0]
 80059de:	bd38      	pop	{r3, r4, r5, pc}
 80059e0:	20006930 	.word	0x20006930

080059e4 <_read_r>:
 80059e4:	b538      	push	{r3, r4, r5, lr}
 80059e6:	4d07      	ldr	r5, [pc, #28]	@ (8005a04 <_read_r+0x20>)
 80059e8:	4604      	mov	r4, r0
 80059ea:	4608      	mov	r0, r1
 80059ec:	4611      	mov	r1, r2
 80059ee:	2200      	movs	r2, #0
 80059f0:	602a      	str	r2, [r5, #0]
 80059f2:	461a      	mov	r2, r3
 80059f4:	f7fc f8ab 	bl	8001b4e <_read>
 80059f8:	1c43      	adds	r3, r0, #1
 80059fa:	d102      	bne.n	8005a02 <_read_r+0x1e>
 80059fc:	682b      	ldr	r3, [r5, #0]
 80059fe:	b103      	cbz	r3, 8005a02 <_read_r+0x1e>
 8005a00:	6023      	str	r3, [r4, #0]
 8005a02:	bd38      	pop	{r3, r4, r5, pc}
 8005a04:	20006930 	.word	0x20006930

08005a08 <_write_r>:
 8005a08:	b538      	push	{r3, r4, r5, lr}
 8005a0a:	4d07      	ldr	r5, [pc, #28]	@ (8005a28 <_write_r+0x20>)
 8005a0c:	4604      	mov	r4, r0
 8005a0e:	4608      	mov	r0, r1
 8005a10:	4611      	mov	r1, r2
 8005a12:	2200      	movs	r2, #0
 8005a14:	602a      	str	r2, [r5, #0]
 8005a16:	461a      	mov	r2, r3
 8005a18:	f7fc f8b6 	bl	8001b88 <_write>
 8005a1c:	1c43      	adds	r3, r0, #1
 8005a1e:	d102      	bne.n	8005a26 <_write_r+0x1e>
 8005a20:	682b      	ldr	r3, [r5, #0]
 8005a22:	b103      	cbz	r3, 8005a26 <_write_r+0x1e>
 8005a24:	6023      	str	r3, [r4, #0]
 8005a26:	bd38      	pop	{r3, r4, r5, pc}
 8005a28:	20006930 	.word	0x20006930

08005a2c <__errno>:
 8005a2c:	4b01      	ldr	r3, [pc, #4]	@ (8005a34 <__errno+0x8>)
 8005a2e:	6818      	ldr	r0, [r3, #0]
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	20000064 	.word	0x20000064

08005a38 <__libc_init_array>:
 8005a38:	b570      	push	{r4, r5, r6, lr}
 8005a3a:	4d0d      	ldr	r5, [pc, #52]	@ (8005a70 <__libc_init_array+0x38>)
 8005a3c:	4c0d      	ldr	r4, [pc, #52]	@ (8005a74 <__libc_init_array+0x3c>)
 8005a3e:	1b64      	subs	r4, r4, r5
 8005a40:	10a4      	asrs	r4, r4, #2
 8005a42:	2600      	movs	r6, #0
 8005a44:	42a6      	cmp	r6, r4
 8005a46:	d109      	bne.n	8005a5c <__libc_init_array+0x24>
 8005a48:	4d0b      	ldr	r5, [pc, #44]	@ (8005a78 <__libc_init_array+0x40>)
 8005a4a:	4c0c      	ldr	r4, [pc, #48]	@ (8005a7c <__libc_init_array+0x44>)
 8005a4c:	f001 fdf6 	bl	800763c <_init>
 8005a50:	1b64      	subs	r4, r4, r5
 8005a52:	10a4      	asrs	r4, r4, #2
 8005a54:	2600      	movs	r6, #0
 8005a56:	42a6      	cmp	r6, r4
 8005a58:	d105      	bne.n	8005a66 <__libc_init_array+0x2e>
 8005a5a:	bd70      	pop	{r4, r5, r6, pc}
 8005a5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a60:	4798      	blx	r3
 8005a62:	3601      	adds	r6, #1
 8005a64:	e7ee      	b.n	8005a44 <__libc_init_array+0xc>
 8005a66:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a6a:	4798      	blx	r3
 8005a6c:	3601      	adds	r6, #1
 8005a6e:	e7f2      	b.n	8005a56 <__libc_init_array+0x1e>
 8005a70:	08007c3c 	.word	0x08007c3c
 8005a74:	08007c3c 	.word	0x08007c3c
 8005a78:	08007c3c 	.word	0x08007c3c
 8005a7c:	08007c40 	.word	0x08007c40

08005a80 <__retarget_lock_init_recursive>:
 8005a80:	4770      	bx	lr

08005a82 <__retarget_lock_acquire_recursive>:
 8005a82:	4770      	bx	lr

08005a84 <__retarget_lock_release_recursive>:
 8005a84:	4770      	bx	lr

08005a86 <abort>:
 8005a86:	b508      	push	{r3, lr}
 8005a88:	2006      	movs	r0, #6
 8005a8a:	f001 fd47 	bl	800751c <raise>
 8005a8e:	2001      	movs	r0, #1
 8005a90:	f7fc f852 	bl	8001b38 <_exit>

08005a94 <quorem>:
 8005a94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a98:	6903      	ldr	r3, [r0, #16]
 8005a9a:	690c      	ldr	r4, [r1, #16]
 8005a9c:	42a3      	cmp	r3, r4
 8005a9e:	4607      	mov	r7, r0
 8005aa0:	db7e      	blt.n	8005ba0 <quorem+0x10c>
 8005aa2:	3c01      	subs	r4, #1
 8005aa4:	f101 0814 	add.w	r8, r1, #20
 8005aa8:	00a3      	lsls	r3, r4, #2
 8005aaa:	f100 0514 	add.w	r5, r0, #20
 8005aae:	9300      	str	r3, [sp, #0]
 8005ab0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ab4:	9301      	str	r3, [sp, #4]
 8005ab6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005aba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005abe:	3301      	adds	r3, #1
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005ac6:	fbb2 f6f3 	udiv	r6, r2, r3
 8005aca:	d32e      	bcc.n	8005b2a <quorem+0x96>
 8005acc:	f04f 0a00 	mov.w	sl, #0
 8005ad0:	46c4      	mov	ip, r8
 8005ad2:	46ae      	mov	lr, r5
 8005ad4:	46d3      	mov	fp, sl
 8005ad6:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005ada:	b298      	uxth	r0, r3
 8005adc:	fb06 a000 	mla	r0, r6, r0, sl
 8005ae0:	0c02      	lsrs	r2, r0, #16
 8005ae2:	0c1b      	lsrs	r3, r3, #16
 8005ae4:	fb06 2303 	mla	r3, r6, r3, r2
 8005ae8:	f8de 2000 	ldr.w	r2, [lr]
 8005aec:	b280      	uxth	r0, r0
 8005aee:	b292      	uxth	r2, r2
 8005af0:	1a12      	subs	r2, r2, r0
 8005af2:	445a      	add	r2, fp
 8005af4:	f8de 0000 	ldr.w	r0, [lr]
 8005af8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005b02:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005b06:	b292      	uxth	r2, r2
 8005b08:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005b0c:	45e1      	cmp	r9, ip
 8005b0e:	f84e 2b04 	str.w	r2, [lr], #4
 8005b12:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005b16:	d2de      	bcs.n	8005ad6 <quorem+0x42>
 8005b18:	9b00      	ldr	r3, [sp, #0]
 8005b1a:	58eb      	ldr	r3, [r5, r3]
 8005b1c:	b92b      	cbnz	r3, 8005b2a <quorem+0x96>
 8005b1e:	9b01      	ldr	r3, [sp, #4]
 8005b20:	3b04      	subs	r3, #4
 8005b22:	429d      	cmp	r5, r3
 8005b24:	461a      	mov	r2, r3
 8005b26:	d32f      	bcc.n	8005b88 <quorem+0xf4>
 8005b28:	613c      	str	r4, [r7, #16]
 8005b2a:	4638      	mov	r0, r7
 8005b2c:	f001 f97e 	bl	8006e2c <__mcmp>
 8005b30:	2800      	cmp	r0, #0
 8005b32:	db25      	blt.n	8005b80 <quorem+0xec>
 8005b34:	4629      	mov	r1, r5
 8005b36:	2000      	movs	r0, #0
 8005b38:	f858 2b04 	ldr.w	r2, [r8], #4
 8005b3c:	f8d1 c000 	ldr.w	ip, [r1]
 8005b40:	fa1f fe82 	uxth.w	lr, r2
 8005b44:	fa1f f38c 	uxth.w	r3, ip
 8005b48:	eba3 030e 	sub.w	r3, r3, lr
 8005b4c:	4403      	add	r3, r0
 8005b4e:	0c12      	lsrs	r2, r2, #16
 8005b50:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005b54:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b5e:	45c1      	cmp	r9, r8
 8005b60:	f841 3b04 	str.w	r3, [r1], #4
 8005b64:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005b68:	d2e6      	bcs.n	8005b38 <quorem+0xa4>
 8005b6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b72:	b922      	cbnz	r2, 8005b7e <quorem+0xea>
 8005b74:	3b04      	subs	r3, #4
 8005b76:	429d      	cmp	r5, r3
 8005b78:	461a      	mov	r2, r3
 8005b7a:	d30b      	bcc.n	8005b94 <quorem+0x100>
 8005b7c:	613c      	str	r4, [r7, #16]
 8005b7e:	3601      	adds	r6, #1
 8005b80:	4630      	mov	r0, r6
 8005b82:	b003      	add	sp, #12
 8005b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b88:	6812      	ldr	r2, [r2, #0]
 8005b8a:	3b04      	subs	r3, #4
 8005b8c:	2a00      	cmp	r2, #0
 8005b8e:	d1cb      	bne.n	8005b28 <quorem+0x94>
 8005b90:	3c01      	subs	r4, #1
 8005b92:	e7c6      	b.n	8005b22 <quorem+0x8e>
 8005b94:	6812      	ldr	r2, [r2, #0]
 8005b96:	3b04      	subs	r3, #4
 8005b98:	2a00      	cmp	r2, #0
 8005b9a:	d1ef      	bne.n	8005b7c <quorem+0xe8>
 8005b9c:	3c01      	subs	r4, #1
 8005b9e:	e7ea      	b.n	8005b76 <quorem+0xe2>
 8005ba0:	2000      	movs	r0, #0
 8005ba2:	e7ee      	b.n	8005b82 <quorem+0xee>
 8005ba4:	0000      	movs	r0, r0
	...

08005ba8 <_dtoa_r>:
 8005ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bac:	69c7      	ldr	r7, [r0, #28]
 8005bae:	b097      	sub	sp, #92	@ 0x5c
 8005bb0:	4614      	mov	r4, r2
 8005bb2:	461d      	mov	r5, r3
 8005bb4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005bb8:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005bba:	4683      	mov	fp, r0
 8005bbc:	b97f      	cbnz	r7, 8005bde <_dtoa_r+0x36>
 8005bbe:	2010      	movs	r0, #16
 8005bc0:	f000 fe04 	bl	80067cc <malloc>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	f8cb 001c 	str.w	r0, [fp, #28]
 8005bca:	b920      	cbnz	r0, 8005bd6 <_dtoa_r+0x2e>
 8005bcc:	4ba8      	ldr	r3, [pc, #672]	@ (8005e70 <_dtoa_r+0x2c8>)
 8005bce:	21ef      	movs	r1, #239	@ 0xef
 8005bd0:	48a8      	ldr	r0, [pc, #672]	@ (8005e74 <_dtoa_r+0x2cc>)
 8005bd2:	f7ff f809 	bl	8004be8 <__assert_func>
 8005bd6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005bda:	6007      	str	r7, [r0, #0]
 8005bdc:	60c7      	str	r7, [r0, #12]
 8005bde:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005be2:	6819      	ldr	r1, [r3, #0]
 8005be4:	b159      	cbz	r1, 8005bfe <_dtoa_r+0x56>
 8005be6:	685a      	ldr	r2, [r3, #4]
 8005be8:	604a      	str	r2, [r1, #4]
 8005bea:	2301      	movs	r3, #1
 8005bec:	4093      	lsls	r3, r2
 8005bee:	608b      	str	r3, [r1, #8]
 8005bf0:	4658      	mov	r0, fp
 8005bf2:	f000 fee1 	bl	80069b8 <_Bfree>
 8005bf6:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	601a      	str	r2, [r3, #0]
 8005bfe:	1e2b      	subs	r3, r5, #0
 8005c00:	bfb9      	ittee	lt
 8005c02:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005c06:	9303      	strlt	r3, [sp, #12]
 8005c08:	2300      	movge	r3, #0
 8005c0a:	6033      	strge	r3, [r6, #0]
 8005c0c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005c10:	4b99      	ldr	r3, [pc, #612]	@ (8005e78 <_dtoa_r+0x2d0>)
 8005c12:	bfbc      	itt	lt
 8005c14:	2201      	movlt	r2, #1
 8005c16:	6032      	strlt	r2, [r6, #0]
 8005c18:	ea33 0308 	bics.w	r3, r3, r8
 8005c1c:	d112      	bne.n	8005c44 <_dtoa_r+0x9c>
 8005c1e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005c20:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005c24:	6013      	str	r3, [r2, #0]
 8005c26:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005c2a:	4323      	orrs	r3, r4
 8005c2c:	f000 8551 	beq.w	80066d2 <_dtoa_r+0xb2a>
 8005c30:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005c32:	f8df a248 	ldr.w	sl, [pc, #584]	@ 8005e7c <_dtoa_r+0x2d4>
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	f000 8553 	beq.w	80066e2 <_dtoa_r+0xb3a>
 8005c3c:	f10a 0303 	add.w	r3, sl, #3
 8005c40:	f000 bd4d 	b.w	80066de <_dtoa_r+0xb36>
 8005c44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c48:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005c4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005c50:	2200      	movs	r2, #0
 8005c52:	2300      	movs	r3, #0
 8005c54:	f7fa ff10 	bl	8000a78 <__aeabi_dcmpeq>
 8005c58:	4607      	mov	r7, r0
 8005c5a:	b158      	cbz	r0, 8005c74 <_dtoa_r+0xcc>
 8005c5c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005c5e:	2301      	movs	r3, #1
 8005c60:	6013      	str	r3, [r2, #0]
 8005c62:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005c64:	b113      	cbz	r3, 8005c6c <_dtoa_r+0xc4>
 8005c66:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005c68:	4b85      	ldr	r3, [pc, #532]	@ (8005e80 <_dtoa_r+0x2d8>)
 8005c6a:	6013      	str	r3, [r2, #0]
 8005c6c:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8005e84 <_dtoa_r+0x2dc>
 8005c70:	f000 bd37 	b.w	80066e2 <_dtoa_r+0xb3a>
 8005c74:	ab14      	add	r3, sp, #80	@ 0x50
 8005c76:	9301      	str	r3, [sp, #4]
 8005c78:	ab15      	add	r3, sp, #84	@ 0x54
 8005c7a:	9300      	str	r3, [sp, #0]
 8005c7c:	4658      	mov	r0, fp
 8005c7e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005c82:	f001 f981 	bl	8006f88 <__d2b>
 8005c86:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005c8a:	4681      	mov	r9, r0
 8005c8c:	2e00      	cmp	r6, #0
 8005c8e:	d076      	beq.n	8005d7e <_dtoa_r+0x1d6>
 8005c90:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005c92:	9712      	str	r7, [sp, #72]	@ 0x48
 8005c94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005c9c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005ca0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005ca4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005ca8:	4619      	mov	r1, r3
 8005caa:	2200      	movs	r2, #0
 8005cac:	4b76      	ldr	r3, [pc, #472]	@ (8005e88 <_dtoa_r+0x2e0>)
 8005cae:	f7fa fac3 	bl	8000238 <__aeabi_dsub>
 8005cb2:	a369      	add	r3, pc, #420	@ (adr r3, 8005e58 <_dtoa_r+0x2b0>)
 8005cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb8:	f7fa fc76 	bl	80005a8 <__aeabi_dmul>
 8005cbc:	a368      	add	r3, pc, #416	@ (adr r3, 8005e60 <_dtoa_r+0x2b8>)
 8005cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc2:	f7fa fabb 	bl	800023c <__adddf3>
 8005cc6:	4604      	mov	r4, r0
 8005cc8:	4630      	mov	r0, r6
 8005cca:	460d      	mov	r5, r1
 8005ccc:	f7fa fc02 	bl	80004d4 <__aeabi_i2d>
 8005cd0:	a365      	add	r3, pc, #404	@ (adr r3, 8005e68 <_dtoa_r+0x2c0>)
 8005cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd6:	f7fa fc67 	bl	80005a8 <__aeabi_dmul>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	460b      	mov	r3, r1
 8005cde:	4620      	mov	r0, r4
 8005ce0:	4629      	mov	r1, r5
 8005ce2:	f7fa faab 	bl	800023c <__adddf3>
 8005ce6:	4604      	mov	r4, r0
 8005ce8:	460d      	mov	r5, r1
 8005cea:	f7fa ff0d 	bl	8000b08 <__aeabi_d2iz>
 8005cee:	2200      	movs	r2, #0
 8005cf0:	4607      	mov	r7, r0
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	4620      	mov	r0, r4
 8005cf6:	4629      	mov	r1, r5
 8005cf8:	f7fa fec8 	bl	8000a8c <__aeabi_dcmplt>
 8005cfc:	b140      	cbz	r0, 8005d10 <_dtoa_r+0x168>
 8005cfe:	4638      	mov	r0, r7
 8005d00:	f7fa fbe8 	bl	80004d4 <__aeabi_i2d>
 8005d04:	4622      	mov	r2, r4
 8005d06:	462b      	mov	r3, r5
 8005d08:	f7fa feb6 	bl	8000a78 <__aeabi_dcmpeq>
 8005d0c:	b900      	cbnz	r0, 8005d10 <_dtoa_r+0x168>
 8005d0e:	3f01      	subs	r7, #1
 8005d10:	2f16      	cmp	r7, #22
 8005d12:	d852      	bhi.n	8005dba <_dtoa_r+0x212>
 8005d14:	4b5d      	ldr	r3, [pc, #372]	@ (8005e8c <_dtoa_r+0x2e4>)
 8005d16:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005d22:	f7fa feb3 	bl	8000a8c <__aeabi_dcmplt>
 8005d26:	2800      	cmp	r0, #0
 8005d28:	d049      	beq.n	8005dbe <_dtoa_r+0x216>
 8005d2a:	3f01      	subs	r7, #1
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005d30:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005d32:	1b9b      	subs	r3, r3, r6
 8005d34:	1e5a      	subs	r2, r3, #1
 8005d36:	bf44      	itt	mi
 8005d38:	f1c3 0801 	rsbmi	r8, r3, #1
 8005d3c:	2300      	movmi	r3, #0
 8005d3e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d40:	bf54      	ite	pl
 8005d42:	f04f 0800 	movpl.w	r8, #0
 8005d46:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005d48:	2f00      	cmp	r7, #0
 8005d4a:	db3a      	blt.n	8005dc2 <_dtoa_r+0x21a>
 8005d4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d4e:	970e      	str	r7, [sp, #56]	@ 0x38
 8005d50:	443b      	add	r3, r7
 8005d52:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d54:	2300      	movs	r3, #0
 8005d56:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d58:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005d5a:	2b09      	cmp	r3, #9
 8005d5c:	d865      	bhi.n	8005e2a <_dtoa_r+0x282>
 8005d5e:	2b05      	cmp	r3, #5
 8005d60:	bfc4      	itt	gt
 8005d62:	3b04      	subgt	r3, #4
 8005d64:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005d66:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005d68:	f1a3 0302 	sub.w	r3, r3, #2
 8005d6c:	bfcc      	ite	gt
 8005d6e:	2400      	movgt	r4, #0
 8005d70:	2401      	movle	r4, #1
 8005d72:	2b03      	cmp	r3, #3
 8005d74:	d864      	bhi.n	8005e40 <_dtoa_r+0x298>
 8005d76:	e8df f003 	tbb	[pc, r3]
 8005d7a:	382b      	.short	0x382b
 8005d7c:	5636      	.short	0x5636
 8005d7e:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005d82:	441e      	add	r6, r3
 8005d84:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005d88:	2b20      	cmp	r3, #32
 8005d8a:	bfc1      	itttt	gt
 8005d8c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005d90:	fa08 f803 	lslgt.w	r8, r8, r3
 8005d94:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005d98:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005d9c:	bfd6      	itet	le
 8005d9e:	f1c3 0320 	rsble	r3, r3, #32
 8005da2:	ea48 0003 	orrgt.w	r0, r8, r3
 8005da6:	fa04 f003 	lslle.w	r0, r4, r3
 8005daa:	f7fa fb83 	bl	80004b4 <__aeabi_ui2d>
 8005dae:	2201      	movs	r2, #1
 8005db0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005db4:	3e01      	subs	r6, #1
 8005db6:	9212      	str	r2, [sp, #72]	@ 0x48
 8005db8:	e776      	b.n	8005ca8 <_dtoa_r+0x100>
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e7b7      	b.n	8005d2e <_dtoa_r+0x186>
 8005dbe:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005dc0:	e7b6      	b.n	8005d30 <_dtoa_r+0x188>
 8005dc2:	427b      	negs	r3, r7
 8005dc4:	930a      	str	r3, [sp, #40]	@ 0x28
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	eba8 0807 	sub.w	r8, r8, r7
 8005dcc:	930e      	str	r3, [sp, #56]	@ 0x38
 8005dce:	e7c3      	b.n	8005d58 <_dtoa_r+0x1b0>
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005dd4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	dc35      	bgt.n	8005e46 <_dtoa_r+0x29e>
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005de0:	461a      	mov	r2, r3
 8005de2:	9221      	str	r2, [sp, #132]	@ 0x84
 8005de4:	e00b      	b.n	8005dfe <_dtoa_r+0x256>
 8005de6:	2301      	movs	r3, #1
 8005de8:	e7f3      	b.n	8005dd2 <_dtoa_r+0x22a>
 8005dea:	2300      	movs	r3, #0
 8005dec:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005dee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005df0:	18fb      	adds	r3, r7, r3
 8005df2:	9308      	str	r3, [sp, #32]
 8005df4:	3301      	adds	r3, #1
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	9307      	str	r3, [sp, #28]
 8005dfa:	bfb8      	it	lt
 8005dfc:	2301      	movlt	r3, #1
 8005dfe:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005e02:	2100      	movs	r1, #0
 8005e04:	2204      	movs	r2, #4
 8005e06:	f102 0514 	add.w	r5, r2, #20
 8005e0a:	429d      	cmp	r5, r3
 8005e0c:	d91f      	bls.n	8005e4e <_dtoa_r+0x2a6>
 8005e0e:	6041      	str	r1, [r0, #4]
 8005e10:	4658      	mov	r0, fp
 8005e12:	f000 fd91 	bl	8006938 <_Balloc>
 8005e16:	4682      	mov	sl, r0
 8005e18:	2800      	cmp	r0, #0
 8005e1a:	d13b      	bne.n	8005e94 <_dtoa_r+0x2ec>
 8005e1c:	4b1c      	ldr	r3, [pc, #112]	@ (8005e90 <_dtoa_r+0x2e8>)
 8005e1e:	4602      	mov	r2, r0
 8005e20:	f240 11af 	movw	r1, #431	@ 0x1af
 8005e24:	e6d4      	b.n	8005bd0 <_dtoa_r+0x28>
 8005e26:	2301      	movs	r3, #1
 8005e28:	e7e0      	b.n	8005dec <_dtoa_r+0x244>
 8005e2a:	2401      	movs	r4, #1
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	9320      	str	r3, [sp, #128]	@ 0x80
 8005e30:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005e32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005e36:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	2312      	movs	r3, #18
 8005e3e:	e7d0      	b.n	8005de2 <_dtoa_r+0x23a>
 8005e40:	2301      	movs	r3, #1
 8005e42:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e44:	e7f5      	b.n	8005e32 <_dtoa_r+0x28a>
 8005e46:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005e48:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005e4c:	e7d7      	b.n	8005dfe <_dtoa_r+0x256>
 8005e4e:	3101      	adds	r1, #1
 8005e50:	0052      	lsls	r2, r2, #1
 8005e52:	e7d8      	b.n	8005e06 <_dtoa_r+0x25e>
 8005e54:	f3af 8000 	nop.w
 8005e58:	636f4361 	.word	0x636f4361
 8005e5c:	3fd287a7 	.word	0x3fd287a7
 8005e60:	8b60c8b3 	.word	0x8b60c8b3
 8005e64:	3fc68a28 	.word	0x3fc68a28
 8005e68:	509f79fb 	.word	0x509f79fb
 8005e6c:	3fd34413 	.word	0x3fd34413
 8005e70:	080078a8 	.word	0x080078a8
 8005e74:	08007958 	.word	0x08007958
 8005e78:	7ff00000 	.word	0x7ff00000
 8005e7c:	08007954 	.word	0x08007954
 8005e80:	08007928 	.word	0x08007928
 8005e84:	08007927 	.word	0x08007927
 8005e88:	3ff80000 	.word	0x3ff80000
 8005e8c:	08007a50 	.word	0x08007a50
 8005e90:	080079b0 	.word	0x080079b0
 8005e94:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005e98:	6018      	str	r0, [r3, #0]
 8005e9a:	9b07      	ldr	r3, [sp, #28]
 8005e9c:	2b0e      	cmp	r3, #14
 8005e9e:	f200 80a4 	bhi.w	8005fea <_dtoa_r+0x442>
 8005ea2:	2c00      	cmp	r4, #0
 8005ea4:	f000 80a1 	beq.w	8005fea <_dtoa_r+0x442>
 8005ea8:	2f00      	cmp	r7, #0
 8005eaa:	dd33      	ble.n	8005f14 <_dtoa_r+0x36c>
 8005eac:	4b86      	ldr	r3, [pc, #536]	@ (80060c8 <_dtoa_r+0x520>)
 8005eae:	f007 020f 	and.w	r2, r7, #15
 8005eb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005eb6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005eba:	05f8      	lsls	r0, r7, #23
 8005ebc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005ec0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005ec4:	d516      	bpl.n	8005ef4 <_dtoa_r+0x34c>
 8005ec6:	4b81      	ldr	r3, [pc, #516]	@ (80060cc <_dtoa_r+0x524>)
 8005ec8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005ecc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005ed0:	f7fa fc94 	bl	80007fc <__aeabi_ddiv>
 8005ed4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ed8:	f004 040f 	and.w	r4, r4, #15
 8005edc:	2603      	movs	r6, #3
 8005ede:	4d7b      	ldr	r5, [pc, #492]	@ (80060cc <_dtoa_r+0x524>)
 8005ee0:	b954      	cbnz	r4, 8005ef8 <_dtoa_r+0x350>
 8005ee2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ee6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005eea:	f7fa fc87 	bl	80007fc <__aeabi_ddiv>
 8005eee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ef2:	e028      	b.n	8005f46 <_dtoa_r+0x39e>
 8005ef4:	2602      	movs	r6, #2
 8005ef6:	e7f2      	b.n	8005ede <_dtoa_r+0x336>
 8005ef8:	07e1      	lsls	r1, r4, #31
 8005efa:	d508      	bpl.n	8005f0e <_dtoa_r+0x366>
 8005efc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f00:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005f04:	f7fa fb50 	bl	80005a8 <__aeabi_dmul>
 8005f08:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f0c:	3601      	adds	r6, #1
 8005f0e:	1064      	asrs	r4, r4, #1
 8005f10:	3508      	adds	r5, #8
 8005f12:	e7e5      	b.n	8005ee0 <_dtoa_r+0x338>
 8005f14:	f000 80d2 	beq.w	80060bc <_dtoa_r+0x514>
 8005f18:	427c      	negs	r4, r7
 8005f1a:	4b6b      	ldr	r3, [pc, #428]	@ (80060c8 <_dtoa_r+0x520>)
 8005f1c:	4d6b      	ldr	r5, [pc, #428]	@ (80060cc <_dtoa_r+0x524>)
 8005f1e:	f004 020f 	and.w	r2, r4, #15
 8005f22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f2a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f2e:	f7fa fb3b 	bl	80005a8 <__aeabi_dmul>
 8005f32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f36:	1124      	asrs	r4, r4, #4
 8005f38:	2300      	movs	r3, #0
 8005f3a:	2602      	movs	r6, #2
 8005f3c:	2c00      	cmp	r4, #0
 8005f3e:	f040 80b2 	bne.w	80060a6 <_dtoa_r+0x4fe>
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d1d3      	bne.n	8005eee <_dtoa_r+0x346>
 8005f46:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005f48:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f000 80b7 	beq.w	80060c0 <_dtoa_r+0x518>
 8005f52:	4b5f      	ldr	r3, [pc, #380]	@ (80060d0 <_dtoa_r+0x528>)
 8005f54:	2200      	movs	r2, #0
 8005f56:	4620      	mov	r0, r4
 8005f58:	4629      	mov	r1, r5
 8005f5a:	f7fa fd97 	bl	8000a8c <__aeabi_dcmplt>
 8005f5e:	2800      	cmp	r0, #0
 8005f60:	f000 80ae 	beq.w	80060c0 <_dtoa_r+0x518>
 8005f64:	9b07      	ldr	r3, [sp, #28]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	f000 80aa 	beq.w	80060c0 <_dtoa_r+0x518>
 8005f6c:	9b08      	ldr	r3, [sp, #32]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	dd37      	ble.n	8005fe2 <_dtoa_r+0x43a>
 8005f72:	1e7b      	subs	r3, r7, #1
 8005f74:	9304      	str	r3, [sp, #16]
 8005f76:	4620      	mov	r0, r4
 8005f78:	4b56      	ldr	r3, [pc, #344]	@ (80060d4 <_dtoa_r+0x52c>)
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	4629      	mov	r1, r5
 8005f7e:	f7fa fb13 	bl	80005a8 <__aeabi_dmul>
 8005f82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f86:	9c08      	ldr	r4, [sp, #32]
 8005f88:	3601      	adds	r6, #1
 8005f8a:	4630      	mov	r0, r6
 8005f8c:	f7fa faa2 	bl	80004d4 <__aeabi_i2d>
 8005f90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f94:	f7fa fb08 	bl	80005a8 <__aeabi_dmul>
 8005f98:	4b4f      	ldr	r3, [pc, #316]	@ (80060d8 <_dtoa_r+0x530>)
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f7fa f94e 	bl	800023c <__adddf3>
 8005fa0:	4605      	mov	r5, r0
 8005fa2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005fa6:	2c00      	cmp	r4, #0
 8005fa8:	f040 809a 	bne.w	80060e0 <_dtoa_r+0x538>
 8005fac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fb0:	4b4a      	ldr	r3, [pc, #296]	@ (80060dc <_dtoa_r+0x534>)
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f7fa f940 	bl	8000238 <__aeabi_dsub>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	460b      	mov	r3, r1
 8005fbc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005fc0:	462a      	mov	r2, r5
 8005fc2:	4633      	mov	r3, r6
 8005fc4:	f7fa fd80 	bl	8000ac8 <__aeabi_dcmpgt>
 8005fc8:	2800      	cmp	r0, #0
 8005fca:	f040 828e 	bne.w	80064ea <_dtoa_r+0x942>
 8005fce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fd2:	462a      	mov	r2, r5
 8005fd4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005fd8:	f7fa fd58 	bl	8000a8c <__aeabi_dcmplt>
 8005fdc:	2800      	cmp	r0, #0
 8005fde:	f040 8127 	bne.w	8006230 <_dtoa_r+0x688>
 8005fe2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005fe6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005fea:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	f2c0 8163 	blt.w	80062b8 <_dtoa_r+0x710>
 8005ff2:	2f0e      	cmp	r7, #14
 8005ff4:	f300 8160 	bgt.w	80062b8 <_dtoa_r+0x710>
 8005ff8:	4b33      	ldr	r3, [pc, #204]	@ (80060c8 <_dtoa_r+0x520>)
 8005ffa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005ffe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006002:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006006:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006008:	2b00      	cmp	r3, #0
 800600a:	da03      	bge.n	8006014 <_dtoa_r+0x46c>
 800600c:	9b07      	ldr	r3, [sp, #28]
 800600e:	2b00      	cmp	r3, #0
 8006010:	f340 8100 	ble.w	8006214 <_dtoa_r+0x66c>
 8006014:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006018:	4656      	mov	r6, sl
 800601a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800601e:	4620      	mov	r0, r4
 8006020:	4629      	mov	r1, r5
 8006022:	f7fa fbeb 	bl	80007fc <__aeabi_ddiv>
 8006026:	f7fa fd6f 	bl	8000b08 <__aeabi_d2iz>
 800602a:	4680      	mov	r8, r0
 800602c:	f7fa fa52 	bl	80004d4 <__aeabi_i2d>
 8006030:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006034:	f7fa fab8 	bl	80005a8 <__aeabi_dmul>
 8006038:	4602      	mov	r2, r0
 800603a:	460b      	mov	r3, r1
 800603c:	4620      	mov	r0, r4
 800603e:	4629      	mov	r1, r5
 8006040:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006044:	f7fa f8f8 	bl	8000238 <__aeabi_dsub>
 8006048:	f806 4b01 	strb.w	r4, [r6], #1
 800604c:	9d07      	ldr	r5, [sp, #28]
 800604e:	eba6 040a 	sub.w	r4, r6, sl
 8006052:	42a5      	cmp	r5, r4
 8006054:	4602      	mov	r2, r0
 8006056:	460b      	mov	r3, r1
 8006058:	f040 8116 	bne.w	8006288 <_dtoa_r+0x6e0>
 800605c:	f7fa f8ee 	bl	800023c <__adddf3>
 8006060:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006064:	4604      	mov	r4, r0
 8006066:	460d      	mov	r5, r1
 8006068:	f7fa fd2e 	bl	8000ac8 <__aeabi_dcmpgt>
 800606c:	2800      	cmp	r0, #0
 800606e:	f040 80f8 	bne.w	8006262 <_dtoa_r+0x6ba>
 8006072:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006076:	4620      	mov	r0, r4
 8006078:	4629      	mov	r1, r5
 800607a:	f7fa fcfd 	bl	8000a78 <__aeabi_dcmpeq>
 800607e:	b118      	cbz	r0, 8006088 <_dtoa_r+0x4e0>
 8006080:	f018 0f01 	tst.w	r8, #1
 8006084:	f040 80ed 	bne.w	8006262 <_dtoa_r+0x6ba>
 8006088:	4649      	mov	r1, r9
 800608a:	4658      	mov	r0, fp
 800608c:	f000 fc94 	bl	80069b8 <_Bfree>
 8006090:	2300      	movs	r3, #0
 8006092:	7033      	strb	r3, [r6, #0]
 8006094:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006096:	3701      	adds	r7, #1
 8006098:	601f      	str	r7, [r3, #0]
 800609a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800609c:	2b00      	cmp	r3, #0
 800609e:	f000 8320 	beq.w	80066e2 <_dtoa_r+0xb3a>
 80060a2:	601e      	str	r6, [r3, #0]
 80060a4:	e31d      	b.n	80066e2 <_dtoa_r+0xb3a>
 80060a6:	07e2      	lsls	r2, r4, #31
 80060a8:	d505      	bpl.n	80060b6 <_dtoa_r+0x50e>
 80060aa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80060ae:	f7fa fa7b 	bl	80005a8 <__aeabi_dmul>
 80060b2:	3601      	adds	r6, #1
 80060b4:	2301      	movs	r3, #1
 80060b6:	1064      	asrs	r4, r4, #1
 80060b8:	3508      	adds	r5, #8
 80060ba:	e73f      	b.n	8005f3c <_dtoa_r+0x394>
 80060bc:	2602      	movs	r6, #2
 80060be:	e742      	b.n	8005f46 <_dtoa_r+0x39e>
 80060c0:	9c07      	ldr	r4, [sp, #28]
 80060c2:	9704      	str	r7, [sp, #16]
 80060c4:	e761      	b.n	8005f8a <_dtoa_r+0x3e2>
 80060c6:	bf00      	nop
 80060c8:	08007a50 	.word	0x08007a50
 80060cc:	08007a28 	.word	0x08007a28
 80060d0:	3ff00000 	.word	0x3ff00000
 80060d4:	40240000 	.word	0x40240000
 80060d8:	401c0000 	.word	0x401c0000
 80060dc:	40140000 	.word	0x40140000
 80060e0:	4b70      	ldr	r3, [pc, #448]	@ (80062a4 <_dtoa_r+0x6fc>)
 80060e2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80060e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80060e8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80060ec:	4454      	add	r4, sl
 80060ee:	2900      	cmp	r1, #0
 80060f0:	d045      	beq.n	800617e <_dtoa_r+0x5d6>
 80060f2:	496d      	ldr	r1, [pc, #436]	@ (80062a8 <_dtoa_r+0x700>)
 80060f4:	2000      	movs	r0, #0
 80060f6:	f7fa fb81 	bl	80007fc <__aeabi_ddiv>
 80060fa:	4633      	mov	r3, r6
 80060fc:	462a      	mov	r2, r5
 80060fe:	f7fa f89b 	bl	8000238 <__aeabi_dsub>
 8006102:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006106:	4656      	mov	r6, sl
 8006108:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800610c:	f7fa fcfc 	bl	8000b08 <__aeabi_d2iz>
 8006110:	4605      	mov	r5, r0
 8006112:	f7fa f9df 	bl	80004d4 <__aeabi_i2d>
 8006116:	4602      	mov	r2, r0
 8006118:	460b      	mov	r3, r1
 800611a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800611e:	f7fa f88b 	bl	8000238 <__aeabi_dsub>
 8006122:	3530      	adds	r5, #48	@ 0x30
 8006124:	4602      	mov	r2, r0
 8006126:	460b      	mov	r3, r1
 8006128:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800612c:	f806 5b01 	strb.w	r5, [r6], #1
 8006130:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006134:	f7fa fcaa 	bl	8000a8c <__aeabi_dcmplt>
 8006138:	2800      	cmp	r0, #0
 800613a:	d163      	bne.n	8006204 <_dtoa_r+0x65c>
 800613c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006140:	495a      	ldr	r1, [pc, #360]	@ (80062ac <_dtoa_r+0x704>)
 8006142:	2000      	movs	r0, #0
 8006144:	f7fa f878 	bl	8000238 <__aeabi_dsub>
 8006148:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800614c:	f7fa fc9e 	bl	8000a8c <__aeabi_dcmplt>
 8006150:	2800      	cmp	r0, #0
 8006152:	f040 8087 	bne.w	8006264 <_dtoa_r+0x6bc>
 8006156:	42a6      	cmp	r6, r4
 8006158:	f43f af43 	beq.w	8005fe2 <_dtoa_r+0x43a>
 800615c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006160:	4b53      	ldr	r3, [pc, #332]	@ (80062b0 <_dtoa_r+0x708>)
 8006162:	2200      	movs	r2, #0
 8006164:	f7fa fa20 	bl	80005a8 <__aeabi_dmul>
 8006168:	4b51      	ldr	r3, [pc, #324]	@ (80062b0 <_dtoa_r+0x708>)
 800616a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800616e:	2200      	movs	r2, #0
 8006170:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006174:	f7fa fa18 	bl	80005a8 <__aeabi_dmul>
 8006178:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800617c:	e7c4      	b.n	8006108 <_dtoa_r+0x560>
 800617e:	4631      	mov	r1, r6
 8006180:	4628      	mov	r0, r5
 8006182:	f7fa fa11 	bl	80005a8 <__aeabi_dmul>
 8006186:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800618a:	9413      	str	r4, [sp, #76]	@ 0x4c
 800618c:	4656      	mov	r6, sl
 800618e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006192:	f7fa fcb9 	bl	8000b08 <__aeabi_d2iz>
 8006196:	4605      	mov	r5, r0
 8006198:	f7fa f99c 	bl	80004d4 <__aeabi_i2d>
 800619c:	4602      	mov	r2, r0
 800619e:	460b      	mov	r3, r1
 80061a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061a4:	f7fa f848 	bl	8000238 <__aeabi_dsub>
 80061a8:	3530      	adds	r5, #48	@ 0x30
 80061aa:	f806 5b01 	strb.w	r5, [r6], #1
 80061ae:	4602      	mov	r2, r0
 80061b0:	460b      	mov	r3, r1
 80061b2:	42a6      	cmp	r6, r4
 80061b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80061b8:	f04f 0200 	mov.w	r2, #0
 80061bc:	d124      	bne.n	8006208 <_dtoa_r+0x660>
 80061be:	4b3a      	ldr	r3, [pc, #232]	@ (80062a8 <_dtoa_r+0x700>)
 80061c0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80061c4:	f7fa f83a 	bl	800023c <__adddf3>
 80061c8:	4602      	mov	r2, r0
 80061ca:	460b      	mov	r3, r1
 80061cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061d0:	f7fa fc7a 	bl	8000ac8 <__aeabi_dcmpgt>
 80061d4:	2800      	cmp	r0, #0
 80061d6:	d145      	bne.n	8006264 <_dtoa_r+0x6bc>
 80061d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80061dc:	4932      	ldr	r1, [pc, #200]	@ (80062a8 <_dtoa_r+0x700>)
 80061de:	2000      	movs	r0, #0
 80061e0:	f7fa f82a 	bl	8000238 <__aeabi_dsub>
 80061e4:	4602      	mov	r2, r0
 80061e6:	460b      	mov	r3, r1
 80061e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061ec:	f7fa fc4e 	bl	8000a8c <__aeabi_dcmplt>
 80061f0:	2800      	cmp	r0, #0
 80061f2:	f43f aef6 	beq.w	8005fe2 <_dtoa_r+0x43a>
 80061f6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80061f8:	1e73      	subs	r3, r6, #1
 80061fa:	9313      	str	r3, [sp, #76]	@ 0x4c
 80061fc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006200:	2b30      	cmp	r3, #48	@ 0x30
 8006202:	d0f8      	beq.n	80061f6 <_dtoa_r+0x64e>
 8006204:	9f04      	ldr	r7, [sp, #16]
 8006206:	e73f      	b.n	8006088 <_dtoa_r+0x4e0>
 8006208:	4b29      	ldr	r3, [pc, #164]	@ (80062b0 <_dtoa_r+0x708>)
 800620a:	f7fa f9cd 	bl	80005a8 <__aeabi_dmul>
 800620e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006212:	e7bc      	b.n	800618e <_dtoa_r+0x5e6>
 8006214:	d10c      	bne.n	8006230 <_dtoa_r+0x688>
 8006216:	4b27      	ldr	r3, [pc, #156]	@ (80062b4 <_dtoa_r+0x70c>)
 8006218:	2200      	movs	r2, #0
 800621a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800621e:	f7fa f9c3 	bl	80005a8 <__aeabi_dmul>
 8006222:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006226:	f7fa fc45 	bl	8000ab4 <__aeabi_dcmpge>
 800622a:	2800      	cmp	r0, #0
 800622c:	f000 815b 	beq.w	80064e6 <_dtoa_r+0x93e>
 8006230:	2400      	movs	r4, #0
 8006232:	4625      	mov	r5, r4
 8006234:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006236:	43db      	mvns	r3, r3
 8006238:	9304      	str	r3, [sp, #16]
 800623a:	4656      	mov	r6, sl
 800623c:	2700      	movs	r7, #0
 800623e:	4621      	mov	r1, r4
 8006240:	4658      	mov	r0, fp
 8006242:	f000 fbb9 	bl	80069b8 <_Bfree>
 8006246:	2d00      	cmp	r5, #0
 8006248:	d0dc      	beq.n	8006204 <_dtoa_r+0x65c>
 800624a:	b12f      	cbz	r7, 8006258 <_dtoa_r+0x6b0>
 800624c:	42af      	cmp	r7, r5
 800624e:	d003      	beq.n	8006258 <_dtoa_r+0x6b0>
 8006250:	4639      	mov	r1, r7
 8006252:	4658      	mov	r0, fp
 8006254:	f000 fbb0 	bl	80069b8 <_Bfree>
 8006258:	4629      	mov	r1, r5
 800625a:	4658      	mov	r0, fp
 800625c:	f000 fbac 	bl	80069b8 <_Bfree>
 8006260:	e7d0      	b.n	8006204 <_dtoa_r+0x65c>
 8006262:	9704      	str	r7, [sp, #16]
 8006264:	4633      	mov	r3, r6
 8006266:	461e      	mov	r6, r3
 8006268:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800626c:	2a39      	cmp	r2, #57	@ 0x39
 800626e:	d107      	bne.n	8006280 <_dtoa_r+0x6d8>
 8006270:	459a      	cmp	sl, r3
 8006272:	d1f8      	bne.n	8006266 <_dtoa_r+0x6be>
 8006274:	9a04      	ldr	r2, [sp, #16]
 8006276:	3201      	adds	r2, #1
 8006278:	9204      	str	r2, [sp, #16]
 800627a:	2230      	movs	r2, #48	@ 0x30
 800627c:	f88a 2000 	strb.w	r2, [sl]
 8006280:	781a      	ldrb	r2, [r3, #0]
 8006282:	3201      	adds	r2, #1
 8006284:	701a      	strb	r2, [r3, #0]
 8006286:	e7bd      	b.n	8006204 <_dtoa_r+0x65c>
 8006288:	4b09      	ldr	r3, [pc, #36]	@ (80062b0 <_dtoa_r+0x708>)
 800628a:	2200      	movs	r2, #0
 800628c:	f7fa f98c 	bl	80005a8 <__aeabi_dmul>
 8006290:	2200      	movs	r2, #0
 8006292:	2300      	movs	r3, #0
 8006294:	4604      	mov	r4, r0
 8006296:	460d      	mov	r5, r1
 8006298:	f7fa fbee 	bl	8000a78 <__aeabi_dcmpeq>
 800629c:	2800      	cmp	r0, #0
 800629e:	f43f aebc 	beq.w	800601a <_dtoa_r+0x472>
 80062a2:	e6f1      	b.n	8006088 <_dtoa_r+0x4e0>
 80062a4:	08007a50 	.word	0x08007a50
 80062a8:	3fe00000 	.word	0x3fe00000
 80062ac:	3ff00000 	.word	0x3ff00000
 80062b0:	40240000 	.word	0x40240000
 80062b4:	40140000 	.word	0x40140000
 80062b8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80062ba:	2a00      	cmp	r2, #0
 80062bc:	f000 80db 	beq.w	8006476 <_dtoa_r+0x8ce>
 80062c0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80062c2:	2a01      	cmp	r2, #1
 80062c4:	f300 80bf 	bgt.w	8006446 <_dtoa_r+0x89e>
 80062c8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80062ca:	2a00      	cmp	r2, #0
 80062cc:	f000 80b7 	beq.w	800643e <_dtoa_r+0x896>
 80062d0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80062d4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80062d6:	4646      	mov	r6, r8
 80062d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80062da:	2101      	movs	r1, #1
 80062dc:	441a      	add	r2, r3
 80062de:	4658      	mov	r0, fp
 80062e0:	4498      	add	r8, r3
 80062e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80062e4:	f000 fc1c 	bl	8006b20 <__i2b>
 80062e8:	4605      	mov	r5, r0
 80062ea:	b15e      	cbz	r6, 8006304 <_dtoa_r+0x75c>
 80062ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	dd08      	ble.n	8006304 <_dtoa_r+0x75c>
 80062f2:	42b3      	cmp	r3, r6
 80062f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80062f6:	bfa8      	it	ge
 80062f8:	4633      	movge	r3, r6
 80062fa:	eba8 0803 	sub.w	r8, r8, r3
 80062fe:	1af6      	subs	r6, r6, r3
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	9309      	str	r3, [sp, #36]	@ 0x24
 8006304:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006306:	b1f3      	cbz	r3, 8006346 <_dtoa_r+0x79e>
 8006308:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800630a:	2b00      	cmp	r3, #0
 800630c:	f000 80b7 	beq.w	800647e <_dtoa_r+0x8d6>
 8006310:	b18c      	cbz	r4, 8006336 <_dtoa_r+0x78e>
 8006312:	4629      	mov	r1, r5
 8006314:	4622      	mov	r2, r4
 8006316:	4658      	mov	r0, fp
 8006318:	f000 fcc2 	bl	8006ca0 <__pow5mult>
 800631c:	464a      	mov	r2, r9
 800631e:	4601      	mov	r1, r0
 8006320:	4605      	mov	r5, r0
 8006322:	4658      	mov	r0, fp
 8006324:	f000 fc12 	bl	8006b4c <__multiply>
 8006328:	4649      	mov	r1, r9
 800632a:	9004      	str	r0, [sp, #16]
 800632c:	4658      	mov	r0, fp
 800632e:	f000 fb43 	bl	80069b8 <_Bfree>
 8006332:	9b04      	ldr	r3, [sp, #16]
 8006334:	4699      	mov	r9, r3
 8006336:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006338:	1b1a      	subs	r2, r3, r4
 800633a:	d004      	beq.n	8006346 <_dtoa_r+0x79e>
 800633c:	4649      	mov	r1, r9
 800633e:	4658      	mov	r0, fp
 8006340:	f000 fcae 	bl	8006ca0 <__pow5mult>
 8006344:	4681      	mov	r9, r0
 8006346:	2101      	movs	r1, #1
 8006348:	4658      	mov	r0, fp
 800634a:	f000 fbe9 	bl	8006b20 <__i2b>
 800634e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006350:	4604      	mov	r4, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	f000 81c9 	beq.w	80066ea <_dtoa_r+0xb42>
 8006358:	461a      	mov	r2, r3
 800635a:	4601      	mov	r1, r0
 800635c:	4658      	mov	r0, fp
 800635e:	f000 fc9f 	bl	8006ca0 <__pow5mult>
 8006362:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006364:	2b01      	cmp	r3, #1
 8006366:	4604      	mov	r4, r0
 8006368:	f300 808f 	bgt.w	800648a <_dtoa_r+0x8e2>
 800636c:	9b02      	ldr	r3, [sp, #8]
 800636e:	2b00      	cmp	r3, #0
 8006370:	f040 8087 	bne.w	8006482 <_dtoa_r+0x8da>
 8006374:	9b03      	ldr	r3, [sp, #12]
 8006376:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800637a:	2b00      	cmp	r3, #0
 800637c:	f040 8083 	bne.w	8006486 <_dtoa_r+0x8de>
 8006380:	9b03      	ldr	r3, [sp, #12]
 8006382:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006386:	0d1b      	lsrs	r3, r3, #20
 8006388:	051b      	lsls	r3, r3, #20
 800638a:	b12b      	cbz	r3, 8006398 <_dtoa_r+0x7f0>
 800638c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800638e:	3301      	adds	r3, #1
 8006390:	9309      	str	r3, [sp, #36]	@ 0x24
 8006392:	f108 0801 	add.w	r8, r8, #1
 8006396:	2301      	movs	r3, #1
 8006398:	930a      	str	r3, [sp, #40]	@ 0x28
 800639a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800639c:	2b00      	cmp	r3, #0
 800639e:	f000 81aa 	beq.w	80066f6 <_dtoa_r+0xb4e>
 80063a2:	6923      	ldr	r3, [r4, #16]
 80063a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80063a8:	6918      	ldr	r0, [r3, #16]
 80063aa:	f000 fb6d 	bl	8006a88 <__hi0bits>
 80063ae:	f1c0 0020 	rsb	r0, r0, #32
 80063b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063b4:	4418      	add	r0, r3
 80063b6:	f010 001f 	ands.w	r0, r0, #31
 80063ba:	d071      	beq.n	80064a0 <_dtoa_r+0x8f8>
 80063bc:	f1c0 0320 	rsb	r3, r0, #32
 80063c0:	2b04      	cmp	r3, #4
 80063c2:	dd65      	ble.n	8006490 <_dtoa_r+0x8e8>
 80063c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063c6:	f1c0 001c 	rsb	r0, r0, #28
 80063ca:	4403      	add	r3, r0
 80063cc:	4480      	add	r8, r0
 80063ce:	4406      	add	r6, r0
 80063d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80063d2:	f1b8 0f00 	cmp.w	r8, #0
 80063d6:	dd05      	ble.n	80063e4 <_dtoa_r+0x83c>
 80063d8:	4649      	mov	r1, r9
 80063da:	4642      	mov	r2, r8
 80063dc:	4658      	mov	r0, fp
 80063de:	f000 fcb9 	bl	8006d54 <__lshift>
 80063e2:	4681      	mov	r9, r0
 80063e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	dd05      	ble.n	80063f6 <_dtoa_r+0x84e>
 80063ea:	4621      	mov	r1, r4
 80063ec:	461a      	mov	r2, r3
 80063ee:	4658      	mov	r0, fp
 80063f0:	f000 fcb0 	bl	8006d54 <__lshift>
 80063f4:	4604      	mov	r4, r0
 80063f6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d053      	beq.n	80064a4 <_dtoa_r+0x8fc>
 80063fc:	4621      	mov	r1, r4
 80063fe:	4648      	mov	r0, r9
 8006400:	f000 fd14 	bl	8006e2c <__mcmp>
 8006404:	2800      	cmp	r0, #0
 8006406:	da4d      	bge.n	80064a4 <_dtoa_r+0x8fc>
 8006408:	1e7b      	subs	r3, r7, #1
 800640a:	9304      	str	r3, [sp, #16]
 800640c:	4649      	mov	r1, r9
 800640e:	2300      	movs	r3, #0
 8006410:	220a      	movs	r2, #10
 8006412:	4658      	mov	r0, fp
 8006414:	f000 faf2 	bl	80069fc <__multadd>
 8006418:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800641a:	4681      	mov	r9, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	f000 816c 	beq.w	80066fa <_dtoa_r+0xb52>
 8006422:	2300      	movs	r3, #0
 8006424:	4629      	mov	r1, r5
 8006426:	220a      	movs	r2, #10
 8006428:	4658      	mov	r0, fp
 800642a:	f000 fae7 	bl	80069fc <__multadd>
 800642e:	9b08      	ldr	r3, [sp, #32]
 8006430:	2b00      	cmp	r3, #0
 8006432:	4605      	mov	r5, r0
 8006434:	dc61      	bgt.n	80064fa <_dtoa_r+0x952>
 8006436:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006438:	2b02      	cmp	r3, #2
 800643a:	dc3b      	bgt.n	80064b4 <_dtoa_r+0x90c>
 800643c:	e05d      	b.n	80064fa <_dtoa_r+0x952>
 800643e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006440:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006444:	e746      	b.n	80062d4 <_dtoa_r+0x72c>
 8006446:	9b07      	ldr	r3, [sp, #28]
 8006448:	1e5c      	subs	r4, r3, #1
 800644a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800644c:	42a3      	cmp	r3, r4
 800644e:	bfbf      	itttt	lt
 8006450:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006452:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8006454:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006456:	1ae3      	sublt	r3, r4, r3
 8006458:	bfb4      	ite	lt
 800645a:	18d2      	addlt	r2, r2, r3
 800645c:	1b1c      	subge	r4, r3, r4
 800645e:	9b07      	ldr	r3, [sp, #28]
 8006460:	bfbc      	itt	lt
 8006462:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8006464:	2400      	movlt	r4, #0
 8006466:	2b00      	cmp	r3, #0
 8006468:	bfb5      	itete	lt
 800646a:	eba8 0603 	sublt.w	r6, r8, r3
 800646e:	9b07      	ldrge	r3, [sp, #28]
 8006470:	2300      	movlt	r3, #0
 8006472:	4646      	movge	r6, r8
 8006474:	e730      	b.n	80062d8 <_dtoa_r+0x730>
 8006476:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006478:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800647a:	4646      	mov	r6, r8
 800647c:	e735      	b.n	80062ea <_dtoa_r+0x742>
 800647e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006480:	e75c      	b.n	800633c <_dtoa_r+0x794>
 8006482:	2300      	movs	r3, #0
 8006484:	e788      	b.n	8006398 <_dtoa_r+0x7f0>
 8006486:	9b02      	ldr	r3, [sp, #8]
 8006488:	e786      	b.n	8006398 <_dtoa_r+0x7f0>
 800648a:	2300      	movs	r3, #0
 800648c:	930a      	str	r3, [sp, #40]	@ 0x28
 800648e:	e788      	b.n	80063a2 <_dtoa_r+0x7fa>
 8006490:	d09f      	beq.n	80063d2 <_dtoa_r+0x82a>
 8006492:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006494:	331c      	adds	r3, #28
 8006496:	441a      	add	r2, r3
 8006498:	4498      	add	r8, r3
 800649a:	441e      	add	r6, r3
 800649c:	9209      	str	r2, [sp, #36]	@ 0x24
 800649e:	e798      	b.n	80063d2 <_dtoa_r+0x82a>
 80064a0:	4603      	mov	r3, r0
 80064a2:	e7f6      	b.n	8006492 <_dtoa_r+0x8ea>
 80064a4:	9b07      	ldr	r3, [sp, #28]
 80064a6:	9704      	str	r7, [sp, #16]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	dc20      	bgt.n	80064ee <_dtoa_r+0x946>
 80064ac:	9308      	str	r3, [sp, #32]
 80064ae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	dd1e      	ble.n	80064f2 <_dtoa_r+0x94a>
 80064b4:	9b08      	ldr	r3, [sp, #32]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	f47f aebc 	bne.w	8006234 <_dtoa_r+0x68c>
 80064bc:	4621      	mov	r1, r4
 80064be:	2205      	movs	r2, #5
 80064c0:	4658      	mov	r0, fp
 80064c2:	f000 fa9b 	bl	80069fc <__multadd>
 80064c6:	4601      	mov	r1, r0
 80064c8:	4604      	mov	r4, r0
 80064ca:	4648      	mov	r0, r9
 80064cc:	f000 fcae 	bl	8006e2c <__mcmp>
 80064d0:	2800      	cmp	r0, #0
 80064d2:	f77f aeaf 	ble.w	8006234 <_dtoa_r+0x68c>
 80064d6:	4656      	mov	r6, sl
 80064d8:	2331      	movs	r3, #49	@ 0x31
 80064da:	f806 3b01 	strb.w	r3, [r6], #1
 80064de:	9b04      	ldr	r3, [sp, #16]
 80064e0:	3301      	adds	r3, #1
 80064e2:	9304      	str	r3, [sp, #16]
 80064e4:	e6aa      	b.n	800623c <_dtoa_r+0x694>
 80064e6:	9c07      	ldr	r4, [sp, #28]
 80064e8:	9704      	str	r7, [sp, #16]
 80064ea:	4625      	mov	r5, r4
 80064ec:	e7f3      	b.n	80064d6 <_dtoa_r+0x92e>
 80064ee:	9b07      	ldr	r3, [sp, #28]
 80064f0:	9308      	str	r3, [sp, #32]
 80064f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f000 8104 	beq.w	8006702 <_dtoa_r+0xb5a>
 80064fa:	2e00      	cmp	r6, #0
 80064fc:	dd05      	ble.n	800650a <_dtoa_r+0x962>
 80064fe:	4629      	mov	r1, r5
 8006500:	4632      	mov	r2, r6
 8006502:	4658      	mov	r0, fp
 8006504:	f000 fc26 	bl	8006d54 <__lshift>
 8006508:	4605      	mov	r5, r0
 800650a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800650c:	2b00      	cmp	r3, #0
 800650e:	d05a      	beq.n	80065c6 <_dtoa_r+0xa1e>
 8006510:	6869      	ldr	r1, [r5, #4]
 8006512:	4658      	mov	r0, fp
 8006514:	f000 fa10 	bl	8006938 <_Balloc>
 8006518:	4606      	mov	r6, r0
 800651a:	b928      	cbnz	r0, 8006528 <_dtoa_r+0x980>
 800651c:	4b84      	ldr	r3, [pc, #528]	@ (8006730 <_dtoa_r+0xb88>)
 800651e:	4602      	mov	r2, r0
 8006520:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006524:	f7ff bb54 	b.w	8005bd0 <_dtoa_r+0x28>
 8006528:	692a      	ldr	r2, [r5, #16]
 800652a:	3202      	adds	r2, #2
 800652c:	0092      	lsls	r2, r2, #2
 800652e:	f105 010c 	add.w	r1, r5, #12
 8006532:	300c      	adds	r0, #12
 8006534:	f001 f840 	bl	80075b8 <memcpy>
 8006538:	2201      	movs	r2, #1
 800653a:	4631      	mov	r1, r6
 800653c:	4658      	mov	r0, fp
 800653e:	f000 fc09 	bl	8006d54 <__lshift>
 8006542:	f10a 0301 	add.w	r3, sl, #1
 8006546:	9307      	str	r3, [sp, #28]
 8006548:	9b08      	ldr	r3, [sp, #32]
 800654a:	4453      	add	r3, sl
 800654c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800654e:	9b02      	ldr	r3, [sp, #8]
 8006550:	f003 0301 	and.w	r3, r3, #1
 8006554:	462f      	mov	r7, r5
 8006556:	930a      	str	r3, [sp, #40]	@ 0x28
 8006558:	4605      	mov	r5, r0
 800655a:	9b07      	ldr	r3, [sp, #28]
 800655c:	4621      	mov	r1, r4
 800655e:	3b01      	subs	r3, #1
 8006560:	4648      	mov	r0, r9
 8006562:	9302      	str	r3, [sp, #8]
 8006564:	f7ff fa96 	bl	8005a94 <quorem>
 8006568:	4639      	mov	r1, r7
 800656a:	9008      	str	r0, [sp, #32]
 800656c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006570:	4648      	mov	r0, r9
 8006572:	f000 fc5b 	bl	8006e2c <__mcmp>
 8006576:	462a      	mov	r2, r5
 8006578:	9009      	str	r0, [sp, #36]	@ 0x24
 800657a:	4621      	mov	r1, r4
 800657c:	4658      	mov	r0, fp
 800657e:	f000 fc71 	bl	8006e64 <__mdiff>
 8006582:	68c2      	ldr	r2, [r0, #12]
 8006584:	4606      	mov	r6, r0
 8006586:	bb02      	cbnz	r2, 80065ca <_dtoa_r+0xa22>
 8006588:	4601      	mov	r1, r0
 800658a:	4648      	mov	r0, r9
 800658c:	f000 fc4e 	bl	8006e2c <__mcmp>
 8006590:	4602      	mov	r2, r0
 8006592:	4631      	mov	r1, r6
 8006594:	4658      	mov	r0, fp
 8006596:	920c      	str	r2, [sp, #48]	@ 0x30
 8006598:	f000 fa0e 	bl	80069b8 <_Bfree>
 800659c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800659e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80065a0:	9e07      	ldr	r6, [sp, #28]
 80065a2:	ea43 0102 	orr.w	r1, r3, r2
 80065a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065a8:	4319      	orrs	r1, r3
 80065aa:	d110      	bne.n	80065ce <_dtoa_r+0xa26>
 80065ac:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80065b0:	d029      	beq.n	8006606 <_dtoa_r+0xa5e>
 80065b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	dd02      	ble.n	80065be <_dtoa_r+0xa16>
 80065b8:	9b08      	ldr	r3, [sp, #32]
 80065ba:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80065be:	9b02      	ldr	r3, [sp, #8]
 80065c0:	f883 8000 	strb.w	r8, [r3]
 80065c4:	e63b      	b.n	800623e <_dtoa_r+0x696>
 80065c6:	4628      	mov	r0, r5
 80065c8:	e7bb      	b.n	8006542 <_dtoa_r+0x99a>
 80065ca:	2201      	movs	r2, #1
 80065cc:	e7e1      	b.n	8006592 <_dtoa_r+0x9ea>
 80065ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	db04      	blt.n	80065de <_dtoa_r+0xa36>
 80065d4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80065d6:	430b      	orrs	r3, r1
 80065d8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80065da:	430b      	orrs	r3, r1
 80065dc:	d120      	bne.n	8006620 <_dtoa_r+0xa78>
 80065de:	2a00      	cmp	r2, #0
 80065e0:	dded      	ble.n	80065be <_dtoa_r+0xa16>
 80065e2:	4649      	mov	r1, r9
 80065e4:	2201      	movs	r2, #1
 80065e6:	4658      	mov	r0, fp
 80065e8:	f000 fbb4 	bl	8006d54 <__lshift>
 80065ec:	4621      	mov	r1, r4
 80065ee:	4681      	mov	r9, r0
 80065f0:	f000 fc1c 	bl	8006e2c <__mcmp>
 80065f4:	2800      	cmp	r0, #0
 80065f6:	dc03      	bgt.n	8006600 <_dtoa_r+0xa58>
 80065f8:	d1e1      	bne.n	80065be <_dtoa_r+0xa16>
 80065fa:	f018 0f01 	tst.w	r8, #1
 80065fe:	d0de      	beq.n	80065be <_dtoa_r+0xa16>
 8006600:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006604:	d1d8      	bne.n	80065b8 <_dtoa_r+0xa10>
 8006606:	9a02      	ldr	r2, [sp, #8]
 8006608:	2339      	movs	r3, #57	@ 0x39
 800660a:	7013      	strb	r3, [r2, #0]
 800660c:	4633      	mov	r3, r6
 800660e:	461e      	mov	r6, r3
 8006610:	3b01      	subs	r3, #1
 8006612:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006616:	2a39      	cmp	r2, #57	@ 0x39
 8006618:	d052      	beq.n	80066c0 <_dtoa_r+0xb18>
 800661a:	3201      	adds	r2, #1
 800661c:	701a      	strb	r2, [r3, #0]
 800661e:	e60e      	b.n	800623e <_dtoa_r+0x696>
 8006620:	2a00      	cmp	r2, #0
 8006622:	dd07      	ble.n	8006634 <_dtoa_r+0xa8c>
 8006624:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006628:	d0ed      	beq.n	8006606 <_dtoa_r+0xa5e>
 800662a:	9a02      	ldr	r2, [sp, #8]
 800662c:	f108 0301 	add.w	r3, r8, #1
 8006630:	7013      	strb	r3, [r2, #0]
 8006632:	e604      	b.n	800623e <_dtoa_r+0x696>
 8006634:	9b07      	ldr	r3, [sp, #28]
 8006636:	9a07      	ldr	r2, [sp, #28]
 8006638:	f803 8c01 	strb.w	r8, [r3, #-1]
 800663c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800663e:	4293      	cmp	r3, r2
 8006640:	d028      	beq.n	8006694 <_dtoa_r+0xaec>
 8006642:	4649      	mov	r1, r9
 8006644:	2300      	movs	r3, #0
 8006646:	220a      	movs	r2, #10
 8006648:	4658      	mov	r0, fp
 800664a:	f000 f9d7 	bl	80069fc <__multadd>
 800664e:	42af      	cmp	r7, r5
 8006650:	4681      	mov	r9, r0
 8006652:	f04f 0300 	mov.w	r3, #0
 8006656:	f04f 020a 	mov.w	r2, #10
 800665a:	4639      	mov	r1, r7
 800665c:	4658      	mov	r0, fp
 800665e:	d107      	bne.n	8006670 <_dtoa_r+0xac8>
 8006660:	f000 f9cc 	bl	80069fc <__multadd>
 8006664:	4607      	mov	r7, r0
 8006666:	4605      	mov	r5, r0
 8006668:	9b07      	ldr	r3, [sp, #28]
 800666a:	3301      	adds	r3, #1
 800666c:	9307      	str	r3, [sp, #28]
 800666e:	e774      	b.n	800655a <_dtoa_r+0x9b2>
 8006670:	f000 f9c4 	bl	80069fc <__multadd>
 8006674:	4629      	mov	r1, r5
 8006676:	4607      	mov	r7, r0
 8006678:	2300      	movs	r3, #0
 800667a:	220a      	movs	r2, #10
 800667c:	4658      	mov	r0, fp
 800667e:	f000 f9bd 	bl	80069fc <__multadd>
 8006682:	4605      	mov	r5, r0
 8006684:	e7f0      	b.n	8006668 <_dtoa_r+0xac0>
 8006686:	9b08      	ldr	r3, [sp, #32]
 8006688:	2b00      	cmp	r3, #0
 800668a:	bfcc      	ite	gt
 800668c:	461e      	movgt	r6, r3
 800668e:	2601      	movle	r6, #1
 8006690:	4456      	add	r6, sl
 8006692:	2700      	movs	r7, #0
 8006694:	4649      	mov	r1, r9
 8006696:	2201      	movs	r2, #1
 8006698:	4658      	mov	r0, fp
 800669a:	f000 fb5b 	bl	8006d54 <__lshift>
 800669e:	4621      	mov	r1, r4
 80066a0:	4681      	mov	r9, r0
 80066a2:	f000 fbc3 	bl	8006e2c <__mcmp>
 80066a6:	2800      	cmp	r0, #0
 80066a8:	dcb0      	bgt.n	800660c <_dtoa_r+0xa64>
 80066aa:	d102      	bne.n	80066b2 <_dtoa_r+0xb0a>
 80066ac:	f018 0f01 	tst.w	r8, #1
 80066b0:	d1ac      	bne.n	800660c <_dtoa_r+0xa64>
 80066b2:	4633      	mov	r3, r6
 80066b4:	461e      	mov	r6, r3
 80066b6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80066ba:	2a30      	cmp	r2, #48	@ 0x30
 80066bc:	d0fa      	beq.n	80066b4 <_dtoa_r+0xb0c>
 80066be:	e5be      	b.n	800623e <_dtoa_r+0x696>
 80066c0:	459a      	cmp	sl, r3
 80066c2:	d1a4      	bne.n	800660e <_dtoa_r+0xa66>
 80066c4:	9b04      	ldr	r3, [sp, #16]
 80066c6:	3301      	adds	r3, #1
 80066c8:	9304      	str	r3, [sp, #16]
 80066ca:	2331      	movs	r3, #49	@ 0x31
 80066cc:	f88a 3000 	strb.w	r3, [sl]
 80066d0:	e5b5      	b.n	800623e <_dtoa_r+0x696>
 80066d2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80066d4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006734 <_dtoa_r+0xb8c>
 80066d8:	b11b      	cbz	r3, 80066e2 <_dtoa_r+0xb3a>
 80066da:	f10a 0308 	add.w	r3, sl, #8
 80066de:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80066e0:	6013      	str	r3, [r2, #0]
 80066e2:	4650      	mov	r0, sl
 80066e4:	b017      	add	sp, #92	@ 0x5c
 80066e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066ea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	f77f ae3d 	ble.w	800636c <_dtoa_r+0x7c4>
 80066f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80066f4:	930a      	str	r3, [sp, #40]	@ 0x28
 80066f6:	2001      	movs	r0, #1
 80066f8:	e65b      	b.n	80063b2 <_dtoa_r+0x80a>
 80066fa:	9b08      	ldr	r3, [sp, #32]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f77f aed6 	ble.w	80064ae <_dtoa_r+0x906>
 8006702:	4656      	mov	r6, sl
 8006704:	4621      	mov	r1, r4
 8006706:	4648      	mov	r0, r9
 8006708:	f7ff f9c4 	bl	8005a94 <quorem>
 800670c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006710:	f806 8b01 	strb.w	r8, [r6], #1
 8006714:	9b08      	ldr	r3, [sp, #32]
 8006716:	eba6 020a 	sub.w	r2, r6, sl
 800671a:	4293      	cmp	r3, r2
 800671c:	ddb3      	ble.n	8006686 <_dtoa_r+0xade>
 800671e:	4649      	mov	r1, r9
 8006720:	2300      	movs	r3, #0
 8006722:	220a      	movs	r2, #10
 8006724:	4658      	mov	r0, fp
 8006726:	f000 f969 	bl	80069fc <__multadd>
 800672a:	4681      	mov	r9, r0
 800672c:	e7ea      	b.n	8006704 <_dtoa_r+0xb5c>
 800672e:	bf00      	nop
 8006730:	080079b0 	.word	0x080079b0
 8006734:	0800794b 	.word	0x0800794b

08006738 <_free_r>:
 8006738:	b538      	push	{r3, r4, r5, lr}
 800673a:	4605      	mov	r5, r0
 800673c:	2900      	cmp	r1, #0
 800673e:	d041      	beq.n	80067c4 <_free_r+0x8c>
 8006740:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006744:	1f0c      	subs	r4, r1, #4
 8006746:	2b00      	cmp	r3, #0
 8006748:	bfb8      	it	lt
 800674a:	18e4      	addlt	r4, r4, r3
 800674c:	f000 f8e8 	bl	8006920 <__malloc_lock>
 8006750:	4a1d      	ldr	r2, [pc, #116]	@ (80067c8 <_free_r+0x90>)
 8006752:	6813      	ldr	r3, [r2, #0]
 8006754:	b933      	cbnz	r3, 8006764 <_free_r+0x2c>
 8006756:	6063      	str	r3, [r4, #4]
 8006758:	6014      	str	r4, [r2, #0]
 800675a:	4628      	mov	r0, r5
 800675c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006760:	f000 b8e4 	b.w	800692c <__malloc_unlock>
 8006764:	42a3      	cmp	r3, r4
 8006766:	d908      	bls.n	800677a <_free_r+0x42>
 8006768:	6820      	ldr	r0, [r4, #0]
 800676a:	1821      	adds	r1, r4, r0
 800676c:	428b      	cmp	r3, r1
 800676e:	bf01      	itttt	eq
 8006770:	6819      	ldreq	r1, [r3, #0]
 8006772:	685b      	ldreq	r3, [r3, #4]
 8006774:	1809      	addeq	r1, r1, r0
 8006776:	6021      	streq	r1, [r4, #0]
 8006778:	e7ed      	b.n	8006756 <_free_r+0x1e>
 800677a:	461a      	mov	r2, r3
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	b10b      	cbz	r3, 8006784 <_free_r+0x4c>
 8006780:	42a3      	cmp	r3, r4
 8006782:	d9fa      	bls.n	800677a <_free_r+0x42>
 8006784:	6811      	ldr	r1, [r2, #0]
 8006786:	1850      	adds	r0, r2, r1
 8006788:	42a0      	cmp	r0, r4
 800678a:	d10b      	bne.n	80067a4 <_free_r+0x6c>
 800678c:	6820      	ldr	r0, [r4, #0]
 800678e:	4401      	add	r1, r0
 8006790:	1850      	adds	r0, r2, r1
 8006792:	4283      	cmp	r3, r0
 8006794:	6011      	str	r1, [r2, #0]
 8006796:	d1e0      	bne.n	800675a <_free_r+0x22>
 8006798:	6818      	ldr	r0, [r3, #0]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	6053      	str	r3, [r2, #4]
 800679e:	4408      	add	r0, r1
 80067a0:	6010      	str	r0, [r2, #0]
 80067a2:	e7da      	b.n	800675a <_free_r+0x22>
 80067a4:	d902      	bls.n	80067ac <_free_r+0x74>
 80067a6:	230c      	movs	r3, #12
 80067a8:	602b      	str	r3, [r5, #0]
 80067aa:	e7d6      	b.n	800675a <_free_r+0x22>
 80067ac:	6820      	ldr	r0, [r4, #0]
 80067ae:	1821      	adds	r1, r4, r0
 80067b0:	428b      	cmp	r3, r1
 80067b2:	bf04      	itt	eq
 80067b4:	6819      	ldreq	r1, [r3, #0]
 80067b6:	685b      	ldreq	r3, [r3, #4]
 80067b8:	6063      	str	r3, [r4, #4]
 80067ba:	bf04      	itt	eq
 80067bc:	1809      	addeq	r1, r1, r0
 80067be:	6021      	streq	r1, [r4, #0]
 80067c0:	6054      	str	r4, [r2, #4]
 80067c2:	e7ca      	b.n	800675a <_free_r+0x22>
 80067c4:	bd38      	pop	{r3, r4, r5, pc}
 80067c6:	bf00      	nop
 80067c8:	2000693c 	.word	0x2000693c

080067cc <malloc>:
 80067cc:	4b02      	ldr	r3, [pc, #8]	@ (80067d8 <malloc+0xc>)
 80067ce:	4601      	mov	r1, r0
 80067d0:	6818      	ldr	r0, [r3, #0]
 80067d2:	f000 b825 	b.w	8006820 <_malloc_r>
 80067d6:	bf00      	nop
 80067d8:	20000064 	.word	0x20000064

080067dc <sbrk_aligned>:
 80067dc:	b570      	push	{r4, r5, r6, lr}
 80067de:	4e0f      	ldr	r6, [pc, #60]	@ (800681c <sbrk_aligned+0x40>)
 80067e0:	460c      	mov	r4, r1
 80067e2:	6831      	ldr	r1, [r6, #0]
 80067e4:	4605      	mov	r5, r0
 80067e6:	b911      	cbnz	r1, 80067ee <sbrk_aligned+0x12>
 80067e8:	f000 fed6 	bl	8007598 <_sbrk_r>
 80067ec:	6030      	str	r0, [r6, #0]
 80067ee:	4621      	mov	r1, r4
 80067f0:	4628      	mov	r0, r5
 80067f2:	f000 fed1 	bl	8007598 <_sbrk_r>
 80067f6:	1c43      	adds	r3, r0, #1
 80067f8:	d103      	bne.n	8006802 <sbrk_aligned+0x26>
 80067fa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80067fe:	4620      	mov	r0, r4
 8006800:	bd70      	pop	{r4, r5, r6, pc}
 8006802:	1cc4      	adds	r4, r0, #3
 8006804:	f024 0403 	bic.w	r4, r4, #3
 8006808:	42a0      	cmp	r0, r4
 800680a:	d0f8      	beq.n	80067fe <sbrk_aligned+0x22>
 800680c:	1a21      	subs	r1, r4, r0
 800680e:	4628      	mov	r0, r5
 8006810:	f000 fec2 	bl	8007598 <_sbrk_r>
 8006814:	3001      	adds	r0, #1
 8006816:	d1f2      	bne.n	80067fe <sbrk_aligned+0x22>
 8006818:	e7ef      	b.n	80067fa <sbrk_aligned+0x1e>
 800681a:	bf00      	nop
 800681c:	20006938 	.word	0x20006938

08006820 <_malloc_r>:
 8006820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006824:	1ccd      	adds	r5, r1, #3
 8006826:	f025 0503 	bic.w	r5, r5, #3
 800682a:	3508      	adds	r5, #8
 800682c:	2d0c      	cmp	r5, #12
 800682e:	bf38      	it	cc
 8006830:	250c      	movcc	r5, #12
 8006832:	2d00      	cmp	r5, #0
 8006834:	4606      	mov	r6, r0
 8006836:	db01      	blt.n	800683c <_malloc_r+0x1c>
 8006838:	42a9      	cmp	r1, r5
 800683a:	d904      	bls.n	8006846 <_malloc_r+0x26>
 800683c:	230c      	movs	r3, #12
 800683e:	6033      	str	r3, [r6, #0]
 8006840:	2000      	movs	r0, #0
 8006842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006846:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800691c <_malloc_r+0xfc>
 800684a:	f000 f869 	bl	8006920 <__malloc_lock>
 800684e:	f8d8 3000 	ldr.w	r3, [r8]
 8006852:	461c      	mov	r4, r3
 8006854:	bb44      	cbnz	r4, 80068a8 <_malloc_r+0x88>
 8006856:	4629      	mov	r1, r5
 8006858:	4630      	mov	r0, r6
 800685a:	f7ff ffbf 	bl	80067dc <sbrk_aligned>
 800685e:	1c43      	adds	r3, r0, #1
 8006860:	4604      	mov	r4, r0
 8006862:	d158      	bne.n	8006916 <_malloc_r+0xf6>
 8006864:	f8d8 4000 	ldr.w	r4, [r8]
 8006868:	4627      	mov	r7, r4
 800686a:	2f00      	cmp	r7, #0
 800686c:	d143      	bne.n	80068f6 <_malloc_r+0xd6>
 800686e:	2c00      	cmp	r4, #0
 8006870:	d04b      	beq.n	800690a <_malloc_r+0xea>
 8006872:	6823      	ldr	r3, [r4, #0]
 8006874:	4639      	mov	r1, r7
 8006876:	4630      	mov	r0, r6
 8006878:	eb04 0903 	add.w	r9, r4, r3
 800687c:	f000 fe8c 	bl	8007598 <_sbrk_r>
 8006880:	4581      	cmp	r9, r0
 8006882:	d142      	bne.n	800690a <_malloc_r+0xea>
 8006884:	6821      	ldr	r1, [r4, #0]
 8006886:	1a6d      	subs	r5, r5, r1
 8006888:	4629      	mov	r1, r5
 800688a:	4630      	mov	r0, r6
 800688c:	f7ff ffa6 	bl	80067dc <sbrk_aligned>
 8006890:	3001      	adds	r0, #1
 8006892:	d03a      	beq.n	800690a <_malloc_r+0xea>
 8006894:	6823      	ldr	r3, [r4, #0]
 8006896:	442b      	add	r3, r5
 8006898:	6023      	str	r3, [r4, #0]
 800689a:	f8d8 3000 	ldr.w	r3, [r8]
 800689e:	685a      	ldr	r2, [r3, #4]
 80068a0:	bb62      	cbnz	r2, 80068fc <_malloc_r+0xdc>
 80068a2:	f8c8 7000 	str.w	r7, [r8]
 80068a6:	e00f      	b.n	80068c8 <_malloc_r+0xa8>
 80068a8:	6822      	ldr	r2, [r4, #0]
 80068aa:	1b52      	subs	r2, r2, r5
 80068ac:	d420      	bmi.n	80068f0 <_malloc_r+0xd0>
 80068ae:	2a0b      	cmp	r2, #11
 80068b0:	d917      	bls.n	80068e2 <_malloc_r+0xc2>
 80068b2:	1961      	adds	r1, r4, r5
 80068b4:	42a3      	cmp	r3, r4
 80068b6:	6025      	str	r5, [r4, #0]
 80068b8:	bf18      	it	ne
 80068ba:	6059      	strne	r1, [r3, #4]
 80068bc:	6863      	ldr	r3, [r4, #4]
 80068be:	bf08      	it	eq
 80068c0:	f8c8 1000 	streq.w	r1, [r8]
 80068c4:	5162      	str	r2, [r4, r5]
 80068c6:	604b      	str	r3, [r1, #4]
 80068c8:	4630      	mov	r0, r6
 80068ca:	f000 f82f 	bl	800692c <__malloc_unlock>
 80068ce:	f104 000b 	add.w	r0, r4, #11
 80068d2:	1d23      	adds	r3, r4, #4
 80068d4:	f020 0007 	bic.w	r0, r0, #7
 80068d8:	1ac2      	subs	r2, r0, r3
 80068da:	bf1c      	itt	ne
 80068dc:	1a1b      	subne	r3, r3, r0
 80068de:	50a3      	strne	r3, [r4, r2]
 80068e0:	e7af      	b.n	8006842 <_malloc_r+0x22>
 80068e2:	6862      	ldr	r2, [r4, #4]
 80068e4:	42a3      	cmp	r3, r4
 80068e6:	bf0c      	ite	eq
 80068e8:	f8c8 2000 	streq.w	r2, [r8]
 80068ec:	605a      	strne	r2, [r3, #4]
 80068ee:	e7eb      	b.n	80068c8 <_malloc_r+0xa8>
 80068f0:	4623      	mov	r3, r4
 80068f2:	6864      	ldr	r4, [r4, #4]
 80068f4:	e7ae      	b.n	8006854 <_malloc_r+0x34>
 80068f6:	463c      	mov	r4, r7
 80068f8:	687f      	ldr	r7, [r7, #4]
 80068fa:	e7b6      	b.n	800686a <_malloc_r+0x4a>
 80068fc:	461a      	mov	r2, r3
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	42a3      	cmp	r3, r4
 8006902:	d1fb      	bne.n	80068fc <_malloc_r+0xdc>
 8006904:	2300      	movs	r3, #0
 8006906:	6053      	str	r3, [r2, #4]
 8006908:	e7de      	b.n	80068c8 <_malloc_r+0xa8>
 800690a:	230c      	movs	r3, #12
 800690c:	6033      	str	r3, [r6, #0]
 800690e:	4630      	mov	r0, r6
 8006910:	f000 f80c 	bl	800692c <__malloc_unlock>
 8006914:	e794      	b.n	8006840 <_malloc_r+0x20>
 8006916:	6005      	str	r5, [r0, #0]
 8006918:	e7d6      	b.n	80068c8 <_malloc_r+0xa8>
 800691a:	bf00      	nop
 800691c:	2000693c 	.word	0x2000693c

08006920 <__malloc_lock>:
 8006920:	4801      	ldr	r0, [pc, #4]	@ (8006928 <__malloc_lock+0x8>)
 8006922:	f7ff b8ae 	b.w	8005a82 <__retarget_lock_acquire_recursive>
 8006926:	bf00      	nop
 8006928:	20006934 	.word	0x20006934

0800692c <__malloc_unlock>:
 800692c:	4801      	ldr	r0, [pc, #4]	@ (8006934 <__malloc_unlock+0x8>)
 800692e:	f7ff b8a9 	b.w	8005a84 <__retarget_lock_release_recursive>
 8006932:	bf00      	nop
 8006934:	20006934 	.word	0x20006934

08006938 <_Balloc>:
 8006938:	b570      	push	{r4, r5, r6, lr}
 800693a:	69c6      	ldr	r6, [r0, #28]
 800693c:	4604      	mov	r4, r0
 800693e:	460d      	mov	r5, r1
 8006940:	b976      	cbnz	r6, 8006960 <_Balloc+0x28>
 8006942:	2010      	movs	r0, #16
 8006944:	f7ff ff42 	bl	80067cc <malloc>
 8006948:	4602      	mov	r2, r0
 800694a:	61e0      	str	r0, [r4, #28]
 800694c:	b920      	cbnz	r0, 8006958 <_Balloc+0x20>
 800694e:	4b18      	ldr	r3, [pc, #96]	@ (80069b0 <_Balloc+0x78>)
 8006950:	4818      	ldr	r0, [pc, #96]	@ (80069b4 <_Balloc+0x7c>)
 8006952:	216b      	movs	r1, #107	@ 0x6b
 8006954:	f7fe f948 	bl	8004be8 <__assert_func>
 8006958:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800695c:	6006      	str	r6, [r0, #0]
 800695e:	60c6      	str	r6, [r0, #12]
 8006960:	69e6      	ldr	r6, [r4, #28]
 8006962:	68f3      	ldr	r3, [r6, #12]
 8006964:	b183      	cbz	r3, 8006988 <_Balloc+0x50>
 8006966:	69e3      	ldr	r3, [r4, #28]
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800696e:	b9b8      	cbnz	r0, 80069a0 <_Balloc+0x68>
 8006970:	2101      	movs	r1, #1
 8006972:	fa01 f605 	lsl.w	r6, r1, r5
 8006976:	1d72      	adds	r2, r6, #5
 8006978:	0092      	lsls	r2, r2, #2
 800697a:	4620      	mov	r0, r4
 800697c:	f000 fe2a 	bl	80075d4 <_calloc_r>
 8006980:	b160      	cbz	r0, 800699c <_Balloc+0x64>
 8006982:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006986:	e00e      	b.n	80069a6 <_Balloc+0x6e>
 8006988:	2221      	movs	r2, #33	@ 0x21
 800698a:	2104      	movs	r1, #4
 800698c:	4620      	mov	r0, r4
 800698e:	f000 fe21 	bl	80075d4 <_calloc_r>
 8006992:	69e3      	ldr	r3, [r4, #28]
 8006994:	60f0      	str	r0, [r6, #12]
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d1e4      	bne.n	8006966 <_Balloc+0x2e>
 800699c:	2000      	movs	r0, #0
 800699e:	bd70      	pop	{r4, r5, r6, pc}
 80069a0:	6802      	ldr	r2, [r0, #0]
 80069a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80069a6:	2300      	movs	r3, #0
 80069a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80069ac:	e7f7      	b.n	800699e <_Balloc+0x66>
 80069ae:	bf00      	nop
 80069b0:	080078a8 	.word	0x080078a8
 80069b4:	080079c1 	.word	0x080079c1

080069b8 <_Bfree>:
 80069b8:	b570      	push	{r4, r5, r6, lr}
 80069ba:	69c6      	ldr	r6, [r0, #28]
 80069bc:	4605      	mov	r5, r0
 80069be:	460c      	mov	r4, r1
 80069c0:	b976      	cbnz	r6, 80069e0 <_Bfree+0x28>
 80069c2:	2010      	movs	r0, #16
 80069c4:	f7ff ff02 	bl	80067cc <malloc>
 80069c8:	4602      	mov	r2, r0
 80069ca:	61e8      	str	r0, [r5, #28]
 80069cc:	b920      	cbnz	r0, 80069d8 <_Bfree+0x20>
 80069ce:	4b09      	ldr	r3, [pc, #36]	@ (80069f4 <_Bfree+0x3c>)
 80069d0:	4809      	ldr	r0, [pc, #36]	@ (80069f8 <_Bfree+0x40>)
 80069d2:	218f      	movs	r1, #143	@ 0x8f
 80069d4:	f7fe f908 	bl	8004be8 <__assert_func>
 80069d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80069dc:	6006      	str	r6, [r0, #0]
 80069de:	60c6      	str	r6, [r0, #12]
 80069e0:	b13c      	cbz	r4, 80069f2 <_Bfree+0x3a>
 80069e2:	69eb      	ldr	r3, [r5, #28]
 80069e4:	6862      	ldr	r2, [r4, #4]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80069ec:	6021      	str	r1, [r4, #0]
 80069ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80069f2:	bd70      	pop	{r4, r5, r6, pc}
 80069f4:	080078a8 	.word	0x080078a8
 80069f8:	080079c1 	.word	0x080079c1

080069fc <__multadd>:
 80069fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a00:	690d      	ldr	r5, [r1, #16]
 8006a02:	4607      	mov	r7, r0
 8006a04:	460c      	mov	r4, r1
 8006a06:	461e      	mov	r6, r3
 8006a08:	f101 0c14 	add.w	ip, r1, #20
 8006a0c:	2000      	movs	r0, #0
 8006a0e:	f8dc 3000 	ldr.w	r3, [ip]
 8006a12:	b299      	uxth	r1, r3
 8006a14:	fb02 6101 	mla	r1, r2, r1, r6
 8006a18:	0c1e      	lsrs	r6, r3, #16
 8006a1a:	0c0b      	lsrs	r3, r1, #16
 8006a1c:	fb02 3306 	mla	r3, r2, r6, r3
 8006a20:	b289      	uxth	r1, r1
 8006a22:	3001      	adds	r0, #1
 8006a24:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006a28:	4285      	cmp	r5, r0
 8006a2a:	f84c 1b04 	str.w	r1, [ip], #4
 8006a2e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006a32:	dcec      	bgt.n	8006a0e <__multadd+0x12>
 8006a34:	b30e      	cbz	r6, 8006a7a <__multadd+0x7e>
 8006a36:	68a3      	ldr	r3, [r4, #8]
 8006a38:	42ab      	cmp	r3, r5
 8006a3a:	dc19      	bgt.n	8006a70 <__multadd+0x74>
 8006a3c:	6861      	ldr	r1, [r4, #4]
 8006a3e:	4638      	mov	r0, r7
 8006a40:	3101      	adds	r1, #1
 8006a42:	f7ff ff79 	bl	8006938 <_Balloc>
 8006a46:	4680      	mov	r8, r0
 8006a48:	b928      	cbnz	r0, 8006a56 <__multadd+0x5a>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8006a80 <__multadd+0x84>)
 8006a4e:	480d      	ldr	r0, [pc, #52]	@ (8006a84 <__multadd+0x88>)
 8006a50:	21ba      	movs	r1, #186	@ 0xba
 8006a52:	f7fe f8c9 	bl	8004be8 <__assert_func>
 8006a56:	6922      	ldr	r2, [r4, #16]
 8006a58:	3202      	adds	r2, #2
 8006a5a:	f104 010c 	add.w	r1, r4, #12
 8006a5e:	0092      	lsls	r2, r2, #2
 8006a60:	300c      	adds	r0, #12
 8006a62:	f000 fda9 	bl	80075b8 <memcpy>
 8006a66:	4621      	mov	r1, r4
 8006a68:	4638      	mov	r0, r7
 8006a6a:	f7ff ffa5 	bl	80069b8 <_Bfree>
 8006a6e:	4644      	mov	r4, r8
 8006a70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006a74:	3501      	adds	r5, #1
 8006a76:	615e      	str	r6, [r3, #20]
 8006a78:	6125      	str	r5, [r4, #16]
 8006a7a:	4620      	mov	r0, r4
 8006a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a80:	080079b0 	.word	0x080079b0
 8006a84:	080079c1 	.word	0x080079c1

08006a88 <__hi0bits>:
 8006a88:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	bf36      	itet	cc
 8006a90:	0403      	lslcc	r3, r0, #16
 8006a92:	2000      	movcs	r0, #0
 8006a94:	2010      	movcc	r0, #16
 8006a96:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a9a:	bf3c      	itt	cc
 8006a9c:	021b      	lslcc	r3, r3, #8
 8006a9e:	3008      	addcc	r0, #8
 8006aa0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006aa4:	bf3c      	itt	cc
 8006aa6:	011b      	lslcc	r3, r3, #4
 8006aa8:	3004      	addcc	r0, #4
 8006aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006aae:	bf3c      	itt	cc
 8006ab0:	009b      	lslcc	r3, r3, #2
 8006ab2:	3002      	addcc	r0, #2
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	db05      	blt.n	8006ac4 <__hi0bits+0x3c>
 8006ab8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006abc:	f100 0001 	add.w	r0, r0, #1
 8006ac0:	bf08      	it	eq
 8006ac2:	2020      	moveq	r0, #32
 8006ac4:	4770      	bx	lr

08006ac6 <__lo0bits>:
 8006ac6:	6803      	ldr	r3, [r0, #0]
 8006ac8:	4602      	mov	r2, r0
 8006aca:	f013 0007 	ands.w	r0, r3, #7
 8006ace:	d00b      	beq.n	8006ae8 <__lo0bits+0x22>
 8006ad0:	07d9      	lsls	r1, r3, #31
 8006ad2:	d421      	bmi.n	8006b18 <__lo0bits+0x52>
 8006ad4:	0798      	lsls	r0, r3, #30
 8006ad6:	bf49      	itett	mi
 8006ad8:	085b      	lsrmi	r3, r3, #1
 8006ada:	089b      	lsrpl	r3, r3, #2
 8006adc:	2001      	movmi	r0, #1
 8006ade:	6013      	strmi	r3, [r2, #0]
 8006ae0:	bf5c      	itt	pl
 8006ae2:	6013      	strpl	r3, [r2, #0]
 8006ae4:	2002      	movpl	r0, #2
 8006ae6:	4770      	bx	lr
 8006ae8:	b299      	uxth	r1, r3
 8006aea:	b909      	cbnz	r1, 8006af0 <__lo0bits+0x2a>
 8006aec:	0c1b      	lsrs	r3, r3, #16
 8006aee:	2010      	movs	r0, #16
 8006af0:	b2d9      	uxtb	r1, r3
 8006af2:	b909      	cbnz	r1, 8006af8 <__lo0bits+0x32>
 8006af4:	3008      	adds	r0, #8
 8006af6:	0a1b      	lsrs	r3, r3, #8
 8006af8:	0719      	lsls	r1, r3, #28
 8006afa:	bf04      	itt	eq
 8006afc:	091b      	lsreq	r3, r3, #4
 8006afe:	3004      	addeq	r0, #4
 8006b00:	0799      	lsls	r1, r3, #30
 8006b02:	bf04      	itt	eq
 8006b04:	089b      	lsreq	r3, r3, #2
 8006b06:	3002      	addeq	r0, #2
 8006b08:	07d9      	lsls	r1, r3, #31
 8006b0a:	d403      	bmi.n	8006b14 <__lo0bits+0x4e>
 8006b0c:	085b      	lsrs	r3, r3, #1
 8006b0e:	f100 0001 	add.w	r0, r0, #1
 8006b12:	d003      	beq.n	8006b1c <__lo0bits+0x56>
 8006b14:	6013      	str	r3, [r2, #0]
 8006b16:	4770      	bx	lr
 8006b18:	2000      	movs	r0, #0
 8006b1a:	4770      	bx	lr
 8006b1c:	2020      	movs	r0, #32
 8006b1e:	4770      	bx	lr

08006b20 <__i2b>:
 8006b20:	b510      	push	{r4, lr}
 8006b22:	460c      	mov	r4, r1
 8006b24:	2101      	movs	r1, #1
 8006b26:	f7ff ff07 	bl	8006938 <_Balloc>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	b928      	cbnz	r0, 8006b3a <__i2b+0x1a>
 8006b2e:	4b05      	ldr	r3, [pc, #20]	@ (8006b44 <__i2b+0x24>)
 8006b30:	4805      	ldr	r0, [pc, #20]	@ (8006b48 <__i2b+0x28>)
 8006b32:	f240 1145 	movw	r1, #325	@ 0x145
 8006b36:	f7fe f857 	bl	8004be8 <__assert_func>
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	6144      	str	r4, [r0, #20]
 8006b3e:	6103      	str	r3, [r0, #16]
 8006b40:	bd10      	pop	{r4, pc}
 8006b42:	bf00      	nop
 8006b44:	080079b0 	.word	0x080079b0
 8006b48:	080079c1 	.word	0x080079c1

08006b4c <__multiply>:
 8006b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b50:	4614      	mov	r4, r2
 8006b52:	690a      	ldr	r2, [r1, #16]
 8006b54:	6923      	ldr	r3, [r4, #16]
 8006b56:	429a      	cmp	r2, r3
 8006b58:	bfa8      	it	ge
 8006b5a:	4623      	movge	r3, r4
 8006b5c:	460f      	mov	r7, r1
 8006b5e:	bfa4      	itt	ge
 8006b60:	460c      	movge	r4, r1
 8006b62:	461f      	movge	r7, r3
 8006b64:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006b68:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006b6c:	68a3      	ldr	r3, [r4, #8]
 8006b6e:	6861      	ldr	r1, [r4, #4]
 8006b70:	eb0a 0609 	add.w	r6, sl, r9
 8006b74:	42b3      	cmp	r3, r6
 8006b76:	b085      	sub	sp, #20
 8006b78:	bfb8      	it	lt
 8006b7a:	3101      	addlt	r1, #1
 8006b7c:	f7ff fedc 	bl	8006938 <_Balloc>
 8006b80:	b930      	cbnz	r0, 8006b90 <__multiply+0x44>
 8006b82:	4602      	mov	r2, r0
 8006b84:	4b44      	ldr	r3, [pc, #272]	@ (8006c98 <__multiply+0x14c>)
 8006b86:	4845      	ldr	r0, [pc, #276]	@ (8006c9c <__multiply+0x150>)
 8006b88:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006b8c:	f7fe f82c 	bl	8004be8 <__assert_func>
 8006b90:	f100 0514 	add.w	r5, r0, #20
 8006b94:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006b98:	462b      	mov	r3, r5
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	4543      	cmp	r3, r8
 8006b9e:	d321      	bcc.n	8006be4 <__multiply+0x98>
 8006ba0:	f107 0114 	add.w	r1, r7, #20
 8006ba4:	f104 0214 	add.w	r2, r4, #20
 8006ba8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006bac:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006bb0:	9302      	str	r3, [sp, #8]
 8006bb2:	1b13      	subs	r3, r2, r4
 8006bb4:	3b15      	subs	r3, #21
 8006bb6:	f023 0303 	bic.w	r3, r3, #3
 8006bba:	3304      	adds	r3, #4
 8006bbc:	f104 0715 	add.w	r7, r4, #21
 8006bc0:	42ba      	cmp	r2, r7
 8006bc2:	bf38      	it	cc
 8006bc4:	2304      	movcc	r3, #4
 8006bc6:	9301      	str	r3, [sp, #4]
 8006bc8:	9b02      	ldr	r3, [sp, #8]
 8006bca:	9103      	str	r1, [sp, #12]
 8006bcc:	428b      	cmp	r3, r1
 8006bce:	d80c      	bhi.n	8006bea <__multiply+0x9e>
 8006bd0:	2e00      	cmp	r6, #0
 8006bd2:	dd03      	ble.n	8006bdc <__multiply+0x90>
 8006bd4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d05a      	beq.n	8006c92 <__multiply+0x146>
 8006bdc:	6106      	str	r6, [r0, #16]
 8006bde:	b005      	add	sp, #20
 8006be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006be4:	f843 2b04 	str.w	r2, [r3], #4
 8006be8:	e7d8      	b.n	8006b9c <__multiply+0x50>
 8006bea:	f8b1 a000 	ldrh.w	sl, [r1]
 8006bee:	f1ba 0f00 	cmp.w	sl, #0
 8006bf2:	d023      	beq.n	8006c3c <__multiply+0xf0>
 8006bf4:	f104 0e14 	add.w	lr, r4, #20
 8006bf8:	46a9      	mov	r9, r5
 8006bfa:	f04f 0c00 	mov.w	ip, #0
 8006bfe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006c02:	f8d9 3000 	ldr.w	r3, [r9]
 8006c06:	fa1f fb87 	uxth.w	fp, r7
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	fb0a 330b 	mla	r3, sl, fp, r3
 8006c10:	4463      	add	r3, ip
 8006c12:	f8d9 c000 	ldr.w	ip, [r9]
 8006c16:	0c3f      	lsrs	r7, r7, #16
 8006c18:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006c1c:	fb0a c707 	mla	r7, sl, r7, ip
 8006c20:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006c2a:	4572      	cmp	r2, lr
 8006c2c:	f849 3b04 	str.w	r3, [r9], #4
 8006c30:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006c34:	d8e3      	bhi.n	8006bfe <__multiply+0xb2>
 8006c36:	9b01      	ldr	r3, [sp, #4]
 8006c38:	f845 c003 	str.w	ip, [r5, r3]
 8006c3c:	9b03      	ldr	r3, [sp, #12]
 8006c3e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006c42:	3104      	adds	r1, #4
 8006c44:	f1b9 0f00 	cmp.w	r9, #0
 8006c48:	d021      	beq.n	8006c8e <__multiply+0x142>
 8006c4a:	682b      	ldr	r3, [r5, #0]
 8006c4c:	f104 0c14 	add.w	ip, r4, #20
 8006c50:	46ae      	mov	lr, r5
 8006c52:	f04f 0a00 	mov.w	sl, #0
 8006c56:	f8bc b000 	ldrh.w	fp, [ip]
 8006c5a:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006c5e:	fb09 770b 	mla	r7, r9, fp, r7
 8006c62:	4457      	add	r7, sl
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006c6a:	f84e 3b04 	str.w	r3, [lr], #4
 8006c6e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006c72:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006c76:	f8be 3000 	ldrh.w	r3, [lr]
 8006c7a:	fb09 330a 	mla	r3, r9, sl, r3
 8006c7e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006c82:	4562      	cmp	r2, ip
 8006c84:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006c88:	d8e5      	bhi.n	8006c56 <__multiply+0x10a>
 8006c8a:	9f01      	ldr	r7, [sp, #4]
 8006c8c:	51eb      	str	r3, [r5, r7]
 8006c8e:	3504      	adds	r5, #4
 8006c90:	e79a      	b.n	8006bc8 <__multiply+0x7c>
 8006c92:	3e01      	subs	r6, #1
 8006c94:	e79c      	b.n	8006bd0 <__multiply+0x84>
 8006c96:	bf00      	nop
 8006c98:	080079b0 	.word	0x080079b0
 8006c9c:	080079c1 	.word	0x080079c1

08006ca0 <__pow5mult>:
 8006ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ca4:	4615      	mov	r5, r2
 8006ca6:	f012 0203 	ands.w	r2, r2, #3
 8006caa:	4607      	mov	r7, r0
 8006cac:	460e      	mov	r6, r1
 8006cae:	d007      	beq.n	8006cc0 <__pow5mult+0x20>
 8006cb0:	4c25      	ldr	r4, [pc, #148]	@ (8006d48 <__pow5mult+0xa8>)
 8006cb2:	3a01      	subs	r2, #1
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006cba:	f7ff fe9f 	bl	80069fc <__multadd>
 8006cbe:	4606      	mov	r6, r0
 8006cc0:	10ad      	asrs	r5, r5, #2
 8006cc2:	d03d      	beq.n	8006d40 <__pow5mult+0xa0>
 8006cc4:	69fc      	ldr	r4, [r7, #28]
 8006cc6:	b97c      	cbnz	r4, 8006ce8 <__pow5mult+0x48>
 8006cc8:	2010      	movs	r0, #16
 8006cca:	f7ff fd7f 	bl	80067cc <malloc>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	61f8      	str	r0, [r7, #28]
 8006cd2:	b928      	cbnz	r0, 8006ce0 <__pow5mult+0x40>
 8006cd4:	4b1d      	ldr	r3, [pc, #116]	@ (8006d4c <__pow5mult+0xac>)
 8006cd6:	481e      	ldr	r0, [pc, #120]	@ (8006d50 <__pow5mult+0xb0>)
 8006cd8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006cdc:	f7fd ff84 	bl	8004be8 <__assert_func>
 8006ce0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006ce4:	6004      	str	r4, [r0, #0]
 8006ce6:	60c4      	str	r4, [r0, #12]
 8006ce8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006cec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006cf0:	b94c      	cbnz	r4, 8006d06 <__pow5mult+0x66>
 8006cf2:	f240 2171 	movw	r1, #625	@ 0x271
 8006cf6:	4638      	mov	r0, r7
 8006cf8:	f7ff ff12 	bl	8006b20 <__i2b>
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	f8c8 0008 	str.w	r0, [r8, #8]
 8006d02:	4604      	mov	r4, r0
 8006d04:	6003      	str	r3, [r0, #0]
 8006d06:	f04f 0900 	mov.w	r9, #0
 8006d0a:	07eb      	lsls	r3, r5, #31
 8006d0c:	d50a      	bpl.n	8006d24 <__pow5mult+0x84>
 8006d0e:	4631      	mov	r1, r6
 8006d10:	4622      	mov	r2, r4
 8006d12:	4638      	mov	r0, r7
 8006d14:	f7ff ff1a 	bl	8006b4c <__multiply>
 8006d18:	4631      	mov	r1, r6
 8006d1a:	4680      	mov	r8, r0
 8006d1c:	4638      	mov	r0, r7
 8006d1e:	f7ff fe4b 	bl	80069b8 <_Bfree>
 8006d22:	4646      	mov	r6, r8
 8006d24:	106d      	asrs	r5, r5, #1
 8006d26:	d00b      	beq.n	8006d40 <__pow5mult+0xa0>
 8006d28:	6820      	ldr	r0, [r4, #0]
 8006d2a:	b938      	cbnz	r0, 8006d3c <__pow5mult+0x9c>
 8006d2c:	4622      	mov	r2, r4
 8006d2e:	4621      	mov	r1, r4
 8006d30:	4638      	mov	r0, r7
 8006d32:	f7ff ff0b 	bl	8006b4c <__multiply>
 8006d36:	6020      	str	r0, [r4, #0]
 8006d38:	f8c0 9000 	str.w	r9, [r0]
 8006d3c:	4604      	mov	r4, r0
 8006d3e:	e7e4      	b.n	8006d0a <__pow5mult+0x6a>
 8006d40:	4630      	mov	r0, r6
 8006d42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d46:	bf00      	nop
 8006d48:	08007a1c 	.word	0x08007a1c
 8006d4c:	080078a8 	.word	0x080078a8
 8006d50:	080079c1 	.word	0x080079c1

08006d54 <__lshift>:
 8006d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d58:	460c      	mov	r4, r1
 8006d5a:	6849      	ldr	r1, [r1, #4]
 8006d5c:	6923      	ldr	r3, [r4, #16]
 8006d5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006d62:	68a3      	ldr	r3, [r4, #8]
 8006d64:	4607      	mov	r7, r0
 8006d66:	4691      	mov	r9, r2
 8006d68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006d6c:	f108 0601 	add.w	r6, r8, #1
 8006d70:	42b3      	cmp	r3, r6
 8006d72:	db0b      	blt.n	8006d8c <__lshift+0x38>
 8006d74:	4638      	mov	r0, r7
 8006d76:	f7ff fddf 	bl	8006938 <_Balloc>
 8006d7a:	4605      	mov	r5, r0
 8006d7c:	b948      	cbnz	r0, 8006d92 <__lshift+0x3e>
 8006d7e:	4602      	mov	r2, r0
 8006d80:	4b28      	ldr	r3, [pc, #160]	@ (8006e24 <__lshift+0xd0>)
 8006d82:	4829      	ldr	r0, [pc, #164]	@ (8006e28 <__lshift+0xd4>)
 8006d84:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006d88:	f7fd ff2e 	bl	8004be8 <__assert_func>
 8006d8c:	3101      	adds	r1, #1
 8006d8e:	005b      	lsls	r3, r3, #1
 8006d90:	e7ee      	b.n	8006d70 <__lshift+0x1c>
 8006d92:	2300      	movs	r3, #0
 8006d94:	f100 0114 	add.w	r1, r0, #20
 8006d98:	f100 0210 	add.w	r2, r0, #16
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	4553      	cmp	r3, sl
 8006da0:	db33      	blt.n	8006e0a <__lshift+0xb6>
 8006da2:	6920      	ldr	r0, [r4, #16]
 8006da4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006da8:	f104 0314 	add.w	r3, r4, #20
 8006dac:	f019 091f 	ands.w	r9, r9, #31
 8006db0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006db4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006db8:	d02b      	beq.n	8006e12 <__lshift+0xbe>
 8006dba:	f1c9 0e20 	rsb	lr, r9, #32
 8006dbe:	468a      	mov	sl, r1
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	6818      	ldr	r0, [r3, #0]
 8006dc4:	fa00 f009 	lsl.w	r0, r0, r9
 8006dc8:	4310      	orrs	r0, r2
 8006dca:	f84a 0b04 	str.w	r0, [sl], #4
 8006dce:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dd2:	459c      	cmp	ip, r3
 8006dd4:	fa22 f20e 	lsr.w	r2, r2, lr
 8006dd8:	d8f3      	bhi.n	8006dc2 <__lshift+0x6e>
 8006dda:	ebac 0304 	sub.w	r3, ip, r4
 8006dde:	3b15      	subs	r3, #21
 8006de0:	f023 0303 	bic.w	r3, r3, #3
 8006de4:	3304      	adds	r3, #4
 8006de6:	f104 0015 	add.w	r0, r4, #21
 8006dea:	4584      	cmp	ip, r0
 8006dec:	bf38      	it	cc
 8006dee:	2304      	movcc	r3, #4
 8006df0:	50ca      	str	r2, [r1, r3]
 8006df2:	b10a      	cbz	r2, 8006df8 <__lshift+0xa4>
 8006df4:	f108 0602 	add.w	r6, r8, #2
 8006df8:	3e01      	subs	r6, #1
 8006dfa:	4638      	mov	r0, r7
 8006dfc:	612e      	str	r6, [r5, #16]
 8006dfe:	4621      	mov	r1, r4
 8006e00:	f7ff fdda 	bl	80069b8 <_Bfree>
 8006e04:	4628      	mov	r0, r5
 8006e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e0a:	f842 0f04 	str.w	r0, [r2, #4]!
 8006e0e:	3301      	adds	r3, #1
 8006e10:	e7c5      	b.n	8006d9e <__lshift+0x4a>
 8006e12:	3904      	subs	r1, #4
 8006e14:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e18:	f841 2f04 	str.w	r2, [r1, #4]!
 8006e1c:	459c      	cmp	ip, r3
 8006e1e:	d8f9      	bhi.n	8006e14 <__lshift+0xc0>
 8006e20:	e7ea      	b.n	8006df8 <__lshift+0xa4>
 8006e22:	bf00      	nop
 8006e24:	080079b0 	.word	0x080079b0
 8006e28:	080079c1 	.word	0x080079c1

08006e2c <__mcmp>:
 8006e2c:	690a      	ldr	r2, [r1, #16]
 8006e2e:	4603      	mov	r3, r0
 8006e30:	6900      	ldr	r0, [r0, #16]
 8006e32:	1a80      	subs	r0, r0, r2
 8006e34:	b530      	push	{r4, r5, lr}
 8006e36:	d10e      	bne.n	8006e56 <__mcmp+0x2a>
 8006e38:	3314      	adds	r3, #20
 8006e3a:	3114      	adds	r1, #20
 8006e3c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006e40:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006e44:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006e48:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006e4c:	4295      	cmp	r5, r2
 8006e4e:	d003      	beq.n	8006e58 <__mcmp+0x2c>
 8006e50:	d205      	bcs.n	8006e5e <__mcmp+0x32>
 8006e52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006e56:	bd30      	pop	{r4, r5, pc}
 8006e58:	42a3      	cmp	r3, r4
 8006e5a:	d3f3      	bcc.n	8006e44 <__mcmp+0x18>
 8006e5c:	e7fb      	b.n	8006e56 <__mcmp+0x2a>
 8006e5e:	2001      	movs	r0, #1
 8006e60:	e7f9      	b.n	8006e56 <__mcmp+0x2a>
	...

08006e64 <__mdiff>:
 8006e64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e68:	4689      	mov	r9, r1
 8006e6a:	4606      	mov	r6, r0
 8006e6c:	4611      	mov	r1, r2
 8006e6e:	4648      	mov	r0, r9
 8006e70:	4614      	mov	r4, r2
 8006e72:	f7ff ffdb 	bl	8006e2c <__mcmp>
 8006e76:	1e05      	subs	r5, r0, #0
 8006e78:	d112      	bne.n	8006ea0 <__mdiff+0x3c>
 8006e7a:	4629      	mov	r1, r5
 8006e7c:	4630      	mov	r0, r6
 8006e7e:	f7ff fd5b 	bl	8006938 <_Balloc>
 8006e82:	4602      	mov	r2, r0
 8006e84:	b928      	cbnz	r0, 8006e92 <__mdiff+0x2e>
 8006e86:	4b3e      	ldr	r3, [pc, #248]	@ (8006f80 <__mdiff+0x11c>)
 8006e88:	f240 2137 	movw	r1, #567	@ 0x237
 8006e8c:	483d      	ldr	r0, [pc, #244]	@ (8006f84 <__mdiff+0x120>)
 8006e8e:	f7fd feab 	bl	8004be8 <__assert_func>
 8006e92:	2301      	movs	r3, #1
 8006e94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006e98:	4610      	mov	r0, r2
 8006e9a:	b003      	add	sp, #12
 8006e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ea0:	bfbc      	itt	lt
 8006ea2:	464b      	movlt	r3, r9
 8006ea4:	46a1      	movlt	r9, r4
 8006ea6:	4630      	mov	r0, r6
 8006ea8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006eac:	bfba      	itte	lt
 8006eae:	461c      	movlt	r4, r3
 8006eb0:	2501      	movlt	r5, #1
 8006eb2:	2500      	movge	r5, #0
 8006eb4:	f7ff fd40 	bl	8006938 <_Balloc>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	b918      	cbnz	r0, 8006ec4 <__mdiff+0x60>
 8006ebc:	4b30      	ldr	r3, [pc, #192]	@ (8006f80 <__mdiff+0x11c>)
 8006ebe:	f240 2145 	movw	r1, #581	@ 0x245
 8006ec2:	e7e3      	b.n	8006e8c <__mdiff+0x28>
 8006ec4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006ec8:	6926      	ldr	r6, [r4, #16]
 8006eca:	60c5      	str	r5, [r0, #12]
 8006ecc:	f109 0310 	add.w	r3, r9, #16
 8006ed0:	f109 0514 	add.w	r5, r9, #20
 8006ed4:	f104 0e14 	add.w	lr, r4, #20
 8006ed8:	f100 0b14 	add.w	fp, r0, #20
 8006edc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006ee0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006ee4:	9301      	str	r3, [sp, #4]
 8006ee6:	46d9      	mov	r9, fp
 8006ee8:	f04f 0c00 	mov.w	ip, #0
 8006eec:	9b01      	ldr	r3, [sp, #4]
 8006eee:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006ef2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006ef6:	9301      	str	r3, [sp, #4]
 8006ef8:	b281      	uxth	r1, r0
 8006efa:	fa1f f38a 	uxth.w	r3, sl
 8006efe:	1a5b      	subs	r3, r3, r1
 8006f00:	0c00      	lsrs	r0, r0, #16
 8006f02:	4463      	add	r3, ip
 8006f04:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006f08:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006f12:	4576      	cmp	r6, lr
 8006f14:	f849 3b04 	str.w	r3, [r9], #4
 8006f18:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006f1c:	d8e6      	bhi.n	8006eec <__mdiff+0x88>
 8006f1e:	1b33      	subs	r3, r6, r4
 8006f20:	3b15      	subs	r3, #21
 8006f22:	f023 0303 	bic.w	r3, r3, #3
 8006f26:	3415      	adds	r4, #21
 8006f28:	3304      	adds	r3, #4
 8006f2a:	42a6      	cmp	r6, r4
 8006f2c:	bf38      	it	cc
 8006f2e:	2304      	movcc	r3, #4
 8006f30:	441d      	add	r5, r3
 8006f32:	445b      	add	r3, fp
 8006f34:	461e      	mov	r6, r3
 8006f36:	462c      	mov	r4, r5
 8006f38:	4544      	cmp	r4, r8
 8006f3a:	d30e      	bcc.n	8006f5a <__mdiff+0xf6>
 8006f3c:	f108 0103 	add.w	r1, r8, #3
 8006f40:	1b49      	subs	r1, r1, r5
 8006f42:	f021 0103 	bic.w	r1, r1, #3
 8006f46:	3d03      	subs	r5, #3
 8006f48:	45a8      	cmp	r8, r5
 8006f4a:	bf38      	it	cc
 8006f4c:	2100      	movcc	r1, #0
 8006f4e:	440b      	add	r3, r1
 8006f50:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006f54:	b191      	cbz	r1, 8006f7c <__mdiff+0x118>
 8006f56:	6117      	str	r7, [r2, #16]
 8006f58:	e79e      	b.n	8006e98 <__mdiff+0x34>
 8006f5a:	f854 1b04 	ldr.w	r1, [r4], #4
 8006f5e:	46e6      	mov	lr, ip
 8006f60:	0c08      	lsrs	r0, r1, #16
 8006f62:	fa1c fc81 	uxtah	ip, ip, r1
 8006f66:	4471      	add	r1, lr
 8006f68:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006f6c:	b289      	uxth	r1, r1
 8006f6e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006f72:	f846 1b04 	str.w	r1, [r6], #4
 8006f76:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006f7a:	e7dd      	b.n	8006f38 <__mdiff+0xd4>
 8006f7c:	3f01      	subs	r7, #1
 8006f7e:	e7e7      	b.n	8006f50 <__mdiff+0xec>
 8006f80:	080079b0 	.word	0x080079b0
 8006f84:	080079c1 	.word	0x080079c1

08006f88 <__d2b>:
 8006f88:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006f8c:	2101      	movs	r1, #1
 8006f8e:	9e08      	ldr	r6, [sp, #32]
 8006f90:	4690      	mov	r8, r2
 8006f92:	4699      	mov	r9, r3
 8006f94:	f7ff fcd0 	bl	8006938 <_Balloc>
 8006f98:	4604      	mov	r4, r0
 8006f9a:	b930      	cbnz	r0, 8006faa <__d2b+0x22>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	4b24      	ldr	r3, [pc, #144]	@ (8007030 <__d2b+0xa8>)
 8006fa0:	4824      	ldr	r0, [pc, #144]	@ (8007034 <__d2b+0xac>)
 8006fa2:	f240 310f 	movw	r1, #783	@ 0x30f
 8006fa6:	f7fd fe1f 	bl	8004be8 <__assert_func>
 8006faa:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006fae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006fb2:	b10d      	cbz	r5, 8006fb8 <__d2b+0x30>
 8006fb4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006fb8:	9301      	str	r3, [sp, #4]
 8006fba:	f1b8 0300 	subs.w	r3, r8, #0
 8006fbe:	d024      	beq.n	800700a <__d2b+0x82>
 8006fc0:	4668      	mov	r0, sp
 8006fc2:	9300      	str	r3, [sp, #0]
 8006fc4:	f7ff fd7f 	bl	8006ac6 <__lo0bits>
 8006fc8:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006fcc:	b1d8      	cbz	r0, 8007006 <__d2b+0x7e>
 8006fce:	f1c0 0320 	rsb	r3, r0, #32
 8006fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8006fd6:	430b      	orrs	r3, r1
 8006fd8:	40c2      	lsrs	r2, r0
 8006fda:	6163      	str	r3, [r4, #20]
 8006fdc:	9201      	str	r2, [sp, #4]
 8006fde:	9b01      	ldr	r3, [sp, #4]
 8006fe0:	61a3      	str	r3, [r4, #24]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	bf0c      	ite	eq
 8006fe6:	2201      	moveq	r2, #1
 8006fe8:	2202      	movne	r2, #2
 8006fea:	6122      	str	r2, [r4, #16]
 8006fec:	b1ad      	cbz	r5, 800701a <__d2b+0x92>
 8006fee:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006ff2:	4405      	add	r5, r0
 8006ff4:	6035      	str	r5, [r6, #0]
 8006ff6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006ffa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ffc:	6018      	str	r0, [r3, #0]
 8006ffe:	4620      	mov	r0, r4
 8007000:	b002      	add	sp, #8
 8007002:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007006:	6161      	str	r1, [r4, #20]
 8007008:	e7e9      	b.n	8006fde <__d2b+0x56>
 800700a:	a801      	add	r0, sp, #4
 800700c:	f7ff fd5b 	bl	8006ac6 <__lo0bits>
 8007010:	9b01      	ldr	r3, [sp, #4]
 8007012:	6163      	str	r3, [r4, #20]
 8007014:	3020      	adds	r0, #32
 8007016:	2201      	movs	r2, #1
 8007018:	e7e7      	b.n	8006fea <__d2b+0x62>
 800701a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800701e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007022:	6030      	str	r0, [r6, #0]
 8007024:	6918      	ldr	r0, [r3, #16]
 8007026:	f7ff fd2f 	bl	8006a88 <__hi0bits>
 800702a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800702e:	e7e4      	b.n	8006ffa <__d2b+0x72>
 8007030:	080079b0 	.word	0x080079b0
 8007034:	080079c1 	.word	0x080079c1

08007038 <__sfputc_r>:
 8007038:	6893      	ldr	r3, [r2, #8]
 800703a:	3b01      	subs	r3, #1
 800703c:	2b00      	cmp	r3, #0
 800703e:	b410      	push	{r4}
 8007040:	6093      	str	r3, [r2, #8]
 8007042:	da07      	bge.n	8007054 <__sfputc_r+0x1c>
 8007044:	6994      	ldr	r4, [r2, #24]
 8007046:	42a3      	cmp	r3, r4
 8007048:	db01      	blt.n	800704e <__sfputc_r+0x16>
 800704a:	290a      	cmp	r1, #10
 800704c:	d102      	bne.n	8007054 <__sfputc_r+0x1c>
 800704e:	bc10      	pop	{r4}
 8007050:	f7fe bc05 	b.w	800585e <__swbuf_r>
 8007054:	6813      	ldr	r3, [r2, #0]
 8007056:	1c58      	adds	r0, r3, #1
 8007058:	6010      	str	r0, [r2, #0]
 800705a:	7019      	strb	r1, [r3, #0]
 800705c:	4608      	mov	r0, r1
 800705e:	bc10      	pop	{r4}
 8007060:	4770      	bx	lr

08007062 <__sfputs_r>:
 8007062:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007064:	4606      	mov	r6, r0
 8007066:	460f      	mov	r7, r1
 8007068:	4614      	mov	r4, r2
 800706a:	18d5      	adds	r5, r2, r3
 800706c:	42ac      	cmp	r4, r5
 800706e:	d101      	bne.n	8007074 <__sfputs_r+0x12>
 8007070:	2000      	movs	r0, #0
 8007072:	e007      	b.n	8007084 <__sfputs_r+0x22>
 8007074:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007078:	463a      	mov	r2, r7
 800707a:	4630      	mov	r0, r6
 800707c:	f7ff ffdc 	bl	8007038 <__sfputc_r>
 8007080:	1c43      	adds	r3, r0, #1
 8007082:	d1f3      	bne.n	800706c <__sfputs_r+0xa>
 8007084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007088 <_vfiprintf_r>:
 8007088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800708c:	460d      	mov	r5, r1
 800708e:	b09d      	sub	sp, #116	@ 0x74
 8007090:	4614      	mov	r4, r2
 8007092:	4698      	mov	r8, r3
 8007094:	4606      	mov	r6, r0
 8007096:	b118      	cbz	r0, 80070a0 <_vfiprintf_r+0x18>
 8007098:	6a03      	ldr	r3, [r0, #32]
 800709a:	b90b      	cbnz	r3, 80070a0 <_vfiprintf_r+0x18>
 800709c:	f7fe fae4 	bl	8005668 <__sinit>
 80070a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80070a2:	07d9      	lsls	r1, r3, #31
 80070a4:	d405      	bmi.n	80070b2 <_vfiprintf_r+0x2a>
 80070a6:	89ab      	ldrh	r3, [r5, #12]
 80070a8:	059a      	lsls	r2, r3, #22
 80070aa:	d402      	bmi.n	80070b2 <_vfiprintf_r+0x2a>
 80070ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80070ae:	f7fe fce8 	bl	8005a82 <__retarget_lock_acquire_recursive>
 80070b2:	89ab      	ldrh	r3, [r5, #12]
 80070b4:	071b      	lsls	r3, r3, #28
 80070b6:	d501      	bpl.n	80070bc <_vfiprintf_r+0x34>
 80070b8:	692b      	ldr	r3, [r5, #16]
 80070ba:	b99b      	cbnz	r3, 80070e4 <_vfiprintf_r+0x5c>
 80070bc:	4629      	mov	r1, r5
 80070be:	4630      	mov	r0, r6
 80070c0:	f7fe fc0c 	bl	80058dc <__swsetup_r>
 80070c4:	b170      	cbz	r0, 80070e4 <_vfiprintf_r+0x5c>
 80070c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80070c8:	07dc      	lsls	r4, r3, #31
 80070ca:	d504      	bpl.n	80070d6 <_vfiprintf_r+0x4e>
 80070cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80070d0:	b01d      	add	sp, #116	@ 0x74
 80070d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070d6:	89ab      	ldrh	r3, [r5, #12]
 80070d8:	0598      	lsls	r0, r3, #22
 80070da:	d4f7      	bmi.n	80070cc <_vfiprintf_r+0x44>
 80070dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80070de:	f7fe fcd1 	bl	8005a84 <__retarget_lock_release_recursive>
 80070e2:	e7f3      	b.n	80070cc <_vfiprintf_r+0x44>
 80070e4:	2300      	movs	r3, #0
 80070e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80070e8:	2320      	movs	r3, #32
 80070ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80070ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80070f2:	2330      	movs	r3, #48	@ 0x30
 80070f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80072a4 <_vfiprintf_r+0x21c>
 80070f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80070fc:	f04f 0901 	mov.w	r9, #1
 8007100:	4623      	mov	r3, r4
 8007102:	469a      	mov	sl, r3
 8007104:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007108:	b10a      	cbz	r2, 800710e <_vfiprintf_r+0x86>
 800710a:	2a25      	cmp	r2, #37	@ 0x25
 800710c:	d1f9      	bne.n	8007102 <_vfiprintf_r+0x7a>
 800710e:	ebba 0b04 	subs.w	fp, sl, r4
 8007112:	d00b      	beq.n	800712c <_vfiprintf_r+0xa4>
 8007114:	465b      	mov	r3, fp
 8007116:	4622      	mov	r2, r4
 8007118:	4629      	mov	r1, r5
 800711a:	4630      	mov	r0, r6
 800711c:	f7ff ffa1 	bl	8007062 <__sfputs_r>
 8007120:	3001      	adds	r0, #1
 8007122:	f000 80a7 	beq.w	8007274 <_vfiprintf_r+0x1ec>
 8007126:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007128:	445a      	add	r2, fp
 800712a:	9209      	str	r2, [sp, #36]	@ 0x24
 800712c:	f89a 3000 	ldrb.w	r3, [sl]
 8007130:	2b00      	cmp	r3, #0
 8007132:	f000 809f 	beq.w	8007274 <_vfiprintf_r+0x1ec>
 8007136:	2300      	movs	r3, #0
 8007138:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800713c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007140:	f10a 0a01 	add.w	sl, sl, #1
 8007144:	9304      	str	r3, [sp, #16]
 8007146:	9307      	str	r3, [sp, #28]
 8007148:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800714c:	931a      	str	r3, [sp, #104]	@ 0x68
 800714e:	4654      	mov	r4, sl
 8007150:	2205      	movs	r2, #5
 8007152:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007156:	4853      	ldr	r0, [pc, #332]	@ (80072a4 <_vfiprintf_r+0x21c>)
 8007158:	f7f9 f812 	bl	8000180 <memchr>
 800715c:	9a04      	ldr	r2, [sp, #16]
 800715e:	b9d8      	cbnz	r0, 8007198 <_vfiprintf_r+0x110>
 8007160:	06d1      	lsls	r1, r2, #27
 8007162:	bf44      	itt	mi
 8007164:	2320      	movmi	r3, #32
 8007166:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800716a:	0713      	lsls	r3, r2, #28
 800716c:	bf44      	itt	mi
 800716e:	232b      	movmi	r3, #43	@ 0x2b
 8007170:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007174:	f89a 3000 	ldrb.w	r3, [sl]
 8007178:	2b2a      	cmp	r3, #42	@ 0x2a
 800717a:	d015      	beq.n	80071a8 <_vfiprintf_r+0x120>
 800717c:	9a07      	ldr	r2, [sp, #28]
 800717e:	4654      	mov	r4, sl
 8007180:	2000      	movs	r0, #0
 8007182:	f04f 0c0a 	mov.w	ip, #10
 8007186:	4621      	mov	r1, r4
 8007188:	f811 3b01 	ldrb.w	r3, [r1], #1
 800718c:	3b30      	subs	r3, #48	@ 0x30
 800718e:	2b09      	cmp	r3, #9
 8007190:	d94b      	bls.n	800722a <_vfiprintf_r+0x1a2>
 8007192:	b1b0      	cbz	r0, 80071c2 <_vfiprintf_r+0x13a>
 8007194:	9207      	str	r2, [sp, #28]
 8007196:	e014      	b.n	80071c2 <_vfiprintf_r+0x13a>
 8007198:	eba0 0308 	sub.w	r3, r0, r8
 800719c:	fa09 f303 	lsl.w	r3, r9, r3
 80071a0:	4313      	orrs	r3, r2
 80071a2:	9304      	str	r3, [sp, #16]
 80071a4:	46a2      	mov	sl, r4
 80071a6:	e7d2      	b.n	800714e <_vfiprintf_r+0xc6>
 80071a8:	9b03      	ldr	r3, [sp, #12]
 80071aa:	1d19      	adds	r1, r3, #4
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	9103      	str	r1, [sp, #12]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	bfbb      	ittet	lt
 80071b4:	425b      	neglt	r3, r3
 80071b6:	f042 0202 	orrlt.w	r2, r2, #2
 80071ba:	9307      	strge	r3, [sp, #28]
 80071bc:	9307      	strlt	r3, [sp, #28]
 80071be:	bfb8      	it	lt
 80071c0:	9204      	strlt	r2, [sp, #16]
 80071c2:	7823      	ldrb	r3, [r4, #0]
 80071c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80071c6:	d10a      	bne.n	80071de <_vfiprintf_r+0x156>
 80071c8:	7863      	ldrb	r3, [r4, #1]
 80071ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80071cc:	d132      	bne.n	8007234 <_vfiprintf_r+0x1ac>
 80071ce:	9b03      	ldr	r3, [sp, #12]
 80071d0:	1d1a      	adds	r2, r3, #4
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	9203      	str	r2, [sp, #12]
 80071d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80071da:	3402      	adds	r4, #2
 80071dc:	9305      	str	r3, [sp, #20]
 80071de:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80072a8 <_vfiprintf_r+0x220>
 80071e2:	7821      	ldrb	r1, [r4, #0]
 80071e4:	2203      	movs	r2, #3
 80071e6:	4650      	mov	r0, sl
 80071e8:	f7f8 ffca 	bl	8000180 <memchr>
 80071ec:	b138      	cbz	r0, 80071fe <_vfiprintf_r+0x176>
 80071ee:	9b04      	ldr	r3, [sp, #16]
 80071f0:	eba0 000a 	sub.w	r0, r0, sl
 80071f4:	2240      	movs	r2, #64	@ 0x40
 80071f6:	4082      	lsls	r2, r0
 80071f8:	4313      	orrs	r3, r2
 80071fa:	3401      	adds	r4, #1
 80071fc:	9304      	str	r3, [sp, #16]
 80071fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007202:	482a      	ldr	r0, [pc, #168]	@ (80072ac <_vfiprintf_r+0x224>)
 8007204:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007208:	2206      	movs	r2, #6
 800720a:	f7f8 ffb9 	bl	8000180 <memchr>
 800720e:	2800      	cmp	r0, #0
 8007210:	d03f      	beq.n	8007292 <_vfiprintf_r+0x20a>
 8007212:	4b27      	ldr	r3, [pc, #156]	@ (80072b0 <_vfiprintf_r+0x228>)
 8007214:	bb1b      	cbnz	r3, 800725e <_vfiprintf_r+0x1d6>
 8007216:	9b03      	ldr	r3, [sp, #12]
 8007218:	3307      	adds	r3, #7
 800721a:	f023 0307 	bic.w	r3, r3, #7
 800721e:	3308      	adds	r3, #8
 8007220:	9303      	str	r3, [sp, #12]
 8007222:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007224:	443b      	add	r3, r7
 8007226:	9309      	str	r3, [sp, #36]	@ 0x24
 8007228:	e76a      	b.n	8007100 <_vfiprintf_r+0x78>
 800722a:	fb0c 3202 	mla	r2, ip, r2, r3
 800722e:	460c      	mov	r4, r1
 8007230:	2001      	movs	r0, #1
 8007232:	e7a8      	b.n	8007186 <_vfiprintf_r+0xfe>
 8007234:	2300      	movs	r3, #0
 8007236:	3401      	adds	r4, #1
 8007238:	9305      	str	r3, [sp, #20]
 800723a:	4619      	mov	r1, r3
 800723c:	f04f 0c0a 	mov.w	ip, #10
 8007240:	4620      	mov	r0, r4
 8007242:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007246:	3a30      	subs	r2, #48	@ 0x30
 8007248:	2a09      	cmp	r2, #9
 800724a:	d903      	bls.n	8007254 <_vfiprintf_r+0x1cc>
 800724c:	2b00      	cmp	r3, #0
 800724e:	d0c6      	beq.n	80071de <_vfiprintf_r+0x156>
 8007250:	9105      	str	r1, [sp, #20]
 8007252:	e7c4      	b.n	80071de <_vfiprintf_r+0x156>
 8007254:	fb0c 2101 	mla	r1, ip, r1, r2
 8007258:	4604      	mov	r4, r0
 800725a:	2301      	movs	r3, #1
 800725c:	e7f0      	b.n	8007240 <_vfiprintf_r+0x1b8>
 800725e:	ab03      	add	r3, sp, #12
 8007260:	9300      	str	r3, [sp, #0]
 8007262:	462a      	mov	r2, r5
 8007264:	4b13      	ldr	r3, [pc, #76]	@ (80072b4 <_vfiprintf_r+0x22c>)
 8007266:	a904      	add	r1, sp, #16
 8007268:	4630      	mov	r0, r6
 800726a:	f7fd fdb7 	bl	8004ddc <_printf_float>
 800726e:	4607      	mov	r7, r0
 8007270:	1c78      	adds	r0, r7, #1
 8007272:	d1d6      	bne.n	8007222 <_vfiprintf_r+0x19a>
 8007274:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007276:	07d9      	lsls	r1, r3, #31
 8007278:	d405      	bmi.n	8007286 <_vfiprintf_r+0x1fe>
 800727a:	89ab      	ldrh	r3, [r5, #12]
 800727c:	059a      	lsls	r2, r3, #22
 800727e:	d402      	bmi.n	8007286 <_vfiprintf_r+0x1fe>
 8007280:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007282:	f7fe fbff 	bl	8005a84 <__retarget_lock_release_recursive>
 8007286:	89ab      	ldrh	r3, [r5, #12]
 8007288:	065b      	lsls	r3, r3, #25
 800728a:	f53f af1f 	bmi.w	80070cc <_vfiprintf_r+0x44>
 800728e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007290:	e71e      	b.n	80070d0 <_vfiprintf_r+0x48>
 8007292:	ab03      	add	r3, sp, #12
 8007294:	9300      	str	r3, [sp, #0]
 8007296:	462a      	mov	r2, r5
 8007298:	4b06      	ldr	r3, [pc, #24]	@ (80072b4 <_vfiprintf_r+0x22c>)
 800729a:	a904      	add	r1, sp, #16
 800729c:	4630      	mov	r0, r6
 800729e:	f7fe f837 	bl	8005310 <_printf_i>
 80072a2:	e7e4      	b.n	800726e <_vfiprintf_r+0x1e6>
 80072a4:	08007b18 	.word	0x08007b18
 80072a8:	08007b1e 	.word	0x08007b1e
 80072ac:	08007b22 	.word	0x08007b22
 80072b0:	08004ddd 	.word	0x08004ddd
 80072b4:	08007063 	.word	0x08007063

080072b8 <__sflush_r>:
 80072b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80072bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072be:	0716      	lsls	r6, r2, #28
 80072c0:	4605      	mov	r5, r0
 80072c2:	460c      	mov	r4, r1
 80072c4:	d454      	bmi.n	8007370 <__sflush_r+0xb8>
 80072c6:	684b      	ldr	r3, [r1, #4]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	dc02      	bgt.n	80072d2 <__sflush_r+0x1a>
 80072cc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	dd48      	ble.n	8007364 <__sflush_r+0xac>
 80072d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80072d4:	2e00      	cmp	r6, #0
 80072d6:	d045      	beq.n	8007364 <__sflush_r+0xac>
 80072d8:	2300      	movs	r3, #0
 80072da:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80072de:	682f      	ldr	r7, [r5, #0]
 80072e0:	6a21      	ldr	r1, [r4, #32]
 80072e2:	602b      	str	r3, [r5, #0]
 80072e4:	d030      	beq.n	8007348 <__sflush_r+0x90>
 80072e6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80072e8:	89a3      	ldrh	r3, [r4, #12]
 80072ea:	0759      	lsls	r1, r3, #29
 80072ec:	d505      	bpl.n	80072fa <__sflush_r+0x42>
 80072ee:	6863      	ldr	r3, [r4, #4]
 80072f0:	1ad2      	subs	r2, r2, r3
 80072f2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80072f4:	b10b      	cbz	r3, 80072fa <__sflush_r+0x42>
 80072f6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80072f8:	1ad2      	subs	r2, r2, r3
 80072fa:	2300      	movs	r3, #0
 80072fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80072fe:	6a21      	ldr	r1, [r4, #32]
 8007300:	4628      	mov	r0, r5
 8007302:	47b0      	blx	r6
 8007304:	1c43      	adds	r3, r0, #1
 8007306:	89a3      	ldrh	r3, [r4, #12]
 8007308:	d106      	bne.n	8007318 <__sflush_r+0x60>
 800730a:	6829      	ldr	r1, [r5, #0]
 800730c:	291d      	cmp	r1, #29
 800730e:	d82b      	bhi.n	8007368 <__sflush_r+0xb0>
 8007310:	4a28      	ldr	r2, [pc, #160]	@ (80073b4 <__sflush_r+0xfc>)
 8007312:	410a      	asrs	r2, r1
 8007314:	07d6      	lsls	r6, r2, #31
 8007316:	d427      	bmi.n	8007368 <__sflush_r+0xb0>
 8007318:	2200      	movs	r2, #0
 800731a:	6062      	str	r2, [r4, #4]
 800731c:	04d9      	lsls	r1, r3, #19
 800731e:	6922      	ldr	r2, [r4, #16]
 8007320:	6022      	str	r2, [r4, #0]
 8007322:	d504      	bpl.n	800732e <__sflush_r+0x76>
 8007324:	1c42      	adds	r2, r0, #1
 8007326:	d101      	bne.n	800732c <__sflush_r+0x74>
 8007328:	682b      	ldr	r3, [r5, #0]
 800732a:	b903      	cbnz	r3, 800732e <__sflush_r+0x76>
 800732c:	6560      	str	r0, [r4, #84]	@ 0x54
 800732e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007330:	602f      	str	r7, [r5, #0]
 8007332:	b1b9      	cbz	r1, 8007364 <__sflush_r+0xac>
 8007334:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007338:	4299      	cmp	r1, r3
 800733a:	d002      	beq.n	8007342 <__sflush_r+0x8a>
 800733c:	4628      	mov	r0, r5
 800733e:	f7ff f9fb 	bl	8006738 <_free_r>
 8007342:	2300      	movs	r3, #0
 8007344:	6363      	str	r3, [r4, #52]	@ 0x34
 8007346:	e00d      	b.n	8007364 <__sflush_r+0xac>
 8007348:	2301      	movs	r3, #1
 800734a:	4628      	mov	r0, r5
 800734c:	47b0      	blx	r6
 800734e:	4602      	mov	r2, r0
 8007350:	1c50      	adds	r0, r2, #1
 8007352:	d1c9      	bne.n	80072e8 <__sflush_r+0x30>
 8007354:	682b      	ldr	r3, [r5, #0]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d0c6      	beq.n	80072e8 <__sflush_r+0x30>
 800735a:	2b1d      	cmp	r3, #29
 800735c:	d001      	beq.n	8007362 <__sflush_r+0xaa>
 800735e:	2b16      	cmp	r3, #22
 8007360:	d11d      	bne.n	800739e <__sflush_r+0xe6>
 8007362:	602f      	str	r7, [r5, #0]
 8007364:	2000      	movs	r0, #0
 8007366:	e021      	b.n	80073ac <__sflush_r+0xf4>
 8007368:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800736c:	b21b      	sxth	r3, r3
 800736e:	e01a      	b.n	80073a6 <__sflush_r+0xee>
 8007370:	690f      	ldr	r7, [r1, #16]
 8007372:	2f00      	cmp	r7, #0
 8007374:	d0f6      	beq.n	8007364 <__sflush_r+0xac>
 8007376:	0793      	lsls	r3, r2, #30
 8007378:	680e      	ldr	r6, [r1, #0]
 800737a:	bf08      	it	eq
 800737c:	694b      	ldreq	r3, [r1, #20]
 800737e:	600f      	str	r7, [r1, #0]
 8007380:	bf18      	it	ne
 8007382:	2300      	movne	r3, #0
 8007384:	1bf6      	subs	r6, r6, r7
 8007386:	608b      	str	r3, [r1, #8]
 8007388:	2e00      	cmp	r6, #0
 800738a:	ddeb      	ble.n	8007364 <__sflush_r+0xac>
 800738c:	6a21      	ldr	r1, [r4, #32]
 800738e:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007392:	4633      	mov	r3, r6
 8007394:	463a      	mov	r2, r7
 8007396:	4628      	mov	r0, r5
 8007398:	47e0      	blx	ip
 800739a:	2800      	cmp	r0, #0
 800739c:	dc07      	bgt.n	80073ae <__sflush_r+0xf6>
 800739e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073a6:	81a3      	strh	r3, [r4, #12]
 80073a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80073ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073ae:	4407      	add	r7, r0
 80073b0:	1a36      	subs	r6, r6, r0
 80073b2:	e7e9      	b.n	8007388 <__sflush_r+0xd0>
 80073b4:	dfbffffe 	.word	0xdfbffffe

080073b8 <_fflush_r>:
 80073b8:	b538      	push	{r3, r4, r5, lr}
 80073ba:	690b      	ldr	r3, [r1, #16]
 80073bc:	4605      	mov	r5, r0
 80073be:	460c      	mov	r4, r1
 80073c0:	b913      	cbnz	r3, 80073c8 <_fflush_r+0x10>
 80073c2:	2500      	movs	r5, #0
 80073c4:	4628      	mov	r0, r5
 80073c6:	bd38      	pop	{r3, r4, r5, pc}
 80073c8:	b118      	cbz	r0, 80073d2 <_fflush_r+0x1a>
 80073ca:	6a03      	ldr	r3, [r0, #32]
 80073cc:	b90b      	cbnz	r3, 80073d2 <_fflush_r+0x1a>
 80073ce:	f7fe f94b 	bl	8005668 <__sinit>
 80073d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d0f3      	beq.n	80073c2 <_fflush_r+0xa>
 80073da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80073dc:	07d0      	lsls	r0, r2, #31
 80073de:	d404      	bmi.n	80073ea <_fflush_r+0x32>
 80073e0:	0599      	lsls	r1, r3, #22
 80073e2:	d402      	bmi.n	80073ea <_fflush_r+0x32>
 80073e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80073e6:	f7fe fb4c 	bl	8005a82 <__retarget_lock_acquire_recursive>
 80073ea:	4628      	mov	r0, r5
 80073ec:	4621      	mov	r1, r4
 80073ee:	f7ff ff63 	bl	80072b8 <__sflush_r>
 80073f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80073f4:	07da      	lsls	r2, r3, #31
 80073f6:	4605      	mov	r5, r0
 80073f8:	d4e4      	bmi.n	80073c4 <_fflush_r+0xc>
 80073fa:	89a3      	ldrh	r3, [r4, #12]
 80073fc:	059b      	lsls	r3, r3, #22
 80073fe:	d4e1      	bmi.n	80073c4 <_fflush_r+0xc>
 8007400:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007402:	f7fe fb3f 	bl	8005a84 <__retarget_lock_release_recursive>
 8007406:	e7dd      	b.n	80073c4 <_fflush_r+0xc>

08007408 <__swhatbuf_r>:
 8007408:	b570      	push	{r4, r5, r6, lr}
 800740a:	460c      	mov	r4, r1
 800740c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007410:	2900      	cmp	r1, #0
 8007412:	b096      	sub	sp, #88	@ 0x58
 8007414:	4615      	mov	r5, r2
 8007416:	461e      	mov	r6, r3
 8007418:	da0d      	bge.n	8007436 <__swhatbuf_r+0x2e>
 800741a:	89a3      	ldrh	r3, [r4, #12]
 800741c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007420:	f04f 0100 	mov.w	r1, #0
 8007424:	bf14      	ite	ne
 8007426:	2340      	movne	r3, #64	@ 0x40
 8007428:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800742c:	2000      	movs	r0, #0
 800742e:	6031      	str	r1, [r6, #0]
 8007430:	602b      	str	r3, [r5, #0]
 8007432:	b016      	add	sp, #88	@ 0x58
 8007434:	bd70      	pop	{r4, r5, r6, pc}
 8007436:	466a      	mov	r2, sp
 8007438:	f000 f878 	bl	800752c <_fstat_r>
 800743c:	2800      	cmp	r0, #0
 800743e:	dbec      	blt.n	800741a <__swhatbuf_r+0x12>
 8007440:	9901      	ldr	r1, [sp, #4]
 8007442:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007446:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800744a:	4259      	negs	r1, r3
 800744c:	4159      	adcs	r1, r3
 800744e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007452:	e7eb      	b.n	800742c <__swhatbuf_r+0x24>

08007454 <__smakebuf_r>:
 8007454:	898b      	ldrh	r3, [r1, #12]
 8007456:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007458:	079d      	lsls	r5, r3, #30
 800745a:	4606      	mov	r6, r0
 800745c:	460c      	mov	r4, r1
 800745e:	d507      	bpl.n	8007470 <__smakebuf_r+0x1c>
 8007460:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007464:	6023      	str	r3, [r4, #0]
 8007466:	6123      	str	r3, [r4, #16]
 8007468:	2301      	movs	r3, #1
 800746a:	6163      	str	r3, [r4, #20]
 800746c:	b003      	add	sp, #12
 800746e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007470:	ab01      	add	r3, sp, #4
 8007472:	466a      	mov	r2, sp
 8007474:	f7ff ffc8 	bl	8007408 <__swhatbuf_r>
 8007478:	9f00      	ldr	r7, [sp, #0]
 800747a:	4605      	mov	r5, r0
 800747c:	4639      	mov	r1, r7
 800747e:	4630      	mov	r0, r6
 8007480:	f7ff f9ce 	bl	8006820 <_malloc_r>
 8007484:	b948      	cbnz	r0, 800749a <__smakebuf_r+0x46>
 8007486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800748a:	059a      	lsls	r2, r3, #22
 800748c:	d4ee      	bmi.n	800746c <__smakebuf_r+0x18>
 800748e:	f023 0303 	bic.w	r3, r3, #3
 8007492:	f043 0302 	orr.w	r3, r3, #2
 8007496:	81a3      	strh	r3, [r4, #12]
 8007498:	e7e2      	b.n	8007460 <__smakebuf_r+0xc>
 800749a:	89a3      	ldrh	r3, [r4, #12]
 800749c:	6020      	str	r0, [r4, #0]
 800749e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074a2:	81a3      	strh	r3, [r4, #12]
 80074a4:	9b01      	ldr	r3, [sp, #4]
 80074a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80074aa:	b15b      	cbz	r3, 80074c4 <__smakebuf_r+0x70>
 80074ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074b0:	4630      	mov	r0, r6
 80074b2:	f000 f84d 	bl	8007550 <_isatty_r>
 80074b6:	b128      	cbz	r0, 80074c4 <__smakebuf_r+0x70>
 80074b8:	89a3      	ldrh	r3, [r4, #12]
 80074ba:	f023 0303 	bic.w	r3, r3, #3
 80074be:	f043 0301 	orr.w	r3, r3, #1
 80074c2:	81a3      	strh	r3, [r4, #12]
 80074c4:	89a3      	ldrh	r3, [r4, #12]
 80074c6:	431d      	orrs	r5, r3
 80074c8:	81a5      	strh	r5, [r4, #12]
 80074ca:	e7cf      	b.n	800746c <__smakebuf_r+0x18>

080074cc <_raise_r>:
 80074cc:	291f      	cmp	r1, #31
 80074ce:	b538      	push	{r3, r4, r5, lr}
 80074d0:	4605      	mov	r5, r0
 80074d2:	460c      	mov	r4, r1
 80074d4:	d904      	bls.n	80074e0 <_raise_r+0x14>
 80074d6:	2316      	movs	r3, #22
 80074d8:	6003      	str	r3, [r0, #0]
 80074da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80074de:	bd38      	pop	{r3, r4, r5, pc}
 80074e0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80074e2:	b112      	cbz	r2, 80074ea <_raise_r+0x1e>
 80074e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80074e8:	b94b      	cbnz	r3, 80074fe <_raise_r+0x32>
 80074ea:	4628      	mov	r0, r5
 80074ec:	f000 f852 	bl	8007594 <_getpid_r>
 80074f0:	4622      	mov	r2, r4
 80074f2:	4601      	mov	r1, r0
 80074f4:	4628      	mov	r0, r5
 80074f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074fa:	f000 b839 	b.w	8007570 <_kill_r>
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d00a      	beq.n	8007518 <_raise_r+0x4c>
 8007502:	1c59      	adds	r1, r3, #1
 8007504:	d103      	bne.n	800750e <_raise_r+0x42>
 8007506:	2316      	movs	r3, #22
 8007508:	6003      	str	r3, [r0, #0]
 800750a:	2001      	movs	r0, #1
 800750c:	e7e7      	b.n	80074de <_raise_r+0x12>
 800750e:	2100      	movs	r1, #0
 8007510:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007514:	4620      	mov	r0, r4
 8007516:	4798      	blx	r3
 8007518:	2000      	movs	r0, #0
 800751a:	e7e0      	b.n	80074de <_raise_r+0x12>

0800751c <raise>:
 800751c:	4b02      	ldr	r3, [pc, #8]	@ (8007528 <raise+0xc>)
 800751e:	4601      	mov	r1, r0
 8007520:	6818      	ldr	r0, [r3, #0]
 8007522:	f7ff bfd3 	b.w	80074cc <_raise_r>
 8007526:	bf00      	nop
 8007528:	20000064 	.word	0x20000064

0800752c <_fstat_r>:
 800752c:	b538      	push	{r3, r4, r5, lr}
 800752e:	4d07      	ldr	r5, [pc, #28]	@ (800754c <_fstat_r+0x20>)
 8007530:	2300      	movs	r3, #0
 8007532:	4604      	mov	r4, r0
 8007534:	4608      	mov	r0, r1
 8007536:	4611      	mov	r1, r2
 8007538:	602b      	str	r3, [r5, #0]
 800753a:	f7fa fb4c 	bl	8001bd6 <_fstat>
 800753e:	1c43      	adds	r3, r0, #1
 8007540:	d102      	bne.n	8007548 <_fstat_r+0x1c>
 8007542:	682b      	ldr	r3, [r5, #0]
 8007544:	b103      	cbz	r3, 8007548 <_fstat_r+0x1c>
 8007546:	6023      	str	r3, [r4, #0]
 8007548:	bd38      	pop	{r3, r4, r5, pc}
 800754a:	bf00      	nop
 800754c:	20006930 	.word	0x20006930

08007550 <_isatty_r>:
 8007550:	b538      	push	{r3, r4, r5, lr}
 8007552:	4d06      	ldr	r5, [pc, #24]	@ (800756c <_isatty_r+0x1c>)
 8007554:	2300      	movs	r3, #0
 8007556:	4604      	mov	r4, r0
 8007558:	4608      	mov	r0, r1
 800755a:	602b      	str	r3, [r5, #0]
 800755c:	f7fa fb4a 	bl	8001bf4 <_isatty>
 8007560:	1c43      	adds	r3, r0, #1
 8007562:	d102      	bne.n	800756a <_isatty_r+0x1a>
 8007564:	682b      	ldr	r3, [r5, #0]
 8007566:	b103      	cbz	r3, 800756a <_isatty_r+0x1a>
 8007568:	6023      	str	r3, [r4, #0]
 800756a:	bd38      	pop	{r3, r4, r5, pc}
 800756c:	20006930 	.word	0x20006930

08007570 <_kill_r>:
 8007570:	b538      	push	{r3, r4, r5, lr}
 8007572:	4d07      	ldr	r5, [pc, #28]	@ (8007590 <_kill_r+0x20>)
 8007574:	2300      	movs	r3, #0
 8007576:	4604      	mov	r4, r0
 8007578:	4608      	mov	r0, r1
 800757a:	4611      	mov	r1, r2
 800757c:	602b      	str	r3, [r5, #0]
 800757e:	f7fa facb 	bl	8001b18 <_kill>
 8007582:	1c43      	adds	r3, r0, #1
 8007584:	d102      	bne.n	800758c <_kill_r+0x1c>
 8007586:	682b      	ldr	r3, [r5, #0]
 8007588:	b103      	cbz	r3, 800758c <_kill_r+0x1c>
 800758a:	6023      	str	r3, [r4, #0]
 800758c:	bd38      	pop	{r3, r4, r5, pc}
 800758e:	bf00      	nop
 8007590:	20006930 	.word	0x20006930

08007594 <_getpid_r>:
 8007594:	f7fa bab9 	b.w	8001b0a <_getpid>

08007598 <_sbrk_r>:
 8007598:	b538      	push	{r3, r4, r5, lr}
 800759a:	4d06      	ldr	r5, [pc, #24]	@ (80075b4 <_sbrk_r+0x1c>)
 800759c:	2300      	movs	r3, #0
 800759e:	4604      	mov	r4, r0
 80075a0:	4608      	mov	r0, r1
 80075a2:	602b      	str	r3, [r5, #0]
 80075a4:	f7fa fb3c 	bl	8001c20 <_sbrk>
 80075a8:	1c43      	adds	r3, r0, #1
 80075aa:	d102      	bne.n	80075b2 <_sbrk_r+0x1a>
 80075ac:	682b      	ldr	r3, [r5, #0]
 80075ae:	b103      	cbz	r3, 80075b2 <_sbrk_r+0x1a>
 80075b0:	6023      	str	r3, [r4, #0]
 80075b2:	bd38      	pop	{r3, r4, r5, pc}
 80075b4:	20006930 	.word	0x20006930

080075b8 <memcpy>:
 80075b8:	440a      	add	r2, r1
 80075ba:	4291      	cmp	r1, r2
 80075bc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80075c0:	d100      	bne.n	80075c4 <memcpy+0xc>
 80075c2:	4770      	bx	lr
 80075c4:	b510      	push	{r4, lr}
 80075c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075ce:	4291      	cmp	r1, r2
 80075d0:	d1f9      	bne.n	80075c6 <memcpy+0xe>
 80075d2:	bd10      	pop	{r4, pc}

080075d4 <_calloc_r>:
 80075d4:	b570      	push	{r4, r5, r6, lr}
 80075d6:	fba1 5402 	umull	r5, r4, r1, r2
 80075da:	b93c      	cbnz	r4, 80075ec <_calloc_r+0x18>
 80075dc:	4629      	mov	r1, r5
 80075de:	f7ff f91f 	bl	8006820 <_malloc_r>
 80075e2:	4606      	mov	r6, r0
 80075e4:	b928      	cbnz	r0, 80075f2 <_calloc_r+0x1e>
 80075e6:	2600      	movs	r6, #0
 80075e8:	4630      	mov	r0, r6
 80075ea:	bd70      	pop	{r4, r5, r6, pc}
 80075ec:	220c      	movs	r2, #12
 80075ee:	6002      	str	r2, [r0, #0]
 80075f0:	e7f9      	b.n	80075e6 <_calloc_r+0x12>
 80075f2:	462a      	mov	r2, r5
 80075f4:	4621      	mov	r1, r4
 80075f6:	f7fe f9c7 	bl	8005988 <memset>
 80075fa:	e7f5      	b.n	80075e8 <_calloc_r+0x14>

080075fc <__ascii_mbtowc>:
 80075fc:	b082      	sub	sp, #8
 80075fe:	b901      	cbnz	r1, 8007602 <__ascii_mbtowc+0x6>
 8007600:	a901      	add	r1, sp, #4
 8007602:	b142      	cbz	r2, 8007616 <__ascii_mbtowc+0x1a>
 8007604:	b14b      	cbz	r3, 800761a <__ascii_mbtowc+0x1e>
 8007606:	7813      	ldrb	r3, [r2, #0]
 8007608:	600b      	str	r3, [r1, #0]
 800760a:	7812      	ldrb	r2, [r2, #0]
 800760c:	1e10      	subs	r0, r2, #0
 800760e:	bf18      	it	ne
 8007610:	2001      	movne	r0, #1
 8007612:	b002      	add	sp, #8
 8007614:	4770      	bx	lr
 8007616:	4610      	mov	r0, r2
 8007618:	e7fb      	b.n	8007612 <__ascii_mbtowc+0x16>
 800761a:	f06f 0001 	mvn.w	r0, #1
 800761e:	e7f8      	b.n	8007612 <__ascii_mbtowc+0x16>

08007620 <__ascii_wctomb>:
 8007620:	4603      	mov	r3, r0
 8007622:	4608      	mov	r0, r1
 8007624:	b141      	cbz	r1, 8007638 <__ascii_wctomb+0x18>
 8007626:	2aff      	cmp	r2, #255	@ 0xff
 8007628:	d904      	bls.n	8007634 <__ascii_wctomb+0x14>
 800762a:	228a      	movs	r2, #138	@ 0x8a
 800762c:	601a      	str	r2, [r3, #0]
 800762e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007632:	4770      	bx	lr
 8007634:	700a      	strb	r2, [r1, #0]
 8007636:	2001      	movs	r0, #1
 8007638:	4770      	bx	lr
	...

0800763c <_init>:
 800763c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800763e:	bf00      	nop
 8007640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007642:	bc08      	pop	{r3}
 8007644:	469e      	mov	lr, r3
 8007646:	4770      	bx	lr

08007648 <_fini>:
 8007648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800764a:	bf00      	nop
 800764c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800764e:	bc08      	pop	{r3}
 8007650:	469e      	mov	lr, r3
 8007652:	4770      	bx	lr
